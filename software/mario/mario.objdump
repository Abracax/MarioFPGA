
mario.elf:     file format elf32-littlenios2
mario.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0001323c memsz 0x0001323c flags r-x
    LOAD off    0x0001425c vaddr 0x1001325c paddr 0x10014d6c align 2**12
         filesz 0x00001b10 memsz 0x00001b10 flags rw-
    LOAD off    0x0001687c vaddr 0x1001687c paddr 0x1001687c align 2**12
         filesz 0x00000000 memsz 0x0000018c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000125d8  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a54  10012808  10012808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b10  1001325c  10014d6c  0001425c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000018c  1001687c  1001687c  0001687c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015d6c  2**0
                  CONTENTS
  7 .sdram        00000000  10016a08  10016a08  00015d6c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015d6c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f58  00000000  00000000  00015d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023f05  00000000  00000000  00016ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009392  00000000  00000000  0003abed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bc20  00000000  00000000  00043f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000026c0  00000000  00000000  0004fba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003bc0  00000000  00000000  00052260  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00055e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006d68c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007276e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00072771  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007277d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007277e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007277f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00072783  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00072787  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007278b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00072796  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000727a1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  000727ac  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000022  00000000  00000000  000727b4  2**0
                  CONTENTS, READONLY
 30 .jdi          00005256  00000000  00000000  000727d6  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a1c45  00000000  00000000  00077a2c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10012808 l    d  .rodata	00000000 .rodata
1001325c l    d  .rwdata	00000000 .rwdata
1001687c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10016a08 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../mario_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 helper.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
1001687c l     O .bss	00000002 ctl_reg.3643
1001687e l     O .bss	00000002 no_device.3644
00000000 l    df *ABS*	00000000 mario.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10012fa2 l     O .rodata	00000010 zeroes.4404
1000572c l     F .text	000000bc __sbprintf
10012fb2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1000593c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10007494 l     F .text	00000008 __fp_unlock
100074a8 l     F .text	0000019c __sinit.part.1
10007644 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1001325c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100136a0 l     O .rwdata	00000020 lc_ctype_charset
10013680 l     O .rwdata	00000020 lc_message_charset
100136c0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10012fe4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000ab18 l     F .text	000000fc __sprint_r.part.0
10013108 l     O .rodata	00000010 zeroes.4349
1000c154 l     F .text	000000bc __sbprintf
10013118 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000ffe8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
100100fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10010128 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1001021c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10010304 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100103f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100105cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10014d5c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10010870 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
100109ac l     F .text	00000034 alt_dev_reg
10013ca8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010c88 l     F .text	0000020c altera_avalon_jtag_uart_irq
10010e94 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10011770 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011bd0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011d30 l     F .text	0000003c alt_get_errno
10011d6c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
100168dc g     O .bss	00000004 alt_instruction_exception_handler
1000a15c g     F .text	00000074 _mprec_log10
1000a248 g     F .text	0000008c __any_on
1000c708 g     F .text	00000054 _isatty_r
10012ff0 g     O .rodata	00000028 __mprec_tinytens
10010508 g     F .text	0000007c alt_main
100032c8 g     F .text	000000c0 _puts_r
10016908 g     O .bss	00000100 alt_irq
1000c75c g     F .text	00000060 _lseek_r
10014d6c g       *ABS*	00000000 __flash_rwdata_start
10014d08 g     O .rwdata	00000004 marioX
1000e9c0 g     F .text	00000088 .hidden __eqdf2
10016a08 g       *ABS*	00000000 __alt_heap_start
1000328c g     F .text	0000003c printf
1000c974 g     F .text	0000009c _wcrtomb_r
1000a9d8 g     F .text	0000005c __sseek
100077f4 g     F .text	00000010 __sinit
10016888 g     O .bss	00000004 keycode
1000c81c g     F .text	00000140 __swbuf_r
100082c8 g     F .text	0000007c _setlocale_r
1000764c g     F .text	00000078 __sfmoreglue
100105a8 g     F .text	00000024 __malloc_unlock
10014d1c g     O .rwdata	00000004 mushAlive
10002fa8 g     F .text	00000080 UsbGetRetryCnt
10008f98 g     F .text	0000015c memmove
10016884 g     O .bss	00000004 is_fall
100002bc g     F .text	00000088 IO_init
100077dc g     F .text	00000018 _cleanup
1000921c g     F .text	000000a8 _Balloc
1000ea48 g     F .text	000000dc .hidden __gtdf2
10012158 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000c6ac g     F .text	0000005c _fstat_r
100168c0 g     O .bss	00000004 errno
1000a954 g     F .text	00000008 __seofread
100168c8 g     O .bss	00000004 alt_argv
1001cd08 g       *ABS*	00000000 _gp
10010840 g     F .text	00000030 usleep
10013b28 g     O .rwdata	00000180 alt_fd_list
1001217c g     F .text	00000090 alt_find_dev
10008e50 g     F .text	00000148 memcpy
1000749c g     F .text	0000000c _cleanup_r
1000fe00 g     F .text	000000dc .hidden __floatsidf
10011cb4 g     F .text	0000007c alt_io_redirect
1000eb24 g     F .text	000000f4 .hidden __ltdf2
10012808 g       *ABS*	00000000 __DTOR_END__
10003388 g     F .text	00000014 puts
100123d8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000026c g     F .text	00000050 swap
1000a838 g     F .text	00000074 __fpclassifyd
1000a0b8 g     F .text	000000a4 __ratio
1000c138 g     F .text	0000001c __vfiprintf_internal
1001108c g     F .text	0000021c altera_avalon_jtag_uart_read
1000325c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
100031a0 g     F .text	00000064 .hidden __udivsi3
10010258 g     F .text	000000ac isatty
10001da4 g     F .text	000000a4 canKillMush
10013040 g     O .rodata	000000c8 __mprec_tens
10014d24 g     O .rwdata	00000004 Y_max
10008344 g     F .text	0000000c __locale_charset
100168bc g     O .bss	00000004 __malloc_top_pad
10002634 g     F .text	00000268 UsbGetConfigDesc2
10001268 g     F .text	0000020c move_mario
10014d34 g     O .rwdata	00000004 __mb_cur_max
10008374 g     F .text	0000000c _localeconv_r
10009650 g     F .text	0000003c __i2b
10007c78 g     F .text	000004c8 __sfvwrite_r
1000a8ac g     F .text	00000054 _sbrk_r
1000c7bc g     F .text	00000060 _read_r
10014d54 g     O .rwdata	00000004 alt_max_fd
1000c3a0 g     F .text	000000f0 _fclose_r
10007464 g     F .text	00000030 fflush
100168b8 g     O .bss	00000004 __malloc_max_sbrked_mem
10014d20 g     O .rwdata	00000004 X_max
10014d28 g     O .rwdata	00000004 marioXmax
100015a0 g     F .text	00000048 onGround
1000d744 g     F .text	000008ac .hidden __adddf3
10009e60 g     F .text	0000010c __b2d
1000d158 g     F .text	000005c4 .hidden __umoddi3
1001042c g     F .text	000000dc lseek
10014d2c g     O .rwdata	00000004 _global_impure_ptr
1000a2d4 g     F .text	00000564 _realloc_r
10016a08 g       *ABS*	00000000 __bss_end
10011ae0 g     F .text	000000f0 alt_iic_isr_register
10012050 g     F .text	00000108 alt_tick
100168a4 g     O .bss	00000004 mario_state
1000cb5c g     F .text	000005fc .hidden __udivdi3
1000c608 g     F .text	00000024 _fputwc_r
10013018 g     O .rodata	00000028 __mprec_bigtens
10009434 g     F .text	00000104 __s2b
1000fedc g     F .text	000000a8 .hidden __floatunsidf
10009ba0 g     F .text	00000060 __mcmp
10002084 g     F .text	00000100 UsbSetAddress
10016898 g     O .bss	00000004 mushCount
10007814 g     F .text	00000018 __fp_lock_all
10011a94 g     F .text	0000004c alt_ic_irq_enabled
10011fb4 g     F .text	0000009c alt_alarm_stop
10014d0c g     O .rwdata	00000004 marioY
100168d0 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10013b00 g     O .rwdata	00000028 alt_dev_null
10001cc0 g     F .text	0000004c YCloseObstacle
10011750 g     F .text	00000020 alt_dcache_flush_all
10009538 g     F .text	00000068 __hi0bits
100003d4 g     F .text	00000088 IO_read
1000fd80 g     F .text	00000080 .hidden __fixdfsi
10014d6c g       *ABS*	00000000 __ram_rwdata_end
10014d4c g     O .rwdata	00000008 alt_dev_list
100108ac g     F .text	00000100 write
10001be8 g     F .text	00000028 stopRight
1001325c g       *ABS*	00000000 __ram_rodata_end
10010164 g     F .text	000000b8 fstat
10016890 g     O .bss	00000004 mush_X_vel
1000eb24 g     F .text	000000f4 .hidden __ledf2
10003028 g     F .text	00000080 UsbPrintMem
10009918 g     F .text	00000140 __pow5mult
1000ac2c g     F .text	0000150c ___vfiprintf_internal_r
100168b0 g     O .bss	00000004 __nlocale_changed
10003204 g     F .text	00000058 .hidden __umodsi3
100168a0 g     O .bss	00000004 dieCount
10016a08 g       *ABS*	00000000 end
10010bc8 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10001c10 g     F .text	000000b0 XCloseObstacle
10012808 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000ff84 g     F .text	00000064 .hidden __clzsi2
100112a8 g     F .text	00000224 altera_avalon_jtag_uart_write
10007804 g     F .text	00000004 __sfp_lock_acquire
10008d6c g     F .text	000000e4 memchr
10003434 g     F .text	000022dc ___vfprintf_internal_r
1000299c g     F .text	00000100 UsbClassRequest
10007968 g     F .text	00000310 _free_r
10008350 g     F .text	00000010 __locale_mb_cur_max
10012654 g     F .text	00000180 __call_exitprocs
100015e8 g     F .text	000000a8 checkIsFall
100168ac g     O .bss	00000004 __mlocale_changed
10014d38 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10016880 g     O .bss	00000004 is_jump
100168d4 g     O .bss	00000004 _alt_tick_rate
10009a58 g     F .text	00000148 __lshift
100168d8 g     O .bss	00000004 _alt_nticks
10010608 g     F .text	00000104 read
10010a18 g     F .text	0000004c alt_sys_init
1001253c g     F .text	00000118 __register_exitproc
10001e48 g     F .text	000000a8 jump
10001d54 g     F .text	00000050 YDownCloseObstacle
1000968c g     F .text	0000028c __multiply
10010f34 g     F .text	00000068 altera_avalon_jtag_uart_close
1000d71c g     F .text	00000028 .hidden __mulsi3
1001325c g       *ABS*	00000000 __ram_rwdata_start
10012808 g       *ABS*	00000000 __ram_rodata_start
100168e0 g     O .bss	00000028 __malloc_current_mallinfo
10009f6c g     F .text	0000014c __d2b
10002184 g     F .text	00000148 UsbGetDeviceDesc1
10010a64 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10012314 g     F .text	000000c4 alt_get_fd
100115f8 g     F .text	00000158 alt_busy_sleep
100019c0 g     F .text	0000003c stopJump
1000c270 g     F .text	00000054 _close_r
100124c0 g     F .text	0000007c memcmp
10010b24 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10016a08 g       *ABS*	00000000 __alt_stack_base
10010b74 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100057e8 g     F .text	00000154 __swsetup_r
1000dff0 g     F .text	000009d0 .hidden __divdf3
100076c4 g     F .text	00000118 __sfp
1000a1d0 g     F .text	00000078 __copybits
100136f8 g     O .rwdata	00000408 __malloc_av_
10007810 g     F .text	00000004 __sinit_lock_release
1000ec18 g     F .text	0000086c .hidden __muldf3
1000a900 g     F .text	00000054 __sread
10002f24 g     F .text	00000084 UsbWaitTDListDone
1001220c g     F .text	00000108 alt_find_file
100117ac g     F .text	000000a4 alt_dev_llist_insert
10010584 g     F .text	00000024 __malloc_lock
10010790 g     F .text	000000b0 sbrk
10007408 g     F .text	0000005c _fflush_r
1000c2c4 g     F .text	000000dc _calloc_r
1001687c g       *ABS*	00000000 __bss_start
10016894 g     O .bss	00000004 jumpCount
100090f4 g     F .text	00000128 memset
1000045c g     F .text	00000d80 main
100168cc g     O .bss	00000004 alt_envp
100168b4 g     O .bss	00000004 __malloc_max_total_mem
100011dc g     F .text	0000008c move_mush
10010ac4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000289c g     F .text	00000100 UsbSetConfig
1000c95c g     F .text	00000018 __swbuf
1000aa34 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000c490 g     F .text	00000014 fclose
10005b64 g     F .text	00001688 _dtoa_r
10008560 g     F .text	0000080c _malloc_r
1000cad0 g     F .text	00000030 __ascii_wctomb
10014d58 g     O .rwdata	00000004 alt_errno
10001d0c g     F .text	00000048 YUpperCloseObstacle
100019fc g     F .text	0000003c stopFall
10008140 g     F .text	000000c4 _fwalk
100030a8 g     F .text	00000084 .hidden __divsi3
10007844 g     F .text	00000124 _malloc_trim_r
10002a9c g     F .text	00000148 UsbGetHidDesc
10012808 g       *ABS*	00000000 __CTOR_END__
100018f4 g     F .text	0000004c die
10001ef0 g     F .text	00000044 fall
1000aa3c g     F .text	000000dc strcmp
10012808 g       *ABS*	00000000 __flash_rodata_start
10012808 g       *ABS*	00000000 __DTOR_LIST__
1000e9c0 g     F .text	00000088 .hidden __nedf2
10001f8c g     F .text	00000044 UsbRead
100109e0 g     F .text	00000038 alt_irq_init
1001070c g     F .text	00000084 alt_release_fd
10013128 g     O .rodata	00000100 .hidden __clz_tab
100168a8 g     O .bss	00000004 _PathLocale
10012474 g     F .text	00000014 atexit
1000c210 g     F .text	00000060 _write_r
10008380 g     F .text	00000018 setlocale
10014d30 g     O .rwdata	00000004 _impure_ptr
100168c4 g     O .bss	00000004 alt_argc
100071ec g     F .text	0000021c __sflush_r
100118b0 g     F .text	00000060 _do_dtors
1000836c g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10009dfc g     F .text	00000064 __ulp
1000782c g     F .text	00000018 __fp_unlock_all
10014d44 g     O .rwdata	00000008 alt_fs_list
1001689c g     O .bss	00000004 screen_offset
10014d10 g     O .rwdata	00000004 mushX
10002be4 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10008398 g     F .text	0000000c localeconv
1001688c g     O .bss	00000004 mario_X_vel
10011930 g     F .text	00000050 alt_ic_isr_register
10014d6c g       *ABS*	00000000 _edata
10016a08 g       *ABS*	00000000 _end
10001f34 g     F .text	00000058 UsbWrite
1000c4a4 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10010f9c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10014d18 g     O .rwdata	00000004 marioAlive
10001474 g     F .text	0000012c hitGround
10011a08 g     F .text	0000008c alt_ic_irq_disable
1000a95c g     F .text	0000007c __swrite
10014d3c g     O .rwdata	00000004 __malloc_trim_threshold
100017f4 g     F .text	00000100 headTouchWall
10008360 g     F .text	0000000c __locale_msgcharset
10012488 g     F .text	00000038 exit
10008204 g     F .text	000000c4 _fwalk_reent
10009c00 g     F .text	000001fc __mdiff
10001690 g     F .text	00000164 handle_keycode
10014d14 g     O .rwdata	00000004 mushY
1000312c g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10007808 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10001940 g     F .text	00000080 restart
10000344 g     F .text	00000090 IO_write
100127d4 g     F .text	00000034 _exit
100114cc g     F .text	0000012c alt_alarm_start
100083a4 g     F .text	000001bc __smakebuf_r
1000339c g     F .text	00000098 strlen
10011e58 g     F .text	0000015c open
1000ea48 g     F .text	000000dc .hidden __gedf2
10014d40 g     O .rwdata	00000004 __wctomb
1000ac14 g     F .text	00000018 __sprint_r
10011910 g     F .text	00000020 alt_icache_flush_all
10014d60 g     O .rwdata	00000004 alt_priority_mask
10011980 g     F .text	00000088 alt_ic_irq_enable
10005710 g     F .text	0000001c __vfprintf_internal
1000cb00 g     F .text	0000005c _wctomb_r
1000f484 g     F .text	000008fc .hidden __subdf3
100095a0 g     F .text	000000b0 __lo0bits
100024a4 g     F .text	00000190 UsbGetConfigDesc1
10014d64 g     O .rwdata	00000008 alt_alarm_list
10011850 g     F .text	00000060 _do_ctors
10001fd0 g     F .text	000000b4 UsbSoftReset
1000ca10 g     F .text	000000c0 wcrtomb
10010024 g     F .text	000000d8 close
100022cc g     F .text	000001d8 UsbGetDeviceDesc2
1001036c g     F .text	00000084 alt_load
1000c62c g     F .text	00000080 fputwc
1000780c g     F .text	00000004 __sinit_lock_acquire
10001a38 g     F .text	000001b0 stopLeftRight
100092ec g     F .text	00000148 __multadd
100092c4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	109a4204 	addi	r2,r2,26888
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	109a4204 	addi	r2,r2,26888
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6f517 	ldw	r2,-25644(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6f517 	ldw	r2,-25644(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b34214 	ori	gp,gp,52488
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	109a1f14 	ori	r2,r2,26748

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18da8214 	ori	r3,r3,27144

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	001036c0 	call	1001036c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00105080 	call	10010508 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <swap>:
#include "helper.h"


void swap(int* x, int* y) {
1000026c:	defffc04 	addi	sp,sp,-16
10000270:	df000315 	stw	fp,12(sp)
10000274:	df000304 	addi	fp,sp,12
10000278:	e13ffe15 	stw	r4,-8(fp)
1000027c:	e17fff15 	stw	r5,-4(fp)
	int tmp = *x;
10000280:	e0bffe17 	ldw	r2,-8(fp)
10000284:	10800017 	ldw	r2,0(r2)
10000288:	e0bffd15 	stw	r2,-12(fp)
	*x = *y;
1000028c:	e0bfff17 	ldw	r2,-4(fp)
10000290:	10c00017 	ldw	r3,0(r2)
10000294:	e0bffe17 	ldw	r2,-8(fp)
10000298:	10c00015 	stw	r3,0(r2)
	*y = tmp;
1000029c:	e0bfff17 	ldw	r2,-4(fp)
100002a0:	e0fffd17 	ldw	r3,-12(fp)
100002a4:	10c00015 	stw	r3,0(r2)
100002a8:	0001883a 	nop
100002ac:	e037883a 	mov	sp,fp
100002b0:	df000017 	ldw	fp,0(sp)
100002b4:	dec00104 	addi	sp,sp,4
100002b8:	f800283a 	ret

100002bc <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
100002bc:	deffff04 	addi	sp,sp,-4
100002c0:	df000015 	stw	fp,0(sp)
100002c4:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
100002c8:	00802004 	movi	r2,128
100002cc:	00c00044 	movi	r3,1
100002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002d4:	00802c04 	movi	r2,176
100002d8:	00c00044 	movi	r3,1
100002dc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
100002e0:	00803404 	movi	r2,208
100002e4:	00c00044 	movi	r3,1
100002e8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
100002ec:	00803004 	movi	r2,192
100002f0:	00c00044 	movi	r3,1
100002f4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100002f8:	00803c04 	movi	r2,240
100002fc:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000300:	00803804 	movi	r2,224
10000304:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10000308:	00802c04 	movi	r2,176
1000030c:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
10000310:	00802004 	movi	r2,128
10000314:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10000318:	00802004 	movi	r2,128
1000031c:	00c00044 	movi	r3,1
10000320:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000324:	00802c04 	movi	r2,176
10000328:	00c00044 	movi	r3,1
1000032c:	10c00005 	stb	r3,0(r2)
}
10000330:	0001883a 	nop
10000334:	e037883a 	mov	sp,fp
10000338:	df000017 	ldw	fp,0(sp)
1000033c:	dec00104 	addi	sp,sp,4
10000340:	f800283a 	ret

10000344 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000344:	defffc04 	addi	sp,sp,-16
10000348:	df000315 	stw	fp,12(sp)
1000034c:	df000304 	addi	fp,sp,12
10000350:	2007883a 	mov	r3,r4
10000354:	2805883a 	mov	r2,r5
10000358:	e0fffe05 	stb	r3,-8(fp)
1000035c:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
10000360:	00803c04 	movi	r2,240
10000364:	e0fffe03 	ldbu	r3,-8(fp)
10000368:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
1000036c:	00803804 	movi	r2,224
10000370:	e0ffff0b 	ldhu	r3,-4(fp)
10000374:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000378:	00802c04 	movi	r2,176
1000037c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000380:	00803004 	movi	r2,192
10000384:	10000005 	stb	zero,0(r2)
	int i = 0;
10000388:	e03ffd15 	stw	zero,-12(fp)
	for(;i<1000;i++);
1000038c:	00000306 	br	1000039c <IO_write+0x58>
10000390:	e0bffd17 	ldw	r2,-12(fp)
10000394:	10800044 	addi	r2,r2,1
10000398:	e0bffd15 	stw	r2,-12(fp)
1000039c:	e0bffd17 	ldw	r2,-12(fp)
100003a0:	1080fa10 	cmplti	r2,r2,1000
100003a4:	103ffa1e 	bne	r2,zero,10000390 <__alt_data_end+0xf8000390>
	*otg_hpi_cs = 1;
100003a8:	00802c04 	movi	r2,176
100003ac:	00c00044 	movi	r3,1
100003b0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
100003b4:	00803004 	movi	r2,192
100003b8:	00c00044 	movi	r3,1
100003bc:	10c00005 	stb	r3,0(r2)
}
100003c0:	0001883a 	nop
100003c4:	e037883a 	mov	sp,fp
100003c8:	df000017 	ldw	fp,0(sp)
100003cc:	dec00104 	addi	sp,sp,4
100003d0:	f800283a 	ret

100003d4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100003d4:	defffc04 	addi	sp,sp,-16
100003d8:	df000315 	stw	fp,12(sp)
100003dc:	df000304 	addi	fp,sp,12
100003e0:	2005883a 	mov	r2,r4
100003e4:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
100003e8:	00803c04 	movi	r2,240
100003ec:	e0ffff03 	ldbu	r3,-4(fp)
100003f0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
100003f4:	00802c04 	movi	r2,176
100003f8:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100003fc:	00803404 	movi	r2,208
10000400:	10000005 	stb	zero,0(r2)
	int i = 0;
10000404:	e03ffd15 	stw	zero,-12(fp)
	for(;i<1000;i++);
10000408:	00000306 	br	10000418 <IO_read+0x44>
1000040c:	e0bffd17 	ldw	r2,-12(fp)
10000410:	10800044 	addi	r2,r2,1
10000414:	e0bffd15 	stw	r2,-12(fp)
10000418:	e0bffd17 	ldw	r2,-12(fp)
1000041c:	1080fa10 	cmplti	r2,r2,1000
10000420:	103ffa1e 	bne	r2,zero,1000040c <__alt_data_end+0xf800040c>
	temp = *otg_hpi_data;
10000424:	00803804 	movi	r2,224
10000428:	10800017 	ldw	r2,0(r2)
1000042c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_cs = 1;
10000430:	00802c04 	movi	r2,176
10000434:	00c00044 	movi	r3,1
10000438:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
1000043c:	00803404 	movi	r2,208
10000440:	00c00044 	movi	r3,1
10000444:	10c00005 	stb	r3,0(r2)

	return temp;
10000448:	e0bffe0b 	ldhu	r2,-8(fp)
}
1000044c:	e037883a 	mov	sp,fp
10000450:	df000017 	ldw	fp,0(sp)
10000454:	dec00104 	addi	sp,sp,4
10000458:	f800283a 	ret

1000045c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
1000045c:	defff504 	addi	sp,sp,-44
10000460:	dfc00a15 	stw	ra,40(sp)
10000464:	df000915 	stw	fp,36(sp)
10000468:	df000904 	addi	fp,sp,36
	IO_init();
1000046c:	00002bc0 	call	100002bc <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10000470:	e03ff80d 	sth	zero,-32(fp)
//	volatile int keycode = 0;
//	int keycode_fir = 0;
//	int keycode_sec = 0;
	alt_u8 toggle = 0;
10000474:	e03ff785 	stb	zero,-34(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;
	struct timeval start, stop;
	int i = 0;
10000478:	e03ff915 	stw	zero,-28(fp)

	printf("USB keyboard setup...\n\n");
1000047c:	01040074 	movhi	r4,4097
10000480:	210a0204 	addi	r4,r4,10248
10000484:	00033880 	call	10003388 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10000488:	0001fd00 	call	10001fd0 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
1000048c:	000b883a 	mov	r5,zero
10000490:	01005104 	movi	r4,324
10000494:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000498:	017fffd4 	movui	r5,65535
1000049c:	01302414 	movui	r4,49296
100004a0:	0001f340 	call	10001f34 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
100004a4:	01409604 	movi	r5,600
100004a8:	01006d04 	movi	r4,436
100004ac:	0001f340 	call	10001f34 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
100004b0:	00811004 	movi	r2,1088
100004b4:	e0bff70d 	sth	r2,-36(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
100004b8:	e0bff70b 	ldhu	r2,-36(fp)
100004bc:	100b883a 	mov	r5,r2
100004c0:	01005084 	movi	r4,322
100004c4:	0001f340 	call	10001f34 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
100004c8:	00808404 	movi	r2,528
100004cc:	e0bffa0d 	sth	r2,-24(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
100004d0:	e0bffa0b 	ldhu	r2,-24(fp)
100004d4:	100b883a 	mov	r5,r2
100004d8:	01302314 	movui	r4,49292
100004dc:	0001f340 	call	10001f34 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100004e0:	000b883a 	mov	r5,zero
100004e4:	01007104 	movi	r4,452
100004e8:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100004ec:	000b883a 	mov	r5,zero
100004f0:	01007184 	movi	r4,454
100004f4:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100004f8:	000b883a 	mov	r5,zero
100004fc:	01007204 	movi	r4,456
10000500:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000504:	000b883a 	mov	r5,zero
10000508:	01007284 	movi	r4,458
1000050c:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000510:	000b883a 	mov	r5,zero
10000514:	01007304 	movi	r4,460
10000518:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
1000051c:	000b883a 	mov	r5,zero
10000520:	01007384 	movi	r4,462
10000524:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000528:	000b883a 	mov	r5,zero
1000052c:	01007404 	movi	r4,464
10000530:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000534:	000b883a 	mov	r5,zero
10000538:	01007484 	movi	r4,466
1000053c:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000540:	000b883a 	mov	r5,zero
10000544:	01007504 	movi	r4,468
10000548:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
1000054c:	000b883a 	mov	r5,zero
10000550:	01007584 	movi	r4,470
10000554:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000558:	000b883a 	mov	r5,zero
1000055c:	01007604 	movi	r4,472
10000560:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000564:	000b883a 	mov	r5,zero
10000568:	01007684 	movi	r4,474
1000056c:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000570:	000b883a 	mov	r5,zero
10000574:	01007704 	movi	r4,476
10000578:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
1000057c:	000b883a 	mov	r5,zero
10000580:	01007784 	movi	r4,478
10000584:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10000588:	01401c84 	movi	r5,114
1000058c:	01007084 	movi	r4,450
10000590:	0001f340 	call	10001f34 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000594:	01738054 	movui	r5,52737
10000598:	01000044 	movi	r4,1
1000059c:	00003440 	call	10000344 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
100005a0:	0001883a 	nop
100005a4:	010000c4 	movi	r4,3
100005a8:	00003d40 	call	100003d4 <IO_read>
100005ac:	10bfffcc 	andi	r2,r2,65535
100005b0:	103ffc26 	beq	r2,zero,100005a4 <__alt_data_end+0xf80005a4>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100005b4:	00000806 	br	100005d8 <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100005b8:	01000044 	movi	r4,1
100005bc:	00003d40 	call	100003d4 <IO_read>
100005c0:	10bfffcc 	andi	r2,r2,65535
100005c4:	100b883a 	mov	r5,r2
100005c8:	01040074 	movhi	r4,4097
100005cc:	210a0804 	addi	r4,r4,10272
100005d0:	000328c0 	call	1000328c <printf>
		goto USB_HOT_PLUG;
100005d4:	003fac06 	br	10000488 <__alt_data_end+0xf8000488>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100005d8:	01000044 	movi	r4,1
100005dc:	00003d40 	call	100003d4 <IO_read>
100005e0:	10bfffcc 	andi	r2,r2,65535
100005e4:	1083fb58 	cmpnei	r2,r2,4077
100005e8:	103ff31e 	bne	r2,zero,100005b8 <__alt_data_end+0xf80005b8>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100005ec:	01040074 	movhi	r4,4097
100005f0:	210a1104 	addi	r4,r4,10308
100005f4:	000328c0 	call	1000328c <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100005f8:	01401d04 	movi	r5,116
100005fc:	01007084 	movi	r4,450
10000600:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10000604:	01400f04 	movi	r5,60
10000608:	01007104 	movi	r4,452
1000060c:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000610:	000b883a 	mov	r5,zero
10000614:	01007184 	movi	r4,454
10000618:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
1000061c:	000b883a 	mov	r5,zero
10000620:	01007204 	movi	r4,456
10000624:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000628:	000b883a 	mov	r5,zero
1000062c:	01007284 	movi	r4,458
10000630:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000634:	000b883a 	mov	r5,zero
10000638:	01007304 	movi	r4,460
1000063c:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000640:	000b883a 	mov	r5,zero
10000644:	01007384 	movi	r4,462
10000648:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
1000064c:	000b883a 	mov	r5,zero
10000650:	01007404 	movi	r4,464
10000654:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000658:	000b883a 	mov	r5,zero
1000065c:	01007484 	movi	r4,466
10000660:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000664:	000b883a 	mov	r5,zero
10000668:	01007504 	movi	r4,468
1000066c:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000670:	000b883a 	mov	r5,zero
10000674:	01007584 	movi	r4,470
10000678:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
1000067c:	000b883a 	mov	r5,zero
10000680:	01007604 	movi	r4,472
10000684:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000688:	000b883a 	mov	r5,zero
1000068c:	01007684 	movi	r4,474
10000690:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000694:	000b883a 	mov	r5,zero
10000698:	01007704 	movi	r4,476
1000069c:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100006a0:	000b883a 	mov	r5,zero
100006a4:	01007784 	movi	r4,478
100006a8:	0001f340 	call	10001f34 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100006ac:	01738054 	movui	r5,52737
100006b0:	01000044 	movi	r4,1
100006b4:	00003440 	call	10000344 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100006b8:	0001883a 	nop
100006bc:	01000044 	movi	r4,1
100006c0:	00003d40 	call	100003d4 <IO_read>
100006c4:	10bfffcc 	andi	r2,r2,65535
100006c8:	1083fb58 	cmpnei	r2,r2,4077
100006cc:	10000826 	beq	r2,zero,100006f0 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100006d0:	01000044 	movi	r4,1
100006d4:	00003d40 	call	100003d4 <IO_read>
100006d8:	10bfffcc 	andi	r2,r2,65535
100006dc:	100b883a 	mov	r5,r2
100006e0:	01040074 	movhi	r4,4097
100006e4:	210a0804 	addi	r4,r4,10272
100006e8:	000328c0 	call	1000328c <printf>
		goto USB_HOT_PLUG;
100006ec:	003f6606 	br	10000488 <__alt_data_end+0xf8000488>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100006f0:	00b02284 	movi	r2,-16246
100006f4:	d0a6dd0d 	sth	r2,-25740(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100006f8:	008c0004 	movi	r2,12288
100006fc:	d0a6dd8d 	sth	r2,-25738(gp)
	fs_device = A_DP_STAT;
10000700:	00880004 	movi	r2,8192
10000704:	e0bff80d 	sth	r2,-32(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000708:	d0a6dd0b 	ldhu	r2,-25740(gp)
1000070c:	10bfffcc 	andi	r2,r2,65535
10000710:	1009883a 	mov	r4,r2
10000714:	0001f8c0 	call	10001f8c <UsbRead>
10000718:	e0bff70d 	sth	r2,-36(fp)

	if (!(usb_ctl_val & no_device))
1000071c:	d0a6dd8b 	ldhu	r2,-25738(gp)
10000720:	e0fff70b 	ldhu	r3,-36(fp)
10000724:	1884703a 	and	r2,r3,r2
10000728:	10bfffcc 	andi	r2,r2,65535
1000072c:	1000351e 	bne	r2,zero,10000804 <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000730:	e03ff7c5 	stb	zero,-33(fp)
10000734:	00000f06 	br	10000774 <main+0x318>
		{
			usleep(5*1000);
10000738:	0104e204 	movi	r4,5000
1000073c:	00108400 	call	10010840 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000740:	d0a6dd0b 	ldhu	r2,-25740(gp)
10000744:	10bfffcc 	andi	r2,r2,65535
10000748:	1009883a 	mov	r4,r2
1000074c:	0001f8c0 	call	10001f8c <UsbRead>
10000750:	e0bff70d 	sth	r2,-36(fp)
			if(usb_ctl_val & no_device) break;
10000754:	d0a6dd8b 	ldhu	r2,-25738(gp)
10000758:	e0fff70b 	ldhu	r3,-36(fp)
1000075c:	1884703a 	and	r2,r3,r2
10000760:	10bfffcc 	andi	r2,r2,65535
10000764:	1000071e 	bne	r2,zero,10000784 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000768:	e0bff7c3 	ldbu	r2,-33(fp)
1000076c:	10800044 	addi	r2,r2,1
10000770:	e0bff7c5 	stb	r2,-33(fp)
10000774:	e0bff7c3 	ldbu	r2,-33(fp)
10000778:	10800170 	cmpltui	r2,r2,5
1000077c:	103fee1e 	bne	r2,zero,10000738 <__alt_data_end+0xf8000738>
10000780:	00000106 	br	10000788 <main+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10000784:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10000788:	d0a6dd8b 	ldhu	r2,-25738(gp)
1000078c:	e0fff70b 	ldhu	r3,-36(fp)
10000790:	1884703a 	and	r2,r3,r2
10000794:	10bfffcc 	andi	r2,r2,65535
10000798:	1000261e 	bne	r2,zero,10000834 <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
1000079c:	01040074 	movhi	r4,4097
100007a0:	210a1504 	addi	r4,r4,10324
100007a4:	00033880 	call	10003388 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
100007a8:	01040074 	movhi	r4,4097
100007ac:	210a1f04 	addi	r4,r4,10364
100007b0:	00033880 	call	10003388 <puts>
			while (!(usb_ctl_val & no_device))
100007b4:	00000d06 	br	100007ec <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
100007b8:	d0a6dd0b 	ldhu	r2,-25740(gp)
100007bc:	10bfffcc 	andi	r2,r2,65535
100007c0:	1009883a 	mov	r4,r2
100007c4:	0001f8c0 	call	10001f8c <UsbRead>
100007c8:	e0bff70d 	sth	r2,-36(fp)
				if(usb_ctl_val & no_device)
100007cc:	d0a6dd8b 	ldhu	r2,-25738(gp)
100007d0:	e0fff70b 	ldhu	r3,-36(fp)
100007d4:	1884703a 	and	r2,r3,r2
100007d8:	10bfffcc 	andi	r2,r2,65535
100007dc:	10000126 	beq	r2,zero,100007e4 <main+0x388>
					goto USB_HOT_PLUG;
100007e0:	003f2906 	br	10000488 <__alt_data_end+0xf8000488>

				usleep(2000);
100007e4:	0101f404 	movi	r4,2000
100007e8:	00108400 	call	10010840 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100007ec:	d0a6dd8b 	ldhu	r2,-25738(gp)
100007f0:	e0fff70b 	ldhu	r3,-36(fp)
100007f4:	1884703a 	and	r2,r3,r2
100007f8:	10bfffcc 	andi	r2,r2,65535
100007fc:	103fee26 	beq	r2,zero,100007b8 <__alt_data_end+0xf80007b8>
10000800:	00000c06 	br	10000834 <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10000804:	e0fff70b 	ldhu	r3,-36(fp)
10000808:	e0bff80b 	ldhu	r2,-32(fp)
1000080c:	1884703a 	and	r2,r3,r2
10000810:	10bfffcc 	andi	r2,r2,65535
10000814:	10000426 	beq	r2,zero,10000828 <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
10000818:	01040074 	movhi	r4,4097
1000081c:	210a2b04 	addi	r4,r4,10412
10000820:	00033880 	call	10003388 <puts>
10000824:	00000306 	br	10000834 <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000828:	01040074 	movhi	r4,4097
1000082c:	210a3204 	addi	r4,r4,10440
10000830:	00033880 	call	10003388 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000834:	00020840 	call	10002084 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000838:	00000306 	br	10000848 <main+0x3ec>
	{
		UsbSetAddress();
1000083c:	00020840 	call	10002084 <UsbSetAddress>
		usleep(10*1000);
10000840:	0109c404 	movi	r4,10000
10000844:	00108400 	call	10010840 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000848:	010000c4 	movi	r4,3
1000084c:	00003d40 	call	100003d4 <IO_read>
10000850:	10bfffcc 	andi	r2,r2,65535
10000854:	1080040c 	andi	r2,r2,16
10000858:	103ff826 	beq	r2,zero,1000083c <__alt_data_end+0xf800083c>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000085c:	0002f240 	call	10002f24 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10000860:	01414184 	movi	r5,1286
10000864:	01000084 	movi	r4,2
10000868:	00003440 	call	10000344 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000086c:	0009883a 	mov	r4,zero
10000870:	00003d40 	call	100003d4 <IO_read>
10000874:	10bfffcc 	andi	r2,r2,65535
10000878:	100b883a 	mov	r5,r2
1000087c:	01040074 	movhi	r4,4097
10000880:	210a3904 	addi	r4,r4,10468
10000884:	000328c0 	call	1000328c <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000888:	01414204 	movi	r5,1288
1000088c:	01000084 	movi	r4,2
10000890:	00003440 	call	10000344 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000894:	0009883a 	mov	r4,zero
10000898:	00003d40 	call	100003d4 <IO_read>
1000089c:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
100008a0:	e0bff70b 	ldhu	r2,-36(fp)
100008a4:	100b883a 	mov	r5,r2
100008a8:	01040074 	movhi	r4,4097
100008ac:	210a4404 	addi	r4,r4,10512
100008b0:	000328c0 	call	1000328c <printf>
	while (usb_ctl_val != 0x03) // retries occurred
100008b4:	e0bff70b 	ldhu	r2,-36(fp)
100008b8:	108000e0 	cmpeqi	r2,r2,3
100008bc:	1000031e 	bne	r2,zero,100008cc <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008c0:	0002fa80 	call	10002fa8 <UsbGetRetryCnt>
100008c4:	e0bff70d 	sth	r2,-36(fp)

		goto USB_HOT_PLUG;
100008c8:	003eef06 	br	10000488 <__alt_data_end+0xf8000488>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
100008cc:	01040074 	movhi	r4,4097
100008d0:	210a5004 	addi	r4,r4,10560
100008d4:	00033880 	call	10003388 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100008d8:	00021840 	call	10002184 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008dc:	00000306 	br	100008ec <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
100008e0:	00021840 	call	10002184 <UsbGetDeviceDesc1>
		usleep(10*1000);
100008e4:	0109c404 	movi	r4,10000
100008e8:	00108400 	call	10010840 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008ec:	010000c4 	movi	r4,3
100008f0:	00003d40 	call	100003d4 <IO_read>
100008f4:	10bfffcc 	andi	r2,r2,65535
100008f8:	1080040c 	andi	r2,r2,16
100008fc:	103ff826 	beq	r2,zero,100008e0 <__alt_data_end+0xf80008e0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000900:	0002f240 	call	10002f24 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000904:	01414184 	movi	r5,1286
10000908:	01000084 	movi	r4,2
1000090c:	00003440 	call	10000344 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000910:	0009883a 	mov	r4,zero
10000914:	00003d40 	call	100003d4 <IO_read>
10000918:	10bfffcc 	andi	r2,r2,65535
1000091c:	100b883a 	mov	r5,r2
10000920:	01040074 	movhi	r4,4097
10000924:	210a5f04 	addi	r4,r4,10620
10000928:	000328c0 	call	1000328c <printf>

	IO_write(HPI_ADDR,0x0508);
1000092c:	01414204 	movi	r5,1288
10000930:	01000084 	movi	r4,2
10000934:	00003440 	call	10000344 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000938:	0009883a 	mov	r4,zero
1000093c:	00003d40 	call	100003d4 <IO_read>
10000940:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000944:	e0bff70b 	ldhu	r2,-36(fp)
10000948:	100b883a 	mov	r5,r2
1000094c:	01040074 	movhi	r4,4097
10000950:	210a6a04 	addi	r4,r4,10664
10000954:	000328c0 	call	1000328c <printf>
	while (usb_ctl_val != 0x03)
10000958:	00000206 	br	10000964 <main+0x508>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000095c:	0002fa80 	call	10002fa8 <UsbGetRetryCnt>
10000960:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000964:	e0bff70b 	ldhu	r2,-36(fp)
10000968:	108000d8 	cmpnei	r2,r2,3
1000096c:	103ffb1e 	bne	r2,zero,1000095c <__alt_data_end+0xf800095c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000970:	01040074 	movhi	r4,4097
10000974:	210a7604 	addi	r4,r4,10712
10000978:	00033880 	call	10003388 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
1000097c:	00022cc0 	call	100022cc <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000980:	00000306 	br	10000990 <main+0x534>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000984:	00022cc0 	call	100022cc <UsbGetDeviceDesc2>
		usleep(10*1000);
10000988:	0109c404 	movi	r4,10000
1000098c:	00108400 	call	10010840 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000990:	010000c4 	movi	r4,3
10000994:	00003d40 	call	100003d4 <IO_read>
10000998:	10bfffcc 	andi	r2,r2,65535
1000099c:	1080040c 	andi	r2,r2,16
100009a0:	103ff826 	beq	r2,zero,10000984 <__alt_data_end+0xf8000984>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009a4:	0002f240 	call	10002f24 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009a8:	01414184 	movi	r5,1286
100009ac:	01000084 	movi	r4,2
100009b0:	00003440 	call	10000344 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009b4:	0009883a 	mov	r4,zero
100009b8:	00003d40 	call	100003d4 <IO_read>
100009bc:	10bfffcc 	andi	r2,r2,65535
100009c0:	100b883a 	mov	r5,r2
100009c4:	01040074 	movhi	r4,4097
100009c8:	210a5f04 	addi	r4,r4,10620
100009cc:	000328c0 	call	1000328c <printf>

	IO_write(HPI_ADDR,0x0508);
100009d0:	01414204 	movi	r5,1288
100009d4:	01000084 	movi	r4,2
100009d8:	00003440 	call	10000344 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100009dc:	0009883a 	mov	r4,zero
100009e0:	00003d40 	call	100003d4 <IO_read>
100009e4:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100009e8:	e0bff70b 	ldhu	r2,-36(fp)
100009ec:	100b883a 	mov	r5,r2
100009f0:	01040074 	movhi	r4,4097
100009f4:	210a6a04 	addi	r4,r4,10664
100009f8:	000328c0 	call	1000328c <printf>
	while (usb_ctl_val != 0x03)
100009fc:	00000206 	br	10000a08 <main+0x5ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a00:	0002fa80 	call	10002fa8 <UsbGetRetryCnt>
10000a04:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a08:	e0bff70b 	ldhu	r2,-36(fp)
10000a0c:	108000d8 	cmpnei	r2,r2,3
10000a10:	103ffb1e 	bne	r2,zero,10000a00 <__alt_data_end+0xf8000a00>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000a14:	01040074 	movhi	r4,4097
10000a18:	210a8a04 	addi	r4,r4,10792
10000a1c:	00033880 	call	10003388 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000a20:	00024a40 	call	100024a4 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a24:	00000306 	br	10000a34 <main+0x5d8>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000a28:	00024a40 	call	100024a4 <UsbGetConfigDesc1>
		usleep(10*1000);
10000a2c:	0109c404 	movi	r4,10000
10000a30:	00108400 	call	10010840 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a34:	010000c4 	movi	r4,3
10000a38:	00003d40 	call	100003d4 <IO_read>
10000a3c:	10bfffcc 	andi	r2,r2,65535
10000a40:	1080040c 	andi	r2,r2,16
10000a44:	103ff826 	beq	r2,zero,10000a28 <__alt_data_end+0xf8000a28>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000a48:	0002f240 	call	10002f24 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000a4c:	01414184 	movi	r5,1286
10000a50:	01000084 	movi	r4,2
10000a54:	00003440 	call	10000344 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000a58:	0009883a 	mov	r4,zero
10000a5c:	00003d40 	call	100003d4 <IO_read>
10000a60:	10bfffcc 	andi	r2,r2,65535
10000a64:	100b883a 	mov	r5,r2
10000a68:	01040074 	movhi	r4,4097
10000a6c:	210a9c04 	addi	r4,r4,10864
10000a70:	000328c0 	call	1000328c <printf>

	IO_write(HPI_ADDR,0x0508);
10000a74:	01414204 	movi	r5,1288
10000a78:	01000084 	movi	r4,2
10000a7c:	00003440 	call	10000344 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a80:	0009883a 	mov	r4,zero
10000a84:	00003d40 	call	100003d4 <IO_read>
10000a88:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000a8c:	e0bff70b 	ldhu	r2,-36(fp)
10000a90:	100b883a 	mov	r5,r2
10000a94:	01040074 	movhi	r4,4097
10000a98:	210aa704 	addi	r4,r4,10908
10000a9c:	000328c0 	call	1000328c <printf>
	while (usb_ctl_val != 0x03)
10000aa0:	00000206 	br	10000aac <main+0x650>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000aa4:	0002fa80 	call	10002fa8 <UsbGetRetryCnt>
10000aa8:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000aac:	e0bff70b 	ldhu	r2,-36(fp)
10000ab0:	108000d8 	cmpnei	r2,r2,3
10000ab4:	103ffb1e 	bne	r2,zero,10000aa4 <__alt_data_end+0xf8000aa4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000ab8:	01040074 	movhi	r4,4097
10000abc:	210ab304 	addi	r4,r4,10956
10000ac0:	00033880 	call	10003388 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000ac4:	00026340 	call	10002634 <UsbGetConfigDesc2>

	usleep(100*1000);
10000ac8:	010000b4 	movhi	r4,2
10000acc:	2121a804 	addi	r4,r4,-31072
10000ad0:	00108400 	call	10010840 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ad4:	00000306 	br	10000ae4 <main+0x688>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000ad8:	00026340 	call	10002634 <UsbGetConfigDesc2>
		usleep(10*1000);
10000adc:	0109c404 	movi	r4,10000
10000ae0:	00108400 	call	10010840 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ae4:	010000c4 	movi	r4,3
10000ae8:	00003d40 	call	100003d4 <IO_read>
10000aec:	10bfffcc 	andi	r2,r2,65535
10000af0:	1080040c 	andi	r2,r2,16
10000af4:	103ff826 	beq	r2,zero,10000ad8 <__alt_data_end+0xf8000ad8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000af8:	0002f240 	call	10002f24 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000afc:	01414184 	movi	r5,1286
10000b00:	01000084 	movi	r4,2
10000b04:	00003440 	call	10000344 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b08:	0009883a 	mov	r4,zero
10000b0c:	00003d40 	call	100003d4 <IO_read>
10000b10:	10bfffcc 	andi	r2,r2,65535
10000b14:	100b883a 	mov	r5,r2
10000b18:	01040074 	movhi	r4,4097
10000b1c:	210ac604 	addi	r4,r4,11032
10000b20:	000328c0 	call	1000328c <printf>

	IO_write(HPI_ADDR,0x0508);
10000b24:	01414204 	movi	r5,1288
10000b28:	01000084 	movi	r4,2
10000b2c:	00003440 	call	10000344 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b30:	0009883a 	mov	r4,zero
10000b34:	00003d40 	call	100003d4 <IO_read>
10000b38:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000b3c:	e0bff70b 	ldhu	r2,-36(fp)
10000b40:	100b883a 	mov	r5,r2
10000b44:	01040074 	movhi	r4,4097
10000b48:	210ad104 	addi	r4,r4,11076
10000b4c:	000328c0 	call	1000328c <printf>
	while (usb_ctl_val != 0x03)
10000b50:	00000206 	br	10000b5c <main+0x700>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000b54:	0002fa80 	call	10002fa8 <UsbGetRetryCnt>
10000b58:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000b5c:	e0bff70b 	ldhu	r2,-36(fp)
10000b60:	108000d8 	cmpnei	r2,r2,3
10000b64:	103ffb1e 	bne	r2,zero,10000b54 <__alt_data_end+0xf8000b54>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000b68:	01040074 	movhi	r4,4097
10000b6c:	210add04 	addi	r4,r4,11124
10000b70:	00033880 	call	10003388 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000b74:	01415b04 	movi	r5,1388
10000b78:	01000084 	movi	r4,2
10000b7c:	00003440 	call	10000344 <IO_write>
	code = IO_read(HPI_DATA);
10000b80:	0009883a 	mov	r4,zero
10000b84:	00003d40 	call	100003d4 <IO_read>
10000b88:	e0bffa8d 	sth	r2,-22(fp)
	code = code & 0x003;
10000b8c:	e0bffa8b 	ldhu	r2,-22(fp)
10000b90:	108000cc 	andi	r2,r2,3
10000b94:	e0bffa8d 	sth	r2,-22(fp)
	printf("\ncode = %x\n", code);
10000b98:	e0bffa8b 	ldhu	r2,-22(fp)
10000b9c:	100b883a 	mov	r5,r2
10000ba0:	01040074 	movhi	r4,4097
10000ba4:	210af004 	addi	r4,r4,11200
10000ba8:	000328c0 	call	1000328c <printf>

	if (code == 0x01)
10000bac:	e0bffa8b 	ldhu	r2,-22(fp)
10000bb0:	10800058 	cmpnei	r2,r2,1
10000bb4:	1000041e 	bne	r2,zero,10000bc8 <main+0x76c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000bb8:	01040074 	movhi	r4,4097
10000bbc:	210af304 	addi	r4,r4,11212
10000bc0:	00033880 	call	10003388 <puts>
10000bc4:	00000306 	br	10000bd4 <main+0x778>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000bc8:	01040074 	movhi	r4,4097
10000bcc:	210b0204 	addi	r4,r4,11272
10000bd0:	00033880 	call	10003388 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000bd4:	01415d84 	movi	r5,1398
10000bd8:	01000084 	movi	r4,2
10000bdc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000be0:	0141cfc4 	movi	r5,1855
10000be4:	0009883a 	mov	r4,zero
10000be8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000bec:	01604154 	movui	r5,33029
10000bf0:	0009883a 	mov	r4,zero
10000bf4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000bf8:	014000c4 	movi	r5,3
10000bfc:	0009883a 	mov	r4,zero
10000c00:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000c04:	01400204 	movi	r5,8
10000c08:	0009883a 	mov	r4,zero
10000c0c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000c10:	016b0294 	movui	r5,44042
10000c14:	0009883a 	mov	r4,zero
10000c18:	00003440 	call	10000344 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000c1c:	01415d84 	movi	r5,1398
10000c20:	01006c04 	movi	r4,432
10000c24:	0001f340 	call	10001f34 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000c28:	01415f04 	movi	r5,1404
10000c2c:	01000084 	movi	r4,2
10000c30:	00003440 	call	10000344 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000c34:	0009883a 	mov	r4,zero
10000c38:	00003d40 	call	100003d4 <IO_read>
10000c3c:	e0bffb05 	stb	r2,-20(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000c40:	e0bffb03 	ldbu	r2,-20(fp)
10000c44:	100b883a 	mov	r5,r2
10000c48:	01040074 	movhi	r4,4097
10000c4c:	210b0b04 	addi	r4,r4,11308
10000c50:	000328c0 	call	1000328c <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000c54:	000289c0 	call	1000289c <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c58:	00000306 	br	10000c68 <main+0x80c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000c5c:	000289c0 	call	1000289c <UsbSetConfig>
		usleep(10*1000);
10000c60:	0109c404 	movi	r4,10000
10000c64:	00108400 	call	10010840 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c68:	010000c4 	movi	r4,3
10000c6c:	00003d40 	call	100003d4 <IO_read>
10000c70:	10bfffcc 	andi	r2,r2,65535
10000c74:	1080040c 	andi	r2,r2,16
10000c78:	103ff826 	beq	r2,zero,10000c5c <__alt_data_end+0xf8000c5c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c7c:	0002f240 	call	10002f24 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c80:	01414184 	movi	r5,1286
10000c84:	01000084 	movi	r4,2
10000c88:	00003440 	call	10000344 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c8c:	0009883a 	mov	r4,zero
10000c90:	00003d40 	call	100003d4 <IO_read>
10000c94:	10bfffcc 	andi	r2,r2,65535
10000c98:	100b883a 	mov	r5,r2
10000c9c:	01040074 	movhi	r4,4097
10000ca0:	210b1504 	addi	r4,r4,11348
10000ca4:	000328c0 	call	1000328c <printf>

	IO_write(HPI_ADDR,0x0508);
10000ca8:	01414204 	movi	r5,1288
10000cac:	01000084 	movi	r4,2
10000cb0:	00003440 	call	10000344 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cb4:	0009883a 	mov	r4,zero
10000cb8:	00003d40 	call	100003d4 <IO_read>
10000cbc:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000cc0:	e0bff70b 	ldhu	r2,-36(fp)
10000cc4:	100b883a 	mov	r5,r2
10000cc8:	01040074 	movhi	r4,4097
10000ccc:	210b2004 	addi	r4,r4,11392
10000cd0:	000328c0 	call	1000328c <printf>
	while (usb_ctl_val != 0x03)
10000cd4:	00000206 	br	10000ce0 <main+0x884>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000cd8:	0002fa80 	call	10002fa8 <UsbGetRetryCnt>
10000cdc:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000ce0:	e0bff70b 	ldhu	r2,-36(fp)
10000ce4:	108000d8 	cmpnei	r2,r2,3
10000ce8:	103ffb1e 	bne	r2,zero,10000cd8 <__alt_data_end+0xf8000cd8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000cec:	01040074 	movhi	r4,4097
10000cf0:	210b2c04 	addi	r4,r4,11440
10000cf4:	00033880 	call	10003388 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000cf8:	000299c0 	call	1000299c <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000cfc:	00000306 	br	10000d0c <main+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000d00:	000299c0 	call	1000299c <UsbClassRequest>
		usleep(10*1000);
10000d04:	0109c404 	movi	r4,10000
10000d08:	00108400 	call	10010840 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d0c:	010000c4 	movi	r4,3
10000d10:	00003d40 	call	100003d4 <IO_read>
10000d14:	10bfffcc 	andi	r2,r2,65535
10000d18:	1080040c 	andi	r2,r2,16
10000d1c:	103ff826 	beq	r2,zero,10000d00 <__alt_data_end+0xf8000d00>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d20:	0002f240 	call	10002f24 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d24:	01414184 	movi	r5,1286
10000d28:	01000084 	movi	r4,2
10000d2c:	00003440 	call	10000344 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d30:	0009883a 	mov	r4,zero
10000d34:	00003d40 	call	100003d4 <IO_read>
10000d38:	10bfffcc 	andi	r2,r2,65535
10000d3c:	100b883a 	mov	r5,r2
10000d40:	01040074 	movhi	r4,4097
10000d44:	210b3e04 	addi	r4,r4,11512
10000d48:	000328c0 	call	1000328c <printf>

	IO_write(HPI_ADDR,0x0508);
10000d4c:	01414204 	movi	r5,1288
10000d50:	01000084 	movi	r4,2
10000d54:	00003440 	call	10000344 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d58:	0009883a 	mov	r4,zero
10000d5c:	00003d40 	call	100003d4 <IO_read>
10000d60:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000d64:	e0bff70b 	ldhu	r2,-36(fp)
10000d68:	100b883a 	mov	r5,r2
10000d6c:	01040074 	movhi	r4,4097
10000d70:	210b4904 	addi	r4,r4,11556
10000d74:	000328c0 	call	1000328c <printf>
	while (usb_ctl_val != 0x03)
10000d78:	00000206 	br	10000d84 <main+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d7c:	0002fa80 	call	10002fa8 <UsbGetRetryCnt>
10000d80:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d84:	e0bff70b 	ldhu	r2,-36(fp)
10000d88:	108000d8 	cmpnei	r2,r2,3
10000d8c:	103ffb1e 	bne	r2,zero,10000d7c <__alt_data_end+0xf8000d7c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000d90:	01040074 	movhi	r4,4097
10000d94:	210b5504 	addi	r4,r4,11604
10000d98:	00033880 	call	10003388 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000d9c:	0002a9c0 	call	10002a9c <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000da0:	00000306 	br	10000db0 <main+0x954>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000da4:	0002a9c0 	call	10002a9c <UsbGetHidDesc>
		usleep(10*1000);
10000da8:	0109c404 	movi	r4,10000
10000dac:	00108400 	call	10010840 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000db0:	010000c4 	movi	r4,3
10000db4:	00003d40 	call	100003d4 <IO_read>
10000db8:	10bfffcc 	andi	r2,r2,65535
10000dbc:	1080040c 	andi	r2,r2,16
10000dc0:	103ff826 	beq	r2,zero,10000da4 <__alt_data_end+0xf8000da4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000dc4:	0002f240 	call	10002f24 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000dc8:	01414184 	movi	r5,1286
10000dcc:	01000084 	movi	r4,2
10000dd0:	00003440 	call	10000344 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000dd4:	0009883a 	mov	r4,zero
10000dd8:	00003d40 	call	100003d4 <IO_read>
10000ddc:	10bfffcc 	andi	r2,r2,65535
10000de0:	100b883a 	mov	r5,r2
10000de4:	01040074 	movhi	r4,4097
10000de8:	210b3e04 	addi	r4,r4,11512
10000dec:	000328c0 	call	1000328c <printf>

	IO_write(HPI_ADDR,0x0508);
10000df0:	01414204 	movi	r5,1288
10000df4:	01000084 	movi	r4,2
10000df8:	00003440 	call	10000344 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000dfc:	0009883a 	mov	r4,zero
10000e00:	00003d40 	call	100003d4 <IO_read>
10000e04:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000e08:	e0bff70b 	ldhu	r2,-36(fp)
10000e0c:	100b883a 	mov	r5,r2
10000e10:	01040074 	movhi	r4,4097
10000e14:	210b4904 	addi	r4,r4,11556
10000e18:	000328c0 	call	1000328c <printf>
	while (usb_ctl_val != 0x03)
10000e1c:	00000206 	br	10000e28 <main+0x9cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000e20:	0002fa80 	call	10002fa8 <UsbGetRetryCnt>
10000e24:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000e28:	e0bff70b 	ldhu	r2,-36(fp)
10000e2c:	108000d8 	cmpnei	r2,r2,3
10000e30:	103ffb1e 	bne	r2,zero,10000e20 <__alt_data_end+0xf8000e20>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000e34:	01040074 	movhi	r4,4097
10000e38:	210b6704 	addi	r4,r4,11676
10000e3c:	00033880 	call	10003388 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000e40:	0002be40 	call	10002be4 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e44:	00000306 	br	10000e54 <main+0x9f8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000e48:	0002be40 	call	10002be4 <UsbGetReportDesc>
		usleep(10*1000);
10000e4c:	0109c404 	movi	r4,10000
10000e50:	00108400 	call	10010840 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e54:	010000c4 	movi	r4,3
10000e58:	00003d40 	call	100003d4 <IO_read>
10000e5c:	10bfffcc 	andi	r2,r2,65535
10000e60:	1080040c 	andi	r2,r2,16
10000e64:	103ff826 	beq	r2,zero,10000e48 <__alt_data_end+0xf8000e48>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000e68:	0002f240 	call	10002f24 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000e6c:	01414184 	movi	r5,1286
10000e70:	01000084 	movi	r4,2
10000e74:	00003440 	call	10000344 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000e78:	0009883a 	mov	r4,zero
10000e7c:	00003d40 	call	100003d4 <IO_read>
10000e80:	10bfffcc 	andi	r2,r2,65535
10000e84:	100b883a 	mov	r5,r2
10000e88:	01040074 	movhi	r4,4097
10000e8c:	210b7b04 	addi	r4,r4,11756
10000e90:	000328c0 	call	1000328c <printf>

	IO_write(HPI_ADDR,0x0508);
10000e94:	01414204 	movi	r5,1288
10000e98:	01000084 	movi	r4,2
10000e9c:	00003440 	call	10000344 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000ea0:	0009883a 	mov	r4,zero
10000ea4:	00003d40 	call	100003d4 <IO_read>
10000ea8:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000eac:	e0bff70b 	ldhu	r2,-36(fp)
10000eb0:	100b883a 	mov	r5,r2
10000eb4:	01040074 	movhi	r4,4097
10000eb8:	210b8704 	addi	r4,r4,11804
10000ebc:	000328c0 	call	1000328c <printf>
	while (usb_ctl_val != 0x03)
10000ec0:	00000206 	br	10000ecc <main+0xa70>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000ec4:	0002fa80 	call	10002fa8 <UsbGetRetryCnt>
10000ec8:	e0bff70d 	sth	r2,-36(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000ecc:	e0bff70b 	ldhu	r2,-36(fp)
10000ed0:	108000d8 	cmpnei	r2,r2,3
10000ed4:	103ffb1e 	bne	r2,zero,10000ec4 <__alt_data_end+0xf8000ec4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000ed8:	01040074 	movhi	r4,4097
10000edc:	210b9304 	addi	r4,r4,11852
10000ee0:	00033880 	call	10003388 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000ee4:	0109c404 	movi	r4,10000
10000ee8:	00108400 	call	10010840 <usleep>
	*mario_x_base = marioX;
10000eec:	00802404 	movi	r2,144
10000ef0:	d0e00017 	ldw	r3,-32768(gp)
10000ef4:	10c00015 	stw	r3,0(r2)
	*mario_y_base = marioY;
10000ef8:	00802804 	movi	r2,160
10000efc:	d0e00117 	ldw	r3,-32764(gp)
10000f00:	10c00015 	stw	r3,0(r2)
	*mush_x_base = mushX;
10000f04:	00801c04 	movi	r2,112
10000f08:	d0e00217 	ldw	r3,-32760(gp)
10000f0c:	10c00015 	stw	r3,0(r2)
	*mush_y_base = mushY;
10000f10:	00801804 	movi	r2,96
10000f14:	d0e00317 	ldw	r3,-32756(gp)
10000f18:	10c00015 	stw	r3,0(r2)


	while(1)
	{
//		gettimeofday(&start, NULL);
		toggle++;
10000f1c:	e0bff783 	ldbu	r2,-34(fp)
10000f20:	10800044 	addi	r2,r2,1
10000f24:	e0bff785 	stb	r2,-34(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000f28:	01414004 	movi	r5,1280
10000f2c:	01000084 	movi	r4,2
10000f30:	00003440 	call	10000344 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000f34:	01414704 	movi	r5,1308
10000f38:	0009883a 	mov	r4,zero
10000f3c:	00003440 	call	10000344 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000f40:	e0bffb03 	ldbu	r2,-20(fp)
10000f44:	108003cc 	andi	r2,r2,15
10000f48:	100b883a 	mov	r5,r2
10000f4c:	0009883a 	mov	r4,zero
10000f50:	00003440 	call	10000344 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000f54:	0140a444 	movi	r5,657
10000f58:	0009883a 	mov	r4,zero
10000f5c:	00003440 	call	10000344 <IO_write>
		move_mario();
10000f60:	00012680 	call	10001268 <move_mario>
		move_mush();
10000f64:	00011dc0 	call	100011dc <move_mush>
		if(toggle%2)
10000f68:	e0bff783 	ldbu	r2,-34(fp)
10000f6c:	1080004c 	andi	r2,r2,1
10000f70:	10803fcc 	andi	r2,r2,255
10000f74:	10000426 	beq	r2,zero,10000f88 <main+0xb2c>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000f78:	01400044 	movi	r5,1
10000f7c:	0009883a 	mov	r4,zero
10000f80:	00003440 	call	10000344 <IO_write>
10000f84:	00000306 	br	10000f94 <main+0xb38>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000f88:	01401044 	movi	r5,65
10000f8c:	0009883a 	mov	r4,zero
10000f90:	00003440 	call	10000344 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000f94:	014004c4 	movi	r5,19
10000f98:	0009883a 	mov	r4,zero
10000f9c:	00003440 	call	10000344 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000fa0:	000b883a 	mov	r5,zero
10000fa4:	0009883a 	mov	r4,zero
10000fa8:	00003440 	call	10000344 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000fac:	01414004 	movi	r5,1280
10000fb0:	01006c04 	movi	r4,432
10000fb4:	0001f340 	call	10001f34 <UsbWrite>
		move_mario();
10000fb8:	00012680 	call	10001268 <move_mario>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000fbc:	00002406 	br	10001050 <main+0xbf4>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000fc0:	01414004 	movi	r5,1280
10000fc4:	01000084 	movi	r4,2
10000fc8:	00003440 	call	10000344 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000fcc:	01414704 	movi	r5,1308
10000fd0:	0009883a 	mov	r4,zero
10000fd4:	00003440 	call	10000344 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000fd8:	e0bffb03 	ldbu	r2,-20(fp)
10000fdc:	108003cc 	andi	r2,r2,15
10000fe0:	100b883a 	mov	r5,r2
10000fe4:	0009883a 	mov	r4,zero
10000fe8:	00003440 	call	10000344 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000fec:	0140a444 	movi	r5,657
10000ff0:	0009883a 	mov	r4,zero
10000ff4:	00003440 	call	10000344 <IO_write>
			if(toggle%2)
10000ff8:	e0bff783 	ldbu	r2,-34(fp)
10000ffc:	1080004c 	andi	r2,r2,1
10001000:	10803fcc 	andi	r2,r2,255
10001004:	10000426 	beq	r2,zero,10001018 <main+0xbbc>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10001008:	01400044 	movi	r5,1
1000100c:	0009883a 	mov	r4,zero
10001010:	00003440 	call	10000344 <IO_write>
10001014:	00000306 	br	10001024 <main+0xbc8>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10001018:	01401044 	movi	r5,65
1000101c:	0009883a 	mov	r4,zero
10001020:	00003440 	call	10000344 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10001024:	014004c4 	movi	r5,19
10001028:	0009883a 	mov	r4,zero
1000102c:	00003440 	call	10000344 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10001030:	000b883a 	mov	r5,zero
10001034:	0009883a 	mov	r4,zero
10001038:	00003440 	call	10000344 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000103c:	01414004 	movi	r5,1280
10001040:	01006c04 	movi	r4,432
10001044:	0001f340 	call	10001f34 <UsbWrite>
			usleep(10*1000);
10001048:	0109c404 	movi	r4,10000
1000104c:	00108400 	call	10010840 <usleep>
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		move_mario();
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001050:	010000c4 	movi	r4,3
10001054:	00003d40 	call	100003d4 <IO_read>
10001058:	10bfffcc 	andi	r2,r2,65535
1000105c:	1080040c 	andi	r2,r2,16
10001060:	103fd726 	beq	r2,zero,10000fc0 <__alt_data_end+0xf8000fc0>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10001064:	0002f240 	call	10002f24 <UsbWaitTDListDone>
10001068:	e0bff70d 	sth	r2,-36(fp)
		move_mario();
1000106c:	00012680 	call	10001268 <move_mario>
		move_mush();
10001070:	00011dc0 	call	100011dc <move_mush>

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
//	while (1) {
		keycode = UsbRead(0x051e);
10001074:	01014784 	movi	r4,1310
10001078:	0001f8c0 	call	10001f8c <UsbRead>
1000107c:	10bfffcc 	andi	r2,r2,65535
10001080:	d0a6e015 	stw	r2,-25728(gp)
//		printf("\nfirst two keycode values are %04x\n",keycode);
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
//		keycode_fir = keycode & 0xff;
//		keycode_sec = (keycode & 0xff00)>>8;
		handle_keycode();
10001084:	00016900 	call	10001690 <handle_keycode>
		*keycode_base = keycode;
10001088:	00804004 	movi	r2,256
1000108c:	d0e6e017 	ldw	r3,-25728(gp)
10001090:	10c00005 	stb	r3,0(r2)
//		if (marioY != mario_y)
//			*mario_y_base = marioY;
//		printf("marioY is %x\n",marioY);
//}

		usleep(200);//usleep(5000);
10001094:	01003204 	movi	r4,200
10001098:	00108400 	call	10010840 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
1000109c:	d0a6dd0b 	ldhu	r2,-25740(gp)
100010a0:	10bfffcc 	andi	r2,r2,65535
100010a4:	1009883a 	mov	r4,r2
100010a8:	0001f8c0 	call	10001f8c <UsbRead>
100010ac:	e0bff70d 	sth	r2,-36(fp)

		if(!(usb_ctl_val & no_device))
100010b0:	d0a6dd8b 	ldhu	r2,-25738(gp)
100010b4:	e0fff70b 	ldhu	r3,-36(fp)
100010b8:	1884703a 	and	r2,r3,r2
100010bc:	10bfffcc 	andi	r2,r2,65535
100010c0:	10003f1e 	bne	r2,zero,100011c0 <main+0xd64>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100010c4:	e03ff7c5 	stb	zero,-33(fp)
100010c8:	00000f06 	br	10001108 <main+0xcac>
			{
				usleep(5*1000);
100010cc:	0104e204 	movi	r4,5000
100010d0:	00108400 	call	10010840 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
100010d4:	d0a6dd0b 	ldhu	r2,-25740(gp)
100010d8:	10bfffcc 	andi	r2,r2,65535
100010dc:	1009883a 	mov	r4,r2
100010e0:	0001f8c0 	call	10001f8c <UsbRead>
100010e4:	e0bff70d 	sth	r2,-36(fp)
				if(usb_ctl_val & no_device) break;
100010e8:	d0a6dd8b 	ldhu	r2,-25738(gp)
100010ec:	e0fff70b 	ldhu	r3,-36(fp)
100010f0:	1884703a 	and	r2,r3,r2
100010f4:	10bfffcc 	andi	r2,r2,65535
100010f8:	1000071e 	bne	r2,zero,10001118 <main+0xcbc>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100010fc:	e0bff7c3 	ldbu	r2,-33(fp)
10001100:	10800044 	addi	r2,r2,1
10001104:	e0bff7c5 	stb	r2,-33(fp)
10001108:	e0bff7c3 	ldbu	r2,-33(fp)
1000110c:	108001f0 	cmpltui	r2,r2,7
10001110:	103fee1e 	bne	r2,zero,100010cc <__alt_data_end+0xf80010cc>
10001114:	00000106 	br	1000111c <main+0xcc0>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
10001118:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
1000111c:	d0a6dd8b 	ldhu	r2,-25738(gp)
10001120:	e0fff70b 	ldhu	r3,-36(fp)
10001124:	1884703a 	and	r2,r3,r2
10001128:	10bfffcc 	andi	r2,r2,65535
1000112c:	1000241e 	bne	r2,zero,100011c0 <main+0xd64>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001130:	01040074 	movhi	r4,4097
10001134:	210ba704 	addi	r4,r4,11932
10001138:	00033880 	call	10003388 <puts>
				printf("[INFO]: please insert again!!! \n");
1000113c:	01040074 	movhi	r4,4097
10001140:	210bb204 	addi	r4,r4,11976
10001144:	00033880 	call	10003388 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001148:	00001d06 	br	100011c0 <main+0xd64>
		{

			usb_ctl_val = UsbRead(ctl_reg);
1000114c:	d0a6dd0b 	ldhu	r2,-25740(gp)
10001150:	10bfffcc 	andi	r2,r2,65535
10001154:	1009883a 	mov	r4,r2
10001158:	0001f8c0 	call	10001f8c <UsbRead>
1000115c:	e0bff70d 	sth	r2,-36(fp)
			usleep(5*1000);
10001160:	0104e204 	movi	r4,5000
10001164:	00108400 	call	10010840 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001168:	d0a6dd0b 	ldhu	r2,-25740(gp)
1000116c:	10bfffcc 	andi	r2,r2,65535
10001170:	1009883a 	mov	r4,r2
10001174:	0001f8c0 	call	10001f8c <UsbRead>
10001178:	e0bff70d 	sth	r2,-36(fp)
			usleep(5*1000);
1000117c:	0104e204 	movi	r4,5000
10001180:	00108400 	call	10010840 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001184:	d0a6dd0b 	ldhu	r2,-25740(gp)
10001188:	10bfffcc 	andi	r2,r2,65535
1000118c:	1009883a 	mov	r4,r2
10001190:	0001f8c0 	call	10001f8c <UsbRead>
10001194:	e0bff70d 	sth	r2,-36(fp)
			usleep(5*1000);
10001198:	0104e204 	movi	r4,5000
1000119c:	00108400 	call	10010840 <usleep>

			if(usb_ctl_val & no_device)
100011a0:	d0a6dd8b 	ldhu	r2,-25738(gp)
100011a4:	e0fff70b 	ldhu	r3,-36(fp)
100011a8:	1884703a 	and	r2,r3,r2
100011ac:	10bfffcc 	andi	r2,r2,65535
100011b0:	10000126 	beq	r2,zero,100011b8 <main+0xd5c>
				goto USB_HOT_PLUG;
100011b4:	003cb406 	br	10000488 <__alt_data_end+0xf8000488>

			usleep(200);
100011b8:	01003204 	movi	r4,200
100011bc:	00108400 	call	10010840 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
100011c0:	d0a6dd8b 	ldhu	r2,-25738(gp)
100011c4:	e0fff70b 	ldhu	r3,-36(fp)
100011c8:	1884703a 	and	r2,r3,r2
100011cc:	10bfffcc 	andi	r2,r2,65535
100011d0:	103fde26 	beq	r2,zero,1000114c <__alt_data_end+0xf800114c>
			if(usb_ctl_val & no_device)
				goto USB_HOT_PLUG;

			usleep(200);
		}
		move_mario();
100011d4:	00012680 	call	10001268 <move_mario>
//		i++;
//		gettimeofday(&stop, NULL);
//		printf("time: %lu ", (stop.tv_sec-start.tv_sec)*1000000+stop.tv_usec-start.tv_usec);


	}//end while
100011d8:	003f5006 	br	10000f1c <__alt_data_end+0xf8000f1c>

100011dc <move_mush>:

volatile int marioXmax = (SCREEN_X - MARIO_X_SIZE)/2;


void move_mush()
{
100011dc:	deffff04 	addi	sp,sp,-4
100011e0:	df000015 	stw	fp,0(sp)
100011e4:	d839883a 	mov	fp,sp

	if (mushCount < MUSH_X_MAX) {
100011e8:	d0a6e417 	ldw	r2,-25712(gp)
100011ec:	10801e08 	cmpgei	r2,r2,120
100011f0:	1000071e 	bne	r2,zero,10001210 <move_mush+0x34>
		mushX += 1;
100011f4:	d0a00217 	ldw	r2,-32760(gp)
100011f8:	10800044 	addi	r2,r2,1
100011fc:	d0a00215 	stw	r2,-32760(gp)
		mushCount += 1;
10001200:	d0a6e417 	ldw	r2,-25712(gp)
10001204:	10800044 	addi	r2,r2,1
10001208:	d0a6e415 	stw	r2,-25712(gp)
1000120c:	00000b06 	br	1000123c <move_mush+0x60>
	} else if (mushCount < 2*MUSH_X_MAX){
10001210:	d0a6e417 	ldw	r2,-25712(gp)
10001214:	10803c08 	cmpgei	r2,r2,240
10001218:	1000071e 	bne	r2,zero,10001238 <move_mush+0x5c>
		mushX -= 1;
1000121c:	d0a00217 	ldw	r2,-32760(gp)
10001220:	10bfffc4 	addi	r2,r2,-1
10001224:	d0a00215 	stw	r2,-32760(gp)
		mushCount +=1;
10001228:	d0a6e417 	ldw	r2,-25712(gp)
1000122c:	10800044 	addi	r2,r2,1
10001230:	d0a6e415 	stw	r2,-25712(gp)
10001234:	00000106 	br	1000123c <move_mush+0x60>
	} else {
		mushCount = 0;
10001238:	d026e415 	stw	zero,-25712(gp)
	}
//	printf("mushX: %d", mushX);
	*mush_x_base = mushX;
1000123c:	00801c04 	movi	r2,112
10001240:	d0e00217 	ldw	r3,-32760(gp)
10001244:	10c00015 	stw	r3,0(r2)
	*mush_y_base = mushY;
10001248:	00801804 	movi	r2,96
1000124c:	d0e00317 	ldw	r3,-32756(gp)
10001250:	10c00015 	stw	r3,0(r2)
}
10001254:	0001883a 	nop
10001258:	e037883a 	mov	sp,fp
1000125c:	df000017 	ldw	fp,0(sp)
10001260:	dec00104 	addi	sp,sp,4
10001264:	f800283a 	ret

10001268 <move_mario>:

void move_mario()
{
10001268:	defffd04 	addi	sp,sp,-12
1000126c:	dfc00215 	stw	ra,8(sp)
10001270:	df000115 	stw	fp,4(sp)
10001274:	df000104 	addi	fp,sp,4
	if (marioAlive  == 0) {
10001278:	d0a00417 	ldw	r2,-32752(gp)
1000127c:	1000011e 	bne	r2,zero,10001284 <move_mario+0x1c>
			die();
10001280:	00018f40 	call	100018f4 <die>
	}
	marioX += mario_X_vel;
10001284:	d0e6e117 	ldw	r3,-25724(gp)
10001288:	d0a00017 	ldw	r2,-32768(gp)
1000128c:	1885883a 	add	r2,r3,r2
10001290:	d0a00015 	stw	r2,-32768(gp)
	if (stopLeftRight()) {
10001294:	0001a380 	call	10001a38 <stopLeftRight>
10001298:	10000526 	beq	r2,zero,100012b0 <move_mario+0x48>
		marioX -= mario_X_vel;
1000129c:	d0a6e117 	ldw	r2,-25724(gp)
100012a0:	d0e00017 	ldw	r3,-32768(gp)
100012a4:	1885c83a 	sub	r2,r3,r2
100012a8:	d0a00015 	stw	r2,-32768(gp)
		is_jump = 0;
100012ac:	d026de15 	stw	zero,-25736(gp)
		// jumpCount = 2*JUMP_MAX - jumpCount;
	}
	if (is_jump) {
100012b0:	d0a6de17 	ldw	r2,-25736(gp)
100012b4:	10001126 	beq	r2,zero,100012fc <move_mario+0x94>
		marioY -= JUMP_STEP;
100012b8:	d0a00117 	ldw	r2,-32764(gp)
100012bc:	10bfff04 	addi	r2,r2,-4
100012c0:	d0a00115 	stw	r2,-32764(gp)
		jumpCount += JUMP_STEP;
100012c4:	d0a6e317 	ldw	r2,-25716(gp)
100012c8:	10800104 	addi	r2,r2,4
100012cc:	d0a6e315 	stw	r2,-25716(gp)
		if (jumpCount > JUMP_MAX || headTouchWall()) {
100012d0:	d0a6e317 	ldw	r2,-25716(gp)
100012d4:	10801e48 	cmpgei	r2,r2,121
100012d8:	1000021e 	bne	r2,zero,100012e4 <move_mario+0x7c>
100012dc:	00017f40 	call	100017f4 <headTouchWall>
100012e0:	10000e26 	beq	r2,zero,1000131c <move_mario+0xb4>
			marioY += JUMP_STEP;
100012e4:	d0a00117 	ldw	r2,-32764(gp)
100012e8:	10800104 	addi	r2,r2,4
100012ec:	d0a00115 	stw	r2,-32764(gp)
			jumpCount = 0;
100012f0:	d026e315 	stw	zero,-25716(gp)
			is_jump = 0;
100012f4:	d026de15 	stw	zero,-25736(gp)
100012f8:	00000806 	br	1000131c <move_mario+0xb4>
		}
	} else {
		marioY += JUMP_STEP;
100012fc:	d0a00117 	ldw	r2,-32764(gp)
10001300:	10800104 	addi	r2,r2,4
10001304:	d0a00115 	stw	r2,-32764(gp)
		if (hitGround()) {
10001308:	00014740 	call	10001474 <hitGround>
1000130c:	10000326 	beq	r2,zero,1000131c <move_mario+0xb4>
			marioY -= JUMP_STEP;
10001310:	d0a00117 	ldw	r2,-32764(gp)
10001314:	10bfff04 	addi	r2,r2,-4
10001318:	d0a00115 	stw	r2,-32764(gp)
		}
	}
	int can_kill = canKillMush();
1000131c:	0001da40 	call	10001da4 <canKillMush>
10001320:	e0bfff15 	stw	r2,-4(fp)
	if(can_kill == -1) {
10001324:	e0bfff17 	ldw	r2,-4(fp)
10001328:	10bfffd8 	cmpnei	r2,r2,-1
1000132c:	1000031e 	bne	r2,zero,1000133c <move_mario+0xd4>
		marioAlive = 0;	
10001330:	d0200415 	stw	zero,-32752(gp)
		is_jump = 0;
10001334:	d026de15 	stw	zero,-25736(gp)
10001338:	00000906 	br	10001360 <move_mario+0xf8>
	} else if (can_kill) {
1000133c:	e0bfff17 	ldw	r2,-4(fp)
10001340:	10000726 	beq	r2,zero,10001360 <move_mario+0xf8>
		mushAlive++;
10001344:	d0a00517 	ldw	r2,-32748(gp)
10001348:	10800044 	addi	r2,r2,1
1000134c:	d0a00515 	stw	r2,-32748(gp)
		is_jump = 0;
10001350:	d026de15 	stw	zero,-25736(gp)
		mushX += 1000;
10001354:	d0a00217 	ldw	r2,-32760(gp)
10001358:	1080fa04 	addi	r2,r2,1000
1000135c:	d0a00215 	stw	r2,-32760(gp)
	}
	if (marioX > marioXmax) {
10001360:	d0a00017 	ldw	r2,-32768(gp)
10001364:	d0e00817 	ldw	r3,-32736(gp)
10001368:	1880020e 	bge	r3,r2,10001374 <move_mario+0x10c>
		marioXmax = marioX;
1000136c:	d0a00017 	ldw	r2,-32768(gp)
10001370:	d0a00815 	stw	r2,-32736(gp)
	}
	if (mario_X_vel > 0) {
10001374:	d0a6e117 	ldw	r2,-25724(gp)
10001378:	0080070e 	bge	zero,r2,10001398 <move_mario+0x130>
		if (!onGround()) {
1000137c:	00015a00 	call	100015a0 <onGround>
10001380:	1000031e 	bne	r2,zero,10001390 <move_mario+0x128>
			mario_state = MARIO_RIGHT_JUMP;
10001384:	00800084 	movi	r2,2
10001388:	d0a6e715 	stw	r2,-25700(gp)
1000138c:	00001e06 	br	10001408 <move_mario+0x1a0>
		} else {
			mario_state = MARIO_RIGHT;
10001390:	d026e715 	stw	zero,-25700(gp)
10001394:	00001c06 	br	10001408 <move_mario+0x1a0>
		}
	} else if (mario_X_vel < 0){
10001398:	d0a6e117 	ldw	r2,-25724(gp)
1000139c:	1000080e 	bge	r2,zero,100013c0 <move_mario+0x158>
		if (!onGround()) {
100013a0:	00015a00 	call	100015a0 <onGround>
100013a4:	1000031e 	bne	r2,zero,100013b4 <move_mario+0x14c>
			mario_state = MARIO_LEFT_JUMP;
100013a8:	00800144 	movi	r2,5
100013ac:	d0a6e715 	stw	r2,-25700(gp)
100013b0:	00001506 	br	10001408 <move_mario+0x1a0>
		} else {
			mario_state = MARIO_LEFT;
100013b4:	008000c4 	movi	r2,3
100013b8:	d0a6e715 	stw	r2,-25700(gp)
100013bc:	00001206 	br	10001408 <move_mario+0x1a0>
		}
	} else {
		if (!onGround()) {
100013c0:	00015a00 	call	100015a0 <onGround>
100013c4:	1000091e 	bne	r2,zero,100013ec <move_mario+0x184>
			if (mario_state <= MARIO_RIGHT_JUMP) {
100013c8:	d0a6e717 	ldw	r2,-25700(gp)
100013cc:	108000c8 	cmpgei	r2,r2,3
100013d0:	1000031e 	bne	r2,zero,100013e0 <move_mario+0x178>
				mario_state = MARIO_RIGHT_JUMP;
100013d4:	00800084 	movi	r2,2
100013d8:	d0a6e715 	stw	r2,-25700(gp)
100013dc:	00000a06 	br	10001408 <move_mario+0x1a0>
			} else {
				mario_state = MARIO_LEFT_JUMP;
100013e0:	00800144 	movi	r2,5
100013e4:	d0a6e715 	stw	r2,-25700(gp)
100013e8:	00000706 	br	10001408 <move_mario+0x1a0>
			}
		} else {
			if (mario_state <= MARIO_RIGHT_JUMP) {
100013ec:	d0a6e717 	ldw	r2,-25700(gp)
100013f0:	108000c8 	cmpgei	r2,r2,3
100013f4:	1000021e 	bne	r2,zero,10001400 <move_mario+0x198>
				mario_state = MARIO_RIGHT;
100013f8:	d026e715 	stw	zero,-25700(gp)
100013fc:	00000206 	br	10001408 <move_mario+0x1a0>
			} else {
				mario_state = MARIO_LEFT;
10001400:	008000c4 	movi	r2,3
10001404:	d0a6e715 	stw	r2,-25700(gp)
			}
		}
	}
	
	screen_offset = marioXmax-((SCREEN_X - MARIO_X_SIZE)/2);
10001408:	d0a00817 	ldw	r2,-32736(gp)
1000140c:	10bfb204 	addi	r2,r2,-312
10001410:	d0a6e515 	stw	r2,-25708(gp)
	*mario_x_base = marioX;
10001414:	00802404 	movi	r2,144
10001418:	d0e00017 	ldw	r3,-32768(gp)
1000141c:	10c00015 	stw	r3,0(r2)
	*mario_y_base = marioY;
10001420:	00802804 	movi	r2,160
10001424:	d0e00117 	ldw	r3,-32764(gp)
10001428:	10c00015 	stw	r3,0(r2)
	*mario_alive_base = marioAlive;
1000142c:	00801404 	movi	r2,80
10001430:	d0e00417 	ldw	r3,-32752(gp)
10001434:	10c00005 	stb	r3,0(r2)
	*mush_alive_base = mushAlive;
10001438:	00801004 	movi	r2,64
1000143c:	d0e00517 	ldw	r3,-32748(gp)
10001440:	10c00005 	stb	r3,0(r2)
	*screen_offset_base = screen_offset;
10001444:	00800c04 	movi	r2,48
10001448:	d0e6e517 	ldw	r3,-25708(gp)
1000144c:	10c00015 	stw	r3,0(r2)
	*mario_state_base = mario_state & 0xff;
10001450:	00800804 	movi	r2,32
10001454:	d0e6e717 	ldw	r3,-25700(gp)
10001458:	10c00005 	stb	r3,0(r2)


}
1000145c:	0001883a 	nop
10001460:	e037883a 	mov	sp,fp
10001464:	dfc00117 	ldw	ra,4(sp)
10001468:	df000017 	ldw	fp,0(sp)
1000146c:	dec00204 	addi	sp,sp,8
10001470:	f800283a 	ret

10001474 <hitGround>:

int hitGround() {
10001474:	defffe04 	addi	sp,sp,-8
10001478:	dfc00115 	stw	ra,4(sp)
1000147c:	df000015 	stw	fp,0(sp)
10001480:	d839883a 	mov	fp,sp
	if(XCloseObstacle(PLATFORM1_X_LEFT,PLATFORM1_X_RIGHT) && marioY > PLATFORM1_Y_UP-MARIO_Y_SIZE && marioY < PLATFORM1_Y_UP) {
10001484:	01404b04 	movi	r5,300
10001488:	01003204 	movi	r4,200
1000148c:	0001c100 	call	10001c10 <XCloseObstacle>
10001490:	10000826 	beq	r2,zero,100014b4 <hitGround+0x40>
10001494:	d0a00117 	ldw	r2,-32764(gp)
10001498:	10803950 	cmplti	r2,r2,229
1000149c:	1000051e 	bne	r2,zero,100014b4 <hitGround+0x40>
100014a0:	d0a00117 	ldw	r2,-32764(gp)
100014a4:	10804108 	cmpgei	r2,r2,260
100014a8:	1000021e 	bne	r2,zero,100014b4 <hitGround+0x40>
		return 1;
100014ac:	00800044 	movi	r2,1
100014b0:	00003606 	br	1000158c <hitGround+0x118>
	}
	if(XCloseObstacle(PLATFORM2_X_LEFT,PLATFORM2_X_RIGHT) && marioY > PLATFORM2_Y_UP-MARIO_Y_SIZE && marioY < PLATFORM2_Y_UP) {
100014b4:	01407804 	movi	r5,480
100014b8:	01005284 	movi	r4,330
100014bc:	0001c100 	call	10001c10 <XCloseObstacle>
100014c0:	10000826 	beq	r2,zero,100014e4 <hitGround+0x70>
100014c4:	d0a00117 	ldw	r2,-32764(gp)
100014c8:	10802050 	cmplti	r2,r2,129
100014cc:	1000051e 	bne	r2,zero,100014e4 <hitGround+0x70>
100014d0:	d0a00117 	ldw	r2,-32764(gp)
100014d4:	10802808 	cmpgei	r2,r2,160
100014d8:	1000021e 	bne	r2,zero,100014e4 <hitGround+0x70>
		return 1;
100014dc:	00800044 	movi	r2,1
100014e0:	00002a06 	br	1000158c <hitGround+0x118>
	}
	if(XCloseObstacle(PLATFORM3_X_LEFT,PLATFORM3_X_RIGHT) && marioY > PLATFORM3_Y_UP-MARIO_Y_SIZE && marioY < PLATFORM3_Y_UP) {
100014e4:	0140a504 	movi	r5,660
100014e8:	0100a004 	movi	r4,640
100014ec:	0001c100 	call	10001c10 <XCloseObstacle>
100014f0:	10000826 	beq	r2,zero,10001514 <hitGround+0xa0>
100014f4:	d0a00117 	ldw	r2,-32764(gp)
100014f8:	10803e50 	cmplti	r2,r2,249
100014fc:	1000051e 	bne	r2,zero,10001514 <hitGround+0xa0>
10001500:	d0a00117 	ldw	r2,-32764(gp)
10001504:	10804608 	cmpgei	r2,r2,280
10001508:	1000021e 	bne	r2,zero,10001514 <hitGround+0xa0>
		return 1;
1000150c:	00800044 	movi	r2,1
10001510:	00001e06 	br	1000158c <hitGround+0x118>
	}
	if(XCloseObstacle(PLATFORM4_X_LEFT,PLATFORM4_X_RIGHT) && marioY > PLATFORM4_Y_UP-MARIO_Y_SIZE && marioY < PLATFORM4_Y_UP) {
10001514:	0140af04 	movi	r5,700
10001518:	0100aa04 	movi	r4,680
1000151c:	0001c100 	call	10001c10 <XCloseObstacle>
10001520:	10000826 	beq	r2,zero,10001544 <hitGround+0xd0>
10001524:	d0a00117 	ldw	r2,-32764(gp)
10001528:	10802a50 	cmplti	r2,r2,169
1000152c:	1000051e 	bne	r2,zero,10001544 <hitGround+0xd0>
10001530:	d0a00117 	ldw	r2,-32764(gp)
10001534:	10803208 	cmpgei	r2,r2,200
10001538:	1000021e 	bne	r2,zero,10001544 <hitGround+0xd0>
		return 1;
1000153c:	00800044 	movi	r2,1
10001540:	00001206 	br	1000158c <hitGround+0x118>
	}
	if(XCloseObstacle(PLATFORM5_X_LEFT,PLATFORM5_X_RIGHT) && marioY > PLATFORM5_Y_UP-MARIO_Y_SIZE && marioY < PLATFORM5_Y_UP) {
10001544:	0140e604 	movi	r5,920
10001548:	0100b404 	movi	r4,720
1000154c:	0001c100 	call	10001c10 <XCloseObstacle>
10001550:	10000826 	beq	r2,zero,10001574 <hitGround+0x100>
10001554:	d0a00117 	ldw	r2,-32764(gp)
10001558:	10801650 	cmplti	r2,r2,89
1000155c:	1000051e 	bne	r2,zero,10001574 <hitGround+0x100>
10001560:	d0a00117 	ldw	r2,-32764(gp)
10001564:	10801e08 	cmpgei	r2,r2,120
10001568:	1000021e 	bne	r2,zero,10001574 <hitGround+0x100>
		return 1;
1000156c:	00800044 	movi	r2,1
10001570:	00000606 	br	1000158c <hitGround+0x118>
	}
	if(marioY > Y_max) {
10001574:	d0a00117 	ldw	r2,-32764(gp)
10001578:	00c05204 	movi	r3,328
1000157c:	1880020e 	bge	r3,r2,10001588 <hitGround+0x114>
		return 1;
10001580:	00800044 	movi	r2,1
10001584:	00000106 	br	1000158c <hitGround+0x118>
	}
	
	return 0;
10001588:	0005883a 	mov	r2,zero
}
1000158c:	e037883a 	mov	sp,fp
10001590:	dfc00117 	ldw	ra,4(sp)
10001594:	df000017 	ldw	fp,0(sp)
10001598:	dec00204 	addi	sp,sp,8
1000159c:	f800283a 	ret

100015a0 <onGround>:

int onGround() {
100015a0:	defffd04 	addi	sp,sp,-12
100015a4:	dfc00215 	stw	ra,8(sp)
100015a8:	df000115 	stw	fp,4(sp)
100015ac:	df000104 	addi	fp,sp,4
	int ret;
	marioY += JUMP_STEP;
100015b0:	d0a00117 	ldw	r2,-32764(gp)
100015b4:	10800104 	addi	r2,r2,4
100015b8:	d0a00115 	stw	r2,-32764(gp)
	ret = hitGround();
100015bc:	00014740 	call	10001474 <hitGround>
100015c0:	e0bfff15 	stw	r2,-4(fp)
	marioY -= JUMP_STEP;
100015c4:	d0a00117 	ldw	r2,-32764(gp)
100015c8:	10bfff04 	addi	r2,r2,-4
100015cc:	d0a00115 	stw	r2,-32764(gp)
	return ret;
100015d0:	e0bfff17 	ldw	r2,-4(fp)
}
100015d4:	e037883a 	mov	sp,fp
100015d8:	dfc00117 	ldw	ra,4(sp)
100015dc:	df000017 	ldw	fp,0(sp)
100015e0:	dec00204 	addi	sp,sp,8
100015e4:	f800283a 	ret

100015e8 <checkIsFall>:

int checkIsFall() {
100015e8:	deffff04 	addi	sp,sp,-4
100015ec:	df000015 	stw	fp,0(sp)
100015f0:	d839883a 	mov	fp,sp
	if (!is_jump) return 0;
100015f4:	d0a6de17 	ldw	r2,-25736(gp)
100015f8:	1000021e 	bne	r2,zero,10001604 <checkIsFall+0x1c>
100015fc:	0005883a 	mov	r2,zero
10001600:	00001f06 	br	10001680 <checkIsFall+0x98>
	if( jumpCount < 2*JUMP_MAX || jumpCount == 0) return 0;
10001604:	d0a6e317 	ldw	r2,-25716(gp)
10001608:	10803c10 	cmplti	r2,r2,240
1000160c:	1000021e 	bne	r2,zero,10001618 <checkIsFall+0x30>
10001610:	d0a6e317 	ldw	r2,-25716(gp)
10001614:	1000021e 	bne	r2,zero,10001620 <checkIsFall+0x38>
10001618:	0005883a 	mov	r2,zero
1000161c:	00001806 	br	10001680 <checkIsFall+0x98>
	if (marioY != PLATFORM1_Y_UP && marioY != PLATFORM2_Y_UP && marioY != GND_HEIGHT && marioY != PLATFORM3_Y_UP && marioY != PLATFORM4_Y_UP && marioY != PLATFORM5_Y_UP){
10001620:	d0a00117 	ldw	r2,-32764(gp)
10001624:	10804120 	cmpeqi	r2,r2,260
10001628:	1000141e 	bne	r2,zero,1000167c <checkIsFall+0x94>
1000162c:	d0a00117 	ldw	r2,-32764(gp)
10001630:	10802820 	cmpeqi	r2,r2,160
10001634:	1000111e 	bne	r2,zero,1000167c <checkIsFall+0x94>
10001638:	d0a00117 	ldw	r2,-32764(gp)
1000163c:	10805a20 	cmpeqi	r2,r2,360
10001640:	10000e1e 	bne	r2,zero,1000167c <checkIsFall+0x94>
10001644:	d0a00117 	ldw	r2,-32764(gp)
10001648:	10804620 	cmpeqi	r2,r2,280
1000164c:	10000b1e 	bne	r2,zero,1000167c <checkIsFall+0x94>
10001650:	d0a00117 	ldw	r2,-32764(gp)
10001654:	10803220 	cmpeqi	r2,r2,200
10001658:	1000081e 	bne	r2,zero,1000167c <checkIsFall+0x94>
1000165c:	d0a00117 	ldw	r2,-32764(gp)
10001660:	10801e20 	cmpeqi	r2,r2,120
10001664:	1000051e 	bne	r2,zero,1000167c <checkIsFall+0x94>
		jumpCount = 0;
10001668:	d026e315 	stw	zero,-25716(gp)
		is_fall = 1;
1000166c:	00800044 	movi	r2,1
10001670:	d0a6df15 	stw	r2,-25732(gp)
		return 1;
10001674:	00800044 	movi	r2,1
10001678:	00000106 	br	10001680 <checkIsFall+0x98>
	}
		
	return 0;
1000167c:	0005883a 	mov	r2,zero
}
10001680:	e037883a 	mov	sp,fp
10001684:	df000017 	ldw	fp,0(sp)
10001688:	dec00104 	addi	sp,sp,4
1000168c:	f800283a 	ret

10001690 <handle_keycode>:


void handle_keycode()
{
10001690:	defffc04 	addi	sp,sp,-16
10001694:	dfc00315 	stw	ra,12(sp)
10001698:	df000215 	stw	fp,8(sp)
1000169c:	df000204 	addi	fp,sp,8
	int keycode1 = keycode & 0xff;
100016a0:	d0a6e017 	ldw	r2,-25728(gp)
100016a4:	10803fcc 	andi	r2,r2,255
100016a8:	e0bffe15 	stw	r2,-8(fp)
	int keycode2 = (keycode & 0xff00)>>8;
100016ac:	d0a6e017 	ldw	r2,-25728(gp)
100016b0:	10bfc00c 	andi	r2,r2,65280
100016b4:	1005d23a 	srai	r2,r2,8
100016b8:	e0bfff15 	stw	r2,-4(fp)
	mario_X_vel = 0;
100016bc:	d026e115 	stw	zero,-25724(gp)
	switch(keycode1) {
100016c0:	e0bffe17 	ldw	r2,-8(fp)
100016c4:	10c001e0 	cmpeqi	r3,r2,7
100016c8:	18000a1e 	bne	r3,zero,100016f4 <handle_keycode+0x64>
100016cc:	10c00208 	cmpgei	r3,r2,8
100016d0:	1800031e 	bne	r3,zero,100016e0 <handle_keycode+0x50>
100016d4:	10800120 	cmpeqi	r2,r2,4
100016d8:	10000a1e 	bne	r2,zero,10001704 <handle_keycode+0x74>
		break;
	case ESC:
		restart();
		break;
	default:
		break;
100016dc:	00001a06 	br	10001748 <handle_keycode+0xb8>
void handle_keycode()
{
	int keycode1 = keycode & 0xff;
	int keycode2 = (keycode & 0xff00)>>8;
	mario_X_vel = 0;
	switch(keycode1) {
100016e0:	10c006a0 	cmpeqi	r3,r2,26
100016e4:	18000b1e 	bne	r3,zero,10001714 <handle_keycode+0x84>
100016e8:	10800a60 	cmpeqi	r2,r2,41
100016ec:	1000141e 	bne	r2,zero,10001740 <handle_keycode+0xb0>
		break;
	case ESC:
		restart();
		break;
	default:
		break;
100016f0:	00001506 	br	10001748 <handle_keycode+0xb8>
	int keycode2 = (keycode & 0xff00)>>8;
	mario_X_vel = 0;
	switch(keycode1) {
	case D:

		mario_X_vel++;
100016f4:	d0a6e117 	ldw	r2,-25724(gp)
100016f8:	10800044 	addi	r2,r2,1
100016fc:	d0a6e115 	stw	r2,-25724(gp)

		break;
10001700:	00001106 	br	10001748 <handle_keycode+0xb8>
	case A:

		mario_X_vel--;
10001704:	d0a6e117 	ldw	r2,-25724(gp)
10001708:	10bfffc4 	addi	r2,r2,-1
1000170c:	d0a6e115 	stw	r2,-25724(gp)

		break;
10001710:	00000d06 	br	10001748 <handle_keycode+0xb8>
	case W:
		marioY += JUMP_STEP;
10001714:	d0a00117 	ldw	r2,-32764(gp)
10001718:	10800104 	addi	r2,r2,4
1000171c:	d0a00115 	stw	r2,-32764(gp)
		if (hitGround()) {
10001720:	00014740 	call	10001474 <hitGround>
10001724:	10000226 	beq	r2,zero,10001730 <handle_keycode+0xa0>
			is_jump=1;
10001728:	00800044 	movi	r2,1
1000172c:	d0a6de15 	stw	r2,-25736(gp)
		}
		marioY -= JUMP_STEP;
10001730:	d0a00117 	ldw	r2,-32764(gp)
10001734:	10bfff04 	addi	r2,r2,-4
10001738:	d0a00115 	stw	r2,-32764(gp)
		break;
1000173c:	00000206 	br	10001748 <handle_keycode+0xb8>
	case ESC:
		restart();
10001740:	00019400 	call	10001940 <restart>
		break;
10001744:	0001883a 	nop
	default:
		break;
	}
	if (keycode1 != keycode2) {
10001748:	e0fffe17 	ldw	r3,-8(fp)
1000174c:	e0bfff17 	ldw	r2,-4(fp)
10001750:	18802226 	beq	r3,r2,100017dc <handle_keycode+0x14c>
		switch(keycode2) {
10001754:	e0bfff17 	ldw	r2,-4(fp)
10001758:	10c001e0 	cmpeqi	r3,r2,7
1000175c:	18000a1e 	bne	r3,zero,10001788 <handle_keycode+0xf8>
10001760:	10c00208 	cmpgei	r3,r2,8
10001764:	1800031e 	bne	r3,zero,10001774 <handle_keycode+0xe4>
10001768:	10800120 	cmpeqi	r2,r2,4
1000176c:	10000a1e 	bne	r2,zero,10001798 <handle_keycode+0x108>
				break;
			case ESC:
				restart();
				break;
			default:
				break;
10001770:	00001a06 	br	100017dc <handle_keycode+0x14c>
		break;
	default:
		break;
	}
	if (keycode1 != keycode2) {
		switch(keycode2) {
10001774:	10c006a0 	cmpeqi	r3,r2,26
10001778:	18000b1e 	bne	r3,zero,100017a8 <handle_keycode+0x118>
1000177c:	10800a60 	cmpeqi	r2,r2,41
10001780:	1000141e 	bne	r2,zero,100017d4 <handle_keycode+0x144>
				break;
			case ESC:
				restart();
				break;
			default:
				break;
10001784:	00001506 	br	100017dc <handle_keycode+0x14c>
	}
	if (keycode1 != keycode2) {
		switch(keycode2) {
			case D:

				mario_X_vel++;
10001788:	d0a6e117 	ldw	r2,-25724(gp)
1000178c:	10800044 	addi	r2,r2,1
10001790:	d0a6e115 	stw	r2,-25724(gp)

				break;
10001794:	00001106 	br	100017dc <handle_keycode+0x14c>
			case A:
			
				mario_X_vel--;
10001798:	d0a6e117 	ldw	r2,-25724(gp)
1000179c:	10bfffc4 	addi	r2,r2,-1
100017a0:	d0a6e115 	stw	r2,-25724(gp)

				break;
100017a4:	00000d06 	br	100017dc <handle_keycode+0x14c>
			case W:
				marioY += JUMP_STEP;
100017a8:	d0a00117 	ldw	r2,-32764(gp)
100017ac:	10800104 	addi	r2,r2,4
100017b0:	d0a00115 	stw	r2,-32764(gp)
				if (hitGround()) {
100017b4:	00014740 	call	10001474 <hitGround>
100017b8:	10000226 	beq	r2,zero,100017c4 <handle_keycode+0x134>
					is_jump = 1;
100017bc:	00800044 	movi	r2,1
100017c0:	d0a6de15 	stw	r2,-25736(gp)
				}
				marioY -= JUMP_STEP;
100017c4:	d0a00117 	ldw	r2,-32764(gp)
100017c8:	10bfff04 	addi	r2,r2,-4
100017cc:	d0a00115 	stw	r2,-32764(gp)
				break;
100017d0:	00000206 	br	100017dc <handle_keycode+0x14c>
			case ESC:
				restart();
100017d4:	00019400 	call	10001940 <restart>
				break;
100017d8:	0001883a 	nop
			default:
				break;
		}
	}
//	printf("x: %d", mario_X_vel);
}
100017dc:	0001883a 	nop
100017e0:	e037883a 	mov	sp,fp
100017e4:	dfc00117 	ldw	ra,4(sp)
100017e8:	df000017 	ldw	fp,0(sp)
100017ec:	dec00204 	addi	sp,sp,8
100017f0:	f800283a 	ret

100017f4 <headTouchWall>:

int headTouchWall() {
100017f4:	defffe04 	addi	sp,sp,-8
100017f8:	dfc00115 	stw	ra,4(sp)
100017fc:	df000015 	stw	fp,0(sp)
10001800:	d839883a 	mov	fp,sp
	if (YUpperCloseObstacle(PLATFORM1_Y_UP+PLATFORM1_Y_SIZE, PLATFORM1_Y_UP) 
10001804:	01404104 	movi	r5,260
10001808:	01004604 	movi	r4,280
1000180c:	0001d0c0 	call	10001d0c <YUpperCloseObstacle>
10001810:	10000626 	beq	r2,zero,1000182c <headTouchWall+0x38>
		&& XCloseObstacle(PLATFORM1_X_LEFT, PLATFORM1_X_RIGHT)) return 1;
10001814:	01404b04 	movi	r5,300
10001818:	01003204 	movi	r4,200
1000181c:	0001c100 	call	10001c10 <XCloseObstacle>
10001820:	10000226 	beq	r2,zero,1000182c <headTouchWall+0x38>
10001824:	00800044 	movi	r2,1
10001828:	00002d06 	br	100018e0 <headTouchWall+0xec>
	if (YUpperCloseObstacle(PLATFORM2_Y_UP+PLATFORM2_Y_SIZE, PLATFORM2_Y_UP) 
1000182c:	01402804 	movi	r5,160
10001830:	01002d04 	movi	r4,180
10001834:	0001d0c0 	call	10001d0c <YUpperCloseObstacle>
10001838:	10000626 	beq	r2,zero,10001854 <headTouchWall+0x60>
		&& XCloseObstacle(PLATFORM2_X_LEFT, PLATFORM2_X_RIGHT)) return 1;
1000183c:	01407804 	movi	r5,480
10001840:	01005284 	movi	r4,330
10001844:	0001c100 	call	10001c10 <XCloseObstacle>
10001848:	10000226 	beq	r2,zero,10001854 <headTouchWall+0x60>
1000184c:	00800044 	movi	r2,1
10001850:	00002306 	br	100018e0 <headTouchWall+0xec>
	if (YUpperCloseObstacle(PLATFORM3_Y_UP+PLATFORM3_Y_SIZE, PLATFORM3_Y_UP) 
10001854:	01404604 	movi	r5,280
10001858:	01004b04 	movi	r4,300
1000185c:	0001d0c0 	call	10001d0c <YUpperCloseObstacle>
10001860:	10000626 	beq	r2,zero,1000187c <headTouchWall+0x88>
		&& XCloseObstacle(PLATFORM3_X_LEFT, PLATFORM3_X_RIGHT)) return 1;
10001864:	0140a504 	movi	r5,660
10001868:	0100a004 	movi	r4,640
1000186c:	0001c100 	call	10001c10 <XCloseObstacle>
10001870:	10000226 	beq	r2,zero,1000187c <headTouchWall+0x88>
10001874:	00800044 	movi	r2,1
10001878:	00001906 	br	100018e0 <headTouchWall+0xec>
	if (YUpperCloseObstacle(PLATFORM4_Y_UP+PLATFORM4_Y_SIZE, PLATFORM4_Y_UP) 
1000187c:	01403204 	movi	r5,200
10001880:	01003704 	movi	r4,220
10001884:	0001d0c0 	call	10001d0c <YUpperCloseObstacle>
10001888:	10000626 	beq	r2,zero,100018a4 <headTouchWall+0xb0>
		&& XCloseObstacle(PLATFORM4_X_LEFT, PLATFORM4_X_RIGHT)) return 1;
1000188c:	0140af04 	movi	r5,700
10001890:	0100aa04 	movi	r4,680
10001894:	0001c100 	call	10001c10 <XCloseObstacle>
10001898:	10000226 	beq	r2,zero,100018a4 <headTouchWall+0xb0>
1000189c:	00800044 	movi	r2,1
100018a0:	00000f06 	br	100018e0 <headTouchWall+0xec>
	if (YUpperCloseObstacle(PLATFORM5_Y_UP+PLATFORM5_Y_SIZE, PLATFORM5_Y_UP) 
100018a4:	01401e04 	movi	r5,120
100018a8:	01002304 	movi	r4,140
100018ac:	0001d0c0 	call	10001d0c <YUpperCloseObstacle>
100018b0:	10000626 	beq	r2,zero,100018cc <headTouchWall+0xd8>
		&& XCloseObstacle(PLATFORM5_X_LEFT, PLATFORM5_X_RIGHT)) return 1;
100018b4:	0140e604 	movi	r5,920
100018b8:	0100b404 	movi	r4,720
100018bc:	0001c100 	call	10001c10 <XCloseObstacle>
100018c0:	10000226 	beq	r2,zero,100018cc <headTouchWall+0xd8>
100018c4:	00800044 	movi	r2,1
100018c8:	00000506 	br	100018e0 <headTouchWall+0xec>
	if (marioY < 0) return 1;
100018cc:	d0a00117 	ldw	r2,-32764(gp)
100018d0:	1000020e 	bge	r2,zero,100018dc <headTouchWall+0xe8>
100018d4:	00800044 	movi	r2,1
100018d8:	00000106 	br	100018e0 <headTouchWall+0xec>
	return 0;
100018dc:	0005883a 	mov	r2,zero
}
100018e0:	e037883a 	mov	sp,fp
100018e4:	dfc00117 	ldw	ra,4(sp)
100018e8:	df000017 	ldw	fp,0(sp)
100018ec:	dec00204 	addi	sp,sp,8
100018f0:	f800283a 	ret

100018f4 <die>:

void die() {
100018f4:	defffe04 	addi	sp,sp,-8
100018f8:	dfc00115 	stw	ra,4(sp)
100018fc:	df000015 	stw	fp,0(sp)
10001900:	d839883a 	mov	fp,sp
	dieCount++;
10001904:	d0a6e617 	ldw	r2,-25704(gp)
10001908:	10800044 	addi	r2,r2,1
1000190c:	d0a6e615 	stw	r2,-25704(gp)
	marioAlive = 0;
10001910:	d0200415 	stw	zero,-32752(gp)
	if (dieCount >= 80) {
10001914:	d0a6e617 	ldw	r2,-25704(gp)
10001918:	10801410 	cmplti	r2,r2,80
1000191c:	1000021e 	bne	r2,zero,10001928 <die+0x34>
		dieCount = 0;
10001920:	d026e615 	stw	zero,-25704(gp)
		restart();
10001924:	00019400 	call	10001940 <restart>
	}
}
10001928:	0001883a 	nop
1000192c:	e037883a 	mov	sp,fp
10001930:	dfc00117 	ldw	ra,4(sp)
10001934:	df000017 	ldw	fp,0(sp)
10001938:	dec00204 	addi	sp,sp,8
1000193c:	f800283a 	ret

10001940 <restart>:

void restart() {
10001940:	deffff04 	addi	sp,sp,-4
10001944:	df000015 	stw	fp,0(sp)
10001948:	d839883a 	mov	fp,sp
	marioX = 50;
1000194c:	00800c84 	movi	r2,50
10001950:	d0a00015 	stw	r2,-32768(gp)
	marioY = GND_HEIGHT-MARIO_Y_SIZE;
10001954:	00805204 	movi	r2,328
10001958:	d0a00115 	stw	r2,-32764(gp)
	mushX = 450;
1000195c:	00807084 	movi	r2,450
10001960:	d0a00215 	stw	r2,-32760(gp)
	mushY = 340;
10001964:	00805504 	movi	r2,340
10001968:	d0a00315 	stw	r2,-32756(gp)
	marioAlive = 1;
1000196c:	00800044 	movi	r2,1
10001970:	d0a00415 	stw	r2,-32752(gp)
	mushAlive = 1;
10001974:	00800044 	movi	r2,1
10001978:	d0a00515 	stw	r2,-32748(gp)
	is_jump = 0;
1000197c:	d026de15 	stw	zero,-25736(gp)
	is_fall = 0;
10001980:	d026df15 	stw	zero,-25732(gp)
	keycode = 0;
10001984:	d026e015 	stw	zero,-25728(gp)
	mario_X_vel = 0;
10001988:	d026e115 	stw	zero,-25724(gp)
	mush_X_vel = 0;
1000198c:	d026e215 	stw	zero,-25720(gp)
	jumpCount = 0;
10001990:	d026e315 	stw	zero,-25716(gp)
	mushCount = 0;
10001994:	d026e415 	stw	zero,-25712(gp)
	screen_offset = 0;
10001998:	d026e515 	stw	zero,-25708(gp)

	mario_state = MARIO_RIGHT;
1000199c:	d026e715 	stw	zero,-25700(gp)
	dieCount = 0;
100019a0:	d026e615 	stw	zero,-25704(gp)
	marioXmax = (SCREEN_X - MARIO_X_SIZE)/2;
100019a4:	00804e04 	movi	r2,312
100019a8:	d0a00815 	stw	r2,-32736(gp)
}
100019ac:	0001883a 	nop
100019b0:	e037883a 	mov	sp,fp
100019b4:	df000017 	ldw	fp,0(sp)
100019b8:	dec00104 	addi	sp,sp,4
100019bc:	f800283a 	ret

100019c0 <stopJump>:

int stopJump()
{
100019c0:	deffff04 	addi	sp,sp,-4
100019c4:	df000015 	stw	fp,0(sp)
100019c8:	d839883a 	mov	fp,sp

 	return (is_jump >= JUMP_MAX) || marioY <= 0;
100019cc:	d0a6de17 	ldw	r2,-25736(gp)
100019d0:	10801e08 	cmpgei	r2,r2,120
100019d4:	1000021e 	bne	r2,zero,100019e0 <stopJump+0x20>
100019d8:	d0a00117 	ldw	r2,-32764(gp)
100019dc:	00800216 	blt	zero,r2,100019e8 <stopJump+0x28>
100019e0:	00800044 	movi	r2,1
100019e4:	00000106 	br	100019ec <stopJump+0x2c>
100019e8:	0005883a 	mov	r2,zero
}
100019ec:	e037883a 	mov	sp,fp
100019f0:	df000017 	ldw	fp,0(sp)
100019f4:	dec00104 	addi	sp,sp,4
100019f8:	f800283a 	ret

100019fc <stopFall>:

int stopFall()
{
100019fc:	deffff04 	addi	sp,sp,-4
10001a00:	df000015 	stw	fp,0(sp)
10001a04:	d839883a 	mov	fp,sp

	return (is_jump == 0) || marioY > 479;
10001a08:	d0a6de17 	ldw	r2,-25736(gp)
10001a0c:	10000326 	beq	r2,zero,10001a1c <stopFall+0x20>
10001a10:	d0a00117 	ldw	r2,-32764(gp)
10001a14:	10807810 	cmplti	r2,r2,480
10001a18:	1000021e 	bne	r2,zero,10001a24 <stopFall+0x28>
10001a1c:	00800044 	movi	r2,1
10001a20:	00000106 	br	10001a28 <stopFall+0x2c>
10001a24:	0005883a 	mov	r2,zero
}
10001a28:	e037883a 	mov	sp,fp
10001a2c:	df000017 	ldw	fp,0(sp)
10001a30:	dec00104 	addi	sp,sp,4
10001a34:	f800283a 	ret

10001a38 <stopLeftRight>:

int stopLeftRight()
{
10001a38:	defffe04 	addi	sp,sp,-8
10001a3c:	dfc00115 	stw	ra,4(sp)
10001a40:	df000015 	stw	fp,0(sp)
10001a44:	d839883a 	mov	fp,sp
	if(YCloseObstacle(PLATFORM1_Y_UP+PLATFORM1_Y_SIZE, PLATFORM1_Y_UP) 
10001a48:	01404104 	movi	r5,260
10001a4c:	01004604 	movi	r4,280
10001a50:	0001cc00 	call	10001cc0 <YCloseObstacle>
10001a54:	10000f26 	beq	r2,zero,10001a94 <stopLeftRight+0x5c>
		&& (marioX%1000 == PLATFORM1_X_RIGHT || (marioX + MARIO_X_SIZE)%1000 == PLATFORM1_X_LEFT)) return 1;
10001a58:	d0a00017 	ldw	r2,-32768(gp)
10001a5c:	0140fa04 	movi	r5,1000
10001a60:	1009883a 	mov	r4,r2
10001a64:	000312c0 	call	1000312c <__modsi3>
10001a68:	10804b20 	cmpeqi	r2,r2,300
10001a6c:	1000071e 	bne	r2,zero,10001a8c <stopLeftRight+0x54>
10001a70:	d0a00017 	ldw	r2,-32768(gp)
10001a74:	10800404 	addi	r2,r2,16
10001a78:	0140fa04 	movi	r5,1000
10001a7c:	1009883a 	mov	r4,r2
10001a80:	000312c0 	call	1000312c <__modsi3>
10001a84:	10803218 	cmpnei	r2,r2,200
10001a88:	1000021e 	bne	r2,zero,10001a94 <stopLeftRight+0x5c>
10001a8c:	00800044 	movi	r2,1
10001a90:	00005006 	br	10001bd4 <stopLeftRight+0x19c>
	if(YCloseObstacle(PLATFORM2_Y_UP+PLATFORM2_Y_SIZE, PLATFORM2_Y_UP) 
10001a94:	01402804 	movi	r5,160
10001a98:	01002d04 	movi	r4,180
10001a9c:	0001cc00 	call	10001cc0 <YCloseObstacle>
10001aa0:	10000f26 	beq	r2,zero,10001ae0 <stopLeftRight+0xa8>
		&& (marioX%1000 == PLATFORM2_X_RIGHT || (marioX + MARIO_X_SIZE)%1000 == PLATFORM2_X_LEFT)) return 1;
10001aa4:	d0a00017 	ldw	r2,-32768(gp)
10001aa8:	0140fa04 	movi	r5,1000
10001aac:	1009883a 	mov	r4,r2
10001ab0:	000312c0 	call	1000312c <__modsi3>
10001ab4:	10807820 	cmpeqi	r2,r2,480
10001ab8:	1000071e 	bne	r2,zero,10001ad8 <stopLeftRight+0xa0>
10001abc:	d0a00017 	ldw	r2,-32768(gp)
10001ac0:	10800404 	addi	r2,r2,16
10001ac4:	0140fa04 	movi	r5,1000
10001ac8:	1009883a 	mov	r4,r2
10001acc:	000312c0 	call	1000312c <__modsi3>
10001ad0:	10805298 	cmpnei	r2,r2,330
10001ad4:	1000021e 	bne	r2,zero,10001ae0 <stopLeftRight+0xa8>
10001ad8:	00800044 	movi	r2,1
10001adc:	00003d06 	br	10001bd4 <stopLeftRight+0x19c>
	if(YCloseObstacle(PLATFORM3_Y_UP+PLATFORM3_Y_SIZE, PLATFORM3_Y_UP) 
10001ae0:	01404604 	movi	r5,280
10001ae4:	01004b04 	movi	r4,300
10001ae8:	0001cc00 	call	10001cc0 <YCloseObstacle>
10001aec:	10000f26 	beq	r2,zero,10001b2c <stopLeftRight+0xf4>
		&& (marioX%1000 == PLATFORM3_X_RIGHT || (marioX + MARIO_X_SIZE)%1000 == PLATFORM3_X_LEFT)) return 1;
10001af0:	d0a00017 	ldw	r2,-32768(gp)
10001af4:	0140fa04 	movi	r5,1000
10001af8:	1009883a 	mov	r4,r2
10001afc:	000312c0 	call	1000312c <__modsi3>
10001b00:	1080a520 	cmpeqi	r2,r2,660
10001b04:	1000071e 	bne	r2,zero,10001b24 <stopLeftRight+0xec>
10001b08:	d0a00017 	ldw	r2,-32768(gp)
10001b0c:	10800404 	addi	r2,r2,16
10001b10:	0140fa04 	movi	r5,1000
10001b14:	1009883a 	mov	r4,r2
10001b18:	000312c0 	call	1000312c <__modsi3>
10001b1c:	1080a018 	cmpnei	r2,r2,640
10001b20:	1000021e 	bne	r2,zero,10001b2c <stopLeftRight+0xf4>
10001b24:	00800044 	movi	r2,1
10001b28:	00002a06 	br	10001bd4 <stopLeftRight+0x19c>
	if(YCloseObstacle(PLATFORM4_Y_UP+PLATFORM4_Y_SIZE, PLATFORM4_Y_UP) 
10001b2c:	01403204 	movi	r5,200
10001b30:	01003704 	movi	r4,220
10001b34:	0001cc00 	call	10001cc0 <YCloseObstacle>
10001b38:	10000f26 	beq	r2,zero,10001b78 <stopLeftRight+0x140>
		&& (marioX%1000 == PLATFORM4_X_RIGHT || (marioX + MARIO_X_SIZE)%1000 == PLATFORM4_X_LEFT)) return 1;
10001b3c:	d0a00017 	ldw	r2,-32768(gp)
10001b40:	0140fa04 	movi	r5,1000
10001b44:	1009883a 	mov	r4,r2
10001b48:	000312c0 	call	1000312c <__modsi3>
10001b4c:	1080af20 	cmpeqi	r2,r2,700
10001b50:	1000071e 	bne	r2,zero,10001b70 <stopLeftRight+0x138>
10001b54:	d0a00017 	ldw	r2,-32768(gp)
10001b58:	10800404 	addi	r2,r2,16
10001b5c:	0140fa04 	movi	r5,1000
10001b60:	1009883a 	mov	r4,r2
10001b64:	000312c0 	call	1000312c <__modsi3>
10001b68:	1080aa18 	cmpnei	r2,r2,680
10001b6c:	1000021e 	bne	r2,zero,10001b78 <stopLeftRight+0x140>
10001b70:	00800044 	movi	r2,1
10001b74:	00001706 	br	10001bd4 <stopLeftRight+0x19c>
	if(YCloseObstacle(PLATFORM5_Y_UP+PLATFORM5_Y_SIZE, PLATFORM5_Y_UP) 
10001b78:	01401e04 	movi	r5,120
10001b7c:	01002304 	movi	r4,140
10001b80:	0001cc00 	call	10001cc0 <YCloseObstacle>
10001b84:	10000f26 	beq	r2,zero,10001bc4 <stopLeftRight+0x18c>
		&& (marioX%1000 == PLATFORM5_X_RIGHT || (marioX + MARIO_X_SIZE)%1000 == PLATFORM5_X_LEFT)) return 1;
10001b88:	d0a00017 	ldw	r2,-32768(gp)
10001b8c:	0140fa04 	movi	r5,1000
10001b90:	1009883a 	mov	r4,r2
10001b94:	000312c0 	call	1000312c <__modsi3>
10001b98:	1080e620 	cmpeqi	r2,r2,920
10001b9c:	1000071e 	bne	r2,zero,10001bbc <stopLeftRight+0x184>
10001ba0:	d0a00017 	ldw	r2,-32768(gp)
10001ba4:	10800404 	addi	r2,r2,16
10001ba8:	0140fa04 	movi	r5,1000
10001bac:	1009883a 	mov	r4,r2
10001bb0:	000312c0 	call	1000312c <__modsi3>
10001bb4:	1080b418 	cmpnei	r2,r2,720
10001bb8:	1000021e 	bne	r2,zero,10001bc4 <stopLeftRight+0x18c>
10001bbc:	00800044 	movi	r2,1
10001bc0:	00000406 	br	10001bd4 <stopLeftRight+0x19c>
	return (marioX < screen_offset); //|| (marioX >= SCREEN_X);
10001bc4:	d0e00017 	ldw	r3,-32768(gp)
10001bc8:	d0a6e517 	ldw	r2,-25708(gp)
10001bcc:	1884803a 	cmplt	r2,r3,r2
10001bd0:	10803fcc 	andi	r2,r2,255
}
10001bd4:	e037883a 	mov	sp,fp
10001bd8:	dfc00117 	ldw	ra,4(sp)
10001bdc:	df000017 	ldw	fp,0(sp)
10001be0:	dec00204 	addi	sp,sp,8
10001be4:	f800283a 	ret

10001be8 <stopRight>:

int stopRight()
{
10001be8:	deffff04 	addi	sp,sp,-4
10001bec:	df000015 	stw	fp,0(sp)
10001bf0:	d839883a 	mov	fp,sp



	return (marioX >= 639);
10001bf4:	d0a00017 	ldw	r2,-32768(gp)
10001bf8:	10809fc8 	cmpgei	r2,r2,639
10001bfc:	10803fcc 	andi	r2,r2,255

}
10001c00:	e037883a 	mov	sp,fp
10001c04:	df000017 	ldw	fp,0(sp)
10001c08:	dec00104 	addi	sp,sp,4
10001c0c:	f800283a 	ret

10001c10 <XCloseObstacle>:


int XCloseObstacle(int obs_X_left, int obs_X_right){
10001c10:	defffc04 	addi	sp,sp,-16
10001c14:	dfc00315 	stw	ra,12(sp)
10001c18:	df000215 	stw	fp,8(sp)
10001c1c:	df000204 	addi	fp,sp,8
10001c20:	e13ffe15 	stw	r4,-8(fp)
10001c24:	e17fff15 	stw	r5,-4(fp)
	if (mushX == obs_X_left) {
10001c28:	d0e00217 	ldw	r3,-32760(gp)
10001c2c:	e0bffe17 	ldw	r2,-8(fp)
10001c30:	18800b1e 	bne	r3,r2,10001c60 <XCloseObstacle+0x50>
		return ((marioX + MARIO_X_SIZE) >= obs_X_left && marioX  < obs_X_right);
10001c34:	d0a00017 	ldw	r2,-32768(gp)
10001c38:	10c00404 	addi	r3,r2,16
10001c3c:	e0bffe17 	ldw	r2,-8(fp)
10001c40:	18800516 	blt	r3,r2,10001c58 <XCloseObstacle+0x48>
10001c44:	d0e00017 	ldw	r3,-32768(gp)
10001c48:	e0bfff17 	ldw	r2,-4(fp)
10001c4c:	1880020e 	bge	r3,r2,10001c58 <XCloseObstacle+0x48>
10001c50:	00800044 	movi	r2,1
10001c54:	00001506 	br	10001cac <XCloseObstacle+0x9c>
10001c58:	0005883a 	mov	r2,zero
10001c5c:	00001306 	br	10001cac <XCloseObstacle+0x9c>
	} else {
		return ((marioX + MARIO_X_SIZE)%1000 >= obs_X_left && (marioX%1000)  < obs_X_right);
10001c60:	d0a00017 	ldw	r2,-32768(gp)
10001c64:	10800404 	addi	r2,r2,16
10001c68:	0140fa04 	movi	r5,1000
10001c6c:	1009883a 	mov	r4,r2
10001c70:	000312c0 	call	1000312c <__modsi3>
10001c74:	1007883a 	mov	r3,r2
10001c78:	e0bffe17 	ldw	r2,-8(fp)
10001c7c:	18800916 	blt	r3,r2,10001ca4 <XCloseObstacle+0x94>
10001c80:	d0a00017 	ldw	r2,-32768(gp)
10001c84:	0140fa04 	movi	r5,1000
10001c88:	1009883a 	mov	r4,r2
10001c8c:	000312c0 	call	1000312c <__modsi3>
10001c90:	1007883a 	mov	r3,r2
10001c94:	e0bfff17 	ldw	r2,-4(fp)
10001c98:	1880020e 	bge	r3,r2,10001ca4 <XCloseObstacle+0x94>
10001c9c:	00800044 	movi	r2,1
10001ca0:	00000106 	br	10001ca8 <XCloseObstacle+0x98>
10001ca4:	0005883a 	mov	r2,zero
10001ca8:	0001883a 	nop
	}
}
10001cac:	e037883a 	mov	sp,fp
10001cb0:	dfc00117 	ldw	ra,4(sp)
10001cb4:	df000017 	ldw	fp,0(sp)
10001cb8:	dec00204 	addi	sp,sp,8
10001cbc:	f800283a 	ret

10001cc0 <YCloseObstacle>:

int YCloseObstacle(int obs_Y_down, int obs_Y_up){
10001cc0:	defffd04 	addi	sp,sp,-12
10001cc4:	df000215 	stw	fp,8(sp)
10001cc8:	df000204 	addi	fp,sp,8
10001ccc:	e13ffe15 	stw	r4,-8(fp)
10001cd0:	e17fff15 	stw	r5,-4(fp)
	return ((marioY+ MARIO_Y_SIZE) > obs_Y_up && marioY < obs_Y_down);
10001cd4:	d0a00117 	ldw	r2,-32764(gp)
10001cd8:	10800804 	addi	r2,r2,32
10001cdc:	e0ffff17 	ldw	r3,-4(fp)
10001ce0:	1880050e 	bge	r3,r2,10001cf8 <YCloseObstacle+0x38>
10001ce4:	d0e00117 	ldw	r3,-32764(gp)
10001ce8:	e0bffe17 	ldw	r2,-8(fp)
10001cec:	1880020e 	bge	r3,r2,10001cf8 <YCloseObstacle+0x38>
10001cf0:	00800044 	movi	r2,1
10001cf4:	00000106 	br	10001cfc <YCloseObstacle+0x3c>
10001cf8:	0005883a 	mov	r2,zero
}
10001cfc:	e037883a 	mov	sp,fp
10001d00:	df000017 	ldw	fp,0(sp)
10001d04:	dec00104 	addi	sp,sp,4
10001d08:	f800283a 	ret

10001d0c <YUpperCloseObstacle>:

int YUpperCloseObstacle(int obs_Y_down, int obs_Y_up){
10001d0c:	defffd04 	addi	sp,sp,-12
10001d10:	df000215 	stw	fp,8(sp)
10001d14:	df000204 	addi	fp,sp,8
10001d18:	e13ffe15 	stw	r4,-8(fp)
10001d1c:	e17fff15 	stw	r5,-4(fp)
	return (marioY >= obs_Y_up && marioY <= obs_Y_down);
10001d20:	d0e00117 	ldw	r3,-32764(gp)
10001d24:	e0bfff17 	ldw	r2,-4(fp)
10001d28:	18800516 	blt	r3,r2,10001d40 <YUpperCloseObstacle+0x34>
10001d2c:	d0a00117 	ldw	r2,-32764(gp)
10001d30:	e0fffe17 	ldw	r3,-8(fp)
10001d34:	18800216 	blt	r3,r2,10001d40 <YUpperCloseObstacle+0x34>
10001d38:	00800044 	movi	r2,1
10001d3c:	00000106 	br	10001d44 <YUpperCloseObstacle+0x38>
10001d40:	0005883a 	mov	r2,zero
}
10001d44:	e037883a 	mov	sp,fp
10001d48:	df000017 	ldw	fp,0(sp)
10001d4c:	dec00104 	addi	sp,sp,4
10001d50:	f800283a 	ret

10001d54 <YDownCloseObstacle>:

int YDownCloseObstacle(int obs_Y_down, int obs_Y_up){
10001d54:	defffd04 	addi	sp,sp,-12
10001d58:	df000215 	stw	fp,8(sp)
10001d5c:	df000204 	addi	fp,sp,8
10001d60:	e13ffe15 	stw	r4,-8(fp)
10001d64:	e17fff15 	stw	r5,-4(fp)
	return ((marioY+MARIO_Y_SIZE) >= obs_Y_up && (marioY+MARIO_Y_SIZE) <= obs_Y_down);
10001d68:	d0a00117 	ldw	r2,-32764(gp)
10001d6c:	10c00804 	addi	r3,r2,32
10001d70:	e0bfff17 	ldw	r2,-4(fp)
10001d74:	18800616 	blt	r3,r2,10001d90 <YDownCloseObstacle+0x3c>
10001d78:	d0a00117 	ldw	r2,-32764(gp)
10001d7c:	10800804 	addi	r2,r2,32
10001d80:	e0fffe17 	ldw	r3,-8(fp)
10001d84:	18800216 	blt	r3,r2,10001d90 <YDownCloseObstacle+0x3c>
10001d88:	00800044 	movi	r2,1
10001d8c:	00000106 	br	10001d94 <YDownCloseObstacle+0x40>
10001d90:	0005883a 	mov	r2,zero
}
10001d94:	e037883a 	mov	sp,fp
10001d98:	df000017 	ldw	fp,0(sp)
10001d9c:	dec00104 	addi	sp,sp,4
10001da0:	f800283a 	ret

10001da4 <canKillMush>:


/*
	return 0 if not close to mushroom, 1 if kills, -1 if mario dead.
*/
int canKillMush() {
10001da4:	defffe04 	addi	sp,sp,-8
10001da8:	dfc00115 	stw	ra,4(sp)
10001dac:	df000015 	stw	fp,0(sp)
10001db0:	d839883a 	mov	fp,sp
	if(!mushAlive) return 0;
10001db4:	d0a00517 	ldw	r2,-32748(gp)
10001db8:	1000021e 	bne	r2,zero,10001dc4 <canKillMush+0x20>
10001dbc:	0005883a 	mov	r2,zero
10001dc0:	00001c06 	br	10001e34 <canKillMush+0x90>
	if (XCloseObstacle(mushX, mushX+MUSHROOM_X_SIZE)){
10001dc4:	d0e00217 	ldw	r3,-32760(gp)
10001dc8:	d0a00217 	ldw	r2,-32760(gp)
10001dcc:	10800504 	addi	r2,r2,20
10001dd0:	100b883a 	mov	r5,r2
10001dd4:	1809883a 	mov	r4,r3
10001dd8:	0001c100 	call	10001c10 <XCloseObstacle>
10001ddc:	10001426 	beq	r2,zero,10001e30 <canKillMush+0x8c>
		if (!YDownCloseObstacle(mushY+MUSHROOM_Y_SIZE, mushY))
10001de0:	d0a00317 	ldw	r2,-32756(gp)
10001de4:	10800504 	addi	r2,r2,20
10001de8:	d0e00317 	ldw	r3,-32756(gp)
10001dec:	180b883a 	mov	r5,r3
10001df0:	1009883a 	mov	r4,r2
10001df4:	0001d540 	call	10001d54 <YDownCloseObstacle>
10001df8:	1000021e 	bne	r2,zero,10001e04 <canKillMush+0x60>
			return 0;
10001dfc:	0005883a 	mov	r2,zero
10001e00:	00000c06 	br	10001e34 <canKillMush+0x90>
		if(YDownCloseObstacle(mushY+4, mushY))
10001e04:	d0a00317 	ldw	r2,-32756(gp)
10001e08:	10800104 	addi	r2,r2,4
10001e0c:	d0e00317 	ldw	r3,-32756(gp)
10001e10:	180b883a 	mov	r5,r3
10001e14:	1009883a 	mov	r4,r2
10001e18:	0001d540 	call	10001d54 <YDownCloseObstacle>
10001e1c:	10000226 	beq	r2,zero,10001e28 <canKillMush+0x84>
			return 1;
10001e20:	00800044 	movi	r2,1
10001e24:	00000306 	br	10001e34 <canKillMush+0x90>
		return -1;
10001e28:	00bfffc4 	movi	r2,-1
10001e2c:	00000106 	br	10001e34 <canKillMush+0x90>
	}
	return 0;
10001e30:	0005883a 	mov	r2,zero
}
10001e34:	e037883a 	mov	sp,fp
10001e38:	dfc00117 	ldw	ra,4(sp)
10001e3c:	df000017 	ldw	fp,0(sp)
10001e40:	dec00204 	addi	sp,sp,8
10001e44:	f800283a 	ret

10001e48 <jump>:

void jump()
{if (is_jump != 0) {
10001e48:	defffe04 	addi	sp,sp,-8
10001e4c:	dfc00115 	stw	ra,4(sp)
10001e50:	df000015 	stw	fp,0(sp)
10001e54:	d839883a 	mov	fp,sp
10001e58:	d0a6de17 	ldw	r2,-25736(gp)
10001e5c:	10001e26 	beq	r2,zero,10001ed8 <jump+0x90>
	if (is_jump > 0) {
10001e60:	d0a6de17 	ldw	r2,-25736(gp)
10001e64:	00800f0e 	bge	zero,r2,10001ea4 <jump+0x5c>
		if (stopJump()) {
10001e68:	00019c00 	call	100019c0 <stopJump>
10001e6c:	10000326 	beq	r2,zero,10001e7c <jump+0x34>
			is_jump = -JUMP_MAX;
10001e70:	00bfe204 	movi	r2,-120
10001e74:	d0a6de15 	stw	r2,-25736(gp)
			*mario_y_base = marioY;
			//usleep(1000);
		}
	}
}
}
10001e78:	00001706 	br	10001ed8 <jump+0x90>
{if (is_jump != 0) {
	if (is_jump > 0) {
		if (stopJump()) {
			is_jump = -JUMP_MAX;
		} else {
			marioY -= 1;
10001e7c:	d0a00117 	ldw	r2,-32764(gp)
10001e80:	10bfffc4 	addi	r2,r2,-1
10001e84:	d0a00115 	stw	r2,-32764(gp)
			is_jump += 1;
10001e88:	d0a6de17 	ldw	r2,-25736(gp)
10001e8c:	10800044 	addi	r2,r2,1
10001e90:	d0a6de15 	stw	r2,-25736(gp)
			*mario_y_base = marioY;
10001e94:	00802804 	movi	r2,160
10001e98:	d0e00117 	ldw	r3,-32764(gp)
10001e9c:	10c00015 	stw	r3,0(r2)
			*mario_y_base = marioY;
			//usleep(1000);
		}
	}
}
}
10001ea0:	00000d06 	br	10001ed8 <jump+0x90>
			is_jump += 1;
			*mario_y_base = marioY;
			//usleep(1000);
		}
	} else {
		if (stopFall()) {
10001ea4:	00019fc0 	call	100019fc <stopFall>
10001ea8:	10000226 	beq	r2,zero,10001eb4 <jump+0x6c>
			is_jump = 0;
10001eac:	d026de15 	stw	zero,-25736(gp)
			*mario_y_base = marioY;
			//usleep(1000);
		}
	}
}
}
10001eb0:	00000906 	br	10001ed8 <jump+0x90>
		}
	} else {
		if (stopFall()) {
			is_jump = 0;
		} else {
			marioY += 1;
10001eb4:	d0a00117 	ldw	r2,-32764(gp)
10001eb8:	10800044 	addi	r2,r2,1
10001ebc:	d0a00115 	stw	r2,-32764(gp)
			is_jump += 1;
10001ec0:	d0a6de17 	ldw	r2,-25736(gp)
10001ec4:	10800044 	addi	r2,r2,1
10001ec8:	d0a6de15 	stw	r2,-25736(gp)
			*mario_y_base = marioY;
10001ecc:	00802804 	movi	r2,160
10001ed0:	d0e00117 	ldw	r3,-32764(gp)
10001ed4:	10c00015 	stw	r3,0(r2)
			//usleep(1000);
		}
	}
}
}
10001ed8:	0001883a 	nop
10001edc:	e037883a 	mov	sp,fp
10001ee0:	dfc00117 	ldw	ra,4(sp)
10001ee4:	df000017 	ldw	fp,0(sp)
10001ee8:	dec00204 	addi	sp,sp,8
10001eec:	f800283a 	ret

10001ef0 <fall>:

void fall()
{
10001ef0:	deffff04 	addi	sp,sp,-4
10001ef4:	df000015 	stw	fp,0(sp)
10001ef8:	d839883a 	mov	fp,sp
	marioY += 10;
10001efc:	d0a00117 	ldw	r2,-32764(gp)
10001f00:	10800284 	addi	r2,r2,10
10001f04:	d0a00115 	stw	r2,-32764(gp)
	is_jump += 10;
10001f08:	d0a6de17 	ldw	r2,-25736(gp)
10001f0c:	10800284 	addi	r2,r2,10
10001f10:	d0a6de15 	stw	r2,-25736(gp)
	*mario_y_base = marioY;
10001f14:	00802804 	movi	r2,160
10001f18:	d0e00117 	ldw	r3,-32764(gp)
10001f1c:	10c00015 	stw	r3,0(r2)
	//usleep(1000);
}
10001f20:	0001883a 	nop
10001f24:	e037883a 	mov	sp,fp
10001f28:	df000017 	ldw	fp,0(sp)
10001f2c:	dec00104 	addi	sp,sp,4
10001f30:	f800283a 	ret

10001f34 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001f34:	defffc04 	addi	sp,sp,-16
10001f38:	dfc00315 	stw	ra,12(sp)
10001f3c:	df000215 	stw	fp,8(sp)
10001f40:	df000204 	addi	fp,sp,8
10001f44:	2007883a 	mov	r3,r4
10001f48:	2805883a 	mov	r2,r5
10001f4c:	e0fffe0d 	sth	r3,-8(fp)
10001f50:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10001f54:	e0bffe0b 	ldhu	r2,-8(fp)
10001f58:	100b883a 	mov	r5,r2
10001f5c:	01000084 	movi	r4,2
10001f60:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA, Data);
10001f64:	e0bfff0b 	ldhu	r2,-4(fp)
10001f68:	100b883a 	mov	r5,r2
10001f6c:	0009883a 	mov	r4,zero
10001f70:	00003440 	call	10000344 <IO_write>
}
10001f74:	0001883a 	nop
10001f78:	e037883a 	mov	sp,fp
10001f7c:	dfc00117 	ldw	ra,4(sp)
10001f80:	df000017 	ldw	fp,0(sp)
10001f84:	dec00204 	addi	sp,sp,8
10001f88:	f800283a 	ret

10001f8c <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001f8c:	defffd04 	addi	sp,sp,-12
10001f90:	dfc00215 	stw	ra,8(sp)
10001f94:	df000115 	stw	fp,4(sp)
10001f98:	df000104 	addi	fp,sp,4
10001f9c:	2005883a 	mov	r2,r4
10001fa0:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10001fa4:	e0bfff0b 	ldhu	r2,-4(fp)
10001fa8:	100b883a 	mov	r5,r2
10001fac:	01000084 	movi	r4,2
10001fb0:	00003440 	call	10000344 <IO_write>
	return IO_read(HPI_DATA);
10001fb4:	0009883a 	mov	r4,zero
10001fb8:	00003d40 	call	100003d4 <IO_read>
}
10001fbc:	e037883a 	mov	sp,fp
10001fc0:	dfc00117 	ldw	ra,4(sp)
10001fc4:	df000017 	ldw	fp,0(sp)
10001fc8:	dec00204 	addi	sp,sp,8
10001fcc:	f800283a 	ret

10001fd0 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10001fd0:	defffe04 	addi	sp,sp,-8
10001fd4:	dfc00115 	stw	ra,4(sp)
10001fd8:	df000015 	stw	fp,0(sp)
10001fdc:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10001fe0:	017e9414 	movui	r5,64080
10001fe4:	01000044 	movi	r4,1
10001fe8:	00003440 	call	10000344 <IO_write>
	usleep(100000);
10001fec:	010000b4 	movhi	r4,2
10001ff0:	2121a804 	addi	r4,r4,-31072
10001ff4:	00108400 	call	10010840 <usleep>
	printf("[USB INIT]:reset finished!\n");
10001ff8:	01040074 	movhi	r4,4097
10001ffc:	210bba04 	addi	r4,r4,12008
10002000:	00033880 	call	10003388 <puts>

	usleep(500000);
10002004:	01000234 	movhi	r4,8
10002008:	21284804 	addi	r4,r4,-24288
1000200c:	00108400 	call	10010840 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10002010:	01040074 	movhi	r4,4097
10002014:	210bc104 	addi	r4,r4,12036
10002018:	00033880 	call	10003388 <puts>
	IO_read(HPI_MAILBOX);
1000201c:	01000044 	movi	r4,1
10002020:	00003d40 	call	100003d4 <IO_read>
	IO_read(HPI_STATUS);
10002024:	010000c4 	movi	r4,3
10002028:	00003d40 	call	100003d4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
1000202c:	01005104 	movi	r4,324
10002030:	0001f8c0 	call	10001f8c <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10002034:	000b883a 	mov	r5,zero
10002038:	01005104 	movi	r4,324
1000203c:	0001f340 	call	10001f34 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10002040:	01005204 	movi	r4,328
10002044:	0001f8c0 	call	10001f8c <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10002048:	000b883a 	mov	r5,zero
1000204c:	01005204 	movi	r4,328
10002050:	0001f340 	call	10001f34 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10002054:	017fffd4 	movui	r5,65535
10002058:	01302414 	movui	r4,49296
1000205c:	0001f340 	call	10001f34 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10002060:	017fffd4 	movui	r5,65535
10002064:	01302c14 	movui	r4,49328
10002068:	0001f340 	call	10001f34 <UsbWrite>
}
1000206c:	0001883a 	nop
10002070:	e037883a 	mov	sp,fp
10002074:	dfc00117 	ldw	ra,4(sp)
10002078:	df000017 	ldw	fp,0(sp)
1000207c:	dec00204 	addi	sp,sp,8
10002080:	f800283a 	ret

10002084 <UsbSetAddress>:


void UsbSetAddress()
{
10002084:	defffe04 	addi	sp,sp,-8
10002088:	dfc00115 	stw	ra,4(sp)
1000208c:	df000015 	stw	fp,0(sp)
10002090:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002094:	01414004 	movi	r5,1280
10002098:	01000084 	movi	r4,2
1000209c:	00003440 	call	10000344 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
100020a0:	01414304 	movi	r5,1292
100020a4:	0009883a 	mov	r4,zero
100020a8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100020ac:	01400204 	movi	r5,8
100020b0:	0009883a 	mov	r4,zero
100020b4:	00003440 	call	10000344 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100020b8:	01403404 	movi	r5,208
100020bc:	0009883a 	mov	r4,zero
100020c0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);
100020c4:	01400044 	movi	r5,1
100020c8:	0009883a 	mov	r4,zero
100020cc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
100020d0:	014004c4 	movi	r5,19
100020d4:	0009883a 	mov	r4,zero
100020d8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0514);
100020dc:	01414504 	movi	r5,1300
100020e0:	0009883a 	mov	r4,zero
100020e4:	00003440 	call	10000344 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
100020e8:	01414004 	movi	r5,1280
100020ec:	0009883a 	mov	r4,zero
100020f0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0002);
100020f4:	01400084 	movi	r5,2
100020f8:	0009883a 	mov	r4,zero
100020fc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002100:	000b883a 	mov	r5,zero
10002104:	0009883a 	mov	r4,zero
10002108:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000210c:	000b883a 	mov	r5,zero
10002110:	0009883a 	mov	r4,zero
10002114:	00003440 	call	10000344 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10002118:	000b883a 	mov	r5,zero
1000211c:	0009883a 	mov	r4,zero
10002120:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10002124:	000b883a 	mov	r5,zero
10002128:	0009883a 	mov	r4,zero
1000212c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10002130:	01402404 	movi	r5,144
10002134:	0009883a 	mov	r4,zero
10002138:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000213c:	01401044 	movi	r5,65
10002140:	0009883a 	mov	r4,zero
10002144:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002148:	014004c4 	movi	r5,19
1000214c:	0009883a 	mov	r4,zero
10002150:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002154:	000b883a 	mov	r5,zero
10002158:	0009883a 	mov	r4,zero
1000215c:	00003440 	call	10000344 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002160:	01414004 	movi	r5,1280
10002164:	01006c04 	movi	r4,432
10002168:	0001f340 	call	10001f34 <UsbWrite>
}
1000216c:	0001883a 	nop
10002170:	e037883a 	mov	sp,fp
10002174:	dfc00117 	ldw	ra,4(sp)
10002178:	df000017 	ldw	fp,0(sp)
1000217c:	dec00204 	addi	sp,sp,8
10002180:	f800283a 	ret

10002184 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10002184:	defffe04 	addi	sp,sp,-8
10002188:	dfc00115 	stw	ra,4(sp)
1000218c:	df000015 	stw	fp,0(sp)
10002190:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002194:	01414004 	movi	r5,1280
10002198:	01000084 	movi	r4,2
1000219c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x050C);
100021a0:	01414304 	movi	r5,1292
100021a4:	0009883a 	mov	r4,zero
100021a8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100021ac:	01400204 	movi	r5,8
100021b0:	0009883a 	mov	r4,zero
100021b4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100021b8:	0140b404 	movi	r5,720
100021bc:	0009883a 	mov	r4,zero
100021c0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);
100021c4:	01400044 	movi	r5,1
100021c8:	0009883a 	mov	r4,zero
100021cc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
100021d0:	014004c4 	movi	r5,19
100021d4:	0009883a 	mov	r4,zero
100021d8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0514);
100021dc:	01414504 	movi	r5,1300
100021e0:	0009883a 	mov	r4,zero
100021e4:	00003440 	call	10000344 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100021e8:	0141a004 	movi	r5,1664
100021ec:	0009883a 	mov	r4,zero
100021f0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
100021f4:	01404004 	movi	r5,256
100021f8:	0009883a 	mov	r4,zero
100021fc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002200:	000b883a 	mov	r5,zero
10002204:	0009883a 	mov	r4,zero
10002208:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);
1000220c:	01400204 	movi	r5,8
10002210:	0009883a 	mov	r4,zero
10002214:	00003440 	call	10000344 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10002218:	01414b04 	movi	r5,1324
1000221c:	0009883a 	mov	r4,zero
10002220:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10002224:	01400204 	movi	r5,8
10002228:	0009883a 	mov	r4,zero
1000222c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10002230:	0140a404 	movi	r5,656
10002234:	0009883a 	mov	r4,zero
10002238:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000223c:	01401044 	movi	r5,65
10002240:	0009883a 	mov	r4,zero
10002244:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002248:	014004c4 	movi	r5,19
1000224c:	0009883a 	mov	r4,zero
10002250:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0520);
10002254:	01414804 	movi	r5,1312
10002258:	0009883a 	mov	r4,zero
1000225c:	00003440 	call	10000344 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10002260:	000b883a 	mov	r5,zero
10002264:	0009883a 	mov	r4,zero
10002268:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
1000226c:	000b883a 	mov	r5,zero
10002270:	0009883a 	mov	r4,zero
10002274:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10002278:	01408404 	movi	r5,528
1000227c:	0009883a 	mov	r4,zero
10002280:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002284:	01401044 	movi	r5,65
10002288:	0009883a 	mov	r4,zero
1000228c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002290:	014004c4 	movi	r5,19
10002294:	0009883a 	mov	r4,zero
10002298:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000229c:	000b883a 	mov	r5,zero
100022a0:	0009883a 	mov	r4,zero
100022a4:	00003440 	call	10000344 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100022a8:	01414004 	movi	r5,1280
100022ac:	01006c04 	movi	r4,432
100022b0:	0001f340 	call	10001f34 <UsbWrite>
}
100022b4:	0001883a 	nop
100022b8:	e037883a 	mov	sp,fp
100022bc:	dfc00117 	ldw	ra,4(sp)
100022c0:	df000017 	ldw	fp,0(sp)
100022c4:	dec00204 	addi	sp,sp,8
100022c8:	f800283a 	ret

100022cc <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100022cc:	defffe04 	addi	sp,sp,-8
100022d0:	dfc00115 	stw	ra,4(sp)
100022d4:	df000015 	stw	fp,0(sp)
100022d8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100022dc:	01414004 	movi	r5,1280
100022e0:	01000084 	movi	r4,2
100022e4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x050C);
100022e8:	01414304 	movi	r5,1292
100022ec:	0009883a 	mov	r4,zero
100022f0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100022f4:	01400204 	movi	r5,8
100022f8:	0009883a 	mov	r4,zero
100022fc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002300:	0140b404 	movi	r5,720
10002304:	0009883a 	mov	r4,zero
10002308:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000230c:	01400044 	movi	r5,1
10002310:	0009883a 	mov	r4,zero
10002314:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002318:	014004c4 	movi	r5,19
1000231c:	0009883a 	mov	r4,zero
10002320:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002324:	01414504 	movi	r5,1300
10002328:	0009883a 	mov	r4,zero
1000232c:	00003440 	call	10000344 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002330:	0141a004 	movi	r5,1664
10002334:	0009883a 	mov	r4,zero
10002338:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
1000233c:	01404004 	movi	r5,256
10002340:	0009883a 	mov	r4,zero
10002344:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002348:	000b883a 	mov	r5,zero
1000234c:	0009883a 	mov	r4,zero
10002350:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10002354:	01400484 	movi	r5,18
10002358:	0009883a 	mov	r4,zero
1000235c:	00003440 	call	10000344 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002360:	01415104 	movi	r5,1348
10002364:	0009883a 	mov	r4,zero
10002368:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000236c:	01400204 	movi	r5,8
10002370:	0009883a 	mov	r4,zero
10002374:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002378:	0140a404 	movi	r5,656
1000237c:	0009883a 	mov	r4,zero
10002380:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002384:	01401044 	movi	r5,65
10002388:	0009883a 	mov	r4,zero
1000238c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002390:	014004c4 	movi	r5,19
10002394:	0009883a 	mov	r4,zero
10002398:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000239c:	01414804 	movi	r5,1312
100023a0:	0009883a 	mov	r4,zero
100023a4:	00003440 	call	10000344 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100023a8:	01415304 	movi	r5,1356
100023ac:	0009883a 	mov	r4,zero
100023b0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100023b4:	01400204 	movi	r5,8
100023b8:	0009883a 	mov	r4,zero
100023bc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100023c0:	0140a404 	movi	r5,656
100023c4:	0009883a 	mov	r4,zero
100023c8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100023cc:	01400044 	movi	r5,1
100023d0:	0009883a 	mov	r4,zero
100023d4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100023d8:	014004c4 	movi	r5,19
100023dc:	0009883a 	mov	r4,zero
100023e0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100023e4:	01414b04 	movi	r5,1324
100023e8:	0009883a 	mov	r4,zero
100023ec:	00003440 	call	10000344 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
100023f0:	01415504 	movi	r5,1364
100023f4:	0009883a 	mov	r4,zero
100023f8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
100023fc:	01400084 	movi	r5,2
10002400:	0009883a 	mov	r4,zero
10002404:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002408:	0140a404 	movi	r5,656
1000240c:	0009883a 	mov	r4,zero
10002410:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002414:	01401044 	movi	r5,65
10002418:	0009883a 	mov	r4,zero
1000241c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002420:	014004c4 	movi	r5,19
10002424:	0009883a 	mov	r4,zero
10002428:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1000242c:	01414e04 	movi	r5,1336
10002430:	0009883a 	mov	r4,zero
10002434:	00003440 	call	10000344 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10002438:	000b883a 	mov	r5,zero
1000243c:	0009883a 	mov	r4,zero
10002440:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002444:	000b883a 	mov	r5,zero
10002448:	0009883a 	mov	r4,zero
1000244c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10002450:	01408404 	movi	r5,528
10002454:	0009883a 	mov	r4,zero
10002458:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
1000245c:	01401044 	movi	r5,65
10002460:	0009883a 	mov	r4,zero
10002464:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002468:	014004c4 	movi	r5,19
1000246c:	0009883a 	mov	r4,zero
10002470:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002474:	000b883a 	mov	r5,zero
10002478:	0009883a 	mov	r4,zero
1000247c:	00003440 	call	10000344 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002480:	01414004 	movi	r5,1280
10002484:	01006c04 	movi	r4,432
10002488:	0001f340 	call	10001f34 <UsbWrite>
}
1000248c:	0001883a 	nop
10002490:	e037883a 	mov	sp,fp
10002494:	dfc00117 	ldw	ra,4(sp)
10002498:	df000017 	ldw	fp,0(sp)
1000249c:	dec00204 	addi	sp,sp,8
100024a0:	f800283a 	ret

100024a4 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100024a4:	defffe04 	addi	sp,sp,-8
100024a8:	dfc00115 	stw	ra,4(sp)
100024ac:	df000015 	stw	fp,0(sp)
100024b0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100024b4:	01414004 	movi	r5,1280
100024b8:	01000084 	movi	r4,2
100024bc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x050C);
100024c0:	01414304 	movi	r5,1292
100024c4:	0009883a 	mov	r4,zero
100024c8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100024cc:	01400204 	movi	r5,8
100024d0:	0009883a 	mov	r4,zero
100024d4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100024d8:	0140b404 	movi	r5,720
100024dc:	0009883a 	mov	r4,zero
100024e0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);
100024e4:	01400044 	movi	r5,1
100024e8:	0009883a 	mov	r4,zero
100024ec:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
100024f0:	014004c4 	movi	r5,19
100024f4:	0009883a 	mov	r4,zero
100024f8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0514);
100024fc:	01414504 	movi	r5,1300
10002500:	0009883a 	mov	r4,zero
10002504:	00003440 	call	10000344 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002508:	0141a004 	movi	r5,1664
1000250c:	0009883a 	mov	r4,zero
10002510:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002514:	01408004 	movi	r5,512
10002518:	0009883a 	mov	r4,zero
1000251c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002520:	000b883a 	mov	r5,zero
10002524:	0009883a 	mov	r4,zero
10002528:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
1000252c:	01400244 	movi	r5,9
10002530:	0009883a 	mov	r4,zero
10002534:	00003440 	call	10000344 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002538:	01415104 	movi	r5,1348
1000253c:	0009883a 	mov	r4,zero
10002540:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002544:	01400204 	movi	r5,8
10002548:	0009883a 	mov	r4,zero
1000254c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002550:	0140a404 	movi	r5,656
10002554:	0009883a 	mov	r4,zero
10002558:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000255c:	01401044 	movi	r5,65
10002560:	0009883a 	mov	r4,zero
10002564:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002568:	014004c4 	movi	r5,19
1000256c:	0009883a 	mov	r4,zero
10002570:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002574:	01414804 	movi	r5,1312
10002578:	0009883a 	mov	r4,zero
1000257c:	00003440 	call	10000344 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10002580:	01415304 	movi	r5,1356
10002584:	0009883a 	mov	r4,zero
10002588:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
1000258c:	01400044 	movi	r5,1
10002590:	0009883a 	mov	r4,zero
10002594:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002598:	0140a404 	movi	r5,656
1000259c:	0009883a 	mov	r4,zero
100025a0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100025a4:	01400044 	movi	r5,1
100025a8:	0009883a 	mov	r4,zero
100025ac:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100025b0:	014004c4 	movi	r5,19
100025b4:	0009883a 	mov	r4,zero
100025b8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100025bc:	01414b04 	movi	r5,1324
100025c0:	0009883a 	mov	r4,zero
100025c4:	00003440 	call	10000344 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100025c8:	000b883a 	mov	r5,zero
100025cc:	0009883a 	mov	r4,zero
100025d0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100025d4:	000b883a 	mov	r5,zero
100025d8:	0009883a 	mov	r4,zero
100025dc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100025e0:	01408404 	movi	r5,528
100025e4:	0009883a 	mov	r4,zero
100025e8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100025ec:	01401044 	movi	r5,65
100025f0:	0009883a 	mov	r4,zero
100025f4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100025f8:	014004c4 	movi	r5,19
100025fc:	0009883a 	mov	r4,zero
10002600:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002604:	000b883a 	mov	r5,zero
10002608:	0009883a 	mov	r4,zero
1000260c:	00003440 	call	10000344 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002610:	01414004 	movi	r5,1280
10002614:	01006c04 	movi	r4,432
10002618:	0001f340 	call	10001f34 <UsbWrite>
}
1000261c:	0001883a 	nop
10002620:	e037883a 	mov	sp,fp
10002624:	dfc00117 	ldw	ra,4(sp)
10002628:	df000017 	ldw	fp,0(sp)
1000262c:	dec00204 	addi	sp,sp,8
10002630:	f800283a 	ret

10002634 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10002634:	defffe04 	addi	sp,sp,-8
10002638:	dfc00115 	stw	ra,4(sp)
1000263c:	df000015 	stw	fp,0(sp)
10002640:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002644:	01414004 	movi	r5,1280
10002648:	01000084 	movi	r4,2
1000264c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002650:	01414304 	movi	r5,1292
10002654:	0009883a 	mov	r4,zero
10002658:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000265c:	01400204 	movi	r5,8
10002660:	0009883a 	mov	r4,zero
10002664:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002668:	0140b404 	movi	r5,720
1000266c:	0009883a 	mov	r4,zero
10002670:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002674:	01400044 	movi	r5,1
10002678:	0009883a 	mov	r4,zero
1000267c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002680:	014004c4 	movi	r5,19
10002684:	0009883a 	mov	r4,zero
10002688:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000268c:	01414504 	movi	r5,1300
10002690:	0009883a 	mov	r4,zero
10002694:	00003440 	call	10000344 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002698:	0141a004 	movi	r5,1664
1000269c:	0009883a 	mov	r4,zero
100026a0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100026a4:	01408004 	movi	r5,512
100026a8:	0009883a 	mov	r4,zero
100026ac:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100026b0:	000b883a 	mov	r5,zero
100026b4:	0009883a 	mov	r4,zero
100026b8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100026bc:	01403fc4 	movi	r5,255
100026c0:	0009883a 	mov	r4,zero
100026c4:	00003440 	call	10000344 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
100026c8:	01415704 	movi	r5,1372
100026cc:	0009883a 	mov	r4,zero
100026d0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100026d4:	01400204 	movi	r5,8
100026d8:	0009883a 	mov	r4,zero
100026dc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100026e0:	0140a404 	movi	r5,656
100026e4:	0009883a 	mov	r4,zero
100026e8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100026ec:	01401044 	movi	r5,65
100026f0:	0009883a 	mov	r4,zero
100026f4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100026f8:	014004c4 	movi	r5,19
100026fc:	0009883a 	mov	r4,zero
10002700:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002704:	01414804 	movi	r5,1312
10002708:	0009883a 	mov	r4,zero
1000270c:	00003440 	call	10000344 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10002710:	01415904 	movi	r5,1380
10002714:	0009883a 	mov	r4,zero
10002718:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000271c:	01400204 	movi	r5,8
10002720:	0009883a 	mov	r4,zero
10002724:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002728:	0140a404 	movi	r5,656
1000272c:	0009883a 	mov	r4,zero
10002730:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002734:	01400044 	movi	r5,1
10002738:	0009883a 	mov	r4,zero
1000273c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002740:	014004c4 	movi	r5,19
10002744:	0009883a 	mov	r4,zero
10002748:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000274c:	01414b04 	movi	r5,1324
10002750:	0009883a 	mov	r4,zero
10002754:	00003440 	call	10000344 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10002758:	01415b04 	movi	r5,1388
1000275c:	0009883a 	mov	r4,zero
10002760:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002764:	01400204 	movi	r5,8
10002768:	0009883a 	mov	r4,zero
1000276c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002770:	0140a404 	movi	r5,656
10002774:	0009883a 	mov	r4,zero
10002778:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000277c:	01401044 	movi	r5,65
10002780:	0009883a 	mov	r4,zero
10002784:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002788:	014004c4 	movi	r5,19
1000278c:	0009883a 	mov	r4,zero
10002790:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002794:	01414e04 	movi	r5,1336
10002798:	0009883a 	mov	r4,zero
1000279c:	00003440 	call	10000344 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
100027a0:	01415d04 	movi	r5,1396
100027a4:	0009883a 	mov	r4,zero
100027a8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100027ac:	01400204 	movi	r5,8
100027b0:	0009883a 	mov	r4,zero
100027b4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100027b8:	0140a404 	movi	r5,656
100027bc:	0009883a 	mov	r4,zero
100027c0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100027c4:	01400044 	movi	r5,1
100027c8:	0009883a 	mov	r4,zero
100027cc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100027d0:	014004c4 	movi	r5,19
100027d4:	0009883a 	mov	r4,zero
100027d8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100027dc:	01415104 	movi	r5,1348
100027e0:	0009883a 	mov	r4,zero
100027e4:	00003440 	call	10000344 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
100027e8:	01415f04 	movi	r5,1404
100027ec:	0009883a 	mov	r4,zero
100027f0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
100027f4:	01400084 	movi	r5,2
100027f8:	0009883a 	mov	r4,zero
100027fc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002800:	0140a404 	movi	r5,656
10002804:	0009883a 	mov	r4,zero
10002808:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000280c:	01401044 	movi	r5,65
10002810:	0009883a 	mov	r4,zero
10002814:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002818:	014004c4 	movi	r5,19
1000281c:	0009883a 	mov	r4,zero
10002820:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002824:	01415404 	movi	r5,1360
10002828:	0009883a 	mov	r4,zero
1000282c:	00003440 	call	10000344 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10002830:	000b883a 	mov	r5,zero
10002834:	0009883a 	mov	r4,zero
10002838:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
1000283c:	000b883a 	mov	r5,zero
10002840:	0009883a 	mov	r4,zero
10002844:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10002848:	01408404 	movi	r5,528
1000284c:	0009883a 	mov	r4,zero
10002850:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10002854:	01401044 	movi	r5,65
10002858:	0009883a 	mov	r4,zero
1000285c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002860:	014004c4 	movi	r5,19
10002864:	0009883a 	mov	r4,zero
10002868:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000286c:	000b883a 	mov	r5,zero
10002870:	0009883a 	mov	r4,zero
10002874:	00003440 	call	10000344 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002878:	01414004 	movi	r5,1280
1000287c:	01006c04 	movi	r4,432
10002880:	0001f340 	call	10001f34 <UsbWrite>
}
10002884:	0001883a 	nop
10002888:	e037883a 	mov	sp,fp
1000288c:	dfc00117 	ldw	ra,4(sp)
10002890:	df000017 	ldw	fp,0(sp)
10002894:	dec00204 	addi	sp,sp,8
10002898:	f800283a 	ret

1000289c <UsbSetConfig>:

void UsbSetConfig()
{
1000289c:	defffe04 	addi	sp,sp,-8
100028a0:	dfc00115 	stw	ra,4(sp)
100028a4:	df000015 	stw	fp,0(sp)
100028a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100028ac:	01414004 	movi	r5,1280
100028b0:	01000084 	movi	r4,2
100028b4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x050C);
100028b8:	01414304 	movi	r5,1292
100028bc:	0009883a 	mov	r4,zero
100028c0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100028c4:	01400204 	movi	r5,8
100028c8:	0009883a 	mov	r4,zero
100028cc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100028d0:	0140b404 	movi	r5,720
100028d4:	0009883a 	mov	r4,zero
100028d8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);
100028dc:	01400044 	movi	r5,1
100028e0:	0009883a 	mov	r4,zero
100028e4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
100028e8:	014004c4 	movi	r5,19
100028ec:	0009883a 	mov	r4,zero
100028f0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0514);
100028f4:	01414504 	movi	r5,1300
100028f8:	0009883a 	mov	r4,zero
100028fc:	00003440 	call	10000344 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10002900:	01424004 	movi	r5,2304
10002904:	0009883a 	mov	r4,zero
10002908:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
1000290c:	01400044 	movi	r5,1
10002910:	0009883a 	mov	r4,zero
10002914:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002918:	000b883a 	mov	r5,zero
1000291c:	0009883a 	mov	r4,zero
10002920:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002924:	000b883a 	mov	r5,zero
10002928:	0009883a 	mov	r4,zero
1000292c:	00003440 	call	10000344 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10002930:	000b883a 	mov	r5,zero
10002934:	0009883a 	mov	r4,zero
10002938:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
1000293c:	000b883a 	mov	r5,zero
10002940:	0009883a 	mov	r4,zero
10002944:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002948:	0140a404 	movi	r5,656
1000294c:	0009883a 	mov	r4,zero
10002950:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002954:	01401044 	movi	r5,65
10002958:	0009883a 	mov	r4,zero
1000295c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002960:	014004c4 	movi	r5,19
10002964:	0009883a 	mov	r4,zero
10002968:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000296c:	000b883a 	mov	r5,zero
10002970:	0009883a 	mov	r4,zero
10002974:	00003440 	call	10000344 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002978:	01414004 	movi	r5,1280
1000297c:	01006c04 	movi	r4,432
10002980:	0001f340 	call	10001f34 <UsbWrite>

}
10002984:	0001883a 	nop
10002988:	e037883a 	mov	sp,fp
1000298c:	dfc00117 	ldw	ra,4(sp)
10002990:	df000017 	ldw	fp,0(sp)
10002994:	dec00204 	addi	sp,sp,8
10002998:	f800283a 	ret

1000299c <UsbClassRequest>:

void UsbClassRequest()
{
1000299c:	defffe04 	addi	sp,sp,-8
100029a0:	dfc00115 	stw	ra,4(sp)
100029a4:	df000015 	stw	fp,0(sp)
100029a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100029ac:	01414004 	movi	r5,1280
100029b0:	01000084 	movi	r4,2
100029b4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x050C);
100029b8:	01414304 	movi	r5,1292
100029bc:	0009883a 	mov	r4,zero
100029c0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100029c4:	01400204 	movi	r5,8
100029c8:	0009883a 	mov	r4,zero
100029cc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100029d0:	0140b404 	movi	r5,720
100029d4:	0009883a 	mov	r4,zero
100029d8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);
100029dc:	01400044 	movi	r5,1
100029e0:	0009883a 	mov	r4,zero
100029e4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
100029e8:	014004c4 	movi	r5,19
100029ec:	0009883a 	mov	r4,zero
100029f0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0514);
100029f4:	01414504 	movi	r5,1300
100029f8:	0009883a 	mov	r4,zero
100029fc:	00003440 	call	10000344 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10002a00:	01428844 	movi	r5,2593
10002a04:	0009883a 	mov	r4,zero
10002a08:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10002a0c:	000b883a 	mov	r5,zero
10002a10:	0009883a 	mov	r4,zero
10002a14:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002a18:	000b883a 	mov	r5,zero
10002a1c:	0009883a 	mov	r4,zero
10002a20:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002a24:	000b883a 	mov	r5,zero
10002a28:	0009883a 	mov	r4,zero
10002a2c:	00003440 	call	10000344 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10002a30:	000b883a 	mov	r5,zero
10002a34:	0009883a 	mov	r4,zero
10002a38:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10002a3c:	000b883a 	mov	r5,zero
10002a40:	0009883a 	mov	r4,zero
10002a44:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002a48:	0140a404 	movi	r5,656
10002a4c:	0009883a 	mov	r4,zero
10002a50:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002a54:	01401044 	movi	r5,65
10002a58:	0009883a 	mov	r4,zero
10002a5c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002a60:	014004c4 	movi	r5,19
10002a64:	0009883a 	mov	r4,zero
10002a68:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002a6c:	000b883a 	mov	r5,zero
10002a70:	0009883a 	mov	r4,zero
10002a74:	00003440 	call	10000344 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002a78:	01414004 	movi	r5,1280
10002a7c:	01006c04 	movi	r4,432
10002a80:	0001f340 	call	10001f34 <UsbWrite>
}
10002a84:	0001883a 	nop
10002a88:	e037883a 	mov	sp,fp
10002a8c:	dfc00117 	ldw	ra,4(sp)
10002a90:	df000017 	ldw	fp,0(sp)
10002a94:	dec00204 	addi	sp,sp,8
10002a98:	f800283a 	ret

10002a9c <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10002a9c:	defffe04 	addi	sp,sp,-8
10002aa0:	dfc00115 	stw	ra,4(sp)
10002aa4:	df000015 	stw	fp,0(sp)
10002aa8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002aac:	01414004 	movi	r5,1280
10002ab0:	01000084 	movi	r4,2
10002ab4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002ab8:	01414304 	movi	r5,1292
10002abc:	0009883a 	mov	r4,zero
10002ac0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002ac4:	01400204 	movi	r5,8
10002ac8:	0009883a 	mov	r4,zero
10002acc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002ad0:	0140b404 	movi	r5,720
10002ad4:	0009883a 	mov	r4,zero
10002ad8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002adc:	01400044 	movi	r5,1
10002ae0:	0009883a 	mov	r4,zero
10002ae4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002ae8:	014004c4 	movi	r5,19
10002aec:	0009883a 	mov	r4,zero
10002af0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002af4:	01414504 	movi	r5,1300
10002af8:	0009883a 	mov	r4,zero
10002afc:	00003440 	call	10000344 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002b00:	0141a044 	movi	r5,1665
10002b04:	0009883a 	mov	r4,zero
10002b08:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10002b0c:	01484004 	movi	r5,8448
10002b10:	0009883a 	mov	r4,zero
10002b14:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002b18:	000b883a 	mov	r5,zero
10002b1c:	0009883a 	mov	r4,zero
10002b20:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002b24:	01401ec4 	movi	r5,123
10002b28:	0009883a 	mov	r4,zero
10002b2c:	00003440 	call	10000344 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002b30:	01415104 	movi	r5,1348
10002b34:	0009883a 	mov	r4,zero
10002b38:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002b3c:	01400204 	movi	r5,8
10002b40:	0009883a 	mov	r4,zero
10002b44:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002b48:	0140a404 	movi	r5,656
10002b4c:	0009883a 	mov	r4,zero
10002b50:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002b54:	01401044 	movi	r5,65
10002b58:	0009883a 	mov	r4,zero
10002b5c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002b60:	014004c4 	movi	r5,19
10002b64:	0009883a 	mov	r4,zero
10002b68:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002b6c:	01414804 	movi	r5,1312
10002b70:	0009883a 	mov	r4,zero
10002b74:	00003440 	call	10000344 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002b78:	000b883a 	mov	r5,zero
10002b7c:	0009883a 	mov	r4,zero
10002b80:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002b84:	000b883a 	mov	r5,zero
10002b88:	0009883a 	mov	r4,zero
10002b8c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10002b90:	01408404 	movi	r5,528
10002b94:	0009883a 	mov	r4,zero
10002b98:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002b9c:	01401044 	movi	r5,65
10002ba0:	0009883a 	mov	r4,zero
10002ba4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002ba8:	014004c4 	movi	r5,19
10002bac:	0009883a 	mov	r4,zero
10002bb0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002bb4:	000b883a 	mov	r5,zero
10002bb8:	0009883a 	mov	r4,zero
10002bbc:	00003440 	call	10000344 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002bc0:	01414004 	movi	r5,1280
10002bc4:	01006c04 	movi	r4,432
10002bc8:	0001f340 	call	10001f34 <UsbWrite>

}
10002bcc:	0001883a 	nop
10002bd0:	e037883a 	mov	sp,fp
10002bd4:	dfc00117 	ldw	ra,4(sp)
10002bd8:	df000017 	ldw	fp,0(sp)
10002bdc:	dec00204 	addi	sp,sp,8
10002be0:	f800283a 	ret

10002be4 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10002be4:	defffe04 	addi	sp,sp,-8
10002be8:	dfc00115 	stw	ra,4(sp)
10002bec:	df000015 	stw	fp,0(sp)
10002bf0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002bf4:	01414004 	movi	r5,1280
10002bf8:	01000084 	movi	r4,2
10002bfc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002c00:	01414304 	movi	r5,1292
10002c04:	0009883a 	mov	r4,zero
10002c08:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002c0c:	01400204 	movi	r5,8
10002c10:	0009883a 	mov	r4,zero
10002c14:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002c18:	0140b404 	movi	r5,720
10002c1c:	0009883a 	mov	r4,zero
10002c20:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002c24:	01400044 	movi	r5,1
10002c28:	0009883a 	mov	r4,zero
10002c2c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002c30:	014004c4 	movi	r5,19
10002c34:	0009883a 	mov	r4,zero
10002c38:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002c3c:	01414504 	movi	r5,1300
10002c40:	0009883a 	mov	r4,zero
10002c44:	00003440 	call	10000344 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002c48:	0141a044 	movi	r5,1665
10002c4c:	0009883a 	mov	r4,zero
10002c50:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10002c54:	01488004 	movi	r5,8704
10002c58:	0009883a 	mov	r4,zero
10002c5c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002c60:	000b883a 	mov	r5,zero
10002c64:	0009883a 	mov	r4,zero
10002c68:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002c6c:	01401ec4 	movi	r5,123
10002c70:	0009883a 	mov	r4,zero
10002c74:	00003440 	call	10000344 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10002c78:	01416004 	movi	r5,1408
10002c7c:	0009883a 	mov	r4,zero
10002c80:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002c84:	01400204 	movi	r5,8
10002c88:	0009883a 	mov	r4,zero
10002c8c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002c90:	0140a404 	movi	r5,656
10002c94:	0009883a 	mov	r4,zero
10002c98:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002c9c:	01401044 	movi	r5,65
10002ca0:	0009883a 	mov	r4,zero
10002ca4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002ca8:	014004c4 	movi	r5,19
10002cac:	0009883a 	mov	r4,zero
10002cb0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002cb4:	01414804 	movi	r5,1312
10002cb8:	0009883a 	mov	r4,zero
10002cbc:	00003440 	call	10000344 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10002cc0:	01416204 	movi	r5,1416
10002cc4:	0009883a 	mov	r4,zero
10002cc8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002ccc:	01400204 	movi	r5,8
10002cd0:	0009883a 	mov	r4,zero
10002cd4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002cd8:	0140a404 	movi	r5,656
10002cdc:	0009883a 	mov	r4,zero
10002ce0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002ce4:	01400044 	movi	r5,1
10002ce8:	0009883a 	mov	r4,zero
10002cec:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002cf0:	014004c4 	movi	r5,19
10002cf4:	0009883a 	mov	r4,zero
10002cf8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002cfc:	01414b04 	movi	r5,1324
10002d00:	0009883a 	mov	r4,zero
10002d04:	00003440 	call	10000344 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10002d08:	01416404 	movi	r5,1424
10002d0c:	0009883a 	mov	r4,zero
10002d10:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002d14:	01400204 	movi	r5,8
10002d18:	0009883a 	mov	r4,zero
10002d1c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002d20:	0140a404 	movi	r5,656
10002d24:	0009883a 	mov	r4,zero
10002d28:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002d2c:	01401044 	movi	r5,65
10002d30:	0009883a 	mov	r4,zero
10002d34:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002d38:	014004c4 	movi	r5,19
10002d3c:	0009883a 	mov	r4,zero
10002d40:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002d44:	01414e04 	movi	r5,1336
10002d48:	0009883a 	mov	r4,zero
10002d4c:	00003440 	call	10000344 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10002d50:	01416604 	movi	r5,1432
10002d54:	0009883a 	mov	r4,zero
10002d58:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002d5c:	01400204 	movi	r5,8
10002d60:	0009883a 	mov	r4,zero
10002d64:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002d68:	0140a404 	movi	r5,656
10002d6c:	0009883a 	mov	r4,zero
10002d70:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002d74:	01400044 	movi	r5,1
10002d78:	0009883a 	mov	r4,zero
10002d7c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002d80:	014004c4 	movi	r5,19
10002d84:	0009883a 	mov	r4,zero
10002d88:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002d8c:	01415104 	movi	r5,1348
10002d90:	0009883a 	mov	r4,zero
10002d94:	00003440 	call	10000344 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10002d98:	01416804 	movi	r5,1440
10002d9c:	0009883a 	mov	r4,zero
10002da0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002da4:	01400204 	movi	r5,8
10002da8:	0009883a 	mov	r4,zero
10002dac:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002db0:	0140a404 	movi	r5,656
10002db4:	0009883a 	mov	r4,zero
10002db8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10002dbc:	01401044 	movi	r5,65
10002dc0:	0009883a 	mov	r4,zero
10002dc4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002dc8:	014004c4 	movi	r5,19
10002dcc:	0009883a 	mov	r4,zero
10002dd0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002dd4:	01415404 	movi	r5,1360
10002dd8:	0009883a 	mov	r4,zero
10002ddc:	00003440 	call	10000344 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10002de0:	01416a04 	movi	r5,1448
10002de4:	0009883a 	mov	r4,zero
10002de8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002dec:	01400204 	movi	r5,8
10002df0:	0009883a 	mov	r4,zero
10002df4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002df8:	0140a404 	movi	r5,656
10002dfc:	0009883a 	mov	r4,zero
10002e00:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002e04:	01400044 	movi	r5,1
10002e08:	0009883a 	mov	r4,zero
10002e0c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002e10:	014004c4 	movi	r5,19
10002e14:	0009883a 	mov	r4,zero
10002e18:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10002e1c:	01415704 	movi	r5,1372
10002e20:	0009883a 	mov	r4,zero
10002e24:	00003440 	call	10000344 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10002e28:	01416c04 	movi	r5,1456
10002e2c:	0009883a 	mov	r4,zero
10002e30:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002e34:	01400204 	movi	r5,8
10002e38:	0009883a 	mov	r4,zero
10002e3c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10002e40:	0140a404 	movi	r5,656
10002e44:	0009883a 	mov	r4,zero
10002e48:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10002e4c:	01401044 	movi	r5,65
10002e50:	0009883a 	mov	r4,zero
10002e54:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002e58:	014004c4 	movi	r5,19
10002e5c:	0009883a 	mov	r4,zero
10002e60:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10002e64:	01415a04 	movi	r5,1384
10002e68:	0009883a 	mov	r4,zero
10002e6c:	00003440 	call	10000344 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10002e70:	01416e04 	movi	r5,1464
10002e74:	0009883a 	mov	r4,zero
10002e78:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002e7c:	014000c4 	movi	r5,3
10002e80:	0009883a 	mov	r4,zero
10002e84:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002e88:	0140a404 	movi	r5,656
10002e8c:	0009883a 	mov	r4,zero
10002e90:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002e94:	01400044 	movi	r5,1
10002e98:	0009883a 	mov	r4,zero
10002e9c:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10002ea0:	014004c4 	movi	r5,19
10002ea4:	0009883a 	mov	r4,zero
10002ea8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002eac:	01415d04 	movi	r5,1396
10002eb0:	0009883a 	mov	r4,zero
10002eb4:	00003440 	call	10000344 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10002eb8:	000b883a 	mov	r5,zero
10002ebc:	0009883a 	mov	r4,zero
10002ec0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002ec4:	000b883a 	mov	r5,zero
10002ec8:	0009883a 	mov	r4,zero
10002ecc:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10002ed0:	01408404 	movi	r5,528
10002ed4:	0009883a 	mov	r4,zero
10002ed8:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002edc:	01401044 	movi	r5,65
10002ee0:	0009883a 	mov	r4,zero
10002ee4:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002ee8:	014004c4 	movi	r5,19
10002eec:	0009883a 	mov	r4,zero
10002ef0:	00003440 	call	10000344 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002ef4:	000b883a 	mov	r5,zero
10002ef8:	0009883a 	mov	r4,zero
10002efc:	00003440 	call	10000344 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002f00:	01414004 	movi	r5,1280
10002f04:	01006c04 	movi	r4,432
10002f08:	0001f340 	call	10001f34 <UsbWrite>

}
10002f0c:	0001883a 	nop
10002f10:	e037883a 	mov	sp,fp
10002f14:	dfc00117 	ldw	ra,4(sp)
10002f18:	df000017 	ldw	fp,0(sp)
10002f1c:	dec00204 	addi	sp,sp,8
10002f20:	f800283a 	ret

10002f24 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002f24:	defffd04 	addi	sp,sp,-12
10002f28:	dfc00215 	stw	ra,8(sp)
10002f2c:	df000115 	stw	fp,4(sp)
10002f30:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002f34:	01005104 	movi	r4,324
10002f38:	0001f8c0 	call	10001f8c <UsbRead>
10002f3c:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002f40:	000b883a 	mov	r5,zero
10002f44:	01005104 	movi	r4,324
10002f48:	0001f340 	call	10001f34 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002f4c:	00000d06 	br	10002f84 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10002f50:	e0bfff0b 	ldhu	r2,-4(fp)
10002f54:	10000526 	beq	r2,zero,10002f6c <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002f58:	e0bfff0b 	ldhu	r2,-4(fp)
10002f5c:	100b883a 	mov	r5,r2
10002f60:	01040074 	movhi	r4,4097
10002f64:	210bca04 	addi	r4,r4,12072
10002f68:	000328c0 	call	1000328c <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002f6c:	01005104 	movi	r4,324
10002f70:	0001f8c0 	call	10001f8c <UsbRead>
10002f74:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002f78:	000b883a 	mov	r5,zero
10002f7c:	01005104 	movi	r4,324
10002f80:	0001f340 	call	10001f34 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002f84:	e0bfff0b 	ldhu	r2,-4(fp)
10002f88:	10840018 	cmpnei	r2,r2,4096
10002f8c:	103ff01e 	bne	r2,zero,10002f50 <__alt_data_end+0xf8002f50>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10002f90:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002f94:	e037883a 	mov	sp,fp
10002f98:	dfc00117 	ldw	ra,4(sp)
10002f9c:	df000017 	ldw	fp,0(sp)
10002fa0:	dec00204 	addi	sp,sp,8
10002fa4:	f800283a 	ret

10002fa8 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002fa8:	defffd04 	addi	sp,sp,-12
10002fac:	dfc00215 	stw	ra,8(sp)
10002fb0:	df000115 	stw	fp,4(sp)
10002fb4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10002fb8:	010000c4 	movi	r4,3
10002fbc:	00003d40 	call	100003d4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10002fc0:	01005104 	movi	r4,324
10002fc4:	0001f8c0 	call	10001f8c <UsbRead>
10002fc8:	10bfffcc 	andi	r2,r2,65535
10002fcc:	10840018 	cmpnei	r2,r2,4096
10002fd0:	1000091e 	bne	r2,zero,10002ff8 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002fd4:	000b883a 	mov	r5,zero
10002fd8:	01005104 	movi	r4,324
10002fdc:	0001f340 	call	10001f34 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002fe0:	0001883a 	nop
10002fe4:	010000c4 	movi	r4,3
10002fe8:	00003d40 	call	100003d4 <IO_read>
10002fec:	10bfffcc 	andi	r2,r2,65535
10002ff0:	1080040c 	andi	r2,r2,16
10002ff4:	103ffb26 	beq	r2,zero,10002fe4 <__alt_data_end+0xf8002fe4>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10002ff8:	01414204 	movi	r5,1288
10002ffc:	01000084 	movi	r4,2
10003000:	00003440 	call	10000344 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003004:	0009883a 	mov	r4,zero
10003008:	00003d40 	call	100003d4 <IO_read>
1000300c:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10003010:	e0bfff0b 	ldhu	r2,-4(fp)
}
10003014:	e037883a 	mov	sp,fp
10003018:	dfc00117 	ldw	ra,4(sp)
1000301c:	df000017 	ldw	fp,0(sp)
10003020:	dec00204 	addi	sp,sp,8
10003024:	f800283a 	ret

10003028 <UsbPrintMem>:


void UsbPrintMem()
{
10003028:	defffc04 	addi	sp,sp,-16
1000302c:	dfc00315 	stw	ra,12(sp)
10003030:	df000215 	stw	fp,8(sp)
10003034:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10003038:	01414004 	movi	r5,1280
1000303c:	01000084 	movi	r4,2
10003040:	00003440 	call	10000344 <IO_write>
	for (i = 0; i <= 200; i += 2)
10003044:	e03ffe15 	stw	zero,-8(fp)
10003048:	00000e06 	br	10003084 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
1000304c:	0009883a 	mov	r4,zero
10003050:	00003d40 	call	100003d4 <IO_read>
10003054:	10bfffcc 	andi	r2,r2,65535
10003058:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
1000305c:	e0bffe17 	ldw	r2,-8(fp)
10003060:	10814004 	addi	r2,r2,1280
10003064:	e1bfff17 	ldw	r6,-4(fp)
10003068:	100b883a 	mov	r5,r2
1000306c:	01040074 	movhi	r4,4097
10003070:	210bd204 	addi	r4,r4,12104
10003074:	000328c0 	call	1000328c <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10003078:	e0bffe17 	ldw	r2,-8(fp)
1000307c:	10800084 	addi	r2,r2,2
10003080:	e0bffe15 	stw	r2,-8(fp)
10003084:	e0bffe17 	ldw	r2,-8(fp)
10003088:	10803250 	cmplti	r2,r2,201
1000308c:	103fef1e 	bne	r2,zero,1000304c <__alt_data_end+0xf800304c>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10003090:	0001883a 	nop
10003094:	e037883a 	mov	sp,fp
10003098:	dfc00117 	ldw	ra,4(sp)
1000309c:	df000017 	ldw	fp,0(sp)
100030a0:	dec00204 	addi	sp,sp,8
100030a4:	f800283a 	ret

100030a8 <__divsi3>:
100030a8:	20001b16 	blt	r4,zero,10003118 <__divsi3+0x70>
100030ac:	000f883a 	mov	r7,zero
100030b0:	28001616 	blt	r5,zero,1000310c <__divsi3+0x64>
100030b4:	200d883a 	mov	r6,r4
100030b8:	29001a2e 	bgeu	r5,r4,10003124 <__divsi3+0x7c>
100030bc:	00800804 	movi	r2,32
100030c0:	00c00044 	movi	r3,1
100030c4:	00000106 	br	100030cc <__divsi3+0x24>
100030c8:	10000d26 	beq	r2,zero,10003100 <__divsi3+0x58>
100030cc:	294b883a 	add	r5,r5,r5
100030d0:	10bfffc4 	addi	r2,r2,-1
100030d4:	18c7883a 	add	r3,r3,r3
100030d8:	293ffb36 	bltu	r5,r4,100030c8 <__alt_data_end+0xf80030c8>
100030dc:	0005883a 	mov	r2,zero
100030e0:	18000726 	beq	r3,zero,10003100 <__divsi3+0x58>
100030e4:	0005883a 	mov	r2,zero
100030e8:	31400236 	bltu	r6,r5,100030f4 <__divsi3+0x4c>
100030ec:	314dc83a 	sub	r6,r6,r5
100030f0:	10c4b03a 	or	r2,r2,r3
100030f4:	1806d07a 	srli	r3,r3,1
100030f8:	280ad07a 	srli	r5,r5,1
100030fc:	183ffa1e 	bne	r3,zero,100030e8 <__alt_data_end+0xf80030e8>
10003100:	38000126 	beq	r7,zero,10003108 <__divsi3+0x60>
10003104:	0085c83a 	sub	r2,zero,r2
10003108:	f800283a 	ret
1000310c:	014bc83a 	sub	r5,zero,r5
10003110:	39c0005c 	xori	r7,r7,1
10003114:	003fe706 	br	100030b4 <__alt_data_end+0xf80030b4>
10003118:	0109c83a 	sub	r4,zero,r4
1000311c:	01c00044 	movi	r7,1
10003120:	003fe306 	br	100030b0 <__alt_data_end+0xf80030b0>
10003124:	00c00044 	movi	r3,1
10003128:	003fee06 	br	100030e4 <__alt_data_end+0xf80030e4>

1000312c <__modsi3>:
1000312c:	20001716 	blt	r4,zero,1000318c <__modsi3+0x60>
10003130:	000f883a 	mov	r7,zero
10003134:	2005883a 	mov	r2,r4
10003138:	28001216 	blt	r5,zero,10003184 <__modsi3+0x58>
1000313c:	2900162e 	bgeu	r5,r4,10003198 <__modsi3+0x6c>
10003140:	01800804 	movi	r6,32
10003144:	00c00044 	movi	r3,1
10003148:	00000106 	br	10003150 <__modsi3+0x24>
1000314c:	30000a26 	beq	r6,zero,10003178 <__modsi3+0x4c>
10003150:	294b883a 	add	r5,r5,r5
10003154:	31bfffc4 	addi	r6,r6,-1
10003158:	18c7883a 	add	r3,r3,r3
1000315c:	293ffb36 	bltu	r5,r4,1000314c <__alt_data_end+0xf800314c>
10003160:	18000526 	beq	r3,zero,10003178 <__modsi3+0x4c>
10003164:	1806d07a 	srli	r3,r3,1
10003168:	11400136 	bltu	r2,r5,10003170 <__modsi3+0x44>
1000316c:	1145c83a 	sub	r2,r2,r5
10003170:	280ad07a 	srli	r5,r5,1
10003174:	183ffb1e 	bne	r3,zero,10003164 <__alt_data_end+0xf8003164>
10003178:	38000126 	beq	r7,zero,10003180 <__modsi3+0x54>
1000317c:	0085c83a 	sub	r2,zero,r2
10003180:	f800283a 	ret
10003184:	014bc83a 	sub	r5,zero,r5
10003188:	003fec06 	br	1000313c <__alt_data_end+0xf800313c>
1000318c:	0109c83a 	sub	r4,zero,r4
10003190:	01c00044 	movi	r7,1
10003194:	003fe706 	br	10003134 <__alt_data_end+0xf8003134>
10003198:	00c00044 	movi	r3,1
1000319c:	003ff106 	br	10003164 <__alt_data_end+0xf8003164>

100031a0 <__udivsi3>:
100031a0:	200d883a 	mov	r6,r4
100031a4:	2900152e 	bgeu	r5,r4,100031fc <__udivsi3+0x5c>
100031a8:	28001416 	blt	r5,zero,100031fc <__udivsi3+0x5c>
100031ac:	00800804 	movi	r2,32
100031b0:	00c00044 	movi	r3,1
100031b4:	00000206 	br	100031c0 <__udivsi3+0x20>
100031b8:	10000e26 	beq	r2,zero,100031f4 <__udivsi3+0x54>
100031bc:	28000516 	blt	r5,zero,100031d4 <__udivsi3+0x34>
100031c0:	294b883a 	add	r5,r5,r5
100031c4:	10bfffc4 	addi	r2,r2,-1
100031c8:	18c7883a 	add	r3,r3,r3
100031cc:	293ffa36 	bltu	r5,r4,100031b8 <__alt_data_end+0xf80031b8>
100031d0:	18000826 	beq	r3,zero,100031f4 <__udivsi3+0x54>
100031d4:	0005883a 	mov	r2,zero
100031d8:	31400236 	bltu	r6,r5,100031e4 <__udivsi3+0x44>
100031dc:	314dc83a 	sub	r6,r6,r5
100031e0:	10c4b03a 	or	r2,r2,r3
100031e4:	1806d07a 	srli	r3,r3,1
100031e8:	280ad07a 	srli	r5,r5,1
100031ec:	183ffa1e 	bne	r3,zero,100031d8 <__alt_data_end+0xf80031d8>
100031f0:	f800283a 	ret
100031f4:	0005883a 	mov	r2,zero
100031f8:	f800283a 	ret
100031fc:	00c00044 	movi	r3,1
10003200:	003ff406 	br	100031d4 <__alt_data_end+0xf80031d4>

10003204 <__umodsi3>:
10003204:	2005883a 	mov	r2,r4
10003208:	2900122e 	bgeu	r5,r4,10003254 <__umodsi3+0x50>
1000320c:	28001116 	blt	r5,zero,10003254 <__umodsi3+0x50>
10003210:	01800804 	movi	r6,32
10003214:	00c00044 	movi	r3,1
10003218:	00000206 	br	10003224 <__umodsi3+0x20>
1000321c:	30000c26 	beq	r6,zero,10003250 <__umodsi3+0x4c>
10003220:	28000516 	blt	r5,zero,10003238 <__umodsi3+0x34>
10003224:	294b883a 	add	r5,r5,r5
10003228:	31bfffc4 	addi	r6,r6,-1
1000322c:	18c7883a 	add	r3,r3,r3
10003230:	293ffa36 	bltu	r5,r4,1000321c <__alt_data_end+0xf800321c>
10003234:	18000626 	beq	r3,zero,10003250 <__umodsi3+0x4c>
10003238:	1806d07a 	srli	r3,r3,1
1000323c:	11400136 	bltu	r2,r5,10003244 <__umodsi3+0x40>
10003240:	1145c83a 	sub	r2,r2,r5
10003244:	280ad07a 	srli	r5,r5,1
10003248:	183ffb1e 	bne	r3,zero,10003238 <__alt_data_end+0xf8003238>
1000324c:	f800283a 	ret
10003250:	f800283a 	ret
10003254:	00c00044 	movi	r3,1
10003258:	003ff706 	br	10003238 <__alt_data_end+0xf8003238>

1000325c <_printf_r>:
1000325c:	defffd04 	addi	sp,sp,-12
10003260:	2805883a 	mov	r2,r5
10003264:	dfc00015 	stw	ra,0(sp)
10003268:	d9800115 	stw	r6,4(sp)
1000326c:	d9c00215 	stw	r7,8(sp)
10003270:	21400217 	ldw	r5,8(r4)
10003274:	d9c00104 	addi	r7,sp,4
10003278:	100d883a 	mov	r6,r2
1000327c:	00034340 	call	10003434 <___vfprintf_internal_r>
10003280:	dfc00017 	ldw	ra,0(sp)
10003284:	dec00304 	addi	sp,sp,12
10003288:	f800283a 	ret

1000328c <printf>:
1000328c:	defffc04 	addi	sp,sp,-16
10003290:	dfc00015 	stw	ra,0(sp)
10003294:	d9400115 	stw	r5,4(sp)
10003298:	d9800215 	stw	r6,8(sp)
1000329c:	d9c00315 	stw	r7,12(sp)
100032a0:	00840074 	movhi	r2,4097
100032a4:	10934c04 	addi	r2,r2,19760
100032a8:	10800017 	ldw	r2,0(r2)
100032ac:	200b883a 	mov	r5,r4
100032b0:	d9800104 	addi	r6,sp,4
100032b4:	11000217 	ldw	r4,8(r2)
100032b8:	00057100 	call	10005710 <__vfprintf_internal>
100032bc:	dfc00017 	ldw	ra,0(sp)
100032c0:	dec00404 	addi	sp,sp,16
100032c4:	f800283a 	ret

100032c8 <_puts_r>:
100032c8:	defff604 	addi	sp,sp,-40
100032cc:	dc000715 	stw	r16,28(sp)
100032d0:	2021883a 	mov	r16,r4
100032d4:	2809883a 	mov	r4,r5
100032d8:	dc400815 	stw	r17,32(sp)
100032dc:	dfc00915 	stw	ra,36(sp)
100032e0:	2823883a 	mov	r17,r5
100032e4:	000339c0 	call	1000339c <strlen>
100032e8:	10c00044 	addi	r3,r2,1
100032ec:	d8800115 	stw	r2,4(sp)
100032f0:	00840074 	movhi	r2,4097
100032f4:	108bd704 	addi	r2,r2,12124
100032f8:	d8800215 	stw	r2,8(sp)
100032fc:	00800044 	movi	r2,1
10003300:	d8800315 	stw	r2,12(sp)
10003304:	00800084 	movi	r2,2
10003308:	dc400015 	stw	r17,0(sp)
1000330c:	d8c00615 	stw	r3,24(sp)
10003310:	dec00415 	stw	sp,16(sp)
10003314:	d8800515 	stw	r2,20(sp)
10003318:	80000226 	beq	r16,zero,10003324 <_puts_r+0x5c>
1000331c:	80800e17 	ldw	r2,56(r16)
10003320:	10001426 	beq	r2,zero,10003374 <_puts_r+0xac>
10003324:	81400217 	ldw	r5,8(r16)
10003328:	2880030b 	ldhu	r2,12(r5)
1000332c:	10c8000c 	andi	r3,r2,8192
10003330:	1800061e 	bne	r3,zero,1000334c <_puts_r+0x84>
10003334:	29001917 	ldw	r4,100(r5)
10003338:	00f7ffc4 	movi	r3,-8193
1000333c:	10880014 	ori	r2,r2,8192
10003340:	20c6703a 	and	r3,r4,r3
10003344:	2880030d 	sth	r2,12(r5)
10003348:	28c01915 	stw	r3,100(r5)
1000334c:	d9800404 	addi	r6,sp,16
10003350:	8009883a 	mov	r4,r16
10003354:	0007c780 	call	10007c78 <__sfvwrite_r>
10003358:	1000091e 	bne	r2,zero,10003380 <_puts_r+0xb8>
1000335c:	00800284 	movi	r2,10
10003360:	dfc00917 	ldw	ra,36(sp)
10003364:	dc400817 	ldw	r17,32(sp)
10003368:	dc000717 	ldw	r16,28(sp)
1000336c:	dec00a04 	addi	sp,sp,40
10003370:	f800283a 	ret
10003374:	8009883a 	mov	r4,r16
10003378:	00077f40 	call	100077f4 <__sinit>
1000337c:	003fe906 	br	10003324 <__alt_data_end+0xf8003324>
10003380:	00bfffc4 	movi	r2,-1
10003384:	003ff606 	br	10003360 <__alt_data_end+0xf8003360>

10003388 <puts>:
10003388:	00840074 	movhi	r2,4097
1000338c:	10934c04 	addi	r2,r2,19760
10003390:	200b883a 	mov	r5,r4
10003394:	11000017 	ldw	r4,0(r2)
10003398:	00032c81 	jmpi	100032c8 <_puts_r>

1000339c <strlen>:
1000339c:	208000cc 	andi	r2,r4,3
100033a0:	10002026 	beq	r2,zero,10003424 <strlen+0x88>
100033a4:	20800007 	ldb	r2,0(r4)
100033a8:	10002026 	beq	r2,zero,1000342c <strlen+0x90>
100033ac:	2005883a 	mov	r2,r4
100033b0:	00000206 	br	100033bc <strlen+0x20>
100033b4:	10c00007 	ldb	r3,0(r2)
100033b8:	18001826 	beq	r3,zero,1000341c <strlen+0x80>
100033bc:	10800044 	addi	r2,r2,1
100033c0:	10c000cc 	andi	r3,r2,3
100033c4:	183ffb1e 	bne	r3,zero,100033b4 <__alt_data_end+0xf80033b4>
100033c8:	10c00017 	ldw	r3,0(r2)
100033cc:	01ffbff4 	movhi	r7,65279
100033d0:	39ffbfc4 	addi	r7,r7,-257
100033d4:	00ca303a 	nor	r5,zero,r3
100033d8:	01a02074 	movhi	r6,32897
100033dc:	19c7883a 	add	r3,r3,r7
100033e0:	31a02004 	addi	r6,r6,-32640
100033e4:	1946703a 	and	r3,r3,r5
100033e8:	1986703a 	and	r3,r3,r6
100033ec:	1800091e 	bne	r3,zero,10003414 <strlen+0x78>
100033f0:	10800104 	addi	r2,r2,4
100033f4:	10c00017 	ldw	r3,0(r2)
100033f8:	19cb883a 	add	r5,r3,r7
100033fc:	00c6303a 	nor	r3,zero,r3
10003400:	28c6703a 	and	r3,r5,r3
10003404:	1986703a 	and	r3,r3,r6
10003408:	183ff926 	beq	r3,zero,100033f0 <__alt_data_end+0xf80033f0>
1000340c:	00000106 	br	10003414 <strlen+0x78>
10003410:	10800044 	addi	r2,r2,1
10003414:	10c00007 	ldb	r3,0(r2)
10003418:	183ffd1e 	bne	r3,zero,10003410 <__alt_data_end+0xf8003410>
1000341c:	1105c83a 	sub	r2,r2,r4
10003420:	f800283a 	ret
10003424:	2005883a 	mov	r2,r4
10003428:	003fe706 	br	100033c8 <__alt_data_end+0xf80033c8>
1000342c:	0005883a 	mov	r2,zero
10003430:	f800283a 	ret

10003434 <___vfprintf_internal_r>:
10003434:	deffb804 	addi	sp,sp,-288
10003438:	dfc04715 	stw	ra,284(sp)
1000343c:	ddc04515 	stw	r23,276(sp)
10003440:	dd404315 	stw	r21,268(sp)
10003444:	d9002d15 	stw	r4,180(sp)
10003448:	282f883a 	mov	r23,r5
1000344c:	302b883a 	mov	r21,r6
10003450:	d9c02e15 	stw	r7,184(sp)
10003454:	df004615 	stw	fp,280(sp)
10003458:	dd804415 	stw	r22,272(sp)
1000345c:	dd004215 	stw	r20,264(sp)
10003460:	dcc04115 	stw	r19,260(sp)
10003464:	dc804015 	stw	r18,256(sp)
10003468:	dc403f15 	stw	r17,252(sp)
1000346c:	dc003e15 	stw	r16,248(sp)
10003470:	00083740 	call	10008374 <_localeconv_r>
10003474:	10800017 	ldw	r2,0(r2)
10003478:	1009883a 	mov	r4,r2
1000347c:	d8803415 	stw	r2,208(sp)
10003480:	000339c0 	call	1000339c <strlen>
10003484:	d8803715 	stw	r2,220(sp)
10003488:	d8802d17 	ldw	r2,180(sp)
1000348c:	10000226 	beq	r2,zero,10003498 <___vfprintf_internal_r+0x64>
10003490:	10800e17 	ldw	r2,56(r2)
10003494:	1000fb26 	beq	r2,zero,10003884 <___vfprintf_internal_r+0x450>
10003498:	b880030b 	ldhu	r2,12(r23)
1000349c:	10c8000c 	andi	r3,r2,8192
100034a0:	1800061e 	bne	r3,zero,100034bc <___vfprintf_internal_r+0x88>
100034a4:	b9001917 	ldw	r4,100(r23)
100034a8:	00f7ffc4 	movi	r3,-8193
100034ac:	10880014 	ori	r2,r2,8192
100034b0:	20c6703a 	and	r3,r4,r3
100034b4:	b880030d 	sth	r2,12(r23)
100034b8:	b8c01915 	stw	r3,100(r23)
100034bc:	10c0020c 	andi	r3,r2,8
100034c0:	1800c326 	beq	r3,zero,100037d0 <___vfprintf_internal_r+0x39c>
100034c4:	b8c00417 	ldw	r3,16(r23)
100034c8:	1800c126 	beq	r3,zero,100037d0 <___vfprintf_internal_r+0x39c>
100034cc:	1080068c 	andi	r2,r2,26
100034d0:	00c00284 	movi	r3,10
100034d4:	10c0c626 	beq	r2,r3,100037f0 <___vfprintf_internal_r+0x3bc>
100034d8:	d8c00404 	addi	r3,sp,16
100034dc:	05040074 	movhi	r20,4097
100034e0:	d9001e04 	addi	r4,sp,120
100034e4:	a50be884 	addi	r20,r20,12194
100034e8:	d8c01e15 	stw	r3,120(sp)
100034ec:	d8002015 	stw	zero,128(sp)
100034f0:	d8001f15 	stw	zero,124(sp)
100034f4:	d8003315 	stw	zero,204(sp)
100034f8:	d8003615 	stw	zero,216(sp)
100034fc:	d8003815 	stw	zero,224(sp)
10003500:	1811883a 	mov	r8,r3
10003504:	d8003915 	stw	zero,228(sp)
10003508:	d8003a15 	stw	zero,232(sp)
1000350c:	d8002f15 	stw	zero,188(sp)
10003510:	d9002815 	stw	r4,160(sp)
10003514:	a8800007 	ldb	r2,0(r21)
10003518:	10028b26 	beq	r2,zero,10003f48 <___vfprintf_internal_r+0xb14>
1000351c:	00c00944 	movi	r3,37
10003520:	a823883a 	mov	r17,r21
10003524:	10c0021e 	bne	r2,r3,10003530 <___vfprintf_internal_r+0xfc>
10003528:	00001406 	br	1000357c <___vfprintf_internal_r+0x148>
1000352c:	10c00326 	beq	r2,r3,1000353c <___vfprintf_internal_r+0x108>
10003530:	8c400044 	addi	r17,r17,1
10003534:	88800007 	ldb	r2,0(r17)
10003538:	103ffc1e 	bne	r2,zero,1000352c <__alt_data_end+0xf800352c>
1000353c:	8d61c83a 	sub	r16,r17,r21
10003540:	80000e26 	beq	r16,zero,1000357c <___vfprintf_internal_r+0x148>
10003544:	d8c02017 	ldw	r3,128(sp)
10003548:	d8801f17 	ldw	r2,124(sp)
1000354c:	45400015 	stw	r21,0(r8)
10003550:	1c07883a 	add	r3,r3,r16
10003554:	10800044 	addi	r2,r2,1
10003558:	d8c02015 	stw	r3,128(sp)
1000355c:	44000115 	stw	r16,4(r8)
10003560:	d8801f15 	stw	r2,124(sp)
10003564:	00c001c4 	movi	r3,7
10003568:	1880a916 	blt	r3,r2,10003810 <___vfprintf_internal_r+0x3dc>
1000356c:	42000204 	addi	r8,r8,8
10003570:	d9402f17 	ldw	r5,188(sp)
10003574:	2c0b883a 	add	r5,r5,r16
10003578:	d9402f15 	stw	r5,188(sp)
1000357c:	88800007 	ldb	r2,0(r17)
10003580:	1000aa26 	beq	r2,zero,1000382c <___vfprintf_internal_r+0x3f8>
10003584:	8d400044 	addi	r21,r17,1
10003588:	8c400047 	ldb	r17,1(r17)
1000358c:	0021883a 	mov	r16,zero
10003590:	00bfffc4 	movi	r2,-1
10003594:	0025883a 	mov	r18,zero
10003598:	dc002905 	stb	r16,164(sp)
1000359c:	d8002785 	stb	zero,158(sp)
100035a0:	d8002b05 	stb	zero,172(sp)
100035a4:	d8802a15 	stw	r2,168(sp)
100035a8:	d8003115 	stw	zero,196(sp)
100035ac:	04c01604 	movi	r19,88
100035b0:	05800244 	movi	r22,9
100035b4:	9021883a 	mov	r16,r18
100035b8:	4039883a 	mov	fp,r8
100035bc:	ad400044 	addi	r21,r21,1
100035c0:	88bff804 	addi	r2,r17,-32
100035c4:	98833236 	bltu	r19,r2,10004290 <___vfprintf_internal_r+0xe5c>
100035c8:	100490ba 	slli	r2,r2,2
100035cc:	00c40034 	movhi	r3,4096
100035d0:	18cd7804 	addi	r3,r3,13792
100035d4:	10c5883a 	add	r2,r2,r3
100035d8:	10800017 	ldw	r2,0(r2)
100035dc:	1000683a 	jmp	r2
100035e0:	10004188 	cmpgei	zero,r2,262
100035e4:	10004290 	cmplti	zero,r2,266
100035e8:	10004290 	cmplti	zero,r2,266
100035ec:	100041a8 	cmpgeui	zero,r2,262
100035f0:	10004290 	cmplti	zero,r2,266
100035f4:	10004290 	cmplti	zero,r2,266
100035f8:	10004290 	cmplti	zero,r2,266
100035fc:	10004290 	cmplti	zero,r2,266
10003600:	10004290 	cmplti	zero,r2,266
10003604:	10004290 	cmplti	zero,r2,266
10003608:	10003890 	cmplti	zero,r2,226
1000360c:	10004098 	cmpnei	zero,r2,258
10003610:	10004290 	cmplti	zero,r2,266
10003614:	10003754 	ori	zero,r2,221
10003618:	100038b4 	orhi	zero,r2,226
1000361c:	10004290 	cmplti	zero,r2,266
10003620:	10003904 	addi	zero,r2,228
10003624:	10003910 	cmplti	zero,r2,228
10003628:	10003910 	cmplti	zero,r2,228
1000362c:	10003910 	cmplti	zero,r2,228
10003630:	10003910 	cmplti	zero,r2,228
10003634:	10003910 	cmplti	zero,r2,228
10003638:	10003910 	cmplti	zero,r2,228
1000363c:	10003910 	cmplti	zero,r2,228
10003640:	10003910 	cmplti	zero,r2,228
10003644:	10003910 	cmplti	zero,r2,228
10003648:	10004290 	cmplti	zero,r2,266
1000364c:	10004290 	cmplti	zero,r2,266
10003650:	10004290 	cmplti	zero,r2,266
10003654:	10004290 	cmplti	zero,r2,266
10003658:	10004290 	cmplti	zero,r2,266
1000365c:	10004290 	cmplti	zero,r2,266
10003660:	10004290 	cmplti	zero,r2,266
10003664:	10004290 	cmplti	zero,r2,266
10003668:	10004290 	cmplti	zero,r2,266
1000366c:	10004290 	cmplti	zero,r2,266
10003670:	1000394c 	andi	zero,r2,229
10003674:	10003a14 	ori	zero,r2,232
10003678:	10004290 	cmplti	zero,r2,266
1000367c:	10003a14 	ori	zero,r2,232
10003680:	10004290 	cmplti	zero,r2,266
10003684:	10004290 	cmplti	zero,r2,266
10003688:	10004290 	cmplti	zero,r2,266
1000368c:	10004290 	cmplti	zero,r2,266
10003690:	10003ac0 	call	110003ac <_gp+0xfe36a4>
10003694:	10004290 	cmplti	zero,r2,266
10003698:	10004290 	cmplti	zero,r2,266
1000369c:	10003acc 	andi	zero,r2,235
100036a0:	10004290 	cmplti	zero,r2,266
100036a4:	10004290 	cmplti	zero,r2,266
100036a8:	10004290 	cmplti	zero,r2,266
100036ac:	10004290 	cmplti	zero,r2,266
100036b0:	10004290 	cmplti	zero,r2,266
100036b4:	10003f50 	cmplti	zero,r2,253
100036b8:	10004290 	cmplti	zero,r2,266
100036bc:	10004290 	cmplti	zero,r2,266
100036c0:	10003fbc 	xorhi	zero,r2,254
100036c4:	10004290 	cmplti	zero,r2,266
100036c8:	10004290 	cmplti	zero,r2,266
100036cc:	10004290 	cmplti	zero,r2,266
100036d0:	10004290 	cmplti	zero,r2,266
100036d4:	10004290 	cmplti	zero,r2,266
100036d8:	10004290 	cmplti	zero,r2,266
100036dc:	10004290 	cmplti	zero,r2,266
100036e0:	10004290 	cmplti	zero,r2,266
100036e4:	10004290 	cmplti	zero,r2,266
100036e8:	10004290 	cmplti	zero,r2,266
100036ec:	10004234 	orhi	zero,r2,264
100036f0:	100041b4 	orhi	zero,r2,262
100036f4:	10003a14 	ori	zero,r2,232
100036f8:	10003a14 	ori	zero,r2,232
100036fc:	10003a14 	ori	zero,r2,232
10003700:	100041d4 	ori	zero,r2,263
10003704:	100041b4 	orhi	zero,r2,262
10003708:	10004290 	cmplti	zero,r2,266
1000370c:	10004290 	cmplti	zero,r2,266
10003710:	100041e0 	cmpeqi	zero,r2,263
10003714:	10004290 	cmplti	zero,r2,266
10003718:	100041f4 	orhi	zero,r2,263
1000371c:	10004078 	rdprs	zero,r2,257
10003720:	10003760 	cmpeqi	zero,r2,221
10003724:	100040b0 	cmpltui	zero,r2,258
10003728:	10004290 	cmplti	zero,r2,266
1000372c:	100040bc 	xorhi	zero,r2,258
10003730:	10004290 	cmplti	zero,r2,266
10003734:	10004120 	cmpeqi	zero,r2,260
10003738:	10004290 	cmplti	zero,r2,266
1000373c:	10004290 	cmplti	zero,r2,266
10003740:	10004140 	call	11000414 <_gp+0xfe370c>
10003744:	d8c03117 	ldw	r3,196(sp)
10003748:	d8802e15 	stw	r2,184(sp)
1000374c:	00c7c83a 	sub	r3,zero,r3
10003750:	d8c03115 	stw	r3,196(sp)
10003754:	84000114 	ori	r16,r16,4
10003758:	ac400007 	ldb	r17,0(r21)
1000375c:	003f9706 	br	100035bc <__alt_data_end+0xf80035bc>
10003760:	00800c04 	movi	r2,48
10003764:	d8802705 	stb	r2,156(sp)
10003768:	00801e04 	movi	r2,120
1000376c:	d8802745 	stb	r2,157(sp)
10003770:	d9002a17 	ldw	r4,168(sp)
10003774:	d8802e17 	ldw	r2,184(sp)
10003778:	d8002785 	stb	zero,158(sp)
1000377c:	e011883a 	mov	r8,fp
10003780:	10c00104 	addi	r3,r2,4
10003784:	14c00017 	ldw	r19,0(r2)
10003788:	002d883a 	mov	r22,zero
1000378c:	80800094 	ori	r2,r16,2
10003790:	2002ca16 	blt	r4,zero,100042bc <___vfprintf_internal_r+0xe88>
10003794:	00bfdfc4 	movi	r2,-129
10003798:	80a4703a 	and	r18,r16,r2
1000379c:	d8c02e15 	stw	r3,184(sp)
100037a0:	94800094 	ori	r18,r18,2
100037a4:	9802b41e 	bne	r19,zero,10004278 <___vfprintf_internal_r+0xe44>
100037a8:	01440074 	movhi	r5,4097
100037ac:	294be104 	addi	r5,r5,12164
100037b0:	d9403915 	stw	r5,228(sp)
100037b4:	04401e04 	movi	r17,120
100037b8:	d8802a17 	ldw	r2,168(sp)
100037bc:	0039883a 	mov	fp,zero
100037c0:	1001fa26 	beq	r2,zero,10003fac <___vfprintf_internal_r+0xb78>
100037c4:	0027883a 	mov	r19,zero
100037c8:	002d883a 	mov	r22,zero
100037cc:	00021906 	br	10004034 <___vfprintf_internal_r+0xc00>
100037d0:	d9002d17 	ldw	r4,180(sp)
100037d4:	b80b883a 	mov	r5,r23
100037d8:	00057e80 	call	100057e8 <__swsetup_r>
100037dc:	1005dc1e 	bne	r2,zero,10004f50 <___vfprintf_internal_r+0x1b1c>
100037e0:	b880030b 	ldhu	r2,12(r23)
100037e4:	00c00284 	movi	r3,10
100037e8:	1080068c 	andi	r2,r2,26
100037ec:	10ff3a1e 	bne	r2,r3,100034d8 <__alt_data_end+0xf80034d8>
100037f0:	b880038f 	ldh	r2,14(r23)
100037f4:	103f3816 	blt	r2,zero,100034d8 <__alt_data_end+0xf80034d8>
100037f8:	d9c02e17 	ldw	r7,184(sp)
100037fc:	d9002d17 	ldw	r4,180(sp)
10003800:	a80d883a 	mov	r6,r21
10003804:	b80b883a 	mov	r5,r23
10003808:	000572c0 	call	1000572c <__sbprintf>
1000380c:	00001106 	br	10003854 <___vfprintf_internal_r+0x420>
10003810:	d9002d17 	ldw	r4,180(sp)
10003814:	d9801e04 	addi	r6,sp,120
10003818:	b80b883a 	mov	r5,r23
1000381c:	000ac140 	call	1000ac14 <__sprint_r>
10003820:	1000081e 	bne	r2,zero,10003844 <___vfprintf_internal_r+0x410>
10003824:	da000404 	addi	r8,sp,16
10003828:	003f5106 	br	10003570 <__alt_data_end+0xf8003570>
1000382c:	d8802017 	ldw	r2,128(sp)
10003830:	10000426 	beq	r2,zero,10003844 <___vfprintf_internal_r+0x410>
10003834:	d9002d17 	ldw	r4,180(sp)
10003838:	d9801e04 	addi	r6,sp,120
1000383c:	b80b883a 	mov	r5,r23
10003840:	000ac140 	call	1000ac14 <__sprint_r>
10003844:	b880030b 	ldhu	r2,12(r23)
10003848:	1080100c 	andi	r2,r2,64
1000384c:	1005c01e 	bne	r2,zero,10004f50 <___vfprintf_internal_r+0x1b1c>
10003850:	d8802f17 	ldw	r2,188(sp)
10003854:	dfc04717 	ldw	ra,284(sp)
10003858:	df004617 	ldw	fp,280(sp)
1000385c:	ddc04517 	ldw	r23,276(sp)
10003860:	dd804417 	ldw	r22,272(sp)
10003864:	dd404317 	ldw	r21,268(sp)
10003868:	dd004217 	ldw	r20,264(sp)
1000386c:	dcc04117 	ldw	r19,260(sp)
10003870:	dc804017 	ldw	r18,256(sp)
10003874:	dc403f17 	ldw	r17,252(sp)
10003878:	dc003e17 	ldw	r16,248(sp)
1000387c:	dec04804 	addi	sp,sp,288
10003880:	f800283a 	ret
10003884:	d9002d17 	ldw	r4,180(sp)
10003888:	00077f40 	call	100077f4 <__sinit>
1000388c:	003f0206 	br	10003498 <__alt_data_end+0xf8003498>
10003890:	d9002e17 	ldw	r4,184(sp)
10003894:	d9402e17 	ldw	r5,184(sp)
10003898:	21000017 	ldw	r4,0(r4)
1000389c:	28800104 	addi	r2,r5,4
100038a0:	d9003115 	stw	r4,196(sp)
100038a4:	203fa716 	blt	r4,zero,10003744 <__alt_data_end+0xf8003744>
100038a8:	d8802e15 	stw	r2,184(sp)
100038ac:	ac400007 	ldb	r17,0(r21)
100038b0:	003f4206 	br	100035bc <__alt_data_end+0xf80035bc>
100038b4:	ac400007 	ldb	r17,0(r21)
100038b8:	01000a84 	movi	r4,42
100038bc:	a8c00044 	addi	r3,r21,1
100038c0:	89075826 	beq	r17,r4,10005624 <___vfprintf_internal_r+0x21f0>
100038c4:	8cbff404 	addi	r18,r17,-48
100038c8:	b486ae36 	bltu	r22,r18,10005384 <___vfprintf_internal_r+0x1f50>
100038cc:	0009883a 	mov	r4,zero
100038d0:	1823883a 	mov	r17,r3
100038d4:	01400284 	movi	r5,10
100038d8:	000d71c0 	call	1000d71c <__mulsi3>
100038dc:	88c00007 	ldb	r3,0(r17)
100038e0:	1489883a 	add	r4,r2,r18
100038e4:	8d400044 	addi	r21,r17,1
100038e8:	1cbff404 	addi	r18,r3,-48
100038ec:	a823883a 	mov	r17,r21
100038f0:	b4bff82e 	bgeu	r22,r18,100038d4 <__alt_data_end+0xf80038d4>
100038f4:	1823883a 	mov	r17,r3
100038f8:	2005f616 	blt	r4,zero,100050d4 <___vfprintf_internal_r+0x1ca0>
100038fc:	d9002a15 	stw	r4,168(sp)
10003900:	003f2f06 	br	100035c0 <__alt_data_end+0xf80035c0>
10003904:	84002014 	ori	r16,r16,128
10003908:	ac400007 	ldb	r17,0(r21)
1000390c:	003f2b06 	br	100035bc <__alt_data_end+0xf80035bc>
10003910:	8cbff404 	addi	r18,r17,-48
10003914:	d8003115 	stw	zero,196(sp)
10003918:	0009883a 	mov	r4,zero
1000391c:	a823883a 	mov	r17,r21
10003920:	01400284 	movi	r5,10
10003924:	000d71c0 	call	1000d71c <__mulsi3>
10003928:	88c00007 	ldb	r3,0(r17)
1000392c:	9089883a 	add	r4,r18,r2
10003930:	ad400044 	addi	r21,r21,1
10003934:	1cbff404 	addi	r18,r3,-48
10003938:	a823883a 	mov	r17,r21
1000393c:	b4bff82e 	bgeu	r22,r18,10003920 <__alt_data_end+0xf8003920>
10003940:	1823883a 	mov	r17,r3
10003944:	d9003115 	stw	r4,196(sp)
10003948:	003f1d06 	br	100035c0 <__alt_data_end+0xf80035c0>
1000394c:	8025883a 	mov	r18,r16
10003950:	dc002903 	ldbu	r16,164(sp)
10003954:	e011883a 	mov	r8,fp
10003958:	84003fcc 	andi	r16,r16,255
1000395c:	8007531e 	bne	r16,zero,100056ac <___vfprintf_internal_r+0x2278>
10003960:	94800414 	ori	r18,r18,16
10003964:	9080080c 	andi	r2,r18,32
10003968:	1003a326 	beq	r2,zero,100047f8 <___vfprintf_internal_r+0x13c4>
1000396c:	d9002e17 	ldw	r4,184(sp)
10003970:	20800117 	ldw	r2,4(r4)
10003974:	24c00017 	ldw	r19,0(r4)
10003978:	21000204 	addi	r4,r4,8
1000397c:	d9002e15 	stw	r4,184(sp)
10003980:	102d883a 	mov	r22,r2
10003984:	10047316 	blt	r2,zero,10004b54 <___vfprintf_internal_r+0x1720>
10003988:	d9002a17 	ldw	r4,168(sp)
1000398c:	df002783 	ldbu	fp,158(sp)
10003990:	2003e416 	blt	r4,zero,10004924 <___vfprintf_internal_r+0x14f0>
10003994:	00ffdfc4 	movi	r3,-129
10003998:	9d84b03a 	or	r2,r19,r22
1000399c:	90e4703a 	and	r18,r18,r3
100039a0:	10018026 	beq	r2,zero,10003fa4 <___vfprintf_internal_r+0xb70>
100039a4:	b003ab26 	beq	r22,zero,10004854 <___vfprintf_internal_r+0x1420>
100039a8:	dc402915 	stw	r17,164(sp)
100039ac:	dc001e04 	addi	r16,sp,120
100039b0:	b023883a 	mov	r17,r22
100039b4:	402d883a 	mov	r22,r8
100039b8:	9809883a 	mov	r4,r19
100039bc:	880b883a 	mov	r5,r17
100039c0:	01800284 	movi	r6,10
100039c4:	000f883a 	mov	r7,zero
100039c8:	000d1580 	call	1000d158 <__umoddi3>
100039cc:	10800c04 	addi	r2,r2,48
100039d0:	843fffc4 	addi	r16,r16,-1
100039d4:	9809883a 	mov	r4,r19
100039d8:	880b883a 	mov	r5,r17
100039dc:	80800005 	stb	r2,0(r16)
100039e0:	01800284 	movi	r6,10
100039e4:	000f883a 	mov	r7,zero
100039e8:	000cb5c0 	call	1000cb5c <__udivdi3>
100039ec:	1027883a 	mov	r19,r2
100039f0:	10c4b03a 	or	r2,r2,r3
100039f4:	1823883a 	mov	r17,r3
100039f8:	103fef1e 	bne	r2,zero,100039b8 <__alt_data_end+0xf80039b8>
100039fc:	d8c02817 	ldw	r3,160(sp)
10003a00:	dc402917 	ldw	r17,164(sp)
10003a04:	b011883a 	mov	r8,r22
10003a08:	1c07c83a 	sub	r3,r3,r16
10003a0c:	d8c02b15 	stw	r3,172(sp)
10003a10:	00005f06 	br	10003b90 <___vfprintf_internal_r+0x75c>
10003a14:	8025883a 	mov	r18,r16
10003a18:	dc002903 	ldbu	r16,164(sp)
10003a1c:	e011883a 	mov	r8,fp
10003a20:	84003fcc 	andi	r16,r16,255
10003a24:	80071e1e 	bne	r16,zero,100056a0 <___vfprintf_internal_r+0x226c>
10003a28:	9080020c 	andi	r2,r18,8
10003a2c:	1004af26 	beq	r2,zero,10004cec <___vfprintf_internal_r+0x18b8>
10003a30:	d9002e17 	ldw	r4,184(sp)
10003a34:	d9402e17 	ldw	r5,184(sp)
10003a38:	d8802e17 	ldw	r2,184(sp)
10003a3c:	21000017 	ldw	r4,0(r4)
10003a40:	29400117 	ldw	r5,4(r5)
10003a44:	10800204 	addi	r2,r2,8
10003a48:	d9003615 	stw	r4,216(sp)
10003a4c:	d9403815 	stw	r5,224(sp)
10003a50:	d8802e15 	stw	r2,184(sp)
10003a54:	d9003617 	ldw	r4,216(sp)
10003a58:	d9403817 	ldw	r5,224(sp)
10003a5c:	da003d15 	stw	r8,244(sp)
10003a60:	04000044 	movi	r16,1
10003a64:	000a8380 	call	1000a838 <__fpclassifyd>
10003a68:	da003d17 	ldw	r8,244(sp)
10003a6c:	1404441e 	bne	r2,r16,10004b80 <___vfprintf_internal_r+0x174c>
10003a70:	d9003617 	ldw	r4,216(sp)
10003a74:	d9403817 	ldw	r5,224(sp)
10003a78:	000d883a 	mov	r6,zero
10003a7c:	000f883a 	mov	r7,zero
10003a80:	000eb240 	call	1000eb24 <__ledf2>
10003a84:	da003d17 	ldw	r8,244(sp)
10003a88:	1005e316 	blt	r2,zero,10005218 <___vfprintf_internal_r+0x1de4>
10003a8c:	df002783 	ldbu	fp,158(sp)
10003a90:	008011c4 	movi	r2,71
10003a94:	1445580e 	bge	r2,r17,10004ff8 <___vfprintf_internal_r+0x1bc4>
10003a98:	04040074 	movhi	r16,4097
10003a9c:	840bd904 	addi	r16,r16,12132
10003aa0:	00c000c4 	movi	r3,3
10003aa4:	00bfdfc4 	movi	r2,-129
10003aa8:	d8c02915 	stw	r3,164(sp)
10003aac:	90a4703a 	and	r18,r18,r2
10003ab0:	d8c02b15 	stw	r3,172(sp)
10003ab4:	d8002a15 	stw	zero,168(sp)
10003ab8:	d8003215 	stw	zero,200(sp)
10003abc:	00003a06 	br	10003ba8 <___vfprintf_internal_r+0x774>
10003ac0:	84000214 	ori	r16,r16,8
10003ac4:	ac400007 	ldb	r17,0(r21)
10003ac8:	003ebc06 	br	100035bc <__alt_data_end+0xf80035bc>
10003acc:	8025883a 	mov	r18,r16
10003ad0:	dc002903 	ldbu	r16,164(sp)
10003ad4:	e011883a 	mov	r8,fp
10003ad8:	84003fcc 	andi	r16,r16,255
10003adc:	8007001e 	bne	r16,zero,100056e0 <___vfprintf_internal_r+0x22ac>
10003ae0:	94800414 	ori	r18,r18,16
10003ae4:	9080080c 	andi	r2,r18,32
10003ae8:	1002fa26 	beq	r2,zero,100046d4 <___vfprintf_internal_r+0x12a0>
10003aec:	d9002e17 	ldw	r4,184(sp)
10003af0:	d9402a17 	ldw	r5,168(sp)
10003af4:	d8002785 	stb	zero,158(sp)
10003af8:	20800204 	addi	r2,r4,8
10003afc:	24c00017 	ldw	r19,0(r4)
10003b00:	25800117 	ldw	r22,4(r4)
10003b04:	2804b116 	blt	r5,zero,10004dcc <___vfprintf_internal_r+0x1998>
10003b08:	013fdfc4 	movi	r4,-129
10003b0c:	9d86b03a 	or	r3,r19,r22
10003b10:	d8802e15 	stw	r2,184(sp)
10003b14:	9124703a 	and	r18,r18,r4
10003b18:	1802fb1e 	bne	r3,zero,10004708 <___vfprintf_internal_r+0x12d4>
10003b1c:	d8c02a17 	ldw	r3,168(sp)
10003b20:	0039883a 	mov	fp,zero
10003b24:	1805e526 	beq	r3,zero,100052bc <___vfprintf_internal_r+0x1e88>
10003b28:	0027883a 	mov	r19,zero
10003b2c:	002d883a 	mov	r22,zero
10003b30:	dc001e04 	addi	r16,sp,120
10003b34:	9806d0fa 	srli	r3,r19,3
10003b38:	b008977a 	slli	r4,r22,29
10003b3c:	b02cd0fa 	srli	r22,r22,3
10003b40:	9cc001cc 	andi	r19,r19,7
10003b44:	98800c04 	addi	r2,r19,48
10003b48:	843fffc4 	addi	r16,r16,-1
10003b4c:	20e6b03a 	or	r19,r4,r3
10003b50:	80800005 	stb	r2,0(r16)
10003b54:	9d86b03a 	or	r3,r19,r22
10003b58:	183ff61e 	bne	r3,zero,10003b34 <__alt_data_end+0xf8003b34>
10003b5c:	90c0004c 	andi	r3,r18,1
10003b60:	18014126 	beq	r3,zero,10004068 <___vfprintf_internal_r+0xc34>
10003b64:	10803fcc 	andi	r2,r2,255
10003b68:	1080201c 	xori	r2,r2,128
10003b6c:	10bfe004 	addi	r2,r2,-128
10003b70:	00c00c04 	movi	r3,48
10003b74:	10c13c26 	beq	r2,r3,10004068 <___vfprintf_internal_r+0xc34>
10003b78:	80ffffc5 	stb	r3,-1(r16)
10003b7c:	d8c02817 	ldw	r3,160(sp)
10003b80:	80bfffc4 	addi	r2,r16,-1
10003b84:	1021883a 	mov	r16,r2
10003b88:	1887c83a 	sub	r3,r3,r2
10003b8c:	d8c02b15 	stw	r3,172(sp)
10003b90:	d8802b17 	ldw	r2,172(sp)
10003b94:	d9002a17 	ldw	r4,168(sp)
10003b98:	1100010e 	bge	r2,r4,10003ba0 <___vfprintf_internal_r+0x76c>
10003b9c:	2005883a 	mov	r2,r4
10003ba0:	d8802915 	stw	r2,164(sp)
10003ba4:	d8003215 	stw	zero,200(sp)
10003ba8:	e7003fcc 	andi	fp,fp,255
10003bac:	e700201c 	xori	fp,fp,128
10003bb0:	e73fe004 	addi	fp,fp,-128
10003bb4:	e0000326 	beq	fp,zero,10003bc4 <___vfprintf_internal_r+0x790>
10003bb8:	d8c02917 	ldw	r3,164(sp)
10003bbc:	18c00044 	addi	r3,r3,1
10003bc0:	d8c02915 	stw	r3,164(sp)
10003bc4:	90c0008c 	andi	r3,r18,2
10003bc8:	d8c02c15 	stw	r3,176(sp)
10003bcc:	18000326 	beq	r3,zero,10003bdc <___vfprintf_internal_r+0x7a8>
10003bd0:	d8c02917 	ldw	r3,164(sp)
10003bd4:	18c00084 	addi	r3,r3,2
10003bd8:	d8c02915 	stw	r3,164(sp)
10003bdc:	90c0210c 	andi	r3,r18,132
10003be0:	d8c03015 	stw	r3,192(sp)
10003be4:	1801c51e 	bne	r3,zero,100042fc <___vfprintf_internal_r+0xec8>
10003be8:	d9003117 	ldw	r4,196(sp)
10003bec:	d8c02917 	ldw	r3,164(sp)
10003bf0:	20e7c83a 	sub	r19,r4,r3
10003bf4:	04c1c10e 	bge	zero,r19,100042fc <___vfprintf_internal_r+0xec8>
10003bf8:	02400404 	movi	r9,16
10003bfc:	d8c02017 	ldw	r3,128(sp)
10003c00:	d8801f17 	ldw	r2,124(sp)
10003c04:	4cc52f0e 	bge	r9,r19,100050c4 <___vfprintf_internal_r+0x1c90>
10003c08:	01440074 	movhi	r5,4097
10003c0c:	294bec84 	addi	r5,r5,12210
10003c10:	dc403b15 	stw	r17,236(sp)
10003c14:	d9403515 	stw	r5,212(sp)
10003c18:	9823883a 	mov	r17,r19
10003c1c:	482d883a 	mov	r22,r9
10003c20:	9027883a 	mov	r19,r18
10003c24:	070001c4 	movi	fp,7
10003c28:	8025883a 	mov	r18,r16
10003c2c:	dc002d17 	ldw	r16,180(sp)
10003c30:	00000306 	br	10003c40 <___vfprintf_internal_r+0x80c>
10003c34:	8c7ffc04 	addi	r17,r17,-16
10003c38:	42000204 	addi	r8,r8,8
10003c3c:	b440130e 	bge	r22,r17,10003c8c <___vfprintf_internal_r+0x858>
10003c40:	01040074 	movhi	r4,4097
10003c44:	18c00404 	addi	r3,r3,16
10003c48:	10800044 	addi	r2,r2,1
10003c4c:	210bec84 	addi	r4,r4,12210
10003c50:	41000015 	stw	r4,0(r8)
10003c54:	45800115 	stw	r22,4(r8)
10003c58:	d8c02015 	stw	r3,128(sp)
10003c5c:	d8801f15 	stw	r2,124(sp)
10003c60:	e0bff40e 	bge	fp,r2,10003c34 <__alt_data_end+0xf8003c34>
10003c64:	d9801e04 	addi	r6,sp,120
10003c68:	b80b883a 	mov	r5,r23
10003c6c:	8009883a 	mov	r4,r16
10003c70:	000ac140 	call	1000ac14 <__sprint_r>
10003c74:	103ef31e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10003c78:	8c7ffc04 	addi	r17,r17,-16
10003c7c:	d8c02017 	ldw	r3,128(sp)
10003c80:	d8801f17 	ldw	r2,124(sp)
10003c84:	da000404 	addi	r8,sp,16
10003c88:	b47fed16 	blt	r22,r17,10003c40 <__alt_data_end+0xf8003c40>
10003c8c:	9021883a 	mov	r16,r18
10003c90:	9825883a 	mov	r18,r19
10003c94:	8827883a 	mov	r19,r17
10003c98:	dc403b17 	ldw	r17,236(sp)
10003c9c:	d9403517 	ldw	r5,212(sp)
10003ca0:	98c7883a 	add	r3,r19,r3
10003ca4:	10800044 	addi	r2,r2,1
10003ca8:	41400015 	stw	r5,0(r8)
10003cac:	44c00115 	stw	r19,4(r8)
10003cb0:	d8c02015 	stw	r3,128(sp)
10003cb4:	d8801f15 	stw	r2,124(sp)
10003cb8:	010001c4 	movi	r4,7
10003cbc:	2082c516 	blt	r4,r2,100047d4 <___vfprintf_internal_r+0x13a0>
10003cc0:	df002787 	ldb	fp,158(sp)
10003cc4:	42000204 	addi	r8,r8,8
10003cc8:	e0000c26 	beq	fp,zero,10003cfc <___vfprintf_internal_r+0x8c8>
10003ccc:	d8801f17 	ldw	r2,124(sp)
10003cd0:	d9002784 	addi	r4,sp,158
10003cd4:	18c00044 	addi	r3,r3,1
10003cd8:	10800044 	addi	r2,r2,1
10003cdc:	41000015 	stw	r4,0(r8)
10003ce0:	01000044 	movi	r4,1
10003ce4:	41000115 	stw	r4,4(r8)
10003ce8:	d8c02015 	stw	r3,128(sp)
10003cec:	d8801f15 	stw	r2,124(sp)
10003cf0:	010001c4 	movi	r4,7
10003cf4:	20825e16 	blt	r4,r2,10004670 <___vfprintf_internal_r+0x123c>
10003cf8:	42000204 	addi	r8,r8,8
10003cfc:	d8802c17 	ldw	r2,176(sp)
10003d00:	10000c26 	beq	r2,zero,10003d34 <___vfprintf_internal_r+0x900>
10003d04:	d8801f17 	ldw	r2,124(sp)
10003d08:	d9002704 	addi	r4,sp,156
10003d0c:	18c00084 	addi	r3,r3,2
10003d10:	10800044 	addi	r2,r2,1
10003d14:	41000015 	stw	r4,0(r8)
10003d18:	01000084 	movi	r4,2
10003d1c:	41000115 	stw	r4,4(r8)
10003d20:	d8c02015 	stw	r3,128(sp)
10003d24:	d8801f15 	stw	r2,124(sp)
10003d28:	010001c4 	movi	r4,7
10003d2c:	20825816 	blt	r4,r2,10004690 <___vfprintf_internal_r+0x125c>
10003d30:	42000204 	addi	r8,r8,8
10003d34:	d9003017 	ldw	r4,192(sp)
10003d38:	00802004 	movi	r2,128
10003d3c:	2081bb26 	beq	r4,r2,1000442c <___vfprintf_internal_r+0xff8>
10003d40:	d9402a17 	ldw	r5,168(sp)
10003d44:	d8802b17 	ldw	r2,172(sp)
10003d48:	28adc83a 	sub	r22,r5,r2
10003d4c:	0580310e 	bge	zero,r22,10003e14 <___vfprintf_internal_r+0x9e0>
10003d50:	07000404 	movi	fp,16
10003d54:	d8801f17 	ldw	r2,124(sp)
10003d58:	e584360e 	bge	fp,r22,10004e34 <___vfprintf_internal_r+0x1a00>
10003d5c:	01440074 	movhi	r5,4097
10003d60:	294be884 	addi	r5,r5,12194
10003d64:	dc402a15 	stw	r17,168(sp)
10003d68:	d9402c15 	stw	r5,176(sp)
10003d6c:	b023883a 	mov	r17,r22
10003d70:	04c001c4 	movi	r19,7
10003d74:	a82d883a 	mov	r22,r21
10003d78:	902b883a 	mov	r21,r18
10003d7c:	8025883a 	mov	r18,r16
10003d80:	dc002d17 	ldw	r16,180(sp)
10003d84:	00000306 	br	10003d94 <___vfprintf_internal_r+0x960>
10003d88:	8c7ffc04 	addi	r17,r17,-16
10003d8c:	42000204 	addi	r8,r8,8
10003d90:	e440110e 	bge	fp,r17,10003dd8 <___vfprintf_internal_r+0x9a4>
10003d94:	18c00404 	addi	r3,r3,16
10003d98:	10800044 	addi	r2,r2,1
10003d9c:	45000015 	stw	r20,0(r8)
10003da0:	47000115 	stw	fp,4(r8)
10003da4:	d8c02015 	stw	r3,128(sp)
10003da8:	d8801f15 	stw	r2,124(sp)
10003dac:	98bff60e 	bge	r19,r2,10003d88 <__alt_data_end+0xf8003d88>
10003db0:	d9801e04 	addi	r6,sp,120
10003db4:	b80b883a 	mov	r5,r23
10003db8:	8009883a 	mov	r4,r16
10003dbc:	000ac140 	call	1000ac14 <__sprint_r>
10003dc0:	103ea01e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10003dc4:	8c7ffc04 	addi	r17,r17,-16
10003dc8:	d8c02017 	ldw	r3,128(sp)
10003dcc:	d8801f17 	ldw	r2,124(sp)
10003dd0:	da000404 	addi	r8,sp,16
10003dd4:	e47fef16 	blt	fp,r17,10003d94 <__alt_data_end+0xf8003d94>
10003dd8:	9021883a 	mov	r16,r18
10003ddc:	a825883a 	mov	r18,r21
10003de0:	b02b883a 	mov	r21,r22
10003de4:	882d883a 	mov	r22,r17
10003de8:	dc402a17 	ldw	r17,168(sp)
10003dec:	d9002c17 	ldw	r4,176(sp)
10003df0:	1d87883a 	add	r3,r3,r22
10003df4:	10800044 	addi	r2,r2,1
10003df8:	41000015 	stw	r4,0(r8)
10003dfc:	45800115 	stw	r22,4(r8)
10003e00:	d8c02015 	stw	r3,128(sp)
10003e04:	d8801f15 	stw	r2,124(sp)
10003e08:	010001c4 	movi	r4,7
10003e0c:	20821016 	blt	r4,r2,10004650 <___vfprintf_internal_r+0x121c>
10003e10:	42000204 	addi	r8,r8,8
10003e14:	9080400c 	andi	r2,r18,256
10003e18:	10013a1e 	bne	r2,zero,10004304 <___vfprintf_internal_r+0xed0>
10003e1c:	d9402b17 	ldw	r5,172(sp)
10003e20:	d8801f17 	ldw	r2,124(sp)
10003e24:	44000015 	stw	r16,0(r8)
10003e28:	1947883a 	add	r3,r3,r5
10003e2c:	10800044 	addi	r2,r2,1
10003e30:	41400115 	stw	r5,4(r8)
10003e34:	d8c02015 	stw	r3,128(sp)
10003e38:	d8801f15 	stw	r2,124(sp)
10003e3c:	010001c4 	movi	r4,7
10003e40:	2081f516 	blt	r4,r2,10004618 <___vfprintf_internal_r+0x11e4>
10003e44:	42000204 	addi	r8,r8,8
10003e48:	9480010c 	andi	r18,r18,4
10003e4c:	90003226 	beq	r18,zero,10003f18 <___vfprintf_internal_r+0xae4>
10003e50:	d9403117 	ldw	r5,196(sp)
10003e54:	d8802917 	ldw	r2,164(sp)
10003e58:	28a1c83a 	sub	r16,r5,r2
10003e5c:	04002e0e 	bge	zero,r16,10003f18 <___vfprintf_internal_r+0xae4>
10003e60:	04400404 	movi	r17,16
10003e64:	d8801f17 	ldw	r2,124(sp)
10003e68:	8c04c40e 	bge	r17,r16,1000517c <___vfprintf_internal_r+0x1d48>
10003e6c:	01440074 	movhi	r5,4097
10003e70:	294bec84 	addi	r5,r5,12210
10003e74:	d9403515 	stw	r5,212(sp)
10003e78:	048001c4 	movi	r18,7
10003e7c:	dcc02d17 	ldw	r19,180(sp)
10003e80:	00000306 	br	10003e90 <___vfprintf_internal_r+0xa5c>
10003e84:	843ffc04 	addi	r16,r16,-16
10003e88:	42000204 	addi	r8,r8,8
10003e8c:	8c00130e 	bge	r17,r16,10003edc <___vfprintf_internal_r+0xaa8>
10003e90:	01040074 	movhi	r4,4097
10003e94:	18c00404 	addi	r3,r3,16
10003e98:	10800044 	addi	r2,r2,1
10003e9c:	210bec84 	addi	r4,r4,12210
10003ea0:	41000015 	stw	r4,0(r8)
10003ea4:	44400115 	stw	r17,4(r8)
10003ea8:	d8c02015 	stw	r3,128(sp)
10003eac:	d8801f15 	stw	r2,124(sp)
10003eb0:	90bff40e 	bge	r18,r2,10003e84 <__alt_data_end+0xf8003e84>
10003eb4:	d9801e04 	addi	r6,sp,120
10003eb8:	b80b883a 	mov	r5,r23
10003ebc:	9809883a 	mov	r4,r19
10003ec0:	000ac140 	call	1000ac14 <__sprint_r>
10003ec4:	103e5f1e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10003ec8:	843ffc04 	addi	r16,r16,-16
10003ecc:	d8c02017 	ldw	r3,128(sp)
10003ed0:	d8801f17 	ldw	r2,124(sp)
10003ed4:	da000404 	addi	r8,sp,16
10003ed8:	8c3fed16 	blt	r17,r16,10003e90 <__alt_data_end+0xf8003e90>
10003edc:	d9403517 	ldw	r5,212(sp)
10003ee0:	1c07883a 	add	r3,r3,r16
10003ee4:	10800044 	addi	r2,r2,1
10003ee8:	41400015 	stw	r5,0(r8)
10003eec:	44000115 	stw	r16,4(r8)
10003ef0:	d8c02015 	stw	r3,128(sp)
10003ef4:	d8801f15 	stw	r2,124(sp)
10003ef8:	010001c4 	movi	r4,7
10003efc:	2080060e 	bge	r4,r2,10003f18 <___vfprintf_internal_r+0xae4>
10003f00:	d9002d17 	ldw	r4,180(sp)
10003f04:	d9801e04 	addi	r6,sp,120
10003f08:	b80b883a 	mov	r5,r23
10003f0c:	000ac140 	call	1000ac14 <__sprint_r>
10003f10:	103e4c1e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10003f14:	d8c02017 	ldw	r3,128(sp)
10003f18:	d8803117 	ldw	r2,196(sp)
10003f1c:	d9002917 	ldw	r4,164(sp)
10003f20:	1100010e 	bge	r2,r4,10003f28 <___vfprintf_internal_r+0xaf4>
10003f24:	2005883a 	mov	r2,r4
10003f28:	d9402f17 	ldw	r5,188(sp)
10003f2c:	288b883a 	add	r5,r5,r2
10003f30:	d9402f15 	stw	r5,188(sp)
10003f34:	1801c01e 	bne	r3,zero,10004638 <___vfprintf_internal_r+0x1204>
10003f38:	a8800007 	ldb	r2,0(r21)
10003f3c:	d8001f15 	stw	zero,124(sp)
10003f40:	da000404 	addi	r8,sp,16
10003f44:	103d751e 	bne	r2,zero,1000351c <__alt_data_end+0xf800351c>
10003f48:	a823883a 	mov	r17,r21
10003f4c:	003d8b06 	br	1000357c <__alt_data_end+0xf800357c>
10003f50:	8025883a 	mov	r18,r16
10003f54:	dc002903 	ldbu	r16,164(sp)
10003f58:	e011883a 	mov	r8,fp
10003f5c:	84003fcc 	andi	r16,r16,255
10003f60:	8005e51e 	bne	r16,zero,100056f8 <___vfprintf_internal_r+0x22c4>
10003f64:	94800414 	ori	r18,r18,16
10003f68:	9080080c 	andi	r2,r18,32
10003f6c:	10022b26 	beq	r2,zero,1000481c <___vfprintf_internal_r+0x13e8>
10003f70:	d9002e17 	ldw	r4,184(sp)
10003f74:	d9402a17 	ldw	r5,168(sp)
10003f78:	d8002785 	stb	zero,158(sp)
10003f7c:	20c00204 	addi	r3,r4,8
10003f80:	24c00017 	ldw	r19,0(r4)
10003f84:	25800117 	ldw	r22,4(r4)
10003f88:	28042e16 	blt	r5,zero,10005044 <___vfprintf_internal_r+0x1c10>
10003f8c:	013fdfc4 	movi	r4,-129
10003f90:	9d84b03a 	or	r2,r19,r22
10003f94:	d8c02e15 	stw	r3,184(sp)
10003f98:	9124703a 	and	r18,r18,r4
10003f9c:	0039883a 	mov	fp,zero
10003fa0:	103e801e 	bne	r2,zero,100039a4 <__alt_data_end+0xf80039a4>
10003fa4:	d9002a17 	ldw	r4,168(sp)
10003fa8:	2002e01e 	bne	r4,zero,10004b2c <___vfprintf_internal_r+0x16f8>
10003fac:	d8002a15 	stw	zero,168(sp)
10003fb0:	d8002b15 	stw	zero,172(sp)
10003fb4:	dc001e04 	addi	r16,sp,120
10003fb8:	003ef506 	br	10003b90 <__alt_data_end+0xf8003b90>
10003fbc:	8025883a 	mov	r18,r16
10003fc0:	dc002903 	ldbu	r16,164(sp)
10003fc4:	e011883a 	mov	r8,fp
10003fc8:	84003fcc 	andi	r16,r16,255
10003fcc:	8005ba1e 	bne	r16,zero,100056b8 <___vfprintf_internal_r+0x2284>
10003fd0:	01040074 	movhi	r4,4097
10003fd4:	210bdc04 	addi	r4,r4,12144
10003fd8:	d9003915 	stw	r4,228(sp)
10003fdc:	9080080c 	andi	r2,r18,32
10003fe0:	10006126 	beq	r2,zero,10004168 <___vfprintf_internal_r+0xd34>
10003fe4:	d9402e17 	ldw	r5,184(sp)
10003fe8:	2cc00017 	ldw	r19,0(r5)
10003fec:	2d800117 	ldw	r22,4(r5)
10003ff0:	29400204 	addi	r5,r5,8
10003ff4:	d9402e15 	stw	r5,184(sp)
10003ff8:	9080004c 	andi	r2,r18,1
10003ffc:	1001ac26 	beq	r2,zero,100046b0 <___vfprintf_internal_r+0x127c>
10004000:	9d84b03a 	or	r2,r19,r22
10004004:	10038526 	beq	r2,zero,10004e1c <___vfprintf_internal_r+0x19e8>
10004008:	d8c02a17 	ldw	r3,168(sp)
1000400c:	00800c04 	movi	r2,48
10004010:	d8802705 	stb	r2,156(sp)
10004014:	dc402745 	stb	r17,157(sp)
10004018:	d8002785 	stb	zero,158(sp)
1000401c:	90800094 	ori	r2,r18,2
10004020:	18047916 	blt	r3,zero,10005208 <___vfprintf_internal_r+0x1dd4>
10004024:	00bfdfc4 	movi	r2,-129
10004028:	90a4703a 	and	r18,r18,r2
1000402c:	94800094 	ori	r18,r18,2
10004030:	0039883a 	mov	fp,zero
10004034:	d9003917 	ldw	r4,228(sp)
10004038:	dc001e04 	addi	r16,sp,120
1000403c:	988003cc 	andi	r2,r19,15
10004040:	b006973a 	slli	r3,r22,28
10004044:	2085883a 	add	r2,r4,r2
10004048:	9826d13a 	srli	r19,r19,4
1000404c:	10800003 	ldbu	r2,0(r2)
10004050:	b02cd13a 	srli	r22,r22,4
10004054:	843fffc4 	addi	r16,r16,-1
10004058:	1ce6b03a 	or	r19,r3,r19
1000405c:	80800005 	stb	r2,0(r16)
10004060:	9d84b03a 	or	r2,r19,r22
10004064:	103ff51e 	bne	r2,zero,1000403c <__alt_data_end+0xf800403c>
10004068:	d8c02817 	ldw	r3,160(sp)
1000406c:	1c07c83a 	sub	r3,r3,r16
10004070:	d8c02b15 	stw	r3,172(sp)
10004074:	003ec606 	br	10003b90 <__alt_data_end+0xf8003b90>
10004078:	8025883a 	mov	r18,r16
1000407c:	dc002903 	ldbu	r16,164(sp)
10004080:	e011883a 	mov	r8,fp
10004084:	84003fcc 	andi	r16,r16,255
10004088:	803e9626 	beq	r16,zero,10003ae4 <__alt_data_end+0xf8003ae4>
1000408c:	d8c02b03 	ldbu	r3,172(sp)
10004090:	d8c02785 	stb	r3,158(sp)
10004094:	003e9306 	br	10003ae4 <__alt_data_end+0xf8003ae4>
10004098:	00c00044 	movi	r3,1
1000409c:	d8c02905 	stb	r3,164(sp)
100040a0:	00c00ac4 	movi	r3,43
100040a4:	d8c02b05 	stb	r3,172(sp)
100040a8:	ac400007 	ldb	r17,0(r21)
100040ac:	003d4306 	br	100035bc <__alt_data_end+0xf80035bc>
100040b0:	84000814 	ori	r16,r16,32
100040b4:	ac400007 	ldb	r17,0(r21)
100040b8:	003d4006 	br	100035bc <__alt_data_end+0xf80035bc>
100040bc:	d8802e17 	ldw	r2,184(sp)
100040c0:	8025883a 	mov	r18,r16
100040c4:	d8002785 	stb	zero,158(sp)
100040c8:	14000017 	ldw	r16,0(r2)
100040cc:	e011883a 	mov	r8,fp
100040d0:	14c00104 	addi	r19,r2,4
100040d4:	80042d26 	beq	r16,zero,1000518c <___vfprintf_internal_r+0x1d58>
100040d8:	d8c02a17 	ldw	r3,168(sp)
100040dc:	1803e416 	blt	r3,zero,10005070 <___vfprintf_internal_r+0x1c3c>
100040e0:	180d883a 	mov	r6,r3
100040e4:	000b883a 	mov	r5,zero
100040e8:	8009883a 	mov	r4,r16
100040ec:	df003d15 	stw	fp,244(sp)
100040f0:	0008d6c0 	call	10008d6c <memchr>
100040f4:	da003d17 	ldw	r8,244(sp)
100040f8:	10046826 	beq	r2,zero,1000529c <___vfprintf_internal_r+0x1e68>
100040fc:	1405c83a 	sub	r2,r2,r16
10004100:	d8802b15 	stw	r2,172(sp)
10004104:	1003e016 	blt	r2,zero,10005088 <___vfprintf_internal_r+0x1c54>
10004108:	df002783 	ldbu	fp,158(sp)
1000410c:	d8802915 	stw	r2,164(sp)
10004110:	dcc02e15 	stw	r19,184(sp)
10004114:	d8002a15 	stw	zero,168(sp)
10004118:	d8003215 	stw	zero,200(sp)
1000411c:	003ea206 	br	10003ba8 <__alt_data_end+0xf8003ba8>
10004120:	8025883a 	mov	r18,r16
10004124:	dc002903 	ldbu	r16,164(sp)
10004128:	e011883a 	mov	r8,fp
1000412c:	84003fcc 	andi	r16,r16,255
10004130:	803f8d26 	beq	r16,zero,10003f68 <__alt_data_end+0xf8003f68>
10004134:	d8c02b03 	ldbu	r3,172(sp)
10004138:	d8c02785 	stb	r3,158(sp)
1000413c:	003f8a06 	br	10003f68 <__alt_data_end+0xf8003f68>
10004140:	8025883a 	mov	r18,r16
10004144:	dc002903 	ldbu	r16,164(sp)
10004148:	e011883a 	mov	r8,fp
1000414c:	84003fcc 	andi	r16,r16,255
10004150:	8005661e 	bne	r16,zero,100056ec <___vfprintf_internal_r+0x22b8>
10004154:	01040074 	movhi	r4,4097
10004158:	210be104 	addi	r4,r4,12164
1000415c:	d9003915 	stw	r4,228(sp)
10004160:	9080080c 	andi	r2,r18,32
10004164:	103f9f1e 	bne	r2,zero,10003fe4 <__alt_data_end+0xf8003fe4>
10004168:	9080040c 	andi	r2,r18,16
1000416c:	1002eb26 	beq	r2,zero,10004d1c <___vfprintf_internal_r+0x18e8>
10004170:	d8802e17 	ldw	r2,184(sp)
10004174:	002d883a 	mov	r22,zero
10004178:	14c00017 	ldw	r19,0(r2)
1000417c:	10800104 	addi	r2,r2,4
10004180:	d8802e15 	stw	r2,184(sp)
10004184:	003f9c06 	br	10003ff8 <__alt_data_end+0xf8003ff8>
10004188:	d8802b07 	ldb	r2,172(sp)
1000418c:	1002e11e 	bne	r2,zero,10004d14 <___vfprintf_internal_r+0x18e0>
10004190:	00c00044 	movi	r3,1
10004194:	d8c02905 	stb	r3,164(sp)
10004198:	00c00804 	movi	r3,32
1000419c:	d8c02b05 	stb	r3,172(sp)
100041a0:	ac400007 	ldb	r17,0(r21)
100041a4:	003d0506 	br	100035bc <__alt_data_end+0xf80035bc>
100041a8:	84000054 	ori	r16,r16,1
100041ac:	ac400007 	ldb	r17,0(r21)
100041b0:	003d0206 	br	100035bc <__alt_data_end+0xf80035bc>
100041b4:	8025883a 	mov	r18,r16
100041b8:	dc002903 	ldbu	r16,164(sp)
100041bc:	e011883a 	mov	r8,fp
100041c0:	84003fcc 	andi	r16,r16,255
100041c4:	803de726 	beq	r16,zero,10003964 <__alt_data_end+0xf8003964>
100041c8:	d8c02b03 	ldbu	r3,172(sp)
100041cc:	d8c02785 	stb	r3,158(sp)
100041d0:	003de406 	br	10003964 <__alt_data_end+0xf8003964>
100041d4:	84001014 	ori	r16,r16,64
100041d8:	ac400007 	ldb	r17,0(r21)
100041dc:	003cf706 	br	100035bc <__alt_data_end+0xf80035bc>
100041e0:	ac400007 	ldb	r17,0(r21)
100041e4:	00801b04 	movi	r2,108
100041e8:	88838f26 	beq	r17,r2,10005028 <___vfprintf_internal_r+0x1bf4>
100041ec:	84000414 	ori	r16,r16,16
100041f0:	003cf206 	br	100035bc <__alt_data_end+0xf80035bc>
100041f4:	8025883a 	mov	r18,r16
100041f8:	dc002903 	ldbu	r16,164(sp)
100041fc:	e011883a 	mov	r8,fp
10004200:	84003fcc 	andi	r16,r16,255
10004204:	80053f1e 	bne	r16,zero,10005704 <___vfprintf_internal_r+0x22d0>
10004208:	9080080c 	andi	r2,r18,32
1000420c:	1002d226 	beq	r2,zero,10004d58 <___vfprintf_internal_r+0x1924>
10004210:	d9002e17 	ldw	r4,184(sp)
10004214:	d9402f17 	ldw	r5,188(sp)
10004218:	20800017 	ldw	r2,0(r4)
1000421c:	2807d7fa 	srai	r3,r5,31
10004220:	21000104 	addi	r4,r4,4
10004224:	d9002e15 	stw	r4,184(sp)
10004228:	11400015 	stw	r5,0(r2)
1000422c:	10c00115 	stw	r3,4(r2)
10004230:	003cb806 	br	10003514 <__alt_data_end+0xf8003514>
10004234:	d8c02e17 	ldw	r3,184(sp)
10004238:	d9002e17 	ldw	r4,184(sp)
1000423c:	8025883a 	mov	r18,r16
10004240:	18800017 	ldw	r2,0(r3)
10004244:	21000104 	addi	r4,r4,4
10004248:	00c00044 	movi	r3,1
1000424c:	e011883a 	mov	r8,fp
10004250:	d8c02915 	stw	r3,164(sp)
10004254:	d8002785 	stb	zero,158(sp)
10004258:	d8801405 	stb	r2,80(sp)
1000425c:	d9002e15 	stw	r4,184(sp)
10004260:	d8c02b15 	stw	r3,172(sp)
10004264:	d8002a15 	stw	zero,168(sp)
10004268:	d8003215 	stw	zero,200(sp)
1000426c:	dc001404 	addi	r16,sp,80
10004270:	0039883a 	mov	fp,zero
10004274:	003e5306 	br	10003bc4 <__alt_data_end+0xf8003bc4>
10004278:	01040074 	movhi	r4,4097
1000427c:	210be104 	addi	r4,r4,12164
10004280:	0039883a 	mov	fp,zero
10004284:	d9003915 	stw	r4,228(sp)
10004288:	04401e04 	movi	r17,120
1000428c:	003f6906 	br	10004034 <__alt_data_end+0xf8004034>
10004290:	8025883a 	mov	r18,r16
10004294:	dc002903 	ldbu	r16,164(sp)
10004298:	e011883a 	mov	r8,fp
1000429c:	84003fcc 	andi	r16,r16,255
100042a0:	8005081e 	bne	r16,zero,100056c4 <___vfprintf_internal_r+0x2290>
100042a4:	883d6126 	beq	r17,zero,1000382c <__alt_data_end+0xf800382c>
100042a8:	00c00044 	movi	r3,1
100042ac:	d8c02915 	stw	r3,164(sp)
100042b0:	dc401405 	stb	r17,80(sp)
100042b4:	d8002785 	stb	zero,158(sp)
100042b8:	003fe906 	br	10004260 <__alt_data_end+0xf8004260>
100042bc:	01440074 	movhi	r5,4097
100042c0:	294be104 	addi	r5,r5,12164
100042c4:	d9403915 	stw	r5,228(sp)
100042c8:	d8c02e15 	stw	r3,184(sp)
100042cc:	1025883a 	mov	r18,r2
100042d0:	04401e04 	movi	r17,120
100042d4:	9d84b03a 	or	r2,r19,r22
100042d8:	1000fc1e 	bne	r2,zero,100046cc <___vfprintf_internal_r+0x1298>
100042dc:	0039883a 	mov	fp,zero
100042e0:	00800084 	movi	r2,2
100042e4:	10803fcc 	andi	r2,r2,255
100042e8:	00c00044 	movi	r3,1
100042ec:	10c20f26 	beq	r2,r3,10004b2c <___vfprintf_internal_r+0x16f8>
100042f0:	00c00084 	movi	r3,2
100042f4:	10fd3326 	beq	r2,r3,100037c4 <__alt_data_end+0xf80037c4>
100042f8:	003e0b06 	br	10003b28 <__alt_data_end+0xf8003b28>
100042fc:	d8c02017 	ldw	r3,128(sp)
10004300:	003e7106 	br	10003cc8 <__alt_data_end+0xf8003cc8>
10004304:	00801944 	movi	r2,101
10004308:	14407e0e 	bge	r2,r17,10004504 <___vfprintf_internal_r+0x10d0>
1000430c:	d9003617 	ldw	r4,216(sp)
10004310:	d9403817 	ldw	r5,224(sp)
10004314:	000d883a 	mov	r6,zero
10004318:	000f883a 	mov	r7,zero
1000431c:	d8c03c15 	stw	r3,240(sp)
10004320:	da003d15 	stw	r8,244(sp)
10004324:	000e9c00 	call	1000e9c0 <__eqdf2>
10004328:	d8c03c17 	ldw	r3,240(sp)
1000432c:	da003d17 	ldw	r8,244(sp)
10004330:	1000f71e 	bne	r2,zero,10004710 <___vfprintf_internal_r+0x12dc>
10004334:	d8801f17 	ldw	r2,124(sp)
10004338:	01040074 	movhi	r4,4097
1000433c:	210be804 	addi	r4,r4,12192
10004340:	18c00044 	addi	r3,r3,1
10004344:	10800044 	addi	r2,r2,1
10004348:	41000015 	stw	r4,0(r8)
1000434c:	01000044 	movi	r4,1
10004350:	41000115 	stw	r4,4(r8)
10004354:	d8c02015 	stw	r3,128(sp)
10004358:	d8801f15 	stw	r2,124(sp)
1000435c:	010001c4 	movi	r4,7
10004360:	2082b816 	blt	r4,r2,10004e44 <___vfprintf_internal_r+0x1a10>
10004364:	42000204 	addi	r8,r8,8
10004368:	d8802617 	ldw	r2,152(sp)
1000436c:	d9403317 	ldw	r5,204(sp)
10004370:	11400216 	blt	r2,r5,1000437c <___vfprintf_internal_r+0xf48>
10004374:	9080004c 	andi	r2,r18,1
10004378:	103eb326 	beq	r2,zero,10003e48 <__alt_data_end+0xf8003e48>
1000437c:	d8803717 	ldw	r2,220(sp)
10004380:	d9003417 	ldw	r4,208(sp)
10004384:	d9403717 	ldw	r5,220(sp)
10004388:	1887883a 	add	r3,r3,r2
1000438c:	d8801f17 	ldw	r2,124(sp)
10004390:	41000015 	stw	r4,0(r8)
10004394:	41400115 	stw	r5,4(r8)
10004398:	10800044 	addi	r2,r2,1
1000439c:	d8c02015 	stw	r3,128(sp)
100043a0:	d8801f15 	stw	r2,124(sp)
100043a4:	010001c4 	movi	r4,7
100043a8:	20832916 	blt	r4,r2,10005050 <___vfprintf_internal_r+0x1c1c>
100043ac:	42000204 	addi	r8,r8,8
100043b0:	d8803317 	ldw	r2,204(sp)
100043b4:	143fffc4 	addi	r16,r2,-1
100043b8:	043ea30e 	bge	zero,r16,10003e48 <__alt_data_end+0xf8003e48>
100043bc:	04400404 	movi	r17,16
100043c0:	d8801f17 	ldw	r2,124(sp)
100043c4:	8c00880e 	bge	r17,r16,100045e8 <___vfprintf_internal_r+0x11b4>
100043c8:	01440074 	movhi	r5,4097
100043cc:	294be884 	addi	r5,r5,12194
100043d0:	d9402c15 	stw	r5,176(sp)
100043d4:	058001c4 	movi	r22,7
100043d8:	dcc02d17 	ldw	r19,180(sp)
100043dc:	00000306 	br	100043ec <___vfprintf_internal_r+0xfb8>
100043e0:	42000204 	addi	r8,r8,8
100043e4:	843ffc04 	addi	r16,r16,-16
100043e8:	8c00820e 	bge	r17,r16,100045f4 <___vfprintf_internal_r+0x11c0>
100043ec:	18c00404 	addi	r3,r3,16
100043f0:	10800044 	addi	r2,r2,1
100043f4:	45000015 	stw	r20,0(r8)
100043f8:	44400115 	stw	r17,4(r8)
100043fc:	d8c02015 	stw	r3,128(sp)
10004400:	d8801f15 	stw	r2,124(sp)
10004404:	b0bff60e 	bge	r22,r2,100043e0 <__alt_data_end+0xf80043e0>
10004408:	d9801e04 	addi	r6,sp,120
1000440c:	b80b883a 	mov	r5,r23
10004410:	9809883a 	mov	r4,r19
10004414:	000ac140 	call	1000ac14 <__sprint_r>
10004418:	103d0a1e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
1000441c:	d8c02017 	ldw	r3,128(sp)
10004420:	d8801f17 	ldw	r2,124(sp)
10004424:	da000404 	addi	r8,sp,16
10004428:	003fee06 	br	100043e4 <__alt_data_end+0xf80043e4>
1000442c:	d9403117 	ldw	r5,196(sp)
10004430:	d8802917 	ldw	r2,164(sp)
10004434:	28adc83a 	sub	r22,r5,r2
10004438:	05be410e 	bge	zero,r22,10003d40 <__alt_data_end+0xf8003d40>
1000443c:	07000404 	movi	fp,16
10004440:	d8801f17 	ldw	r2,124(sp)
10004444:	e5838f0e 	bge	fp,r22,10005284 <___vfprintf_internal_r+0x1e50>
10004448:	01440074 	movhi	r5,4097
1000444c:	294be884 	addi	r5,r5,12194
10004450:	dc403015 	stw	r17,192(sp)
10004454:	d9402c15 	stw	r5,176(sp)
10004458:	b023883a 	mov	r17,r22
1000445c:	04c001c4 	movi	r19,7
10004460:	a82d883a 	mov	r22,r21
10004464:	902b883a 	mov	r21,r18
10004468:	8025883a 	mov	r18,r16
1000446c:	dc002d17 	ldw	r16,180(sp)
10004470:	00000306 	br	10004480 <___vfprintf_internal_r+0x104c>
10004474:	8c7ffc04 	addi	r17,r17,-16
10004478:	42000204 	addi	r8,r8,8
1000447c:	e440110e 	bge	fp,r17,100044c4 <___vfprintf_internal_r+0x1090>
10004480:	18c00404 	addi	r3,r3,16
10004484:	10800044 	addi	r2,r2,1
10004488:	45000015 	stw	r20,0(r8)
1000448c:	47000115 	stw	fp,4(r8)
10004490:	d8c02015 	stw	r3,128(sp)
10004494:	d8801f15 	stw	r2,124(sp)
10004498:	98bff60e 	bge	r19,r2,10004474 <__alt_data_end+0xf8004474>
1000449c:	d9801e04 	addi	r6,sp,120
100044a0:	b80b883a 	mov	r5,r23
100044a4:	8009883a 	mov	r4,r16
100044a8:	000ac140 	call	1000ac14 <__sprint_r>
100044ac:	103ce51e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
100044b0:	8c7ffc04 	addi	r17,r17,-16
100044b4:	d8c02017 	ldw	r3,128(sp)
100044b8:	d8801f17 	ldw	r2,124(sp)
100044bc:	da000404 	addi	r8,sp,16
100044c0:	e47fef16 	blt	fp,r17,10004480 <__alt_data_end+0xf8004480>
100044c4:	9021883a 	mov	r16,r18
100044c8:	a825883a 	mov	r18,r21
100044cc:	b02b883a 	mov	r21,r22
100044d0:	882d883a 	mov	r22,r17
100044d4:	dc403017 	ldw	r17,192(sp)
100044d8:	d9002c17 	ldw	r4,176(sp)
100044dc:	1d87883a 	add	r3,r3,r22
100044e0:	10800044 	addi	r2,r2,1
100044e4:	41000015 	stw	r4,0(r8)
100044e8:	45800115 	stw	r22,4(r8)
100044ec:	d8c02015 	stw	r3,128(sp)
100044f0:	d8801f15 	stw	r2,124(sp)
100044f4:	010001c4 	movi	r4,7
100044f8:	20818e16 	blt	r4,r2,10004b34 <___vfprintf_internal_r+0x1700>
100044fc:	42000204 	addi	r8,r8,8
10004500:	003e0f06 	br	10003d40 <__alt_data_end+0xf8003d40>
10004504:	d9403317 	ldw	r5,204(sp)
10004508:	00800044 	movi	r2,1
1000450c:	18c00044 	addi	r3,r3,1
10004510:	1141530e 	bge	r2,r5,10004a60 <___vfprintf_internal_r+0x162c>
10004514:	dc401f17 	ldw	r17,124(sp)
10004518:	00800044 	movi	r2,1
1000451c:	40800115 	stw	r2,4(r8)
10004520:	8c400044 	addi	r17,r17,1
10004524:	44000015 	stw	r16,0(r8)
10004528:	d8c02015 	stw	r3,128(sp)
1000452c:	dc401f15 	stw	r17,124(sp)
10004530:	008001c4 	movi	r2,7
10004534:	14416b16 	blt	r2,r17,10004ae4 <___vfprintf_internal_r+0x16b0>
10004538:	42000204 	addi	r8,r8,8
1000453c:	d8803717 	ldw	r2,220(sp)
10004540:	d9003417 	ldw	r4,208(sp)
10004544:	8c400044 	addi	r17,r17,1
10004548:	10c7883a 	add	r3,r2,r3
1000454c:	40800115 	stw	r2,4(r8)
10004550:	41000015 	stw	r4,0(r8)
10004554:	d8c02015 	stw	r3,128(sp)
10004558:	dc401f15 	stw	r17,124(sp)
1000455c:	008001c4 	movi	r2,7
10004560:	14416916 	blt	r2,r17,10004b08 <___vfprintf_internal_r+0x16d4>
10004564:	45800204 	addi	r22,r8,8
10004568:	d9003617 	ldw	r4,216(sp)
1000456c:	d9403817 	ldw	r5,224(sp)
10004570:	000d883a 	mov	r6,zero
10004574:	000f883a 	mov	r7,zero
10004578:	d8c03c15 	stw	r3,240(sp)
1000457c:	000e9c00 	call	1000e9c0 <__eqdf2>
10004580:	d8c03c17 	ldw	r3,240(sp)
10004584:	1000bc26 	beq	r2,zero,10004878 <___vfprintf_internal_r+0x1444>
10004588:	d9403317 	ldw	r5,204(sp)
1000458c:	84000044 	addi	r16,r16,1
10004590:	8c400044 	addi	r17,r17,1
10004594:	28bfffc4 	addi	r2,r5,-1
10004598:	1887883a 	add	r3,r3,r2
1000459c:	b0800115 	stw	r2,4(r22)
100045a0:	b4000015 	stw	r16,0(r22)
100045a4:	d8c02015 	stw	r3,128(sp)
100045a8:	dc401f15 	stw	r17,124(sp)
100045ac:	008001c4 	movi	r2,7
100045b0:	14414316 	blt	r2,r17,10004ac0 <___vfprintf_internal_r+0x168c>
100045b4:	b5800204 	addi	r22,r22,8
100045b8:	d9003a17 	ldw	r4,232(sp)
100045bc:	df0022c4 	addi	fp,sp,139
100045c0:	8c400044 	addi	r17,r17,1
100045c4:	20c7883a 	add	r3,r4,r3
100045c8:	b7000015 	stw	fp,0(r22)
100045cc:	b1000115 	stw	r4,4(r22)
100045d0:	d8c02015 	stw	r3,128(sp)
100045d4:	dc401f15 	stw	r17,124(sp)
100045d8:	008001c4 	movi	r2,7
100045dc:	14400e16 	blt	r2,r17,10004618 <___vfprintf_internal_r+0x11e4>
100045e0:	b2000204 	addi	r8,r22,8
100045e4:	003e1806 	br	10003e48 <__alt_data_end+0xf8003e48>
100045e8:	01040074 	movhi	r4,4097
100045ec:	210be884 	addi	r4,r4,12194
100045f0:	d9002c15 	stw	r4,176(sp)
100045f4:	d9002c17 	ldw	r4,176(sp)
100045f8:	1c07883a 	add	r3,r3,r16
100045fc:	44000115 	stw	r16,4(r8)
10004600:	41000015 	stw	r4,0(r8)
10004604:	10800044 	addi	r2,r2,1
10004608:	d8c02015 	stw	r3,128(sp)
1000460c:	d8801f15 	stw	r2,124(sp)
10004610:	010001c4 	movi	r4,7
10004614:	20be0b0e 	bge	r4,r2,10003e44 <__alt_data_end+0xf8003e44>
10004618:	d9002d17 	ldw	r4,180(sp)
1000461c:	d9801e04 	addi	r6,sp,120
10004620:	b80b883a 	mov	r5,r23
10004624:	000ac140 	call	1000ac14 <__sprint_r>
10004628:	103c861e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
1000462c:	d8c02017 	ldw	r3,128(sp)
10004630:	da000404 	addi	r8,sp,16
10004634:	003e0406 	br	10003e48 <__alt_data_end+0xf8003e48>
10004638:	d9002d17 	ldw	r4,180(sp)
1000463c:	d9801e04 	addi	r6,sp,120
10004640:	b80b883a 	mov	r5,r23
10004644:	000ac140 	call	1000ac14 <__sprint_r>
10004648:	103e3b26 	beq	r2,zero,10003f38 <__alt_data_end+0xf8003f38>
1000464c:	003c7d06 	br	10003844 <__alt_data_end+0xf8003844>
10004650:	d9002d17 	ldw	r4,180(sp)
10004654:	d9801e04 	addi	r6,sp,120
10004658:	b80b883a 	mov	r5,r23
1000465c:	000ac140 	call	1000ac14 <__sprint_r>
10004660:	103c781e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10004664:	d8c02017 	ldw	r3,128(sp)
10004668:	da000404 	addi	r8,sp,16
1000466c:	003de906 	br	10003e14 <__alt_data_end+0xf8003e14>
10004670:	d9002d17 	ldw	r4,180(sp)
10004674:	d9801e04 	addi	r6,sp,120
10004678:	b80b883a 	mov	r5,r23
1000467c:	000ac140 	call	1000ac14 <__sprint_r>
10004680:	103c701e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10004684:	d8c02017 	ldw	r3,128(sp)
10004688:	da000404 	addi	r8,sp,16
1000468c:	003d9b06 	br	10003cfc <__alt_data_end+0xf8003cfc>
10004690:	d9002d17 	ldw	r4,180(sp)
10004694:	d9801e04 	addi	r6,sp,120
10004698:	b80b883a 	mov	r5,r23
1000469c:	000ac140 	call	1000ac14 <__sprint_r>
100046a0:	103c681e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
100046a4:	d8c02017 	ldw	r3,128(sp)
100046a8:	da000404 	addi	r8,sp,16
100046ac:	003da106 	br	10003d34 <__alt_data_end+0xf8003d34>
100046b0:	d9402a17 	ldw	r5,168(sp)
100046b4:	d8002785 	stb	zero,158(sp)
100046b8:	283f0616 	blt	r5,zero,100042d4 <__alt_data_end+0xf80042d4>
100046bc:	00ffdfc4 	movi	r3,-129
100046c0:	9d84b03a 	or	r2,r19,r22
100046c4:	90e4703a 	and	r18,r18,r3
100046c8:	103c3b26 	beq	r2,zero,100037b8 <__alt_data_end+0xf80037b8>
100046cc:	0039883a 	mov	fp,zero
100046d0:	003e5806 	br	10004034 <__alt_data_end+0xf8004034>
100046d4:	9080040c 	andi	r2,r18,16
100046d8:	1001b326 	beq	r2,zero,10004da8 <___vfprintf_internal_r+0x1974>
100046dc:	d8c02e17 	ldw	r3,184(sp)
100046e0:	d9002a17 	ldw	r4,168(sp)
100046e4:	d8002785 	stb	zero,158(sp)
100046e8:	18800104 	addi	r2,r3,4
100046ec:	1cc00017 	ldw	r19,0(r3)
100046f0:	002d883a 	mov	r22,zero
100046f4:	2001b516 	blt	r4,zero,10004dcc <___vfprintf_internal_r+0x1998>
100046f8:	00ffdfc4 	movi	r3,-129
100046fc:	d8802e15 	stw	r2,184(sp)
10004700:	90e4703a 	and	r18,r18,r3
10004704:	983d0526 	beq	r19,zero,10003b1c <__alt_data_end+0xf8003b1c>
10004708:	0039883a 	mov	fp,zero
1000470c:	003d0806 	br	10003b30 <__alt_data_end+0xf8003b30>
10004710:	dc402617 	ldw	r17,152(sp)
10004714:	0441d30e 	bge	zero,r17,10004e64 <___vfprintf_internal_r+0x1a30>
10004718:	dc403217 	ldw	r17,200(sp)
1000471c:	d8803317 	ldw	r2,204(sp)
10004720:	1440010e 	bge	r2,r17,10004728 <___vfprintf_internal_r+0x12f4>
10004724:	1023883a 	mov	r17,r2
10004728:	04400a0e 	bge	zero,r17,10004754 <___vfprintf_internal_r+0x1320>
1000472c:	d8801f17 	ldw	r2,124(sp)
10004730:	1c47883a 	add	r3,r3,r17
10004734:	44000015 	stw	r16,0(r8)
10004738:	10800044 	addi	r2,r2,1
1000473c:	44400115 	stw	r17,4(r8)
10004740:	d8c02015 	stw	r3,128(sp)
10004744:	d8801f15 	stw	r2,124(sp)
10004748:	010001c4 	movi	r4,7
1000474c:	20826516 	blt	r4,r2,100050e4 <___vfprintf_internal_r+0x1cb0>
10004750:	42000204 	addi	r8,r8,8
10004754:	88026116 	blt	r17,zero,100050dc <___vfprintf_internal_r+0x1ca8>
10004758:	d9003217 	ldw	r4,200(sp)
1000475c:	2463c83a 	sub	r17,r4,r17
10004760:	04407b0e 	bge	zero,r17,10004950 <___vfprintf_internal_r+0x151c>
10004764:	05800404 	movi	r22,16
10004768:	d8801f17 	ldw	r2,124(sp)
1000476c:	b4419d0e 	bge	r22,r17,10004de4 <___vfprintf_internal_r+0x19b0>
10004770:	01040074 	movhi	r4,4097
10004774:	210be884 	addi	r4,r4,12194
10004778:	d9002c15 	stw	r4,176(sp)
1000477c:	070001c4 	movi	fp,7
10004780:	dcc02d17 	ldw	r19,180(sp)
10004784:	00000306 	br	10004794 <___vfprintf_internal_r+0x1360>
10004788:	42000204 	addi	r8,r8,8
1000478c:	8c7ffc04 	addi	r17,r17,-16
10004790:	b441970e 	bge	r22,r17,10004df0 <___vfprintf_internal_r+0x19bc>
10004794:	18c00404 	addi	r3,r3,16
10004798:	10800044 	addi	r2,r2,1
1000479c:	45000015 	stw	r20,0(r8)
100047a0:	45800115 	stw	r22,4(r8)
100047a4:	d8c02015 	stw	r3,128(sp)
100047a8:	d8801f15 	stw	r2,124(sp)
100047ac:	e0bff60e 	bge	fp,r2,10004788 <__alt_data_end+0xf8004788>
100047b0:	d9801e04 	addi	r6,sp,120
100047b4:	b80b883a 	mov	r5,r23
100047b8:	9809883a 	mov	r4,r19
100047bc:	000ac140 	call	1000ac14 <__sprint_r>
100047c0:	103c201e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
100047c4:	d8c02017 	ldw	r3,128(sp)
100047c8:	d8801f17 	ldw	r2,124(sp)
100047cc:	da000404 	addi	r8,sp,16
100047d0:	003fee06 	br	1000478c <__alt_data_end+0xf800478c>
100047d4:	d9002d17 	ldw	r4,180(sp)
100047d8:	d9801e04 	addi	r6,sp,120
100047dc:	b80b883a 	mov	r5,r23
100047e0:	000ac140 	call	1000ac14 <__sprint_r>
100047e4:	103c171e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
100047e8:	d8c02017 	ldw	r3,128(sp)
100047ec:	df002787 	ldb	fp,158(sp)
100047f0:	da000404 	addi	r8,sp,16
100047f4:	003d3406 	br	10003cc8 <__alt_data_end+0xf8003cc8>
100047f8:	9080040c 	andi	r2,r18,16
100047fc:	10016126 	beq	r2,zero,10004d84 <___vfprintf_internal_r+0x1950>
10004800:	d9402e17 	ldw	r5,184(sp)
10004804:	2cc00017 	ldw	r19,0(r5)
10004808:	29400104 	addi	r5,r5,4
1000480c:	d9402e15 	stw	r5,184(sp)
10004810:	982dd7fa 	srai	r22,r19,31
10004814:	b005883a 	mov	r2,r22
10004818:	003c5a06 	br	10003984 <__alt_data_end+0xf8003984>
1000481c:	9080040c 	andi	r2,r18,16
10004820:	10003526 	beq	r2,zero,100048f8 <___vfprintf_internal_r+0x14c4>
10004824:	d8c02e17 	ldw	r3,184(sp)
10004828:	d9002a17 	ldw	r4,168(sp)
1000482c:	d8002785 	stb	zero,158(sp)
10004830:	18800104 	addi	r2,r3,4
10004834:	1cc00017 	ldw	r19,0(r3)
10004838:	002d883a 	mov	r22,zero
1000483c:	20003716 	blt	r4,zero,1000491c <___vfprintf_internal_r+0x14e8>
10004840:	00ffdfc4 	movi	r3,-129
10004844:	d8802e15 	stw	r2,184(sp)
10004848:	90e4703a 	and	r18,r18,r3
1000484c:	0039883a 	mov	fp,zero
10004850:	983dd426 	beq	r19,zero,10003fa4 <__alt_data_end+0xf8003fa4>
10004854:	00800244 	movi	r2,9
10004858:	14fc5336 	bltu	r2,r19,100039a8 <__alt_data_end+0xf80039a8>
1000485c:	d8c02817 	ldw	r3,160(sp)
10004860:	dc001dc4 	addi	r16,sp,119
10004864:	9cc00c04 	addi	r19,r19,48
10004868:	1c07c83a 	sub	r3,r3,r16
1000486c:	dcc01dc5 	stb	r19,119(sp)
10004870:	d8c02b15 	stw	r3,172(sp)
10004874:	003cc606 	br	10003b90 <__alt_data_end+0xf8003b90>
10004878:	d8803317 	ldw	r2,204(sp)
1000487c:	143fffc4 	addi	r16,r2,-1
10004880:	043f4d0e 	bge	zero,r16,100045b8 <__alt_data_end+0xf80045b8>
10004884:	07000404 	movi	fp,16
10004888:	e400810e 	bge	fp,r16,10004a90 <___vfprintf_internal_r+0x165c>
1000488c:	01440074 	movhi	r5,4097
10004890:	294be884 	addi	r5,r5,12194
10004894:	d9402c15 	stw	r5,176(sp)
10004898:	01c001c4 	movi	r7,7
1000489c:	dcc02d17 	ldw	r19,180(sp)
100048a0:	00000306 	br	100048b0 <___vfprintf_internal_r+0x147c>
100048a4:	b5800204 	addi	r22,r22,8
100048a8:	843ffc04 	addi	r16,r16,-16
100048ac:	e4007b0e 	bge	fp,r16,10004a9c <___vfprintf_internal_r+0x1668>
100048b0:	18c00404 	addi	r3,r3,16
100048b4:	8c400044 	addi	r17,r17,1
100048b8:	b5000015 	stw	r20,0(r22)
100048bc:	b7000115 	stw	fp,4(r22)
100048c0:	d8c02015 	stw	r3,128(sp)
100048c4:	dc401f15 	stw	r17,124(sp)
100048c8:	3c7ff60e 	bge	r7,r17,100048a4 <__alt_data_end+0xf80048a4>
100048cc:	d9801e04 	addi	r6,sp,120
100048d0:	b80b883a 	mov	r5,r23
100048d4:	9809883a 	mov	r4,r19
100048d8:	d9c03c15 	stw	r7,240(sp)
100048dc:	000ac140 	call	1000ac14 <__sprint_r>
100048e0:	d9c03c17 	ldw	r7,240(sp)
100048e4:	103bd71e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
100048e8:	d8c02017 	ldw	r3,128(sp)
100048ec:	dc401f17 	ldw	r17,124(sp)
100048f0:	dd800404 	addi	r22,sp,16
100048f4:	003fec06 	br	100048a8 <__alt_data_end+0xf80048a8>
100048f8:	9080100c 	andi	r2,r18,64
100048fc:	d8002785 	stb	zero,158(sp)
10004900:	10010e26 	beq	r2,zero,10004d3c <___vfprintf_internal_r+0x1908>
10004904:	d9402e17 	ldw	r5,184(sp)
10004908:	d8c02a17 	ldw	r3,168(sp)
1000490c:	002d883a 	mov	r22,zero
10004910:	28800104 	addi	r2,r5,4
10004914:	2cc0000b 	ldhu	r19,0(r5)
10004918:	183fc90e 	bge	r3,zero,10004840 <__alt_data_end+0xf8004840>
1000491c:	d8802e15 	stw	r2,184(sp)
10004920:	0039883a 	mov	fp,zero
10004924:	9d84b03a 	or	r2,r19,r22
10004928:	103c1e1e 	bne	r2,zero,100039a4 <__alt_data_end+0xf80039a4>
1000492c:	00800044 	movi	r2,1
10004930:	003e6c06 	br	100042e4 <__alt_data_end+0xf80042e4>
10004934:	d9002d17 	ldw	r4,180(sp)
10004938:	d9801e04 	addi	r6,sp,120
1000493c:	b80b883a 	mov	r5,r23
10004940:	000ac140 	call	1000ac14 <__sprint_r>
10004944:	103bbf1e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10004948:	d8c02017 	ldw	r3,128(sp)
1000494c:	da000404 	addi	r8,sp,16
10004950:	d9003217 	ldw	r4,200(sp)
10004954:	d8802617 	ldw	r2,152(sp)
10004958:	d9403317 	ldw	r5,204(sp)
1000495c:	8123883a 	add	r17,r16,r4
10004960:	11400216 	blt	r2,r5,1000496c <___vfprintf_internal_r+0x1538>
10004964:	9100004c 	andi	r4,r18,1
10004968:	20000d26 	beq	r4,zero,100049a0 <___vfprintf_internal_r+0x156c>
1000496c:	d9003717 	ldw	r4,220(sp)
10004970:	d9403417 	ldw	r5,208(sp)
10004974:	1907883a 	add	r3,r3,r4
10004978:	d9001f17 	ldw	r4,124(sp)
1000497c:	41400015 	stw	r5,0(r8)
10004980:	d9403717 	ldw	r5,220(sp)
10004984:	21000044 	addi	r4,r4,1
10004988:	d8c02015 	stw	r3,128(sp)
1000498c:	41400115 	stw	r5,4(r8)
10004990:	d9001f15 	stw	r4,124(sp)
10004994:	014001c4 	movi	r5,7
10004998:	2901e816 	blt	r5,r4,1000513c <___vfprintf_internal_r+0x1d08>
1000499c:	42000204 	addi	r8,r8,8
100049a0:	d9003317 	ldw	r4,204(sp)
100049a4:	8121883a 	add	r16,r16,r4
100049a8:	2085c83a 	sub	r2,r4,r2
100049ac:	8461c83a 	sub	r16,r16,r17
100049b0:	1400010e 	bge	r2,r16,100049b8 <___vfprintf_internal_r+0x1584>
100049b4:	1021883a 	mov	r16,r2
100049b8:	04000a0e 	bge	zero,r16,100049e4 <___vfprintf_internal_r+0x15b0>
100049bc:	d9001f17 	ldw	r4,124(sp)
100049c0:	1c07883a 	add	r3,r3,r16
100049c4:	44400015 	stw	r17,0(r8)
100049c8:	21000044 	addi	r4,r4,1
100049cc:	44000115 	stw	r16,4(r8)
100049d0:	d8c02015 	stw	r3,128(sp)
100049d4:	d9001f15 	stw	r4,124(sp)
100049d8:	014001c4 	movi	r5,7
100049dc:	2901fb16 	blt	r5,r4,100051cc <___vfprintf_internal_r+0x1d98>
100049e0:	42000204 	addi	r8,r8,8
100049e4:	8001f716 	blt	r16,zero,100051c4 <___vfprintf_internal_r+0x1d90>
100049e8:	1421c83a 	sub	r16,r2,r16
100049ec:	043d160e 	bge	zero,r16,10003e48 <__alt_data_end+0xf8003e48>
100049f0:	04400404 	movi	r17,16
100049f4:	d8801f17 	ldw	r2,124(sp)
100049f8:	8c3efb0e 	bge	r17,r16,100045e8 <__alt_data_end+0xf80045e8>
100049fc:	01440074 	movhi	r5,4097
10004a00:	294be884 	addi	r5,r5,12194
10004a04:	d9402c15 	stw	r5,176(sp)
10004a08:	058001c4 	movi	r22,7
10004a0c:	dcc02d17 	ldw	r19,180(sp)
10004a10:	00000306 	br	10004a20 <___vfprintf_internal_r+0x15ec>
10004a14:	42000204 	addi	r8,r8,8
10004a18:	843ffc04 	addi	r16,r16,-16
10004a1c:	8c3ef50e 	bge	r17,r16,100045f4 <__alt_data_end+0xf80045f4>
10004a20:	18c00404 	addi	r3,r3,16
10004a24:	10800044 	addi	r2,r2,1
10004a28:	45000015 	stw	r20,0(r8)
10004a2c:	44400115 	stw	r17,4(r8)
10004a30:	d8c02015 	stw	r3,128(sp)
10004a34:	d8801f15 	stw	r2,124(sp)
10004a38:	b0bff60e 	bge	r22,r2,10004a14 <__alt_data_end+0xf8004a14>
10004a3c:	d9801e04 	addi	r6,sp,120
10004a40:	b80b883a 	mov	r5,r23
10004a44:	9809883a 	mov	r4,r19
10004a48:	000ac140 	call	1000ac14 <__sprint_r>
10004a4c:	103b7d1e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10004a50:	d8c02017 	ldw	r3,128(sp)
10004a54:	d8801f17 	ldw	r2,124(sp)
10004a58:	da000404 	addi	r8,sp,16
10004a5c:	003fee06 	br	10004a18 <__alt_data_end+0xf8004a18>
10004a60:	9088703a 	and	r4,r18,r2
10004a64:	203eab1e 	bne	r4,zero,10004514 <__alt_data_end+0xf8004514>
10004a68:	dc401f17 	ldw	r17,124(sp)
10004a6c:	40800115 	stw	r2,4(r8)
10004a70:	44000015 	stw	r16,0(r8)
10004a74:	8c400044 	addi	r17,r17,1
10004a78:	d8c02015 	stw	r3,128(sp)
10004a7c:	dc401f15 	stw	r17,124(sp)
10004a80:	008001c4 	movi	r2,7
10004a84:	14400e16 	blt	r2,r17,10004ac0 <___vfprintf_internal_r+0x168c>
10004a88:	45800204 	addi	r22,r8,8
10004a8c:	003eca06 	br	100045b8 <__alt_data_end+0xf80045b8>
10004a90:	01040074 	movhi	r4,4097
10004a94:	210be884 	addi	r4,r4,12194
10004a98:	d9002c15 	stw	r4,176(sp)
10004a9c:	d8802c17 	ldw	r2,176(sp)
10004aa0:	1c07883a 	add	r3,r3,r16
10004aa4:	8c400044 	addi	r17,r17,1
10004aa8:	b0800015 	stw	r2,0(r22)
10004aac:	b4000115 	stw	r16,4(r22)
10004ab0:	d8c02015 	stw	r3,128(sp)
10004ab4:	dc401f15 	stw	r17,124(sp)
10004ab8:	008001c4 	movi	r2,7
10004abc:	147ebd0e 	bge	r2,r17,100045b4 <__alt_data_end+0xf80045b4>
10004ac0:	d9002d17 	ldw	r4,180(sp)
10004ac4:	d9801e04 	addi	r6,sp,120
10004ac8:	b80b883a 	mov	r5,r23
10004acc:	000ac140 	call	1000ac14 <__sprint_r>
10004ad0:	103b5c1e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10004ad4:	d8c02017 	ldw	r3,128(sp)
10004ad8:	dc401f17 	ldw	r17,124(sp)
10004adc:	dd800404 	addi	r22,sp,16
10004ae0:	003eb506 	br	100045b8 <__alt_data_end+0xf80045b8>
10004ae4:	d9002d17 	ldw	r4,180(sp)
10004ae8:	d9801e04 	addi	r6,sp,120
10004aec:	b80b883a 	mov	r5,r23
10004af0:	000ac140 	call	1000ac14 <__sprint_r>
10004af4:	103b531e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10004af8:	d8c02017 	ldw	r3,128(sp)
10004afc:	dc401f17 	ldw	r17,124(sp)
10004b00:	da000404 	addi	r8,sp,16
10004b04:	003e8d06 	br	1000453c <__alt_data_end+0xf800453c>
10004b08:	d9002d17 	ldw	r4,180(sp)
10004b0c:	d9801e04 	addi	r6,sp,120
10004b10:	b80b883a 	mov	r5,r23
10004b14:	000ac140 	call	1000ac14 <__sprint_r>
10004b18:	103b4a1e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10004b1c:	d8c02017 	ldw	r3,128(sp)
10004b20:	dc401f17 	ldw	r17,124(sp)
10004b24:	dd800404 	addi	r22,sp,16
10004b28:	003e8f06 	br	10004568 <__alt_data_end+0xf8004568>
10004b2c:	0027883a 	mov	r19,zero
10004b30:	003f4a06 	br	1000485c <__alt_data_end+0xf800485c>
10004b34:	d9002d17 	ldw	r4,180(sp)
10004b38:	d9801e04 	addi	r6,sp,120
10004b3c:	b80b883a 	mov	r5,r23
10004b40:	000ac140 	call	1000ac14 <__sprint_r>
10004b44:	103b3f1e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10004b48:	d8c02017 	ldw	r3,128(sp)
10004b4c:	da000404 	addi	r8,sp,16
10004b50:	003c7b06 	br	10003d40 <__alt_data_end+0xf8003d40>
10004b54:	d9402a17 	ldw	r5,168(sp)
10004b58:	04e7c83a 	sub	r19,zero,r19
10004b5c:	07000b44 	movi	fp,45
10004b60:	9804c03a 	cmpne	r2,r19,zero
10004b64:	05adc83a 	sub	r22,zero,r22
10004b68:	df002785 	stb	fp,158(sp)
10004b6c:	b0adc83a 	sub	r22,r22,r2
10004b70:	28017b16 	blt	r5,zero,10005160 <___vfprintf_internal_r+0x1d2c>
10004b74:	00bfdfc4 	movi	r2,-129
10004b78:	90a4703a 	and	r18,r18,r2
10004b7c:	003b8906 	br	100039a4 <__alt_data_end+0xf80039a4>
10004b80:	d9003617 	ldw	r4,216(sp)
10004b84:	d9403817 	ldw	r5,224(sp)
10004b88:	da003d15 	stw	r8,244(sp)
10004b8c:	000a8380 	call	1000a838 <__fpclassifyd>
10004b90:	da003d17 	ldw	r8,244(sp)
10004b94:	1000f026 	beq	r2,zero,10004f58 <___vfprintf_internal_r+0x1b24>
10004b98:	d9002a17 	ldw	r4,168(sp)
10004b9c:	05bff7c4 	movi	r22,-33
10004ba0:	00bfffc4 	movi	r2,-1
10004ba4:	8dac703a 	and	r22,r17,r22
10004ba8:	20820026 	beq	r4,r2,100053ac <___vfprintf_internal_r+0x1f78>
10004bac:	008011c4 	movi	r2,71
10004bb0:	b081f726 	beq	r22,r2,10005390 <___vfprintf_internal_r+0x1f5c>
10004bb4:	d9003817 	ldw	r4,224(sp)
10004bb8:	90c04014 	ori	r3,r18,256
10004bbc:	d8c02c15 	stw	r3,176(sp)
10004bc0:	20021516 	blt	r4,zero,10005418 <___vfprintf_internal_r+0x1fe4>
10004bc4:	dcc03817 	ldw	r19,224(sp)
10004bc8:	d8002905 	stb	zero,164(sp)
10004bcc:	00801984 	movi	r2,102
10004bd0:	8881f926 	beq	r17,r2,100053b8 <___vfprintf_internal_r+0x1f84>
10004bd4:	00801184 	movi	r2,70
10004bd8:	88821c26 	beq	r17,r2,1000544c <___vfprintf_internal_r+0x2018>
10004bdc:	00801144 	movi	r2,69
10004be0:	b081ef26 	beq	r22,r2,100053a0 <___vfprintf_internal_r+0x1f6c>
10004be4:	d8c02a17 	ldw	r3,168(sp)
10004be8:	d8802104 	addi	r2,sp,132
10004bec:	d8800315 	stw	r2,12(sp)
10004bf0:	d9403617 	ldw	r5,216(sp)
10004bf4:	d8802504 	addi	r2,sp,148
10004bf8:	d9002d17 	ldw	r4,180(sp)
10004bfc:	d8800215 	stw	r2,8(sp)
10004c00:	d8802604 	addi	r2,sp,152
10004c04:	d8c00015 	stw	r3,0(sp)
10004c08:	d8800115 	stw	r2,4(sp)
10004c0c:	01c00084 	movi	r7,2
10004c10:	980d883a 	mov	r6,r19
10004c14:	d8c03c15 	stw	r3,240(sp)
10004c18:	da003d15 	stw	r8,244(sp)
10004c1c:	0005b640 	call	10005b64 <_dtoa_r>
10004c20:	1021883a 	mov	r16,r2
10004c24:	008019c4 	movi	r2,103
10004c28:	d8c03c17 	ldw	r3,240(sp)
10004c2c:	da003d17 	ldw	r8,244(sp)
10004c30:	88817126 	beq	r17,r2,100051f8 <___vfprintf_internal_r+0x1dc4>
10004c34:	008011c4 	movi	r2,71
10004c38:	88829126 	beq	r17,r2,10005680 <___vfprintf_internal_r+0x224c>
10004c3c:	80f9883a 	add	fp,r16,r3
10004c40:	d9003617 	ldw	r4,216(sp)
10004c44:	000d883a 	mov	r6,zero
10004c48:	000f883a 	mov	r7,zero
10004c4c:	980b883a 	mov	r5,r19
10004c50:	da003d15 	stw	r8,244(sp)
10004c54:	000e9c00 	call	1000e9c0 <__eqdf2>
10004c58:	da003d17 	ldw	r8,244(sp)
10004c5c:	10018d26 	beq	r2,zero,10005294 <___vfprintf_internal_r+0x1e60>
10004c60:	d8802117 	ldw	r2,132(sp)
10004c64:	1700062e 	bgeu	r2,fp,10004c80 <___vfprintf_internal_r+0x184c>
10004c68:	01000c04 	movi	r4,48
10004c6c:	10c00044 	addi	r3,r2,1
10004c70:	d8c02115 	stw	r3,132(sp)
10004c74:	11000005 	stb	r4,0(r2)
10004c78:	d8802117 	ldw	r2,132(sp)
10004c7c:	173ffb36 	bltu	r2,fp,10004c6c <__alt_data_end+0xf8004c6c>
10004c80:	1405c83a 	sub	r2,r2,r16
10004c84:	d8803315 	stw	r2,204(sp)
10004c88:	008011c4 	movi	r2,71
10004c8c:	b0817626 	beq	r22,r2,10005268 <___vfprintf_internal_r+0x1e34>
10004c90:	00801944 	movi	r2,101
10004c94:	1442800e 	bge	r2,r17,10005698 <___vfprintf_internal_r+0x2264>
10004c98:	d8c02617 	ldw	r3,152(sp)
10004c9c:	00801984 	movi	r2,102
10004ca0:	d8c03215 	stw	r3,200(sp)
10004ca4:	8881fe26 	beq	r17,r2,100054a0 <___vfprintf_internal_r+0x206c>
10004ca8:	d8c03217 	ldw	r3,200(sp)
10004cac:	d9003317 	ldw	r4,204(sp)
10004cb0:	1901dd16 	blt	r3,r4,10005428 <___vfprintf_internal_r+0x1ff4>
10004cb4:	9480004c 	andi	r18,r18,1
10004cb8:	90022b1e 	bne	r18,zero,10005568 <___vfprintf_internal_r+0x2134>
10004cbc:	1805883a 	mov	r2,r3
10004cc0:	18028316 	blt	r3,zero,100056d0 <___vfprintf_internal_r+0x229c>
10004cc4:	d8c03217 	ldw	r3,200(sp)
10004cc8:	044019c4 	movi	r17,103
10004ccc:	d8c02b15 	stw	r3,172(sp)
10004cd0:	df002907 	ldb	fp,164(sp)
10004cd4:	e001531e 	bne	fp,zero,10005224 <___vfprintf_internal_r+0x1df0>
10004cd8:	df002783 	ldbu	fp,158(sp)
10004cdc:	d8802915 	stw	r2,164(sp)
10004ce0:	dc802c17 	ldw	r18,176(sp)
10004ce4:	d8002a15 	stw	zero,168(sp)
10004ce8:	003baf06 	br	10003ba8 <__alt_data_end+0xf8003ba8>
10004cec:	d8c02e17 	ldw	r3,184(sp)
10004cf0:	d9002e17 	ldw	r4,184(sp)
10004cf4:	d9402e17 	ldw	r5,184(sp)
10004cf8:	18c00017 	ldw	r3,0(r3)
10004cfc:	21000117 	ldw	r4,4(r4)
10004d00:	29400204 	addi	r5,r5,8
10004d04:	d8c03615 	stw	r3,216(sp)
10004d08:	d9003815 	stw	r4,224(sp)
10004d0c:	d9402e15 	stw	r5,184(sp)
10004d10:	003b5006 	br	10003a54 <__alt_data_end+0xf8003a54>
10004d14:	ac400007 	ldb	r17,0(r21)
10004d18:	003a2806 	br	100035bc <__alt_data_end+0xf80035bc>
10004d1c:	9080100c 	andi	r2,r18,64
10004d20:	1000a826 	beq	r2,zero,10004fc4 <___vfprintf_internal_r+0x1b90>
10004d24:	d8c02e17 	ldw	r3,184(sp)
10004d28:	002d883a 	mov	r22,zero
10004d2c:	1cc0000b 	ldhu	r19,0(r3)
10004d30:	18c00104 	addi	r3,r3,4
10004d34:	d8c02e15 	stw	r3,184(sp)
10004d38:	003caf06 	br	10003ff8 <__alt_data_end+0xf8003ff8>
10004d3c:	d9002e17 	ldw	r4,184(sp)
10004d40:	d9402a17 	ldw	r5,168(sp)
10004d44:	002d883a 	mov	r22,zero
10004d48:	20800104 	addi	r2,r4,4
10004d4c:	24c00017 	ldw	r19,0(r4)
10004d50:	283ebb0e 	bge	r5,zero,10004840 <__alt_data_end+0xf8004840>
10004d54:	003ef106 	br	1000491c <__alt_data_end+0xf800491c>
10004d58:	9080040c 	andi	r2,r18,16
10004d5c:	1000921e 	bne	r2,zero,10004fa8 <___vfprintf_internal_r+0x1b74>
10004d60:	9480100c 	andi	r18,r18,64
10004d64:	90013926 	beq	r18,zero,1000524c <___vfprintf_internal_r+0x1e18>
10004d68:	d9402e17 	ldw	r5,184(sp)
10004d6c:	d8c02f17 	ldw	r3,188(sp)
10004d70:	28800017 	ldw	r2,0(r5)
10004d74:	29400104 	addi	r5,r5,4
10004d78:	d9402e15 	stw	r5,184(sp)
10004d7c:	10c0000d 	sth	r3,0(r2)
10004d80:	0039e406 	br	10003514 <__alt_data_end+0xf8003514>
10004d84:	9080100c 	andi	r2,r18,64
10004d88:	10008026 	beq	r2,zero,10004f8c <___vfprintf_internal_r+0x1b58>
10004d8c:	d8802e17 	ldw	r2,184(sp)
10004d90:	14c0000f 	ldh	r19,0(r2)
10004d94:	10800104 	addi	r2,r2,4
10004d98:	d8802e15 	stw	r2,184(sp)
10004d9c:	982dd7fa 	srai	r22,r19,31
10004da0:	b005883a 	mov	r2,r22
10004da4:	003af706 	br	10003984 <__alt_data_end+0xf8003984>
10004da8:	9080100c 	andi	r2,r18,64
10004dac:	d8002785 	stb	zero,158(sp)
10004db0:	10008a1e 	bne	r2,zero,10004fdc <___vfprintf_internal_r+0x1ba8>
10004db4:	d9002e17 	ldw	r4,184(sp)
10004db8:	d9402a17 	ldw	r5,168(sp)
10004dbc:	002d883a 	mov	r22,zero
10004dc0:	20800104 	addi	r2,r4,4
10004dc4:	24c00017 	ldw	r19,0(r4)
10004dc8:	283e4b0e 	bge	r5,zero,100046f8 <__alt_data_end+0xf80046f8>
10004dcc:	9d86b03a 	or	r3,r19,r22
10004dd0:	d8802e15 	stw	r2,184(sp)
10004dd4:	183e4c1e 	bne	r3,zero,10004708 <__alt_data_end+0xf8004708>
10004dd8:	0039883a 	mov	fp,zero
10004ddc:	0005883a 	mov	r2,zero
10004de0:	003d4006 	br	100042e4 <__alt_data_end+0xf80042e4>
10004de4:	01440074 	movhi	r5,4097
10004de8:	294be884 	addi	r5,r5,12194
10004dec:	d9402c15 	stw	r5,176(sp)
10004df0:	d9402c17 	ldw	r5,176(sp)
10004df4:	1c47883a 	add	r3,r3,r17
10004df8:	10800044 	addi	r2,r2,1
10004dfc:	41400015 	stw	r5,0(r8)
10004e00:	44400115 	stw	r17,4(r8)
10004e04:	d8c02015 	stw	r3,128(sp)
10004e08:	d8801f15 	stw	r2,124(sp)
10004e0c:	010001c4 	movi	r4,7
10004e10:	20bec816 	blt	r4,r2,10004934 <__alt_data_end+0xf8004934>
10004e14:	42000204 	addi	r8,r8,8
10004e18:	003ecd06 	br	10004950 <__alt_data_end+0xf8004950>
10004e1c:	d9002a17 	ldw	r4,168(sp)
10004e20:	d8002785 	stb	zero,158(sp)
10004e24:	203d2d16 	blt	r4,zero,100042dc <__alt_data_end+0xf80042dc>
10004e28:	00bfdfc4 	movi	r2,-129
10004e2c:	90a4703a 	and	r18,r18,r2
10004e30:	003a6106 	br	100037b8 <__alt_data_end+0xf80037b8>
10004e34:	01040074 	movhi	r4,4097
10004e38:	210be884 	addi	r4,r4,12194
10004e3c:	d9002c15 	stw	r4,176(sp)
10004e40:	003bea06 	br	10003dec <__alt_data_end+0xf8003dec>
10004e44:	d9002d17 	ldw	r4,180(sp)
10004e48:	d9801e04 	addi	r6,sp,120
10004e4c:	b80b883a 	mov	r5,r23
10004e50:	000ac140 	call	1000ac14 <__sprint_r>
10004e54:	103a7b1e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10004e58:	d8c02017 	ldw	r3,128(sp)
10004e5c:	da000404 	addi	r8,sp,16
10004e60:	003d4106 	br	10004368 <__alt_data_end+0xf8004368>
10004e64:	d8801f17 	ldw	r2,124(sp)
10004e68:	01440074 	movhi	r5,4097
10004e6c:	01000044 	movi	r4,1
10004e70:	18c00044 	addi	r3,r3,1
10004e74:	10800044 	addi	r2,r2,1
10004e78:	294be804 	addi	r5,r5,12192
10004e7c:	41000115 	stw	r4,4(r8)
10004e80:	41400015 	stw	r5,0(r8)
10004e84:	d8c02015 	stw	r3,128(sp)
10004e88:	d8801f15 	stw	r2,124(sp)
10004e8c:	010001c4 	movi	r4,7
10004e90:	20805c16 	blt	r4,r2,10005004 <___vfprintf_internal_r+0x1bd0>
10004e94:	42000204 	addi	r8,r8,8
10004e98:	8800041e 	bne	r17,zero,10004eac <___vfprintf_internal_r+0x1a78>
10004e9c:	d8803317 	ldw	r2,204(sp)
10004ea0:	1000021e 	bne	r2,zero,10004eac <___vfprintf_internal_r+0x1a78>
10004ea4:	9080004c 	andi	r2,r18,1
10004ea8:	103be726 	beq	r2,zero,10003e48 <__alt_data_end+0xf8003e48>
10004eac:	d9003717 	ldw	r4,220(sp)
10004eb0:	d8801f17 	ldw	r2,124(sp)
10004eb4:	d9403417 	ldw	r5,208(sp)
10004eb8:	20c7883a 	add	r3,r4,r3
10004ebc:	10800044 	addi	r2,r2,1
10004ec0:	41000115 	stw	r4,4(r8)
10004ec4:	41400015 	stw	r5,0(r8)
10004ec8:	d8c02015 	stw	r3,128(sp)
10004ecc:	d8801f15 	stw	r2,124(sp)
10004ed0:	010001c4 	movi	r4,7
10004ed4:	20812116 	blt	r4,r2,1000535c <___vfprintf_internal_r+0x1f28>
10004ed8:	42000204 	addi	r8,r8,8
10004edc:	0463c83a 	sub	r17,zero,r17
10004ee0:	0440730e 	bge	zero,r17,100050b0 <___vfprintf_internal_r+0x1c7c>
10004ee4:	05800404 	movi	r22,16
10004ee8:	b440860e 	bge	r22,r17,10005104 <___vfprintf_internal_r+0x1cd0>
10004eec:	01440074 	movhi	r5,4097
10004ef0:	294be884 	addi	r5,r5,12194
10004ef4:	d9402c15 	stw	r5,176(sp)
10004ef8:	070001c4 	movi	fp,7
10004efc:	dcc02d17 	ldw	r19,180(sp)
10004f00:	00000306 	br	10004f10 <___vfprintf_internal_r+0x1adc>
10004f04:	42000204 	addi	r8,r8,8
10004f08:	8c7ffc04 	addi	r17,r17,-16
10004f0c:	b440800e 	bge	r22,r17,10005110 <___vfprintf_internal_r+0x1cdc>
10004f10:	18c00404 	addi	r3,r3,16
10004f14:	10800044 	addi	r2,r2,1
10004f18:	45000015 	stw	r20,0(r8)
10004f1c:	45800115 	stw	r22,4(r8)
10004f20:	d8c02015 	stw	r3,128(sp)
10004f24:	d8801f15 	stw	r2,124(sp)
10004f28:	e0bff60e 	bge	fp,r2,10004f04 <__alt_data_end+0xf8004f04>
10004f2c:	d9801e04 	addi	r6,sp,120
10004f30:	b80b883a 	mov	r5,r23
10004f34:	9809883a 	mov	r4,r19
10004f38:	000ac140 	call	1000ac14 <__sprint_r>
10004f3c:	103a411e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10004f40:	d8c02017 	ldw	r3,128(sp)
10004f44:	d8801f17 	ldw	r2,124(sp)
10004f48:	da000404 	addi	r8,sp,16
10004f4c:	003fee06 	br	10004f08 <__alt_data_end+0xf8004f08>
10004f50:	00bfffc4 	movi	r2,-1
10004f54:	003a3f06 	br	10003854 <__alt_data_end+0xf8003854>
10004f58:	008011c4 	movi	r2,71
10004f5c:	1440b816 	blt	r2,r17,10005240 <___vfprintf_internal_r+0x1e0c>
10004f60:	04040074 	movhi	r16,4097
10004f64:	840bda04 	addi	r16,r16,12136
10004f68:	00c000c4 	movi	r3,3
10004f6c:	00bfdfc4 	movi	r2,-129
10004f70:	d8c02915 	stw	r3,164(sp)
10004f74:	90a4703a 	and	r18,r18,r2
10004f78:	df002783 	ldbu	fp,158(sp)
10004f7c:	d8c02b15 	stw	r3,172(sp)
10004f80:	d8002a15 	stw	zero,168(sp)
10004f84:	d8003215 	stw	zero,200(sp)
10004f88:	003b0706 	br	10003ba8 <__alt_data_end+0xf8003ba8>
10004f8c:	d8c02e17 	ldw	r3,184(sp)
10004f90:	1cc00017 	ldw	r19,0(r3)
10004f94:	18c00104 	addi	r3,r3,4
10004f98:	d8c02e15 	stw	r3,184(sp)
10004f9c:	982dd7fa 	srai	r22,r19,31
10004fa0:	b005883a 	mov	r2,r22
10004fa4:	003a7706 	br	10003984 <__alt_data_end+0xf8003984>
10004fa8:	d8c02e17 	ldw	r3,184(sp)
10004fac:	d9002f17 	ldw	r4,188(sp)
10004fb0:	18800017 	ldw	r2,0(r3)
10004fb4:	18c00104 	addi	r3,r3,4
10004fb8:	d8c02e15 	stw	r3,184(sp)
10004fbc:	11000015 	stw	r4,0(r2)
10004fc0:	00395406 	br	10003514 <__alt_data_end+0xf8003514>
10004fc4:	d9002e17 	ldw	r4,184(sp)
10004fc8:	002d883a 	mov	r22,zero
10004fcc:	24c00017 	ldw	r19,0(r4)
10004fd0:	21000104 	addi	r4,r4,4
10004fd4:	d9002e15 	stw	r4,184(sp)
10004fd8:	003c0706 	br	10003ff8 <__alt_data_end+0xf8003ff8>
10004fdc:	d9402e17 	ldw	r5,184(sp)
10004fe0:	d8c02a17 	ldw	r3,168(sp)
10004fe4:	002d883a 	mov	r22,zero
10004fe8:	28800104 	addi	r2,r5,4
10004fec:	2cc0000b 	ldhu	r19,0(r5)
10004ff0:	183dc10e 	bge	r3,zero,100046f8 <__alt_data_end+0xf80046f8>
10004ff4:	003f7506 	br	10004dcc <__alt_data_end+0xf8004dcc>
10004ff8:	04040074 	movhi	r16,4097
10004ffc:	840bd804 	addi	r16,r16,12128
10005000:	003aa706 	br	10003aa0 <__alt_data_end+0xf8003aa0>
10005004:	d9002d17 	ldw	r4,180(sp)
10005008:	d9801e04 	addi	r6,sp,120
1000500c:	b80b883a 	mov	r5,r23
10005010:	000ac140 	call	1000ac14 <__sprint_r>
10005014:	103a0b1e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10005018:	dc402617 	ldw	r17,152(sp)
1000501c:	d8c02017 	ldw	r3,128(sp)
10005020:	da000404 	addi	r8,sp,16
10005024:	003f9c06 	br	10004e98 <__alt_data_end+0xf8004e98>
10005028:	ac400043 	ldbu	r17,1(r21)
1000502c:	84000814 	ori	r16,r16,32
10005030:	ad400044 	addi	r21,r21,1
10005034:	8c403fcc 	andi	r17,r17,255
10005038:	8c40201c 	xori	r17,r17,128
1000503c:	8c7fe004 	addi	r17,r17,-128
10005040:	00395e06 	br	100035bc <__alt_data_end+0xf80035bc>
10005044:	d8c02e15 	stw	r3,184(sp)
10005048:	0039883a 	mov	fp,zero
1000504c:	003e3506 	br	10004924 <__alt_data_end+0xf8004924>
10005050:	d9002d17 	ldw	r4,180(sp)
10005054:	d9801e04 	addi	r6,sp,120
10005058:	b80b883a 	mov	r5,r23
1000505c:	000ac140 	call	1000ac14 <__sprint_r>
10005060:	1039f81e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10005064:	d8c02017 	ldw	r3,128(sp)
10005068:	da000404 	addi	r8,sp,16
1000506c:	003cd006 	br	100043b0 <__alt_data_end+0xf80043b0>
10005070:	8009883a 	mov	r4,r16
10005074:	df003d15 	stw	fp,244(sp)
10005078:	000339c0 	call	1000339c <strlen>
1000507c:	d8802b15 	stw	r2,172(sp)
10005080:	da003d17 	ldw	r8,244(sp)
10005084:	103c200e 	bge	r2,zero,10004108 <__alt_data_end+0xf8004108>
10005088:	0005883a 	mov	r2,zero
1000508c:	003c1e06 	br	10004108 <__alt_data_end+0xf8004108>
10005090:	d9002d17 	ldw	r4,180(sp)
10005094:	d9801e04 	addi	r6,sp,120
10005098:	b80b883a 	mov	r5,r23
1000509c:	000ac140 	call	1000ac14 <__sprint_r>
100050a0:	1039e81e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
100050a4:	d8c02017 	ldw	r3,128(sp)
100050a8:	d8801f17 	ldw	r2,124(sp)
100050ac:	da000404 	addi	r8,sp,16
100050b0:	d9403317 	ldw	r5,204(sp)
100050b4:	10800044 	addi	r2,r2,1
100050b8:	44000015 	stw	r16,0(r8)
100050bc:	28c7883a 	add	r3,r5,r3
100050c0:	003b5b06 	br	10003e30 <__alt_data_end+0xf8003e30>
100050c4:	01040074 	movhi	r4,4097
100050c8:	210bec84 	addi	r4,r4,12210
100050cc:	d9003515 	stw	r4,212(sp)
100050d0:	003af206 	br	10003c9c <__alt_data_end+0xf8003c9c>
100050d4:	013fffc4 	movi	r4,-1
100050d8:	003a0806 	br	100038fc <__alt_data_end+0xf80038fc>
100050dc:	0023883a 	mov	r17,zero
100050e0:	003d9d06 	br	10004758 <__alt_data_end+0xf8004758>
100050e4:	d9002d17 	ldw	r4,180(sp)
100050e8:	d9801e04 	addi	r6,sp,120
100050ec:	b80b883a 	mov	r5,r23
100050f0:	000ac140 	call	1000ac14 <__sprint_r>
100050f4:	1039d31e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
100050f8:	d8c02017 	ldw	r3,128(sp)
100050fc:	da000404 	addi	r8,sp,16
10005100:	003d9406 	br	10004754 <__alt_data_end+0xf8004754>
10005104:	01040074 	movhi	r4,4097
10005108:	210be884 	addi	r4,r4,12194
1000510c:	d9002c15 	stw	r4,176(sp)
10005110:	d9002c17 	ldw	r4,176(sp)
10005114:	1c47883a 	add	r3,r3,r17
10005118:	10800044 	addi	r2,r2,1
1000511c:	41000015 	stw	r4,0(r8)
10005120:	44400115 	stw	r17,4(r8)
10005124:	d8c02015 	stw	r3,128(sp)
10005128:	d8801f15 	stw	r2,124(sp)
1000512c:	010001c4 	movi	r4,7
10005130:	20bfd716 	blt	r4,r2,10005090 <__alt_data_end+0xf8005090>
10005134:	42000204 	addi	r8,r8,8
10005138:	003fdd06 	br	100050b0 <__alt_data_end+0xf80050b0>
1000513c:	d9002d17 	ldw	r4,180(sp)
10005140:	d9801e04 	addi	r6,sp,120
10005144:	b80b883a 	mov	r5,r23
10005148:	000ac140 	call	1000ac14 <__sprint_r>
1000514c:	1039bd1e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10005150:	d8802617 	ldw	r2,152(sp)
10005154:	d8c02017 	ldw	r3,128(sp)
10005158:	da000404 	addi	r8,sp,16
1000515c:	003e1006 	br	100049a0 <__alt_data_end+0xf80049a0>
10005160:	00800044 	movi	r2,1
10005164:	10803fcc 	andi	r2,r2,255
10005168:	00c00044 	movi	r3,1
1000516c:	10fa0d26 	beq	r2,r3,100039a4 <__alt_data_end+0xf80039a4>
10005170:	00c00084 	movi	r3,2
10005174:	10fbaf26 	beq	r2,r3,10004034 <__alt_data_end+0xf8004034>
10005178:	003a6d06 	br	10003b30 <__alt_data_end+0xf8003b30>
1000517c:	01040074 	movhi	r4,4097
10005180:	210bec84 	addi	r4,r4,12210
10005184:	d9003515 	stw	r4,212(sp)
10005188:	003b5406 	br	10003edc <__alt_data_end+0xf8003edc>
1000518c:	d8802a17 	ldw	r2,168(sp)
10005190:	00c00184 	movi	r3,6
10005194:	1880012e 	bgeu	r3,r2,1000519c <___vfprintf_internal_r+0x1d68>
10005198:	1805883a 	mov	r2,r3
1000519c:	d8802b15 	stw	r2,172(sp)
100051a0:	1000ef16 	blt	r2,zero,10005560 <___vfprintf_internal_r+0x212c>
100051a4:	04040074 	movhi	r16,4097
100051a8:	d8802915 	stw	r2,164(sp)
100051ac:	dcc02e15 	stw	r19,184(sp)
100051b0:	d8002a15 	stw	zero,168(sp)
100051b4:	d8003215 	stw	zero,200(sp)
100051b8:	840be604 	addi	r16,r16,12184
100051bc:	0039883a 	mov	fp,zero
100051c0:	003a8006 	br	10003bc4 <__alt_data_end+0xf8003bc4>
100051c4:	0021883a 	mov	r16,zero
100051c8:	003e0706 	br	100049e8 <__alt_data_end+0xf80049e8>
100051cc:	d9002d17 	ldw	r4,180(sp)
100051d0:	d9801e04 	addi	r6,sp,120
100051d4:	b80b883a 	mov	r5,r23
100051d8:	000ac140 	call	1000ac14 <__sprint_r>
100051dc:	1039991e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
100051e0:	d8802617 	ldw	r2,152(sp)
100051e4:	d9403317 	ldw	r5,204(sp)
100051e8:	d8c02017 	ldw	r3,128(sp)
100051ec:	da000404 	addi	r8,sp,16
100051f0:	2885c83a 	sub	r2,r5,r2
100051f4:	003dfb06 	br	100049e4 <__alt_data_end+0xf80049e4>
100051f8:	9080004c 	andi	r2,r18,1
100051fc:	103e8f1e 	bne	r2,zero,10004c3c <__alt_data_end+0xf8004c3c>
10005200:	d8802117 	ldw	r2,132(sp)
10005204:	003e9e06 	br	10004c80 <__alt_data_end+0xf8004c80>
10005208:	1025883a 	mov	r18,r2
1000520c:	0039883a 	mov	fp,zero
10005210:	00800084 	movi	r2,2
10005214:	003fd306 	br	10005164 <__alt_data_end+0xf8005164>
10005218:	07000b44 	movi	fp,45
1000521c:	df002785 	stb	fp,158(sp)
10005220:	003a1b06 	br	10003a90 <__alt_data_end+0xf8003a90>
10005224:	00c00b44 	movi	r3,45
10005228:	d8c02785 	stb	r3,158(sp)
1000522c:	d8802915 	stw	r2,164(sp)
10005230:	dc802c17 	ldw	r18,176(sp)
10005234:	d8002a15 	stw	zero,168(sp)
10005238:	07000b44 	movi	fp,45
1000523c:	003a5e06 	br	10003bb8 <__alt_data_end+0xf8003bb8>
10005240:	04040074 	movhi	r16,4097
10005244:	840bdb04 	addi	r16,r16,12140
10005248:	003f4706 	br	10004f68 <__alt_data_end+0xf8004f68>
1000524c:	d9002e17 	ldw	r4,184(sp)
10005250:	d9402f17 	ldw	r5,188(sp)
10005254:	20800017 	ldw	r2,0(r4)
10005258:	21000104 	addi	r4,r4,4
1000525c:	d9002e15 	stw	r4,184(sp)
10005260:	11400015 	stw	r5,0(r2)
10005264:	0038ab06 	br	10003514 <__alt_data_end+0xf8003514>
10005268:	dd802617 	ldw	r22,152(sp)
1000526c:	00bfff44 	movi	r2,-3
10005270:	b0801c16 	blt	r22,r2,100052e4 <___vfprintf_internal_r+0x1eb0>
10005274:	d9402a17 	ldw	r5,168(sp)
10005278:	2d801a16 	blt	r5,r22,100052e4 <___vfprintf_internal_r+0x1eb0>
1000527c:	dd803215 	stw	r22,200(sp)
10005280:	003e8906 	br	10004ca8 <__alt_data_end+0xf8004ca8>
10005284:	01040074 	movhi	r4,4097
10005288:	210be884 	addi	r4,r4,12194
1000528c:	d9002c15 	stw	r4,176(sp)
10005290:	003c9106 	br	100044d8 <__alt_data_end+0xf80044d8>
10005294:	e005883a 	mov	r2,fp
10005298:	003e7906 	br	10004c80 <__alt_data_end+0xf8004c80>
1000529c:	d9002a17 	ldw	r4,168(sp)
100052a0:	df002783 	ldbu	fp,158(sp)
100052a4:	dcc02e15 	stw	r19,184(sp)
100052a8:	d9002915 	stw	r4,164(sp)
100052ac:	d9002b15 	stw	r4,172(sp)
100052b0:	d8002a15 	stw	zero,168(sp)
100052b4:	d8003215 	stw	zero,200(sp)
100052b8:	003a3b06 	br	10003ba8 <__alt_data_end+0xf8003ba8>
100052bc:	9080004c 	andi	r2,r18,1
100052c0:	0039883a 	mov	fp,zero
100052c4:	10000426 	beq	r2,zero,100052d8 <___vfprintf_internal_r+0x1ea4>
100052c8:	00800c04 	movi	r2,48
100052cc:	dc001dc4 	addi	r16,sp,119
100052d0:	d8801dc5 	stb	r2,119(sp)
100052d4:	003b6406 	br	10004068 <__alt_data_end+0xf8004068>
100052d8:	d8002b15 	stw	zero,172(sp)
100052dc:	dc001e04 	addi	r16,sp,120
100052e0:	003a2b06 	br	10003b90 <__alt_data_end+0xf8003b90>
100052e4:	8c7fff84 	addi	r17,r17,-2
100052e8:	b5bfffc4 	addi	r22,r22,-1
100052ec:	dd802615 	stw	r22,152(sp)
100052f0:	dc4022c5 	stb	r17,139(sp)
100052f4:	b000bf16 	blt	r22,zero,100055f4 <___vfprintf_internal_r+0x21c0>
100052f8:	00800ac4 	movi	r2,43
100052fc:	d8802305 	stb	r2,140(sp)
10005300:	00800244 	movi	r2,9
10005304:	15807016 	blt	r2,r22,100054c8 <___vfprintf_internal_r+0x2094>
10005308:	00800c04 	movi	r2,48
1000530c:	b5800c04 	addi	r22,r22,48
10005310:	d8802345 	stb	r2,141(sp)
10005314:	dd802385 	stb	r22,142(sp)
10005318:	d88023c4 	addi	r2,sp,143
1000531c:	df0022c4 	addi	fp,sp,139
10005320:	d8c03317 	ldw	r3,204(sp)
10005324:	1739c83a 	sub	fp,r2,fp
10005328:	d9003317 	ldw	r4,204(sp)
1000532c:	e0c7883a 	add	r3,fp,r3
10005330:	df003a15 	stw	fp,232(sp)
10005334:	d8c02b15 	stw	r3,172(sp)
10005338:	00800044 	movi	r2,1
1000533c:	1100b30e 	bge	r2,r4,1000560c <___vfprintf_internal_r+0x21d8>
10005340:	d8c02b17 	ldw	r3,172(sp)
10005344:	18c00044 	addi	r3,r3,1
10005348:	d8c02b15 	stw	r3,172(sp)
1000534c:	1805883a 	mov	r2,r3
10005350:	1800ac16 	blt	r3,zero,10005604 <___vfprintf_internal_r+0x21d0>
10005354:	d8003215 	stw	zero,200(sp)
10005358:	003e5d06 	br	10004cd0 <__alt_data_end+0xf8004cd0>
1000535c:	d9002d17 	ldw	r4,180(sp)
10005360:	d9801e04 	addi	r6,sp,120
10005364:	b80b883a 	mov	r5,r23
10005368:	000ac140 	call	1000ac14 <__sprint_r>
1000536c:	1039351e 	bne	r2,zero,10003844 <__alt_data_end+0xf8003844>
10005370:	dc402617 	ldw	r17,152(sp)
10005374:	d8c02017 	ldw	r3,128(sp)
10005378:	d8801f17 	ldw	r2,124(sp)
1000537c:	da000404 	addi	r8,sp,16
10005380:	003ed606 	br	10004edc <__alt_data_end+0xf8004edc>
10005384:	182b883a 	mov	r21,r3
10005388:	d8002a15 	stw	zero,168(sp)
1000538c:	00388c06 	br	100035c0 <__alt_data_end+0xf80035c0>
10005390:	d8802a17 	ldw	r2,168(sp)
10005394:	103e071e 	bne	r2,zero,10004bb4 <__alt_data_end+0xf8004bb4>
10005398:	dc002a15 	stw	r16,168(sp)
1000539c:	003e0506 	br	10004bb4 <__alt_data_end+0xf8004bb4>
100053a0:	d9002a17 	ldw	r4,168(sp)
100053a4:	20c00044 	addi	r3,r4,1
100053a8:	003e0f06 	br	10004be8 <__alt_data_end+0xf8004be8>
100053ac:	01400184 	movi	r5,6
100053b0:	d9402a15 	stw	r5,168(sp)
100053b4:	003dff06 	br	10004bb4 <__alt_data_end+0xf8004bb4>
100053b8:	d8802104 	addi	r2,sp,132
100053bc:	d8800315 	stw	r2,12(sp)
100053c0:	d8802504 	addi	r2,sp,148
100053c4:	d8800215 	stw	r2,8(sp)
100053c8:	d8802604 	addi	r2,sp,152
100053cc:	d8800115 	stw	r2,4(sp)
100053d0:	d8802a17 	ldw	r2,168(sp)
100053d4:	d9403617 	ldw	r5,216(sp)
100053d8:	d9002d17 	ldw	r4,180(sp)
100053dc:	d8800015 	stw	r2,0(sp)
100053e0:	01c000c4 	movi	r7,3
100053e4:	980d883a 	mov	r6,r19
100053e8:	da003d15 	stw	r8,244(sp)
100053ec:	0005b640 	call	10005b64 <_dtoa_r>
100053f0:	d8c02a17 	ldw	r3,168(sp)
100053f4:	da003d17 	ldw	r8,244(sp)
100053f8:	1021883a 	mov	r16,r2
100053fc:	10f9883a 	add	fp,r2,r3
10005400:	81000007 	ldb	r4,0(r16)
10005404:	00800c04 	movi	r2,48
10005408:	20805e26 	beq	r4,r2,10005584 <___vfprintf_internal_r+0x2150>
1000540c:	d8c02617 	ldw	r3,152(sp)
10005410:	e0f9883a 	add	fp,fp,r3
10005414:	003e0a06 	br	10004c40 <__alt_data_end+0xf8004c40>
10005418:	00c00b44 	movi	r3,45
1000541c:	24e0003c 	xorhi	r19,r4,32768
10005420:	d8c02905 	stb	r3,164(sp)
10005424:	003de906 	br	10004bcc <__alt_data_end+0xf8004bcc>
10005428:	d8c03217 	ldw	r3,200(sp)
1000542c:	00c07a0e 	bge	zero,r3,10005618 <___vfprintf_internal_r+0x21e4>
10005430:	00800044 	movi	r2,1
10005434:	d9003317 	ldw	r4,204(sp)
10005438:	1105883a 	add	r2,r2,r4
1000543c:	d8802b15 	stw	r2,172(sp)
10005440:	10004e16 	blt	r2,zero,1000557c <___vfprintf_internal_r+0x2148>
10005444:	044019c4 	movi	r17,103
10005448:	003e2106 	br	10004cd0 <__alt_data_end+0xf8004cd0>
1000544c:	d9002a17 	ldw	r4,168(sp)
10005450:	d8802104 	addi	r2,sp,132
10005454:	d8800315 	stw	r2,12(sp)
10005458:	d9000015 	stw	r4,0(sp)
1000545c:	d8802504 	addi	r2,sp,148
10005460:	d9403617 	ldw	r5,216(sp)
10005464:	d9002d17 	ldw	r4,180(sp)
10005468:	d8800215 	stw	r2,8(sp)
1000546c:	d8802604 	addi	r2,sp,152
10005470:	d8800115 	stw	r2,4(sp)
10005474:	01c000c4 	movi	r7,3
10005478:	980d883a 	mov	r6,r19
1000547c:	da003d15 	stw	r8,244(sp)
10005480:	0005b640 	call	10005b64 <_dtoa_r>
10005484:	d8c02a17 	ldw	r3,168(sp)
10005488:	da003d17 	ldw	r8,244(sp)
1000548c:	1021883a 	mov	r16,r2
10005490:	00801184 	movi	r2,70
10005494:	80f9883a 	add	fp,r16,r3
10005498:	88bfd926 	beq	r17,r2,10005400 <__alt_data_end+0xf8005400>
1000549c:	003de806 	br	10004c40 <__alt_data_end+0xf8004c40>
100054a0:	d9002a17 	ldw	r4,168(sp)
100054a4:	00c04d0e 	bge	zero,r3,100055dc <___vfprintf_internal_r+0x21a8>
100054a8:	2000441e 	bne	r4,zero,100055bc <___vfprintf_internal_r+0x2188>
100054ac:	9480004c 	andi	r18,r18,1
100054b0:	9000421e 	bne	r18,zero,100055bc <___vfprintf_internal_r+0x2188>
100054b4:	1805883a 	mov	r2,r3
100054b8:	18006f16 	blt	r3,zero,10005678 <___vfprintf_internal_r+0x2244>
100054bc:	d8c03217 	ldw	r3,200(sp)
100054c0:	d8c02b15 	stw	r3,172(sp)
100054c4:	003e0206 	br	10004cd0 <__alt_data_end+0xf8004cd0>
100054c8:	df0022c4 	addi	fp,sp,139
100054cc:	dc002a15 	stw	r16,168(sp)
100054d0:	4027883a 	mov	r19,r8
100054d4:	e021883a 	mov	r16,fp
100054d8:	b009883a 	mov	r4,r22
100054dc:	01400284 	movi	r5,10
100054e0:	000312c0 	call	1000312c <__modsi3>
100054e4:	10800c04 	addi	r2,r2,48
100054e8:	843fffc4 	addi	r16,r16,-1
100054ec:	b009883a 	mov	r4,r22
100054f0:	01400284 	movi	r5,10
100054f4:	80800005 	stb	r2,0(r16)
100054f8:	00030a80 	call	100030a8 <__divsi3>
100054fc:	102d883a 	mov	r22,r2
10005500:	00800244 	movi	r2,9
10005504:	15bff416 	blt	r2,r22,100054d8 <__alt_data_end+0xf80054d8>
10005508:	9811883a 	mov	r8,r19
1000550c:	b0800c04 	addi	r2,r22,48
10005510:	8027883a 	mov	r19,r16
10005514:	997fffc4 	addi	r5,r19,-1
10005518:	98bfffc5 	stb	r2,-1(r19)
1000551c:	dc002a17 	ldw	r16,168(sp)
10005520:	2f006d2e 	bgeu	r5,fp,100056d8 <___vfprintf_internal_r+0x22a4>
10005524:	d9c02384 	addi	r7,sp,142
10005528:	3ccfc83a 	sub	r7,r7,r19
1000552c:	d9002344 	addi	r4,sp,141
10005530:	e1cf883a 	add	r7,fp,r7
10005534:	00000106 	br	1000553c <___vfprintf_internal_r+0x2108>
10005538:	28800003 	ldbu	r2,0(r5)
1000553c:	20800005 	stb	r2,0(r4)
10005540:	21000044 	addi	r4,r4,1
10005544:	29400044 	addi	r5,r5,1
10005548:	393ffb1e 	bne	r7,r4,10005538 <__alt_data_end+0xf8005538>
1000554c:	d8802304 	addi	r2,sp,140
10005550:	14c5c83a 	sub	r2,r2,r19
10005554:	d8c02344 	addi	r3,sp,141
10005558:	1885883a 	add	r2,r3,r2
1000555c:	003f7006 	br	10005320 <__alt_data_end+0xf8005320>
10005560:	0005883a 	mov	r2,zero
10005564:	003f0f06 	br	100051a4 <__alt_data_end+0xf80051a4>
10005568:	d8c03217 	ldw	r3,200(sp)
1000556c:	18c00044 	addi	r3,r3,1
10005570:	d8c02b15 	stw	r3,172(sp)
10005574:	1805883a 	mov	r2,r3
10005578:	183fb20e 	bge	r3,zero,10005444 <__alt_data_end+0xf8005444>
1000557c:	0005883a 	mov	r2,zero
10005580:	003fb006 	br	10005444 <__alt_data_end+0xf8005444>
10005584:	d9003617 	ldw	r4,216(sp)
10005588:	000d883a 	mov	r6,zero
1000558c:	000f883a 	mov	r7,zero
10005590:	980b883a 	mov	r5,r19
10005594:	d8c03c15 	stw	r3,240(sp)
10005598:	da003d15 	stw	r8,244(sp)
1000559c:	000e9c00 	call	1000e9c0 <__eqdf2>
100055a0:	d8c03c17 	ldw	r3,240(sp)
100055a4:	da003d17 	ldw	r8,244(sp)
100055a8:	103f9826 	beq	r2,zero,1000540c <__alt_data_end+0xf800540c>
100055ac:	00800044 	movi	r2,1
100055b0:	10c7c83a 	sub	r3,r2,r3
100055b4:	d8c02615 	stw	r3,152(sp)
100055b8:	003f9506 	br	10005410 <__alt_data_end+0xf8005410>
100055bc:	d9002a17 	ldw	r4,168(sp)
100055c0:	d8c03217 	ldw	r3,200(sp)
100055c4:	20800044 	addi	r2,r4,1
100055c8:	1885883a 	add	r2,r3,r2
100055cc:	d8802b15 	stw	r2,172(sp)
100055d0:	103dbf0e 	bge	r2,zero,10004cd0 <__alt_data_end+0xf8004cd0>
100055d4:	0005883a 	mov	r2,zero
100055d8:	003dbd06 	br	10004cd0 <__alt_data_end+0xf8004cd0>
100055dc:	2000201e 	bne	r4,zero,10005660 <___vfprintf_internal_r+0x222c>
100055e0:	9480004c 	andi	r18,r18,1
100055e4:	90001e1e 	bne	r18,zero,10005660 <___vfprintf_internal_r+0x222c>
100055e8:	00800044 	movi	r2,1
100055ec:	d8802b15 	stw	r2,172(sp)
100055f0:	003db706 	br	10004cd0 <__alt_data_end+0xf8004cd0>
100055f4:	00800b44 	movi	r2,45
100055f8:	05adc83a 	sub	r22,zero,r22
100055fc:	d8802305 	stb	r2,140(sp)
10005600:	003f3f06 	br	10005300 <__alt_data_end+0xf8005300>
10005604:	0005883a 	mov	r2,zero
10005608:	003f5206 	br	10005354 <__alt_data_end+0xf8005354>
1000560c:	90a4703a 	and	r18,r18,r2
10005610:	903f4e26 	beq	r18,zero,1000534c <__alt_data_end+0xf800534c>
10005614:	003f4a06 	br	10005340 <__alt_data_end+0xf8005340>
10005618:	00800084 	movi	r2,2
1000561c:	10c5c83a 	sub	r2,r2,r3
10005620:	003f8406 	br	10005434 <__alt_data_end+0xf8005434>
10005624:	d9402e17 	ldw	r5,184(sp)
10005628:	d9002e17 	ldw	r4,184(sp)
1000562c:	ac400043 	ldbu	r17,1(r21)
10005630:	29400017 	ldw	r5,0(r5)
10005634:	20800104 	addi	r2,r4,4
10005638:	d8802e15 	stw	r2,184(sp)
1000563c:	d9402a15 	stw	r5,168(sp)
10005640:	182b883a 	mov	r21,r3
10005644:	283e7b0e 	bge	r5,zero,10005034 <__alt_data_end+0xf8005034>
10005648:	8c403fcc 	andi	r17,r17,255
1000564c:	017fffc4 	movi	r5,-1
10005650:	8c40201c 	xori	r17,r17,128
10005654:	d9402a15 	stw	r5,168(sp)
10005658:	8c7fe004 	addi	r17,r17,-128
1000565c:	0037d706 	br	100035bc <__alt_data_end+0xf80035bc>
10005660:	d8c02a17 	ldw	r3,168(sp)
10005664:	18c00084 	addi	r3,r3,2
10005668:	d8c02b15 	stw	r3,172(sp)
1000566c:	1805883a 	mov	r2,r3
10005670:	183d970e 	bge	r3,zero,10004cd0 <__alt_data_end+0xf8004cd0>
10005674:	003fd706 	br	100055d4 <__alt_data_end+0xf80055d4>
10005678:	0005883a 	mov	r2,zero
1000567c:	003f8f06 	br	100054bc <__alt_data_end+0xf80054bc>
10005680:	9080004c 	andi	r2,r18,1
10005684:	103f821e 	bne	r2,zero,10005490 <__alt_data_end+0xf8005490>
10005688:	d8802117 	ldw	r2,132(sp)
1000568c:	1405c83a 	sub	r2,r2,r16
10005690:	d8803315 	stw	r2,204(sp)
10005694:	b47ef426 	beq	r22,r17,10005268 <__alt_data_end+0xf8005268>
10005698:	dd802617 	ldw	r22,152(sp)
1000569c:	003f1206 	br	100052e8 <__alt_data_end+0xf80052e8>
100056a0:	d8c02b03 	ldbu	r3,172(sp)
100056a4:	d8c02785 	stb	r3,158(sp)
100056a8:	0038df06 	br	10003a28 <__alt_data_end+0xf8003a28>
100056ac:	d8c02b03 	ldbu	r3,172(sp)
100056b0:	d8c02785 	stb	r3,158(sp)
100056b4:	0038aa06 	br	10003960 <__alt_data_end+0xf8003960>
100056b8:	d8c02b03 	ldbu	r3,172(sp)
100056bc:	d8c02785 	stb	r3,158(sp)
100056c0:	003a4306 	br	10003fd0 <__alt_data_end+0xf8003fd0>
100056c4:	d8c02b03 	ldbu	r3,172(sp)
100056c8:	d8c02785 	stb	r3,158(sp)
100056cc:	003af506 	br	100042a4 <__alt_data_end+0xf80042a4>
100056d0:	0005883a 	mov	r2,zero
100056d4:	003d7b06 	br	10004cc4 <__alt_data_end+0xf8004cc4>
100056d8:	d8802344 	addi	r2,sp,141
100056dc:	003f1006 	br	10005320 <__alt_data_end+0xf8005320>
100056e0:	d8c02b03 	ldbu	r3,172(sp)
100056e4:	d8c02785 	stb	r3,158(sp)
100056e8:	0038fd06 	br	10003ae0 <__alt_data_end+0xf8003ae0>
100056ec:	d8c02b03 	ldbu	r3,172(sp)
100056f0:	d8c02785 	stb	r3,158(sp)
100056f4:	003a9706 	br	10004154 <__alt_data_end+0xf8004154>
100056f8:	d8c02b03 	ldbu	r3,172(sp)
100056fc:	d8c02785 	stb	r3,158(sp)
10005700:	003a1806 	br	10003f64 <__alt_data_end+0xf8003f64>
10005704:	d8c02b03 	ldbu	r3,172(sp)
10005708:	d8c02785 	stb	r3,158(sp)
1000570c:	003abe06 	br	10004208 <__alt_data_end+0xf8004208>

10005710 <__vfprintf_internal>:
10005710:	00840074 	movhi	r2,4097
10005714:	10934c04 	addi	r2,r2,19760
10005718:	300f883a 	mov	r7,r6
1000571c:	280d883a 	mov	r6,r5
10005720:	200b883a 	mov	r5,r4
10005724:	11000017 	ldw	r4,0(r2)
10005728:	00034341 	jmpi	10003434 <___vfprintf_internal_r>

1000572c <__sbprintf>:
1000572c:	2880030b 	ldhu	r2,12(r5)
10005730:	2ac01917 	ldw	r11,100(r5)
10005734:	2a80038b 	ldhu	r10,14(r5)
10005738:	2a400717 	ldw	r9,28(r5)
1000573c:	2a000917 	ldw	r8,36(r5)
10005740:	defee204 	addi	sp,sp,-1144
10005744:	00c10004 	movi	r3,1024
10005748:	dc011a15 	stw	r16,1128(sp)
1000574c:	10bfff4c 	andi	r2,r2,65533
10005750:	2821883a 	mov	r16,r5
10005754:	d8cb883a 	add	r5,sp,r3
10005758:	dc811c15 	stw	r18,1136(sp)
1000575c:	dc411b15 	stw	r17,1132(sp)
10005760:	dfc11d15 	stw	ra,1140(sp)
10005764:	2025883a 	mov	r18,r4
10005768:	d881030d 	sth	r2,1036(sp)
1000576c:	dac11915 	stw	r11,1124(sp)
10005770:	da81038d 	sth	r10,1038(sp)
10005774:	da410715 	stw	r9,1052(sp)
10005778:	da010915 	stw	r8,1060(sp)
1000577c:	dec10015 	stw	sp,1024(sp)
10005780:	dec10415 	stw	sp,1040(sp)
10005784:	d8c10215 	stw	r3,1032(sp)
10005788:	d8c10515 	stw	r3,1044(sp)
1000578c:	d8010615 	stw	zero,1048(sp)
10005790:	00034340 	call	10003434 <___vfprintf_internal_r>
10005794:	1023883a 	mov	r17,r2
10005798:	10000416 	blt	r2,zero,100057ac <__sbprintf+0x80>
1000579c:	d9410004 	addi	r5,sp,1024
100057a0:	9009883a 	mov	r4,r18
100057a4:	00074080 	call	10007408 <_fflush_r>
100057a8:	10000d1e 	bne	r2,zero,100057e0 <__sbprintf+0xb4>
100057ac:	d881030b 	ldhu	r2,1036(sp)
100057b0:	1080100c 	andi	r2,r2,64
100057b4:	10000326 	beq	r2,zero,100057c4 <__sbprintf+0x98>
100057b8:	8080030b 	ldhu	r2,12(r16)
100057bc:	10801014 	ori	r2,r2,64
100057c0:	8080030d 	sth	r2,12(r16)
100057c4:	8805883a 	mov	r2,r17
100057c8:	dfc11d17 	ldw	ra,1140(sp)
100057cc:	dc811c17 	ldw	r18,1136(sp)
100057d0:	dc411b17 	ldw	r17,1132(sp)
100057d4:	dc011a17 	ldw	r16,1128(sp)
100057d8:	dec11e04 	addi	sp,sp,1144
100057dc:	f800283a 	ret
100057e0:	047fffc4 	movi	r17,-1
100057e4:	003ff106 	br	100057ac <__alt_data_end+0xf80057ac>

100057e8 <__swsetup_r>:
100057e8:	00840074 	movhi	r2,4097
100057ec:	defffd04 	addi	sp,sp,-12
100057f0:	10934c04 	addi	r2,r2,19760
100057f4:	dc400115 	stw	r17,4(sp)
100057f8:	2023883a 	mov	r17,r4
100057fc:	11000017 	ldw	r4,0(r2)
10005800:	dc000015 	stw	r16,0(sp)
10005804:	dfc00215 	stw	ra,8(sp)
10005808:	2821883a 	mov	r16,r5
1000580c:	20000226 	beq	r4,zero,10005818 <__swsetup_r+0x30>
10005810:	20800e17 	ldw	r2,56(r4)
10005814:	10003126 	beq	r2,zero,100058dc <__swsetup_r+0xf4>
10005818:	8080030b 	ldhu	r2,12(r16)
1000581c:	10c0020c 	andi	r3,r2,8
10005820:	1009883a 	mov	r4,r2
10005824:	18000f26 	beq	r3,zero,10005864 <__swsetup_r+0x7c>
10005828:	80c00417 	ldw	r3,16(r16)
1000582c:	18001526 	beq	r3,zero,10005884 <__swsetup_r+0x9c>
10005830:	1100004c 	andi	r4,r2,1
10005834:	20001c1e 	bne	r4,zero,100058a8 <__swsetup_r+0xc0>
10005838:	1080008c 	andi	r2,r2,2
1000583c:	1000291e 	bne	r2,zero,100058e4 <__swsetup_r+0xfc>
10005840:	80800517 	ldw	r2,20(r16)
10005844:	80800215 	stw	r2,8(r16)
10005848:	18001c26 	beq	r3,zero,100058bc <__swsetup_r+0xd4>
1000584c:	0005883a 	mov	r2,zero
10005850:	dfc00217 	ldw	ra,8(sp)
10005854:	dc400117 	ldw	r17,4(sp)
10005858:	dc000017 	ldw	r16,0(sp)
1000585c:	dec00304 	addi	sp,sp,12
10005860:	f800283a 	ret
10005864:	2080040c 	andi	r2,r4,16
10005868:	10002e26 	beq	r2,zero,10005924 <__swsetup_r+0x13c>
1000586c:	2080010c 	andi	r2,r4,4
10005870:	10001e1e 	bne	r2,zero,100058ec <__swsetup_r+0x104>
10005874:	80c00417 	ldw	r3,16(r16)
10005878:	20800214 	ori	r2,r4,8
1000587c:	8080030d 	sth	r2,12(r16)
10005880:	183feb1e 	bne	r3,zero,10005830 <__alt_data_end+0xf8005830>
10005884:	1100a00c 	andi	r4,r2,640
10005888:	01408004 	movi	r5,512
1000588c:	217fe826 	beq	r4,r5,10005830 <__alt_data_end+0xf8005830>
10005890:	800b883a 	mov	r5,r16
10005894:	8809883a 	mov	r4,r17
10005898:	00083a40 	call	100083a4 <__smakebuf_r>
1000589c:	8080030b 	ldhu	r2,12(r16)
100058a0:	80c00417 	ldw	r3,16(r16)
100058a4:	003fe206 	br	10005830 <__alt_data_end+0xf8005830>
100058a8:	80800517 	ldw	r2,20(r16)
100058ac:	80000215 	stw	zero,8(r16)
100058b0:	0085c83a 	sub	r2,zero,r2
100058b4:	80800615 	stw	r2,24(r16)
100058b8:	183fe41e 	bne	r3,zero,1000584c <__alt_data_end+0xf800584c>
100058bc:	80c0030b 	ldhu	r3,12(r16)
100058c0:	0005883a 	mov	r2,zero
100058c4:	1900200c 	andi	r4,r3,128
100058c8:	203fe126 	beq	r4,zero,10005850 <__alt_data_end+0xf8005850>
100058cc:	18c01014 	ori	r3,r3,64
100058d0:	80c0030d 	sth	r3,12(r16)
100058d4:	00bfffc4 	movi	r2,-1
100058d8:	003fdd06 	br	10005850 <__alt_data_end+0xf8005850>
100058dc:	00077f40 	call	100077f4 <__sinit>
100058e0:	003fcd06 	br	10005818 <__alt_data_end+0xf8005818>
100058e4:	0005883a 	mov	r2,zero
100058e8:	003fd606 	br	10005844 <__alt_data_end+0xf8005844>
100058ec:	81400c17 	ldw	r5,48(r16)
100058f0:	28000626 	beq	r5,zero,1000590c <__swsetup_r+0x124>
100058f4:	80801004 	addi	r2,r16,64
100058f8:	28800326 	beq	r5,r2,10005908 <__swsetup_r+0x120>
100058fc:	8809883a 	mov	r4,r17
10005900:	00079680 	call	10007968 <_free_r>
10005904:	8100030b 	ldhu	r4,12(r16)
10005908:	80000c15 	stw	zero,48(r16)
1000590c:	80c00417 	ldw	r3,16(r16)
10005910:	00bff6c4 	movi	r2,-37
10005914:	1108703a 	and	r4,r2,r4
10005918:	80000115 	stw	zero,4(r16)
1000591c:	80c00015 	stw	r3,0(r16)
10005920:	003fd506 	br	10005878 <__alt_data_end+0xf8005878>
10005924:	00800244 	movi	r2,9
10005928:	88800015 	stw	r2,0(r17)
1000592c:	20801014 	ori	r2,r4,64
10005930:	8080030d 	sth	r2,12(r16)
10005934:	00bfffc4 	movi	r2,-1
10005938:	003fc506 	br	10005850 <__alt_data_end+0xf8005850>

1000593c <quorem>:
1000593c:	defff204 	addi	sp,sp,-56
10005940:	ddc00b15 	stw	r23,44(sp)
10005944:	20800417 	ldw	r2,16(r4)
10005948:	2dc00417 	ldw	r23,16(r5)
1000594c:	dfc00d15 	stw	ra,52(sp)
10005950:	df000c15 	stw	fp,48(sp)
10005954:	dd800a15 	stw	r22,40(sp)
10005958:	dd400915 	stw	r21,36(sp)
1000595c:	dd000815 	stw	r20,32(sp)
10005960:	dcc00715 	stw	r19,28(sp)
10005964:	dc800615 	stw	r18,24(sp)
10005968:	dc400515 	stw	r17,20(sp)
1000596c:	dc000415 	stw	r16,16(sp)
10005970:	15c07a16 	blt	r2,r23,10005b5c <quorem+0x220>
10005974:	bdffffc4 	addi	r23,r23,-1
10005978:	bde9883a 	add	r20,r23,r23
1000597c:	28c00504 	addi	r3,r5,20
10005980:	a529883a 	add	r20,r20,r20
10005984:	1d39883a 	add	fp,r3,r20
10005988:	24c00504 	addi	r19,r4,20
1000598c:	d9400215 	stw	r5,8(sp)
10005990:	9d29883a 	add	r20,r19,r20
10005994:	e1400017 	ldw	r5,0(fp)
10005998:	d9000015 	stw	r4,0(sp)
1000599c:	a1000017 	ldw	r4,0(r20)
100059a0:	29400044 	addi	r5,r5,1
100059a4:	d8c00115 	stw	r3,4(sp)
100059a8:	dd000315 	stw	r20,12(sp)
100059ac:	00031a00 	call	100031a0 <__udivsi3>
100059b0:	1025883a 	mov	r18,r2
100059b4:	10003026 	beq	r2,zero,10005a78 <quorem+0x13c>
100059b8:	dc400117 	ldw	r17,4(sp)
100059bc:	9829883a 	mov	r20,r19
100059c0:	002d883a 	mov	r22,zero
100059c4:	0021883a 	mov	r16,zero
100059c8:	8d400017 	ldw	r21,0(r17)
100059cc:	900b883a 	mov	r5,r18
100059d0:	8c400104 	addi	r17,r17,4
100059d4:	a93fffcc 	andi	r4,r21,65535
100059d8:	000d71c0 	call	1000d71c <__mulsi3>
100059dc:	a808d43a 	srli	r4,r21,16
100059e0:	900b883a 	mov	r5,r18
100059e4:	15ad883a 	add	r22,r2,r22
100059e8:	000d71c0 	call	1000d71c <__mulsi3>
100059ec:	a1000017 	ldw	r4,0(r20)
100059f0:	b00cd43a 	srli	r6,r22,16
100059f4:	b0ffffcc 	andi	r3,r22,65535
100059f8:	217fffcc 	andi	r5,r4,65535
100059fc:	2c21883a 	add	r16,r5,r16
10005a00:	80c7c83a 	sub	r3,r16,r3
10005a04:	2008d43a 	srli	r4,r4,16
10005a08:	1185883a 	add	r2,r2,r6
10005a0c:	1821d43a 	srai	r16,r3,16
10005a10:	117fffcc 	andi	r5,r2,65535
10005a14:	2149c83a 	sub	r4,r4,r5
10005a18:	2421883a 	add	r16,r4,r16
10005a1c:	8008943a 	slli	r4,r16,16
10005a20:	18ffffcc 	andi	r3,r3,65535
10005a24:	102cd43a 	srli	r22,r2,16
10005a28:	20c8b03a 	or	r4,r4,r3
10005a2c:	a1000015 	stw	r4,0(r20)
10005a30:	8021d43a 	srai	r16,r16,16
10005a34:	a5000104 	addi	r20,r20,4
10005a38:	e47fe32e 	bgeu	fp,r17,100059c8 <__alt_data_end+0xf80059c8>
10005a3c:	d8c00317 	ldw	r3,12(sp)
10005a40:	18800017 	ldw	r2,0(r3)
10005a44:	10000c1e 	bne	r2,zero,10005a78 <quorem+0x13c>
10005a48:	18bfff04 	addi	r2,r3,-4
10005a4c:	9880082e 	bgeu	r19,r2,10005a70 <quorem+0x134>
10005a50:	18ffff17 	ldw	r3,-4(r3)
10005a54:	18000326 	beq	r3,zero,10005a64 <quorem+0x128>
10005a58:	00000506 	br	10005a70 <quorem+0x134>
10005a5c:	10c00017 	ldw	r3,0(r2)
10005a60:	1800031e 	bne	r3,zero,10005a70 <quorem+0x134>
10005a64:	10bfff04 	addi	r2,r2,-4
10005a68:	bdffffc4 	addi	r23,r23,-1
10005a6c:	98bffb36 	bltu	r19,r2,10005a5c <__alt_data_end+0xf8005a5c>
10005a70:	d8c00017 	ldw	r3,0(sp)
10005a74:	1dc00415 	stw	r23,16(r3)
10005a78:	d9400217 	ldw	r5,8(sp)
10005a7c:	d9000017 	ldw	r4,0(sp)
10005a80:	0009ba00 	call	10009ba0 <__mcmp>
10005a84:	10002816 	blt	r2,zero,10005b28 <quorem+0x1ec>
10005a88:	dc400117 	ldw	r17,4(sp)
10005a8c:	94800044 	addi	r18,r18,1
10005a90:	980d883a 	mov	r6,r19
10005a94:	0007883a 	mov	r3,zero
10005a98:	31000017 	ldw	r4,0(r6)
10005a9c:	89400017 	ldw	r5,0(r17)
10005aa0:	31800104 	addi	r6,r6,4
10005aa4:	20bfffcc 	andi	r2,r4,65535
10005aa8:	10c7883a 	add	r3,r2,r3
10005aac:	28bfffcc 	andi	r2,r5,65535
10005ab0:	1885c83a 	sub	r2,r3,r2
10005ab4:	280ad43a 	srli	r5,r5,16
10005ab8:	2008d43a 	srli	r4,r4,16
10005abc:	1007d43a 	srai	r3,r2,16
10005ac0:	10bfffcc 	andi	r2,r2,65535
10005ac4:	2149c83a 	sub	r4,r4,r5
10005ac8:	20c9883a 	add	r4,r4,r3
10005acc:	200a943a 	slli	r5,r4,16
10005ad0:	8c400104 	addi	r17,r17,4
10005ad4:	2007d43a 	srai	r3,r4,16
10005ad8:	2884b03a 	or	r2,r5,r2
10005adc:	30bfff15 	stw	r2,-4(r6)
10005ae0:	e47fed2e 	bgeu	fp,r17,10005a98 <__alt_data_end+0xf8005a98>
10005ae4:	bdc5883a 	add	r2,r23,r23
10005ae8:	1085883a 	add	r2,r2,r2
10005aec:	9887883a 	add	r3,r19,r2
10005af0:	18800017 	ldw	r2,0(r3)
10005af4:	10000c1e 	bne	r2,zero,10005b28 <quorem+0x1ec>
10005af8:	18bfff04 	addi	r2,r3,-4
10005afc:	9880082e 	bgeu	r19,r2,10005b20 <quorem+0x1e4>
10005b00:	18ffff17 	ldw	r3,-4(r3)
10005b04:	18000326 	beq	r3,zero,10005b14 <quorem+0x1d8>
10005b08:	00000506 	br	10005b20 <quorem+0x1e4>
10005b0c:	10c00017 	ldw	r3,0(r2)
10005b10:	1800031e 	bne	r3,zero,10005b20 <quorem+0x1e4>
10005b14:	10bfff04 	addi	r2,r2,-4
10005b18:	bdffffc4 	addi	r23,r23,-1
10005b1c:	98bffb36 	bltu	r19,r2,10005b0c <__alt_data_end+0xf8005b0c>
10005b20:	d8c00017 	ldw	r3,0(sp)
10005b24:	1dc00415 	stw	r23,16(r3)
10005b28:	9005883a 	mov	r2,r18
10005b2c:	dfc00d17 	ldw	ra,52(sp)
10005b30:	df000c17 	ldw	fp,48(sp)
10005b34:	ddc00b17 	ldw	r23,44(sp)
10005b38:	dd800a17 	ldw	r22,40(sp)
10005b3c:	dd400917 	ldw	r21,36(sp)
10005b40:	dd000817 	ldw	r20,32(sp)
10005b44:	dcc00717 	ldw	r19,28(sp)
10005b48:	dc800617 	ldw	r18,24(sp)
10005b4c:	dc400517 	ldw	r17,20(sp)
10005b50:	dc000417 	ldw	r16,16(sp)
10005b54:	dec00e04 	addi	sp,sp,56
10005b58:	f800283a 	ret
10005b5c:	0005883a 	mov	r2,zero
10005b60:	003ff206 	br	10005b2c <__alt_data_end+0xf8005b2c>

10005b64 <_dtoa_r>:
10005b64:	20801017 	ldw	r2,64(r4)
10005b68:	deffde04 	addi	sp,sp,-136
10005b6c:	df002015 	stw	fp,128(sp)
10005b70:	dcc01b15 	stw	r19,108(sp)
10005b74:	dc801a15 	stw	r18,104(sp)
10005b78:	dc401915 	stw	r17,100(sp)
10005b7c:	dc001815 	stw	r16,96(sp)
10005b80:	dfc02115 	stw	ra,132(sp)
10005b84:	ddc01f15 	stw	r23,124(sp)
10005b88:	dd801e15 	stw	r22,120(sp)
10005b8c:	dd401d15 	stw	r21,116(sp)
10005b90:	dd001c15 	stw	r20,112(sp)
10005b94:	d9c00315 	stw	r7,12(sp)
10005b98:	2039883a 	mov	fp,r4
10005b9c:	3023883a 	mov	r17,r6
10005ba0:	2825883a 	mov	r18,r5
10005ba4:	dc002417 	ldw	r16,144(sp)
10005ba8:	3027883a 	mov	r19,r6
10005bac:	10000826 	beq	r2,zero,10005bd0 <_dtoa_r+0x6c>
10005bb0:	21801117 	ldw	r6,68(r4)
10005bb4:	00c00044 	movi	r3,1
10005bb8:	100b883a 	mov	r5,r2
10005bbc:	1986983a 	sll	r3,r3,r6
10005bc0:	11800115 	stw	r6,4(r2)
10005bc4:	10c00215 	stw	r3,8(r2)
10005bc8:	00092c40 	call	100092c4 <_Bfree>
10005bcc:	e0001015 	stw	zero,64(fp)
10005bd0:	88002e16 	blt	r17,zero,10005c8c <_dtoa_r+0x128>
10005bd4:	80000015 	stw	zero,0(r16)
10005bd8:	889ffc2c 	andhi	r2,r17,32752
10005bdc:	00dffc34 	movhi	r3,32752
10005be0:	10c01c26 	beq	r2,r3,10005c54 <_dtoa_r+0xf0>
10005be4:	000d883a 	mov	r6,zero
10005be8:	000f883a 	mov	r7,zero
10005bec:	9009883a 	mov	r4,r18
10005bf0:	980b883a 	mov	r5,r19
10005bf4:	000e9c00 	call	1000e9c0 <__eqdf2>
10005bf8:	10002b1e 	bne	r2,zero,10005ca8 <_dtoa_r+0x144>
10005bfc:	d9c02317 	ldw	r7,140(sp)
10005c00:	00800044 	movi	r2,1
10005c04:	38800015 	stw	r2,0(r7)
10005c08:	d8802517 	ldw	r2,148(sp)
10005c0c:	10019e26 	beq	r2,zero,10006288 <_dtoa_r+0x724>
10005c10:	d8c02517 	ldw	r3,148(sp)
10005c14:	00840074 	movhi	r2,4097
10005c18:	108be844 	addi	r2,r2,12193
10005c1c:	18800015 	stw	r2,0(r3)
10005c20:	10bfffc4 	addi	r2,r2,-1
10005c24:	dfc02117 	ldw	ra,132(sp)
10005c28:	df002017 	ldw	fp,128(sp)
10005c2c:	ddc01f17 	ldw	r23,124(sp)
10005c30:	dd801e17 	ldw	r22,120(sp)
10005c34:	dd401d17 	ldw	r21,116(sp)
10005c38:	dd001c17 	ldw	r20,112(sp)
10005c3c:	dcc01b17 	ldw	r19,108(sp)
10005c40:	dc801a17 	ldw	r18,104(sp)
10005c44:	dc401917 	ldw	r17,100(sp)
10005c48:	dc001817 	ldw	r16,96(sp)
10005c4c:	dec02204 	addi	sp,sp,136
10005c50:	f800283a 	ret
10005c54:	d8c02317 	ldw	r3,140(sp)
10005c58:	0089c3c4 	movi	r2,9999
10005c5c:	18800015 	stw	r2,0(r3)
10005c60:	90017726 	beq	r18,zero,10006240 <_dtoa_r+0x6dc>
10005c64:	00840074 	movhi	r2,4097
10005c68:	108bf404 	addi	r2,r2,12240
10005c6c:	d9002517 	ldw	r4,148(sp)
10005c70:	203fec26 	beq	r4,zero,10005c24 <__alt_data_end+0xf8005c24>
10005c74:	10c000c7 	ldb	r3,3(r2)
10005c78:	1801781e 	bne	r3,zero,1000625c <_dtoa_r+0x6f8>
10005c7c:	10c000c4 	addi	r3,r2,3
10005c80:	d9802517 	ldw	r6,148(sp)
10005c84:	30c00015 	stw	r3,0(r6)
10005c88:	003fe606 	br	10005c24 <__alt_data_end+0xf8005c24>
10005c8c:	04e00034 	movhi	r19,32768
10005c90:	9cffffc4 	addi	r19,r19,-1
10005c94:	00800044 	movi	r2,1
10005c98:	8ce6703a 	and	r19,r17,r19
10005c9c:	80800015 	stw	r2,0(r16)
10005ca0:	9823883a 	mov	r17,r19
10005ca4:	003fcc06 	br	10005bd8 <__alt_data_end+0xf8005bd8>
10005ca8:	d8800204 	addi	r2,sp,8
10005cac:	d8800015 	stw	r2,0(sp)
10005cb0:	d9c00104 	addi	r7,sp,4
10005cb4:	900b883a 	mov	r5,r18
10005cb8:	980d883a 	mov	r6,r19
10005cbc:	e009883a 	mov	r4,fp
10005cc0:	8820d53a 	srli	r16,r17,20
10005cc4:	0009f6c0 	call	10009f6c <__d2b>
10005cc8:	d8800915 	stw	r2,36(sp)
10005ccc:	8001651e 	bne	r16,zero,10006264 <_dtoa_r+0x700>
10005cd0:	dd800217 	ldw	r22,8(sp)
10005cd4:	dc000117 	ldw	r16,4(sp)
10005cd8:	00800804 	movi	r2,32
10005cdc:	b421883a 	add	r16,r22,r16
10005ce0:	80c10c84 	addi	r3,r16,1074
10005ce4:	10c2d10e 	bge	r2,r3,1000682c <_dtoa_r+0xcc8>
10005ce8:	00801004 	movi	r2,64
10005cec:	81010484 	addi	r4,r16,1042
10005cf0:	10c7c83a 	sub	r3,r2,r3
10005cf4:	9108d83a 	srl	r4,r18,r4
10005cf8:	88e2983a 	sll	r17,r17,r3
10005cfc:	2448b03a 	or	r4,r4,r17
10005d00:	000fedc0 	call	1000fedc <__floatunsidf>
10005d04:	017f8434 	movhi	r5,65040
10005d08:	01800044 	movi	r6,1
10005d0c:	1009883a 	mov	r4,r2
10005d10:	194b883a 	add	r5,r3,r5
10005d14:	843fffc4 	addi	r16,r16,-1
10005d18:	d9801115 	stw	r6,68(sp)
10005d1c:	000d883a 	mov	r6,zero
10005d20:	01cffe34 	movhi	r7,16376
10005d24:	000f4840 	call	1000f484 <__subdf3>
10005d28:	0198dbf4 	movhi	r6,25455
10005d2c:	01cff4f4 	movhi	r7,16339
10005d30:	3190d844 	addi	r6,r6,17249
10005d34:	39e1e9c4 	addi	r7,r7,-30809
10005d38:	1009883a 	mov	r4,r2
10005d3c:	180b883a 	mov	r5,r3
10005d40:	000ec180 	call	1000ec18 <__muldf3>
10005d44:	01a2d874 	movhi	r6,35681
10005d48:	01cff1f4 	movhi	r7,16327
10005d4c:	31b22cc4 	addi	r6,r6,-14157
10005d50:	39e28a04 	addi	r7,r7,-30168
10005d54:	180b883a 	mov	r5,r3
10005d58:	1009883a 	mov	r4,r2
10005d5c:	000d7440 	call	1000d744 <__adddf3>
10005d60:	8009883a 	mov	r4,r16
10005d64:	1029883a 	mov	r20,r2
10005d68:	1823883a 	mov	r17,r3
10005d6c:	000fe000 	call	1000fe00 <__floatsidf>
10005d70:	019427f4 	movhi	r6,20639
10005d74:	01cff4f4 	movhi	r7,16339
10005d78:	319e7ec4 	addi	r6,r6,31227
10005d7c:	39d104c4 	addi	r7,r7,17427
10005d80:	1009883a 	mov	r4,r2
10005d84:	180b883a 	mov	r5,r3
10005d88:	000ec180 	call	1000ec18 <__muldf3>
10005d8c:	100d883a 	mov	r6,r2
10005d90:	180f883a 	mov	r7,r3
10005d94:	a009883a 	mov	r4,r20
10005d98:	880b883a 	mov	r5,r17
10005d9c:	000d7440 	call	1000d744 <__adddf3>
10005da0:	1009883a 	mov	r4,r2
10005da4:	180b883a 	mov	r5,r3
10005da8:	1029883a 	mov	r20,r2
10005dac:	1823883a 	mov	r17,r3
10005db0:	000fd800 	call	1000fd80 <__fixdfsi>
10005db4:	000d883a 	mov	r6,zero
10005db8:	000f883a 	mov	r7,zero
10005dbc:	a009883a 	mov	r4,r20
10005dc0:	880b883a 	mov	r5,r17
10005dc4:	d8800515 	stw	r2,20(sp)
10005dc8:	000eb240 	call	1000eb24 <__ledf2>
10005dcc:	10028716 	blt	r2,zero,100067ec <_dtoa_r+0xc88>
10005dd0:	d8c00517 	ldw	r3,20(sp)
10005dd4:	00800584 	movi	r2,22
10005dd8:	10c27536 	bltu	r2,r3,100067b0 <_dtoa_r+0xc4c>
10005ddc:	180490fa 	slli	r2,r3,3
10005de0:	00c40074 	movhi	r3,4097
10005de4:	18cc1004 	addi	r3,r3,12352
10005de8:	1885883a 	add	r2,r3,r2
10005dec:	11000017 	ldw	r4,0(r2)
10005df0:	11400117 	ldw	r5,4(r2)
10005df4:	900d883a 	mov	r6,r18
10005df8:	980f883a 	mov	r7,r19
10005dfc:	000ea480 	call	1000ea48 <__gedf2>
10005e00:	00828d0e 	bge	zero,r2,10006838 <_dtoa_r+0xcd4>
10005e04:	d9000517 	ldw	r4,20(sp)
10005e08:	d8000e15 	stw	zero,56(sp)
10005e0c:	213fffc4 	addi	r4,r4,-1
10005e10:	d9000515 	stw	r4,20(sp)
10005e14:	b42dc83a 	sub	r22,r22,r16
10005e18:	b5bfffc4 	addi	r22,r22,-1
10005e1c:	b0026f16 	blt	r22,zero,100067dc <_dtoa_r+0xc78>
10005e20:	d8000815 	stw	zero,32(sp)
10005e24:	d9c00517 	ldw	r7,20(sp)
10005e28:	38026416 	blt	r7,zero,100067bc <_dtoa_r+0xc58>
10005e2c:	b1ed883a 	add	r22,r22,r7
10005e30:	d9c00d15 	stw	r7,52(sp)
10005e34:	d8000a15 	stw	zero,40(sp)
10005e38:	d9800317 	ldw	r6,12(sp)
10005e3c:	00800244 	movi	r2,9
10005e40:	11811436 	bltu	r2,r6,10006294 <_dtoa_r+0x730>
10005e44:	00800144 	movi	r2,5
10005e48:	1184e10e 	bge	r2,r6,100071d0 <_dtoa_r+0x166c>
10005e4c:	31bfff04 	addi	r6,r6,-4
10005e50:	d9800315 	stw	r6,12(sp)
10005e54:	0023883a 	mov	r17,zero
10005e58:	d9800317 	ldw	r6,12(sp)
10005e5c:	008000c4 	movi	r2,3
10005e60:	30836726 	beq	r6,r2,10006c00 <_dtoa_r+0x109c>
10005e64:	1183410e 	bge	r2,r6,10006b6c <_dtoa_r+0x1008>
10005e68:	d9c00317 	ldw	r7,12(sp)
10005e6c:	00800104 	movi	r2,4
10005e70:	38827c26 	beq	r7,r2,10006864 <_dtoa_r+0xd00>
10005e74:	00800144 	movi	r2,5
10005e78:	3884c41e 	bne	r7,r2,1000718c <_dtoa_r+0x1628>
10005e7c:	00800044 	movi	r2,1
10005e80:	d8800b15 	stw	r2,44(sp)
10005e84:	d8c00517 	ldw	r3,20(sp)
10005e88:	d9002217 	ldw	r4,136(sp)
10005e8c:	1907883a 	add	r3,r3,r4
10005e90:	19800044 	addi	r6,r3,1
10005e94:	d8c00c15 	stw	r3,48(sp)
10005e98:	d9800615 	stw	r6,24(sp)
10005e9c:	0183a40e 	bge	zero,r6,10006d30 <_dtoa_r+0x11cc>
10005ea0:	d9800617 	ldw	r6,24(sp)
10005ea4:	3021883a 	mov	r16,r6
10005ea8:	e0001115 	stw	zero,68(fp)
10005eac:	008005c4 	movi	r2,23
10005eb0:	1184c92e 	bgeu	r2,r6,100071d8 <_dtoa_r+0x1674>
10005eb4:	00c00044 	movi	r3,1
10005eb8:	00800104 	movi	r2,4
10005ebc:	1085883a 	add	r2,r2,r2
10005ec0:	11000504 	addi	r4,r2,20
10005ec4:	180b883a 	mov	r5,r3
10005ec8:	18c00044 	addi	r3,r3,1
10005ecc:	313ffb2e 	bgeu	r6,r4,10005ebc <__alt_data_end+0xf8005ebc>
10005ed0:	e1401115 	stw	r5,68(fp)
10005ed4:	e009883a 	mov	r4,fp
10005ed8:	000921c0 	call	1000921c <_Balloc>
10005edc:	d8800715 	stw	r2,28(sp)
10005ee0:	e0801015 	stw	r2,64(fp)
10005ee4:	00800384 	movi	r2,14
10005ee8:	1400f736 	bltu	r2,r16,100062c8 <_dtoa_r+0x764>
10005eec:	8800f626 	beq	r17,zero,100062c8 <_dtoa_r+0x764>
10005ef0:	d9c00517 	ldw	r7,20(sp)
10005ef4:	01c39a0e 	bge	zero,r7,10006d60 <_dtoa_r+0x11fc>
10005ef8:	388003cc 	andi	r2,r7,15
10005efc:	100490fa 	slli	r2,r2,3
10005f00:	382bd13a 	srai	r21,r7,4
10005f04:	00c40074 	movhi	r3,4097
10005f08:	18cc1004 	addi	r3,r3,12352
10005f0c:	1885883a 	add	r2,r3,r2
10005f10:	a8c0040c 	andi	r3,r21,16
10005f14:	12400017 	ldw	r9,0(r2)
10005f18:	12000117 	ldw	r8,4(r2)
10005f1c:	18037926 	beq	r3,zero,10006d04 <_dtoa_r+0x11a0>
10005f20:	00840074 	movhi	r2,4097
10005f24:	108c0604 	addi	r2,r2,12312
10005f28:	11800817 	ldw	r6,32(r2)
10005f2c:	11c00917 	ldw	r7,36(r2)
10005f30:	9009883a 	mov	r4,r18
10005f34:	980b883a 	mov	r5,r19
10005f38:	da001715 	stw	r8,92(sp)
10005f3c:	da401615 	stw	r9,88(sp)
10005f40:	000dff00 	call	1000dff0 <__divdf3>
10005f44:	da001717 	ldw	r8,92(sp)
10005f48:	da401617 	ldw	r9,88(sp)
10005f4c:	ad4003cc 	andi	r21,r21,15
10005f50:	040000c4 	movi	r16,3
10005f54:	1023883a 	mov	r17,r2
10005f58:	1829883a 	mov	r20,r3
10005f5c:	a8001126 	beq	r21,zero,10005fa4 <_dtoa_r+0x440>
10005f60:	05c40074 	movhi	r23,4097
10005f64:	bdcc0604 	addi	r23,r23,12312
10005f68:	4805883a 	mov	r2,r9
10005f6c:	4007883a 	mov	r3,r8
10005f70:	a980004c 	andi	r6,r21,1
10005f74:	1009883a 	mov	r4,r2
10005f78:	a82bd07a 	srai	r21,r21,1
10005f7c:	180b883a 	mov	r5,r3
10005f80:	30000426 	beq	r6,zero,10005f94 <_dtoa_r+0x430>
10005f84:	b9800017 	ldw	r6,0(r23)
10005f88:	b9c00117 	ldw	r7,4(r23)
10005f8c:	84000044 	addi	r16,r16,1
10005f90:	000ec180 	call	1000ec18 <__muldf3>
10005f94:	bdc00204 	addi	r23,r23,8
10005f98:	a83ff51e 	bne	r21,zero,10005f70 <__alt_data_end+0xf8005f70>
10005f9c:	1013883a 	mov	r9,r2
10005fa0:	1811883a 	mov	r8,r3
10005fa4:	480d883a 	mov	r6,r9
10005fa8:	400f883a 	mov	r7,r8
10005fac:	8809883a 	mov	r4,r17
10005fb0:	a00b883a 	mov	r5,r20
10005fb4:	000dff00 	call	1000dff0 <__divdf3>
10005fb8:	d8800f15 	stw	r2,60(sp)
10005fbc:	d8c01015 	stw	r3,64(sp)
10005fc0:	d8c00e17 	ldw	r3,56(sp)
10005fc4:	18000626 	beq	r3,zero,10005fe0 <_dtoa_r+0x47c>
10005fc8:	d9000f17 	ldw	r4,60(sp)
10005fcc:	d9401017 	ldw	r5,64(sp)
10005fd0:	000d883a 	mov	r6,zero
10005fd4:	01cffc34 	movhi	r7,16368
10005fd8:	000eb240 	call	1000eb24 <__ledf2>
10005fdc:	10040b16 	blt	r2,zero,1000700c <_dtoa_r+0x14a8>
10005fe0:	8009883a 	mov	r4,r16
10005fe4:	000fe000 	call	1000fe00 <__floatsidf>
10005fe8:	d9800f17 	ldw	r6,60(sp)
10005fec:	d9c01017 	ldw	r7,64(sp)
10005ff0:	1009883a 	mov	r4,r2
10005ff4:	180b883a 	mov	r5,r3
10005ff8:	000ec180 	call	1000ec18 <__muldf3>
10005ffc:	000d883a 	mov	r6,zero
10006000:	01d00734 	movhi	r7,16412
10006004:	1009883a 	mov	r4,r2
10006008:	180b883a 	mov	r5,r3
1000600c:	000d7440 	call	1000d744 <__adddf3>
10006010:	1021883a 	mov	r16,r2
10006014:	d8800617 	ldw	r2,24(sp)
10006018:	047f3034 	movhi	r17,64704
1000601c:	1c63883a 	add	r17,r3,r17
10006020:	10031826 	beq	r2,zero,10006c84 <_dtoa_r+0x1120>
10006024:	d8c00517 	ldw	r3,20(sp)
10006028:	db000617 	ldw	r12,24(sp)
1000602c:	d8c01315 	stw	r3,76(sp)
10006030:	d9000b17 	ldw	r4,44(sp)
10006034:	20038f26 	beq	r4,zero,10006e74 <_dtoa_r+0x1310>
10006038:	60bfffc4 	addi	r2,r12,-1
1000603c:	100490fa 	slli	r2,r2,3
10006040:	00c40074 	movhi	r3,4097
10006044:	18cc1004 	addi	r3,r3,12352
10006048:	1885883a 	add	r2,r3,r2
1000604c:	11800017 	ldw	r6,0(r2)
10006050:	11c00117 	ldw	r7,4(r2)
10006054:	d8800717 	ldw	r2,28(sp)
10006058:	0009883a 	mov	r4,zero
1000605c:	014ff834 	movhi	r5,16352
10006060:	db001615 	stw	r12,88(sp)
10006064:	15c00044 	addi	r23,r2,1
10006068:	000dff00 	call	1000dff0 <__divdf3>
1000606c:	800d883a 	mov	r6,r16
10006070:	880f883a 	mov	r7,r17
10006074:	1009883a 	mov	r4,r2
10006078:	180b883a 	mov	r5,r3
1000607c:	000f4840 	call	1000f484 <__subdf3>
10006080:	d9401017 	ldw	r5,64(sp)
10006084:	d9000f17 	ldw	r4,60(sp)
10006088:	102b883a 	mov	r21,r2
1000608c:	d8c01215 	stw	r3,72(sp)
10006090:	000fd800 	call	1000fd80 <__fixdfsi>
10006094:	1009883a 	mov	r4,r2
10006098:	1029883a 	mov	r20,r2
1000609c:	000fe000 	call	1000fe00 <__floatsidf>
100060a0:	d9000f17 	ldw	r4,60(sp)
100060a4:	d9401017 	ldw	r5,64(sp)
100060a8:	100d883a 	mov	r6,r2
100060ac:	180f883a 	mov	r7,r3
100060b0:	000f4840 	call	1000f484 <__subdf3>
100060b4:	1823883a 	mov	r17,r3
100060b8:	d8c00717 	ldw	r3,28(sp)
100060bc:	d9401217 	ldw	r5,72(sp)
100060c0:	a2000c04 	addi	r8,r20,48
100060c4:	1021883a 	mov	r16,r2
100060c8:	1a000005 	stb	r8,0(r3)
100060cc:	800d883a 	mov	r6,r16
100060d0:	880f883a 	mov	r7,r17
100060d4:	a809883a 	mov	r4,r21
100060d8:	4029883a 	mov	r20,r8
100060dc:	000ea480 	call	1000ea48 <__gedf2>
100060e0:	00841d16 	blt	zero,r2,10007158 <_dtoa_r+0x15f4>
100060e4:	800d883a 	mov	r6,r16
100060e8:	880f883a 	mov	r7,r17
100060ec:	0009883a 	mov	r4,zero
100060f0:	014ffc34 	movhi	r5,16368
100060f4:	000f4840 	call	1000f484 <__subdf3>
100060f8:	d9401217 	ldw	r5,72(sp)
100060fc:	100d883a 	mov	r6,r2
10006100:	180f883a 	mov	r7,r3
10006104:	a809883a 	mov	r4,r21
10006108:	000ea480 	call	1000ea48 <__gedf2>
1000610c:	db001617 	ldw	r12,88(sp)
10006110:	00840e16 	blt	zero,r2,1000714c <_dtoa_r+0x15e8>
10006114:	00800044 	movi	r2,1
10006118:	13006b0e 	bge	r2,r12,100062c8 <_dtoa_r+0x764>
1000611c:	d9000717 	ldw	r4,28(sp)
10006120:	dd800f15 	stw	r22,60(sp)
10006124:	dcc01015 	stw	r19,64(sp)
10006128:	2319883a 	add	r12,r4,r12
1000612c:	dcc01217 	ldw	r19,72(sp)
10006130:	602d883a 	mov	r22,r12
10006134:	dc801215 	stw	r18,72(sp)
10006138:	b825883a 	mov	r18,r23
1000613c:	00000906 	br	10006164 <_dtoa_r+0x600>
10006140:	000f4840 	call	1000f484 <__subdf3>
10006144:	a80d883a 	mov	r6,r21
10006148:	980f883a 	mov	r7,r19
1000614c:	1009883a 	mov	r4,r2
10006150:	180b883a 	mov	r5,r3
10006154:	000eb240 	call	1000eb24 <__ledf2>
10006158:	1003e816 	blt	r2,zero,100070fc <_dtoa_r+0x1598>
1000615c:	b825883a 	mov	r18,r23
10006160:	bd83e926 	beq	r23,r22,10007108 <_dtoa_r+0x15a4>
10006164:	a809883a 	mov	r4,r21
10006168:	980b883a 	mov	r5,r19
1000616c:	000d883a 	mov	r6,zero
10006170:	01d00934 	movhi	r7,16420
10006174:	000ec180 	call	1000ec18 <__muldf3>
10006178:	000d883a 	mov	r6,zero
1000617c:	01d00934 	movhi	r7,16420
10006180:	8009883a 	mov	r4,r16
10006184:	880b883a 	mov	r5,r17
10006188:	102b883a 	mov	r21,r2
1000618c:	1827883a 	mov	r19,r3
10006190:	000ec180 	call	1000ec18 <__muldf3>
10006194:	180b883a 	mov	r5,r3
10006198:	1009883a 	mov	r4,r2
1000619c:	1821883a 	mov	r16,r3
100061a0:	1023883a 	mov	r17,r2
100061a4:	000fd800 	call	1000fd80 <__fixdfsi>
100061a8:	1009883a 	mov	r4,r2
100061ac:	1029883a 	mov	r20,r2
100061b0:	000fe000 	call	1000fe00 <__floatsidf>
100061b4:	8809883a 	mov	r4,r17
100061b8:	800b883a 	mov	r5,r16
100061bc:	100d883a 	mov	r6,r2
100061c0:	180f883a 	mov	r7,r3
100061c4:	000f4840 	call	1000f484 <__subdf3>
100061c8:	a5000c04 	addi	r20,r20,48
100061cc:	a80d883a 	mov	r6,r21
100061d0:	980f883a 	mov	r7,r19
100061d4:	1009883a 	mov	r4,r2
100061d8:	180b883a 	mov	r5,r3
100061dc:	95000005 	stb	r20,0(r18)
100061e0:	1021883a 	mov	r16,r2
100061e4:	1823883a 	mov	r17,r3
100061e8:	000eb240 	call	1000eb24 <__ledf2>
100061ec:	bdc00044 	addi	r23,r23,1
100061f0:	800d883a 	mov	r6,r16
100061f4:	880f883a 	mov	r7,r17
100061f8:	0009883a 	mov	r4,zero
100061fc:	014ffc34 	movhi	r5,16368
10006200:	103fcf0e 	bge	r2,zero,10006140 <__alt_data_end+0xf8006140>
10006204:	d8c01317 	ldw	r3,76(sp)
10006208:	d8c00515 	stw	r3,20(sp)
1000620c:	d9400917 	ldw	r5,36(sp)
10006210:	e009883a 	mov	r4,fp
10006214:	00092c40 	call	100092c4 <_Bfree>
10006218:	d9000517 	ldw	r4,20(sp)
1000621c:	d9802317 	ldw	r6,140(sp)
10006220:	d9c02517 	ldw	r7,148(sp)
10006224:	b8000005 	stb	zero,0(r23)
10006228:	20800044 	addi	r2,r4,1
1000622c:	30800015 	stw	r2,0(r6)
10006230:	3802aa26 	beq	r7,zero,10006cdc <_dtoa_r+0x1178>
10006234:	3dc00015 	stw	r23,0(r7)
10006238:	d8800717 	ldw	r2,28(sp)
1000623c:	003e7906 	br	10005c24 <__alt_data_end+0xf8005c24>
10006240:	00800434 	movhi	r2,16
10006244:	10bfffc4 	addi	r2,r2,-1
10006248:	88a2703a 	and	r17,r17,r2
1000624c:	883e851e 	bne	r17,zero,10005c64 <__alt_data_end+0xf8005c64>
10006250:	00840074 	movhi	r2,4097
10006254:	108bf104 	addi	r2,r2,12228
10006258:	003e8406 	br	10005c6c <__alt_data_end+0xf8005c6c>
1000625c:	10c00204 	addi	r3,r2,8
10006260:	003e8706 	br	10005c80 <__alt_data_end+0xf8005c80>
10006264:	01400434 	movhi	r5,16
10006268:	297fffc4 	addi	r5,r5,-1
1000626c:	994a703a 	and	r5,r19,r5
10006270:	9009883a 	mov	r4,r18
10006274:	843f0044 	addi	r16,r16,-1023
10006278:	294ffc34 	orhi	r5,r5,16368
1000627c:	dd800217 	ldw	r22,8(sp)
10006280:	d8001115 	stw	zero,68(sp)
10006284:	003ea506 	br	10005d1c <__alt_data_end+0xf8005d1c>
10006288:	00840074 	movhi	r2,4097
1000628c:	108be804 	addi	r2,r2,12192
10006290:	003e6406 	br	10005c24 <__alt_data_end+0xf8005c24>
10006294:	e0001115 	stw	zero,68(fp)
10006298:	000b883a 	mov	r5,zero
1000629c:	e009883a 	mov	r4,fp
100062a0:	000921c0 	call	1000921c <_Balloc>
100062a4:	01bfffc4 	movi	r6,-1
100062a8:	01c00044 	movi	r7,1
100062ac:	d8800715 	stw	r2,28(sp)
100062b0:	d9800c15 	stw	r6,48(sp)
100062b4:	e0801015 	stw	r2,64(fp)
100062b8:	d8000315 	stw	zero,12(sp)
100062bc:	d9c00b15 	stw	r7,44(sp)
100062c0:	d9800615 	stw	r6,24(sp)
100062c4:	d8002215 	stw	zero,136(sp)
100062c8:	d8800117 	ldw	r2,4(sp)
100062cc:	10008916 	blt	r2,zero,100064f4 <_dtoa_r+0x990>
100062d0:	d9000517 	ldw	r4,20(sp)
100062d4:	00c00384 	movi	r3,14
100062d8:	19008616 	blt	r3,r4,100064f4 <_dtoa_r+0x990>
100062dc:	200490fa 	slli	r2,r4,3
100062e0:	00c40074 	movhi	r3,4097
100062e4:	d9802217 	ldw	r6,136(sp)
100062e8:	18cc1004 	addi	r3,r3,12352
100062ec:	1885883a 	add	r2,r3,r2
100062f0:	14000017 	ldw	r16,0(r2)
100062f4:	14400117 	ldw	r17,4(r2)
100062f8:	30016316 	blt	r6,zero,10006888 <_dtoa_r+0xd24>
100062fc:	800d883a 	mov	r6,r16
10006300:	880f883a 	mov	r7,r17
10006304:	9009883a 	mov	r4,r18
10006308:	980b883a 	mov	r5,r19
1000630c:	000dff00 	call	1000dff0 <__divdf3>
10006310:	180b883a 	mov	r5,r3
10006314:	1009883a 	mov	r4,r2
10006318:	000fd800 	call	1000fd80 <__fixdfsi>
1000631c:	1009883a 	mov	r4,r2
10006320:	102b883a 	mov	r21,r2
10006324:	000fe000 	call	1000fe00 <__floatsidf>
10006328:	800d883a 	mov	r6,r16
1000632c:	880f883a 	mov	r7,r17
10006330:	1009883a 	mov	r4,r2
10006334:	180b883a 	mov	r5,r3
10006338:	000ec180 	call	1000ec18 <__muldf3>
1000633c:	100d883a 	mov	r6,r2
10006340:	180f883a 	mov	r7,r3
10006344:	9009883a 	mov	r4,r18
10006348:	980b883a 	mov	r5,r19
1000634c:	000f4840 	call	1000f484 <__subdf3>
10006350:	d9c00717 	ldw	r7,28(sp)
10006354:	1009883a 	mov	r4,r2
10006358:	a8800c04 	addi	r2,r21,48
1000635c:	38800005 	stb	r2,0(r7)
10006360:	3dc00044 	addi	r23,r7,1
10006364:	d9c00617 	ldw	r7,24(sp)
10006368:	01800044 	movi	r6,1
1000636c:	180b883a 	mov	r5,r3
10006370:	2005883a 	mov	r2,r4
10006374:	39803826 	beq	r7,r6,10006458 <_dtoa_r+0x8f4>
10006378:	000d883a 	mov	r6,zero
1000637c:	01d00934 	movhi	r7,16420
10006380:	000ec180 	call	1000ec18 <__muldf3>
10006384:	000d883a 	mov	r6,zero
10006388:	000f883a 	mov	r7,zero
1000638c:	1009883a 	mov	r4,r2
10006390:	180b883a 	mov	r5,r3
10006394:	1025883a 	mov	r18,r2
10006398:	1827883a 	mov	r19,r3
1000639c:	000e9c00 	call	1000e9c0 <__eqdf2>
100063a0:	103f9a26 	beq	r2,zero,1000620c <__alt_data_end+0xf800620c>
100063a4:	d9c00617 	ldw	r7,24(sp)
100063a8:	d8c00717 	ldw	r3,28(sp)
100063ac:	b829883a 	mov	r20,r23
100063b0:	38bfffc4 	addi	r2,r7,-1
100063b4:	18ad883a 	add	r22,r3,r2
100063b8:	00000a06 	br	100063e4 <_dtoa_r+0x880>
100063bc:	000ec180 	call	1000ec18 <__muldf3>
100063c0:	000d883a 	mov	r6,zero
100063c4:	000f883a 	mov	r7,zero
100063c8:	1009883a 	mov	r4,r2
100063cc:	180b883a 	mov	r5,r3
100063d0:	1025883a 	mov	r18,r2
100063d4:	1827883a 	mov	r19,r3
100063d8:	b829883a 	mov	r20,r23
100063dc:	000e9c00 	call	1000e9c0 <__eqdf2>
100063e0:	103f8a26 	beq	r2,zero,1000620c <__alt_data_end+0xf800620c>
100063e4:	800d883a 	mov	r6,r16
100063e8:	880f883a 	mov	r7,r17
100063ec:	9009883a 	mov	r4,r18
100063f0:	980b883a 	mov	r5,r19
100063f4:	000dff00 	call	1000dff0 <__divdf3>
100063f8:	180b883a 	mov	r5,r3
100063fc:	1009883a 	mov	r4,r2
10006400:	000fd800 	call	1000fd80 <__fixdfsi>
10006404:	1009883a 	mov	r4,r2
10006408:	102b883a 	mov	r21,r2
1000640c:	000fe000 	call	1000fe00 <__floatsidf>
10006410:	800d883a 	mov	r6,r16
10006414:	880f883a 	mov	r7,r17
10006418:	1009883a 	mov	r4,r2
1000641c:	180b883a 	mov	r5,r3
10006420:	000ec180 	call	1000ec18 <__muldf3>
10006424:	100d883a 	mov	r6,r2
10006428:	180f883a 	mov	r7,r3
1000642c:	9009883a 	mov	r4,r18
10006430:	980b883a 	mov	r5,r19
10006434:	000f4840 	call	1000f484 <__subdf3>
10006438:	aa000c04 	addi	r8,r21,48
1000643c:	a2000005 	stb	r8,0(r20)
10006440:	000d883a 	mov	r6,zero
10006444:	01d00934 	movhi	r7,16420
10006448:	1009883a 	mov	r4,r2
1000644c:	180b883a 	mov	r5,r3
10006450:	a5c00044 	addi	r23,r20,1
10006454:	b53fd91e 	bne	r22,r20,100063bc <__alt_data_end+0xf80063bc>
10006458:	100d883a 	mov	r6,r2
1000645c:	180f883a 	mov	r7,r3
10006460:	1009883a 	mov	r4,r2
10006464:	180b883a 	mov	r5,r3
10006468:	000d7440 	call	1000d744 <__adddf3>
1000646c:	100d883a 	mov	r6,r2
10006470:	180f883a 	mov	r7,r3
10006474:	8009883a 	mov	r4,r16
10006478:	880b883a 	mov	r5,r17
1000647c:	1027883a 	mov	r19,r2
10006480:	1825883a 	mov	r18,r3
10006484:	000eb240 	call	1000eb24 <__ledf2>
10006488:	10000816 	blt	r2,zero,100064ac <_dtoa_r+0x948>
1000648c:	980d883a 	mov	r6,r19
10006490:	900f883a 	mov	r7,r18
10006494:	8009883a 	mov	r4,r16
10006498:	880b883a 	mov	r5,r17
1000649c:	000e9c00 	call	1000e9c0 <__eqdf2>
100064a0:	103f5a1e 	bne	r2,zero,1000620c <__alt_data_end+0xf800620c>
100064a4:	ad40004c 	andi	r21,r21,1
100064a8:	a83f5826 	beq	r21,zero,1000620c <__alt_data_end+0xf800620c>
100064ac:	bd3fffc3 	ldbu	r20,-1(r23)
100064b0:	b8bfffc4 	addi	r2,r23,-1
100064b4:	1007883a 	mov	r3,r2
100064b8:	01400e44 	movi	r5,57
100064bc:	d9800717 	ldw	r6,28(sp)
100064c0:	00000506 	br	100064d8 <_dtoa_r+0x974>
100064c4:	18ffffc4 	addi	r3,r3,-1
100064c8:	11824726 	beq	r2,r6,10006de8 <_dtoa_r+0x1284>
100064cc:	1d000003 	ldbu	r20,0(r3)
100064d0:	102f883a 	mov	r23,r2
100064d4:	10bfffc4 	addi	r2,r2,-1
100064d8:	a1003fcc 	andi	r4,r20,255
100064dc:	2100201c 	xori	r4,r4,128
100064e0:	213fe004 	addi	r4,r4,-128
100064e4:	217ff726 	beq	r4,r5,100064c4 <__alt_data_end+0xf80064c4>
100064e8:	a2000044 	addi	r8,r20,1
100064ec:	12000005 	stb	r8,0(r2)
100064f0:	003f4606 	br	1000620c <__alt_data_end+0xf800620c>
100064f4:	d9000b17 	ldw	r4,44(sp)
100064f8:	2000c826 	beq	r4,zero,1000681c <_dtoa_r+0xcb8>
100064fc:	d9800317 	ldw	r6,12(sp)
10006500:	00c00044 	movi	r3,1
10006504:	1980f90e 	bge	r3,r6,100068ec <_dtoa_r+0xd88>
10006508:	d8800617 	ldw	r2,24(sp)
1000650c:	d8c00a17 	ldw	r3,40(sp)
10006510:	157fffc4 	addi	r21,r2,-1
10006514:	1d41f316 	blt	r3,r21,10006ce4 <_dtoa_r+0x1180>
10006518:	1d6bc83a 	sub	r21,r3,r21
1000651c:	d9c00617 	ldw	r7,24(sp)
10006520:	3802aa16 	blt	r7,zero,10006fcc <_dtoa_r+0x1468>
10006524:	dd000817 	ldw	r20,32(sp)
10006528:	d8800617 	ldw	r2,24(sp)
1000652c:	d8c00817 	ldw	r3,32(sp)
10006530:	01400044 	movi	r5,1
10006534:	e009883a 	mov	r4,fp
10006538:	1887883a 	add	r3,r3,r2
1000653c:	d8c00815 	stw	r3,32(sp)
10006540:	b0ad883a 	add	r22,r22,r2
10006544:	00096500 	call	10009650 <__i2b>
10006548:	1023883a 	mov	r17,r2
1000654c:	a0000826 	beq	r20,zero,10006570 <_dtoa_r+0xa0c>
10006550:	0580070e 	bge	zero,r22,10006570 <_dtoa_r+0xa0c>
10006554:	a005883a 	mov	r2,r20
10006558:	b500b916 	blt	r22,r20,10006840 <_dtoa_r+0xcdc>
1000655c:	d9000817 	ldw	r4,32(sp)
10006560:	a0a9c83a 	sub	r20,r20,r2
10006564:	b0adc83a 	sub	r22,r22,r2
10006568:	2089c83a 	sub	r4,r4,r2
1000656c:	d9000815 	stw	r4,32(sp)
10006570:	d9800a17 	ldw	r6,40(sp)
10006574:	0181810e 	bge	zero,r6,10006b7c <_dtoa_r+0x1018>
10006578:	d9c00b17 	ldw	r7,44(sp)
1000657c:	3800b326 	beq	r7,zero,1000684c <_dtoa_r+0xce8>
10006580:	a800b226 	beq	r21,zero,1000684c <_dtoa_r+0xce8>
10006584:	880b883a 	mov	r5,r17
10006588:	a80d883a 	mov	r6,r21
1000658c:	e009883a 	mov	r4,fp
10006590:	00099180 	call	10009918 <__pow5mult>
10006594:	d9800917 	ldw	r6,36(sp)
10006598:	100b883a 	mov	r5,r2
1000659c:	e009883a 	mov	r4,fp
100065a0:	1023883a 	mov	r17,r2
100065a4:	000968c0 	call	1000968c <__multiply>
100065a8:	1021883a 	mov	r16,r2
100065ac:	d8800a17 	ldw	r2,40(sp)
100065b0:	d9400917 	ldw	r5,36(sp)
100065b4:	e009883a 	mov	r4,fp
100065b8:	1545c83a 	sub	r2,r2,r21
100065bc:	d8800a15 	stw	r2,40(sp)
100065c0:	00092c40 	call	100092c4 <_Bfree>
100065c4:	d8c00a17 	ldw	r3,40(sp)
100065c8:	18009f1e 	bne	r3,zero,10006848 <_dtoa_r+0xce4>
100065cc:	05c00044 	movi	r23,1
100065d0:	e009883a 	mov	r4,fp
100065d4:	b80b883a 	mov	r5,r23
100065d8:	00096500 	call	10009650 <__i2b>
100065dc:	d9000d17 	ldw	r4,52(sp)
100065e0:	102b883a 	mov	r21,r2
100065e4:	2000ce26 	beq	r4,zero,10006920 <_dtoa_r+0xdbc>
100065e8:	200d883a 	mov	r6,r4
100065ec:	100b883a 	mov	r5,r2
100065f0:	e009883a 	mov	r4,fp
100065f4:	00099180 	call	10009918 <__pow5mult>
100065f8:	d9800317 	ldw	r6,12(sp)
100065fc:	102b883a 	mov	r21,r2
10006600:	b981810e 	bge	r23,r6,10006c08 <_dtoa_r+0x10a4>
10006604:	0027883a 	mov	r19,zero
10006608:	a8800417 	ldw	r2,16(r21)
1000660c:	05c00804 	movi	r23,32
10006610:	10800104 	addi	r2,r2,4
10006614:	1085883a 	add	r2,r2,r2
10006618:	1085883a 	add	r2,r2,r2
1000661c:	a885883a 	add	r2,r21,r2
10006620:	11000017 	ldw	r4,0(r2)
10006624:	00095380 	call	10009538 <__hi0bits>
10006628:	b885c83a 	sub	r2,r23,r2
1000662c:	1585883a 	add	r2,r2,r22
10006630:	108007cc 	andi	r2,r2,31
10006634:	1000b326 	beq	r2,zero,10006904 <_dtoa_r+0xda0>
10006638:	00c00804 	movi	r3,32
1000663c:	1887c83a 	sub	r3,r3,r2
10006640:	01000104 	movi	r4,4
10006644:	20c2cd0e 	bge	r4,r3,1000717c <_dtoa_r+0x1618>
10006648:	00c00704 	movi	r3,28
1000664c:	1885c83a 	sub	r2,r3,r2
10006650:	d8c00817 	ldw	r3,32(sp)
10006654:	a0a9883a 	add	r20,r20,r2
10006658:	b0ad883a 	add	r22,r22,r2
1000665c:	1887883a 	add	r3,r3,r2
10006660:	d8c00815 	stw	r3,32(sp)
10006664:	d9800817 	ldw	r6,32(sp)
10006668:	0180040e 	bge	zero,r6,1000667c <_dtoa_r+0xb18>
1000666c:	800b883a 	mov	r5,r16
10006670:	e009883a 	mov	r4,fp
10006674:	0009a580 	call	10009a58 <__lshift>
10006678:	1021883a 	mov	r16,r2
1000667c:	0580050e 	bge	zero,r22,10006694 <_dtoa_r+0xb30>
10006680:	a80b883a 	mov	r5,r21
10006684:	b00d883a 	mov	r6,r22
10006688:	e009883a 	mov	r4,fp
1000668c:	0009a580 	call	10009a58 <__lshift>
10006690:	102b883a 	mov	r21,r2
10006694:	d9c00e17 	ldw	r7,56(sp)
10006698:	3801211e 	bne	r7,zero,10006b20 <_dtoa_r+0xfbc>
1000669c:	d9800617 	ldw	r6,24(sp)
100066a0:	0181380e 	bge	zero,r6,10006b84 <_dtoa_r+0x1020>
100066a4:	d8c00b17 	ldw	r3,44(sp)
100066a8:	1800ab1e 	bne	r3,zero,10006958 <_dtoa_r+0xdf4>
100066ac:	dc800717 	ldw	r18,28(sp)
100066b0:	dcc00617 	ldw	r19,24(sp)
100066b4:	9029883a 	mov	r20,r18
100066b8:	00000206 	br	100066c4 <_dtoa_r+0xb60>
100066bc:	00092ec0 	call	100092ec <__multadd>
100066c0:	1021883a 	mov	r16,r2
100066c4:	a80b883a 	mov	r5,r21
100066c8:	8009883a 	mov	r4,r16
100066cc:	000593c0 	call	1000593c <quorem>
100066d0:	10800c04 	addi	r2,r2,48
100066d4:	90800005 	stb	r2,0(r18)
100066d8:	94800044 	addi	r18,r18,1
100066dc:	9507c83a 	sub	r3,r18,r20
100066e0:	000f883a 	mov	r7,zero
100066e4:	01800284 	movi	r6,10
100066e8:	800b883a 	mov	r5,r16
100066ec:	e009883a 	mov	r4,fp
100066f0:	1cfff216 	blt	r3,r19,100066bc <__alt_data_end+0xf80066bc>
100066f4:	1011883a 	mov	r8,r2
100066f8:	d8800617 	ldw	r2,24(sp)
100066fc:	0082370e 	bge	zero,r2,10006fdc <_dtoa_r+0x1478>
10006700:	d9000717 	ldw	r4,28(sp)
10006704:	0025883a 	mov	r18,zero
10006708:	20af883a 	add	r23,r4,r2
1000670c:	01800044 	movi	r6,1
10006710:	800b883a 	mov	r5,r16
10006714:	e009883a 	mov	r4,fp
10006718:	da001715 	stw	r8,92(sp)
1000671c:	0009a580 	call	10009a58 <__lshift>
10006720:	a80b883a 	mov	r5,r21
10006724:	1009883a 	mov	r4,r2
10006728:	d8800915 	stw	r2,36(sp)
1000672c:	0009ba00 	call	10009ba0 <__mcmp>
10006730:	da001717 	ldw	r8,92(sp)
10006734:	0081800e 	bge	zero,r2,10006d38 <_dtoa_r+0x11d4>
10006738:	b93fffc3 	ldbu	r4,-1(r23)
1000673c:	b8bfffc4 	addi	r2,r23,-1
10006740:	1007883a 	mov	r3,r2
10006744:	01800e44 	movi	r6,57
10006748:	d9c00717 	ldw	r7,28(sp)
1000674c:	00000506 	br	10006764 <_dtoa_r+0xc00>
10006750:	18ffffc4 	addi	r3,r3,-1
10006754:	11c12326 	beq	r2,r7,10006be4 <_dtoa_r+0x1080>
10006758:	19000003 	ldbu	r4,0(r3)
1000675c:	102f883a 	mov	r23,r2
10006760:	10bfffc4 	addi	r2,r2,-1
10006764:	21403fcc 	andi	r5,r4,255
10006768:	2940201c 	xori	r5,r5,128
1000676c:	297fe004 	addi	r5,r5,-128
10006770:	29bff726 	beq	r5,r6,10006750 <__alt_data_end+0xf8006750>
10006774:	21000044 	addi	r4,r4,1
10006778:	11000005 	stb	r4,0(r2)
1000677c:	a80b883a 	mov	r5,r21
10006780:	e009883a 	mov	r4,fp
10006784:	00092c40 	call	100092c4 <_Bfree>
10006788:	883ea026 	beq	r17,zero,1000620c <__alt_data_end+0xf800620c>
1000678c:	90000426 	beq	r18,zero,100067a0 <_dtoa_r+0xc3c>
10006790:	94400326 	beq	r18,r17,100067a0 <_dtoa_r+0xc3c>
10006794:	900b883a 	mov	r5,r18
10006798:	e009883a 	mov	r4,fp
1000679c:	00092c40 	call	100092c4 <_Bfree>
100067a0:	880b883a 	mov	r5,r17
100067a4:	e009883a 	mov	r4,fp
100067a8:	00092c40 	call	100092c4 <_Bfree>
100067ac:	003e9706 	br	1000620c <__alt_data_end+0xf800620c>
100067b0:	01800044 	movi	r6,1
100067b4:	d9800e15 	stw	r6,56(sp)
100067b8:	003d9606 	br	10005e14 <__alt_data_end+0xf8005e14>
100067bc:	d8800817 	ldw	r2,32(sp)
100067c0:	d8c00517 	ldw	r3,20(sp)
100067c4:	d8000d15 	stw	zero,52(sp)
100067c8:	10c5c83a 	sub	r2,r2,r3
100067cc:	00c9c83a 	sub	r4,zero,r3
100067d0:	d8800815 	stw	r2,32(sp)
100067d4:	d9000a15 	stw	r4,40(sp)
100067d8:	003d9706 	br	10005e38 <__alt_data_end+0xf8005e38>
100067dc:	05adc83a 	sub	r22,zero,r22
100067e0:	dd800815 	stw	r22,32(sp)
100067e4:	002d883a 	mov	r22,zero
100067e8:	003d8e06 	br	10005e24 <__alt_data_end+0xf8005e24>
100067ec:	d9000517 	ldw	r4,20(sp)
100067f0:	000fe000 	call	1000fe00 <__floatsidf>
100067f4:	100d883a 	mov	r6,r2
100067f8:	180f883a 	mov	r7,r3
100067fc:	a009883a 	mov	r4,r20
10006800:	880b883a 	mov	r5,r17
10006804:	000e9c00 	call	1000e9c0 <__eqdf2>
10006808:	103d7126 	beq	r2,zero,10005dd0 <__alt_data_end+0xf8005dd0>
1000680c:	d9c00517 	ldw	r7,20(sp)
10006810:	39ffffc4 	addi	r7,r7,-1
10006814:	d9c00515 	stw	r7,20(sp)
10006818:	003d6d06 	br	10005dd0 <__alt_data_end+0xf8005dd0>
1000681c:	dd400a17 	ldw	r21,40(sp)
10006820:	dd000817 	ldw	r20,32(sp)
10006824:	0023883a 	mov	r17,zero
10006828:	003f4806 	br	1000654c <__alt_data_end+0xf800654c>
1000682c:	10e3c83a 	sub	r17,r2,r3
10006830:	9448983a 	sll	r4,r18,r17
10006834:	003d3206 	br	10005d00 <__alt_data_end+0xf8005d00>
10006838:	d8000e15 	stw	zero,56(sp)
1000683c:	003d7506 	br	10005e14 <__alt_data_end+0xf8005e14>
10006840:	b005883a 	mov	r2,r22
10006844:	003f4506 	br	1000655c <__alt_data_end+0xf800655c>
10006848:	dc000915 	stw	r16,36(sp)
1000684c:	d9800a17 	ldw	r6,40(sp)
10006850:	d9400917 	ldw	r5,36(sp)
10006854:	e009883a 	mov	r4,fp
10006858:	00099180 	call	10009918 <__pow5mult>
1000685c:	1021883a 	mov	r16,r2
10006860:	003f5a06 	br	100065cc <__alt_data_end+0xf80065cc>
10006864:	01c00044 	movi	r7,1
10006868:	d9c00b15 	stw	r7,44(sp)
1000686c:	d8802217 	ldw	r2,136(sp)
10006870:	0081280e 	bge	zero,r2,10006d14 <_dtoa_r+0x11b0>
10006874:	100d883a 	mov	r6,r2
10006878:	1021883a 	mov	r16,r2
1000687c:	d8800c15 	stw	r2,48(sp)
10006880:	d8800615 	stw	r2,24(sp)
10006884:	003d8806 	br	10005ea8 <__alt_data_end+0xf8005ea8>
10006888:	d8800617 	ldw	r2,24(sp)
1000688c:	00be9b16 	blt	zero,r2,100062fc <__alt_data_end+0xf80062fc>
10006890:	10010f1e 	bne	r2,zero,10006cd0 <_dtoa_r+0x116c>
10006894:	880b883a 	mov	r5,r17
10006898:	000d883a 	mov	r6,zero
1000689c:	01d00534 	movhi	r7,16404
100068a0:	8009883a 	mov	r4,r16
100068a4:	000ec180 	call	1000ec18 <__muldf3>
100068a8:	900d883a 	mov	r6,r18
100068ac:	980f883a 	mov	r7,r19
100068b0:	1009883a 	mov	r4,r2
100068b4:	180b883a 	mov	r5,r3
100068b8:	000ea480 	call	1000ea48 <__gedf2>
100068bc:	002b883a 	mov	r21,zero
100068c0:	0023883a 	mov	r17,zero
100068c4:	1000bf16 	blt	r2,zero,10006bc4 <_dtoa_r+0x1060>
100068c8:	d9802217 	ldw	r6,136(sp)
100068cc:	ddc00717 	ldw	r23,28(sp)
100068d0:	018c303a 	nor	r6,zero,r6
100068d4:	d9800515 	stw	r6,20(sp)
100068d8:	a80b883a 	mov	r5,r21
100068dc:	e009883a 	mov	r4,fp
100068e0:	00092c40 	call	100092c4 <_Bfree>
100068e4:	883e4926 	beq	r17,zero,1000620c <__alt_data_end+0xf800620c>
100068e8:	003fad06 	br	100067a0 <__alt_data_end+0xf80067a0>
100068ec:	d9c01117 	ldw	r7,68(sp)
100068f0:	3801bc26 	beq	r7,zero,10006fe4 <_dtoa_r+0x1480>
100068f4:	10810cc4 	addi	r2,r2,1075
100068f8:	dd400a17 	ldw	r21,40(sp)
100068fc:	dd000817 	ldw	r20,32(sp)
10006900:	003f0a06 	br	1000652c <__alt_data_end+0xf800652c>
10006904:	00800704 	movi	r2,28
10006908:	d9000817 	ldw	r4,32(sp)
1000690c:	a0a9883a 	add	r20,r20,r2
10006910:	b0ad883a 	add	r22,r22,r2
10006914:	2089883a 	add	r4,r4,r2
10006918:	d9000815 	stw	r4,32(sp)
1000691c:	003f5106 	br	10006664 <__alt_data_end+0xf8006664>
10006920:	d8c00317 	ldw	r3,12(sp)
10006924:	b8c1fc0e 	bge	r23,r3,10007118 <_dtoa_r+0x15b4>
10006928:	0027883a 	mov	r19,zero
1000692c:	b805883a 	mov	r2,r23
10006930:	003f3e06 	br	1000662c <__alt_data_end+0xf800662c>
10006934:	880b883a 	mov	r5,r17
10006938:	e009883a 	mov	r4,fp
1000693c:	000f883a 	mov	r7,zero
10006940:	01800284 	movi	r6,10
10006944:	00092ec0 	call	100092ec <__multadd>
10006948:	d9000c17 	ldw	r4,48(sp)
1000694c:	1023883a 	mov	r17,r2
10006950:	0102040e 	bge	zero,r4,10007164 <_dtoa_r+0x1600>
10006954:	d9000615 	stw	r4,24(sp)
10006958:	0500050e 	bge	zero,r20,10006970 <_dtoa_r+0xe0c>
1000695c:	880b883a 	mov	r5,r17
10006960:	a00d883a 	mov	r6,r20
10006964:	e009883a 	mov	r4,fp
10006968:	0009a580 	call	10009a58 <__lshift>
1000696c:	1023883a 	mov	r17,r2
10006970:	9801241e 	bne	r19,zero,10006e04 <_dtoa_r+0x12a0>
10006974:	8829883a 	mov	r20,r17
10006978:	d9000617 	ldw	r4,24(sp)
1000697c:	dcc00717 	ldw	r19,28(sp)
10006980:	9480004c 	andi	r18,r18,1
10006984:	20bfffc4 	addi	r2,r4,-1
10006988:	9885883a 	add	r2,r19,r2
1000698c:	d8800415 	stw	r2,16(sp)
10006990:	dc800615 	stw	r18,24(sp)
10006994:	a80b883a 	mov	r5,r21
10006998:	8009883a 	mov	r4,r16
1000699c:	000593c0 	call	1000593c <quorem>
100069a0:	880b883a 	mov	r5,r17
100069a4:	8009883a 	mov	r4,r16
100069a8:	102f883a 	mov	r23,r2
100069ac:	0009ba00 	call	10009ba0 <__mcmp>
100069b0:	a80b883a 	mov	r5,r21
100069b4:	a00d883a 	mov	r6,r20
100069b8:	e009883a 	mov	r4,fp
100069bc:	102d883a 	mov	r22,r2
100069c0:	0009c000 	call	10009c00 <__mdiff>
100069c4:	1007883a 	mov	r3,r2
100069c8:	10800317 	ldw	r2,12(r2)
100069cc:	bc800c04 	addi	r18,r23,48
100069d0:	180b883a 	mov	r5,r3
100069d4:	10004e1e 	bne	r2,zero,10006b10 <_dtoa_r+0xfac>
100069d8:	8009883a 	mov	r4,r16
100069dc:	d8c01615 	stw	r3,88(sp)
100069e0:	0009ba00 	call	10009ba0 <__mcmp>
100069e4:	d8c01617 	ldw	r3,88(sp)
100069e8:	e009883a 	mov	r4,fp
100069ec:	d8801615 	stw	r2,88(sp)
100069f0:	180b883a 	mov	r5,r3
100069f4:	00092c40 	call	100092c4 <_Bfree>
100069f8:	d8801617 	ldw	r2,88(sp)
100069fc:	1000041e 	bne	r2,zero,10006a10 <_dtoa_r+0xeac>
10006a00:	d9800317 	ldw	r6,12(sp)
10006a04:	3000021e 	bne	r6,zero,10006a10 <_dtoa_r+0xeac>
10006a08:	d8c00617 	ldw	r3,24(sp)
10006a0c:	18003726 	beq	r3,zero,10006aec <_dtoa_r+0xf88>
10006a10:	b0002016 	blt	r22,zero,10006a94 <_dtoa_r+0xf30>
10006a14:	b000041e 	bne	r22,zero,10006a28 <_dtoa_r+0xec4>
10006a18:	d9000317 	ldw	r4,12(sp)
10006a1c:	2000021e 	bne	r4,zero,10006a28 <_dtoa_r+0xec4>
10006a20:	d8c00617 	ldw	r3,24(sp)
10006a24:	18001b26 	beq	r3,zero,10006a94 <_dtoa_r+0xf30>
10006a28:	00810716 	blt	zero,r2,10006e48 <_dtoa_r+0x12e4>
10006a2c:	d8c00417 	ldw	r3,16(sp)
10006a30:	9d800044 	addi	r22,r19,1
10006a34:	9c800005 	stb	r18,0(r19)
10006a38:	b02f883a 	mov	r23,r22
10006a3c:	98c10626 	beq	r19,r3,10006e58 <_dtoa_r+0x12f4>
10006a40:	800b883a 	mov	r5,r16
10006a44:	000f883a 	mov	r7,zero
10006a48:	01800284 	movi	r6,10
10006a4c:	e009883a 	mov	r4,fp
10006a50:	00092ec0 	call	100092ec <__multadd>
10006a54:	1021883a 	mov	r16,r2
10006a58:	000f883a 	mov	r7,zero
10006a5c:	01800284 	movi	r6,10
10006a60:	880b883a 	mov	r5,r17
10006a64:	e009883a 	mov	r4,fp
10006a68:	8d002526 	beq	r17,r20,10006b00 <_dtoa_r+0xf9c>
10006a6c:	00092ec0 	call	100092ec <__multadd>
10006a70:	a00b883a 	mov	r5,r20
10006a74:	000f883a 	mov	r7,zero
10006a78:	01800284 	movi	r6,10
10006a7c:	e009883a 	mov	r4,fp
10006a80:	1023883a 	mov	r17,r2
10006a84:	00092ec0 	call	100092ec <__multadd>
10006a88:	1029883a 	mov	r20,r2
10006a8c:	b027883a 	mov	r19,r22
10006a90:	003fc006 	br	10006994 <__alt_data_end+0xf8006994>
10006a94:	9011883a 	mov	r8,r18
10006a98:	00800e0e 	bge	zero,r2,10006ad4 <_dtoa_r+0xf70>
10006a9c:	800b883a 	mov	r5,r16
10006aa0:	01800044 	movi	r6,1
10006aa4:	e009883a 	mov	r4,fp
10006aa8:	da001715 	stw	r8,92(sp)
10006aac:	0009a580 	call	10009a58 <__lshift>
10006ab0:	a80b883a 	mov	r5,r21
10006ab4:	1009883a 	mov	r4,r2
10006ab8:	1021883a 	mov	r16,r2
10006abc:	0009ba00 	call	10009ba0 <__mcmp>
10006ac0:	da001717 	ldw	r8,92(sp)
10006ac4:	0081960e 	bge	zero,r2,10007120 <_dtoa_r+0x15bc>
10006ac8:	00800e44 	movi	r2,57
10006acc:	40817026 	beq	r8,r2,10007090 <_dtoa_r+0x152c>
10006ad0:	ba000c44 	addi	r8,r23,49
10006ad4:	8825883a 	mov	r18,r17
10006ad8:	9dc00044 	addi	r23,r19,1
10006adc:	9a000005 	stb	r8,0(r19)
10006ae0:	a023883a 	mov	r17,r20
10006ae4:	dc000915 	stw	r16,36(sp)
10006ae8:	003f2406 	br	1000677c <__alt_data_end+0xf800677c>
10006aec:	00800e44 	movi	r2,57
10006af0:	9011883a 	mov	r8,r18
10006af4:	90816626 	beq	r18,r2,10007090 <_dtoa_r+0x152c>
10006af8:	05bff516 	blt	zero,r22,10006ad0 <__alt_data_end+0xf8006ad0>
10006afc:	003ff506 	br	10006ad4 <__alt_data_end+0xf8006ad4>
10006b00:	00092ec0 	call	100092ec <__multadd>
10006b04:	1023883a 	mov	r17,r2
10006b08:	1029883a 	mov	r20,r2
10006b0c:	003fdf06 	br	10006a8c <__alt_data_end+0xf8006a8c>
10006b10:	e009883a 	mov	r4,fp
10006b14:	00092c40 	call	100092c4 <_Bfree>
10006b18:	00800044 	movi	r2,1
10006b1c:	003fbc06 	br	10006a10 <__alt_data_end+0xf8006a10>
10006b20:	a80b883a 	mov	r5,r21
10006b24:	8009883a 	mov	r4,r16
10006b28:	0009ba00 	call	10009ba0 <__mcmp>
10006b2c:	103edb0e 	bge	r2,zero,1000669c <__alt_data_end+0xf800669c>
10006b30:	800b883a 	mov	r5,r16
10006b34:	000f883a 	mov	r7,zero
10006b38:	01800284 	movi	r6,10
10006b3c:	e009883a 	mov	r4,fp
10006b40:	00092ec0 	call	100092ec <__multadd>
10006b44:	1021883a 	mov	r16,r2
10006b48:	d8800517 	ldw	r2,20(sp)
10006b4c:	d8c00b17 	ldw	r3,44(sp)
10006b50:	10bfffc4 	addi	r2,r2,-1
10006b54:	d8800515 	stw	r2,20(sp)
10006b58:	183f761e 	bne	r3,zero,10006934 <__alt_data_end+0xf8006934>
10006b5c:	d9000c17 	ldw	r4,48(sp)
10006b60:	0101730e 	bge	zero,r4,10007130 <_dtoa_r+0x15cc>
10006b64:	d9000615 	stw	r4,24(sp)
10006b68:	003ed006 	br	100066ac <__alt_data_end+0xf80066ac>
10006b6c:	00800084 	movi	r2,2
10006b70:	3081861e 	bne	r6,r2,1000718c <_dtoa_r+0x1628>
10006b74:	d8000b15 	stw	zero,44(sp)
10006b78:	003f3c06 	br	1000686c <__alt_data_end+0xf800686c>
10006b7c:	dc000917 	ldw	r16,36(sp)
10006b80:	003e9206 	br	100065cc <__alt_data_end+0xf80065cc>
10006b84:	d9c00317 	ldw	r7,12(sp)
10006b88:	00800084 	movi	r2,2
10006b8c:	11fec50e 	bge	r2,r7,100066a4 <__alt_data_end+0xf80066a4>
10006b90:	d9000617 	ldw	r4,24(sp)
10006b94:	20013c1e 	bne	r4,zero,10007088 <_dtoa_r+0x1524>
10006b98:	a80b883a 	mov	r5,r21
10006b9c:	000f883a 	mov	r7,zero
10006ba0:	01800144 	movi	r6,5
10006ba4:	e009883a 	mov	r4,fp
10006ba8:	00092ec0 	call	100092ec <__multadd>
10006bac:	100b883a 	mov	r5,r2
10006bb0:	8009883a 	mov	r4,r16
10006bb4:	102b883a 	mov	r21,r2
10006bb8:	0009ba00 	call	10009ba0 <__mcmp>
10006bbc:	dc000915 	stw	r16,36(sp)
10006bc0:	00bf410e 	bge	zero,r2,100068c8 <__alt_data_end+0xf80068c8>
10006bc4:	d9c00717 	ldw	r7,28(sp)
10006bc8:	00800c44 	movi	r2,49
10006bcc:	38800005 	stb	r2,0(r7)
10006bd0:	d8800517 	ldw	r2,20(sp)
10006bd4:	3dc00044 	addi	r23,r7,1
10006bd8:	10800044 	addi	r2,r2,1
10006bdc:	d8800515 	stw	r2,20(sp)
10006be0:	003f3d06 	br	100068d8 <__alt_data_end+0xf80068d8>
10006be4:	d9800517 	ldw	r6,20(sp)
10006be8:	d9c00717 	ldw	r7,28(sp)
10006bec:	00800c44 	movi	r2,49
10006bf0:	31800044 	addi	r6,r6,1
10006bf4:	d9800515 	stw	r6,20(sp)
10006bf8:	38800005 	stb	r2,0(r7)
10006bfc:	003edf06 	br	1000677c <__alt_data_end+0xf800677c>
10006c00:	d8000b15 	stw	zero,44(sp)
10006c04:	003c9f06 	br	10005e84 <__alt_data_end+0xf8005e84>
10006c08:	903e7e1e 	bne	r18,zero,10006604 <__alt_data_end+0xf8006604>
10006c0c:	00800434 	movhi	r2,16
10006c10:	10bfffc4 	addi	r2,r2,-1
10006c14:	9884703a 	and	r2,r19,r2
10006c18:	1000ea1e 	bne	r2,zero,10006fc4 <_dtoa_r+0x1460>
10006c1c:	9cdffc2c 	andhi	r19,r19,32752
10006c20:	9800e826 	beq	r19,zero,10006fc4 <_dtoa_r+0x1460>
10006c24:	d9c00817 	ldw	r7,32(sp)
10006c28:	b5800044 	addi	r22,r22,1
10006c2c:	04c00044 	movi	r19,1
10006c30:	39c00044 	addi	r7,r7,1
10006c34:	d9c00815 	stw	r7,32(sp)
10006c38:	d8800d17 	ldw	r2,52(sp)
10006c3c:	103e721e 	bne	r2,zero,10006608 <__alt_data_end+0xf8006608>
10006c40:	00800044 	movi	r2,1
10006c44:	003e7906 	br	1000662c <__alt_data_end+0xf800662c>
10006c48:	8009883a 	mov	r4,r16
10006c4c:	000fe000 	call	1000fe00 <__floatsidf>
10006c50:	d9800f17 	ldw	r6,60(sp)
10006c54:	d9c01017 	ldw	r7,64(sp)
10006c58:	1009883a 	mov	r4,r2
10006c5c:	180b883a 	mov	r5,r3
10006c60:	000ec180 	call	1000ec18 <__muldf3>
10006c64:	000d883a 	mov	r6,zero
10006c68:	01d00734 	movhi	r7,16412
10006c6c:	1009883a 	mov	r4,r2
10006c70:	180b883a 	mov	r5,r3
10006c74:	000d7440 	call	1000d744 <__adddf3>
10006c78:	047f3034 	movhi	r17,64704
10006c7c:	1021883a 	mov	r16,r2
10006c80:	1c63883a 	add	r17,r3,r17
10006c84:	d9000f17 	ldw	r4,60(sp)
10006c88:	d9401017 	ldw	r5,64(sp)
10006c8c:	000d883a 	mov	r6,zero
10006c90:	01d00534 	movhi	r7,16404
10006c94:	000f4840 	call	1000f484 <__subdf3>
10006c98:	800d883a 	mov	r6,r16
10006c9c:	880f883a 	mov	r7,r17
10006ca0:	1009883a 	mov	r4,r2
10006ca4:	180b883a 	mov	r5,r3
10006ca8:	102b883a 	mov	r21,r2
10006cac:	1829883a 	mov	r20,r3
10006cb0:	000ea480 	call	1000ea48 <__gedf2>
10006cb4:	00806c16 	blt	zero,r2,10006e68 <_dtoa_r+0x1304>
10006cb8:	89e0003c 	xorhi	r7,r17,32768
10006cbc:	800d883a 	mov	r6,r16
10006cc0:	a809883a 	mov	r4,r21
10006cc4:	a00b883a 	mov	r5,r20
10006cc8:	000eb240 	call	1000eb24 <__ledf2>
10006ccc:	103d7e0e 	bge	r2,zero,100062c8 <__alt_data_end+0xf80062c8>
10006cd0:	002b883a 	mov	r21,zero
10006cd4:	0023883a 	mov	r17,zero
10006cd8:	003efb06 	br	100068c8 <__alt_data_end+0xf80068c8>
10006cdc:	d8800717 	ldw	r2,28(sp)
10006ce0:	003bd006 	br	10005c24 <__alt_data_end+0xf8005c24>
10006ce4:	d9000a17 	ldw	r4,40(sp)
10006ce8:	d9800d17 	ldw	r6,52(sp)
10006cec:	dd400a15 	stw	r21,40(sp)
10006cf0:	a905c83a 	sub	r2,r21,r4
10006cf4:	308d883a 	add	r6,r6,r2
10006cf8:	d9800d15 	stw	r6,52(sp)
10006cfc:	002b883a 	mov	r21,zero
10006d00:	003e0606 	br	1000651c <__alt_data_end+0xf800651c>
10006d04:	9023883a 	mov	r17,r18
10006d08:	9829883a 	mov	r20,r19
10006d0c:	04000084 	movi	r16,2
10006d10:	003c9206 	br	10005f5c <__alt_data_end+0xf8005f5c>
10006d14:	04000044 	movi	r16,1
10006d18:	dc000c15 	stw	r16,48(sp)
10006d1c:	dc000615 	stw	r16,24(sp)
10006d20:	dc002215 	stw	r16,136(sp)
10006d24:	e0001115 	stw	zero,68(fp)
10006d28:	000b883a 	mov	r5,zero
10006d2c:	003c6906 	br	10005ed4 <__alt_data_end+0xf8005ed4>
10006d30:	3021883a 	mov	r16,r6
10006d34:	003ffb06 	br	10006d24 <__alt_data_end+0xf8006d24>
10006d38:	1000021e 	bne	r2,zero,10006d44 <_dtoa_r+0x11e0>
10006d3c:	4200004c 	andi	r8,r8,1
10006d40:	403e7d1e 	bne	r8,zero,10006738 <__alt_data_end+0xf8006738>
10006d44:	01000c04 	movi	r4,48
10006d48:	00000106 	br	10006d50 <_dtoa_r+0x11ec>
10006d4c:	102f883a 	mov	r23,r2
10006d50:	b8bfffc4 	addi	r2,r23,-1
10006d54:	10c00007 	ldb	r3,0(r2)
10006d58:	193ffc26 	beq	r3,r4,10006d4c <__alt_data_end+0xf8006d4c>
10006d5c:	003e8706 	br	1000677c <__alt_data_end+0xf800677c>
10006d60:	d8800517 	ldw	r2,20(sp)
10006d64:	00a3c83a 	sub	r17,zero,r2
10006d68:	8800a426 	beq	r17,zero,10006ffc <_dtoa_r+0x1498>
10006d6c:	888003cc 	andi	r2,r17,15
10006d70:	100490fa 	slli	r2,r2,3
10006d74:	00c40074 	movhi	r3,4097
10006d78:	18cc1004 	addi	r3,r3,12352
10006d7c:	1885883a 	add	r2,r3,r2
10006d80:	11800017 	ldw	r6,0(r2)
10006d84:	11c00117 	ldw	r7,4(r2)
10006d88:	9009883a 	mov	r4,r18
10006d8c:	980b883a 	mov	r5,r19
10006d90:	8823d13a 	srai	r17,r17,4
10006d94:	000ec180 	call	1000ec18 <__muldf3>
10006d98:	d8800f15 	stw	r2,60(sp)
10006d9c:	d8c01015 	stw	r3,64(sp)
10006da0:	8800e826 	beq	r17,zero,10007144 <_dtoa_r+0x15e0>
10006da4:	05040074 	movhi	r20,4097
10006da8:	a50c0604 	addi	r20,r20,12312
10006dac:	04000084 	movi	r16,2
10006db0:	8980004c 	andi	r6,r17,1
10006db4:	1009883a 	mov	r4,r2
10006db8:	8823d07a 	srai	r17,r17,1
10006dbc:	180b883a 	mov	r5,r3
10006dc0:	30000426 	beq	r6,zero,10006dd4 <_dtoa_r+0x1270>
10006dc4:	a1800017 	ldw	r6,0(r20)
10006dc8:	a1c00117 	ldw	r7,4(r20)
10006dcc:	84000044 	addi	r16,r16,1
10006dd0:	000ec180 	call	1000ec18 <__muldf3>
10006dd4:	a5000204 	addi	r20,r20,8
10006dd8:	883ff51e 	bne	r17,zero,10006db0 <__alt_data_end+0xf8006db0>
10006ddc:	d8800f15 	stw	r2,60(sp)
10006de0:	d8c01015 	stw	r3,64(sp)
10006de4:	003c7606 	br	10005fc0 <__alt_data_end+0xf8005fc0>
10006de8:	00c00c04 	movi	r3,48
10006dec:	10c00005 	stb	r3,0(r2)
10006df0:	d8c00517 	ldw	r3,20(sp)
10006df4:	bd3fffc3 	ldbu	r20,-1(r23)
10006df8:	18c00044 	addi	r3,r3,1
10006dfc:	d8c00515 	stw	r3,20(sp)
10006e00:	003db906 	br	100064e8 <__alt_data_end+0xf80064e8>
10006e04:	89400117 	ldw	r5,4(r17)
10006e08:	e009883a 	mov	r4,fp
10006e0c:	000921c0 	call	1000921c <_Balloc>
10006e10:	89800417 	ldw	r6,16(r17)
10006e14:	89400304 	addi	r5,r17,12
10006e18:	11000304 	addi	r4,r2,12
10006e1c:	31800084 	addi	r6,r6,2
10006e20:	318d883a 	add	r6,r6,r6
10006e24:	318d883a 	add	r6,r6,r6
10006e28:	1027883a 	mov	r19,r2
10006e2c:	0008e500 	call	10008e50 <memcpy>
10006e30:	01800044 	movi	r6,1
10006e34:	980b883a 	mov	r5,r19
10006e38:	e009883a 	mov	r4,fp
10006e3c:	0009a580 	call	10009a58 <__lshift>
10006e40:	1029883a 	mov	r20,r2
10006e44:	003ecc06 	br	10006978 <__alt_data_end+0xf8006978>
10006e48:	00800e44 	movi	r2,57
10006e4c:	90809026 	beq	r18,r2,10007090 <_dtoa_r+0x152c>
10006e50:	92000044 	addi	r8,r18,1
10006e54:	003f1f06 	br	10006ad4 <__alt_data_end+0xf8006ad4>
10006e58:	9011883a 	mov	r8,r18
10006e5c:	8825883a 	mov	r18,r17
10006e60:	a023883a 	mov	r17,r20
10006e64:	003e2906 	br	1000670c <__alt_data_end+0xf800670c>
10006e68:	002b883a 	mov	r21,zero
10006e6c:	0023883a 	mov	r17,zero
10006e70:	003f5406 	br	10006bc4 <__alt_data_end+0xf8006bc4>
10006e74:	61bfffc4 	addi	r6,r12,-1
10006e78:	300490fa 	slli	r2,r6,3
10006e7c:	00c40074 	movhi	r3,4097
10006e80:	18cc1004 	addi	r3,r3,12352
10006e84:	1885883a 	add	r2,r3,r2
10006e88:	11000017 	ldw	r4,0(r2)
10006e8c:	11400117 	ldw	r5,4(r2)
10006e90:	d8800717 	ldw	r2,28(sp)
10006e94:	880f883a 	mov	r7,r17
10006e98:	d9801215 	stw	r6,72(sp)
10006e9c:	800d883a 	mov	r6,r16
10006ea0:	db001615 	stw	r12,88(sp)
10006ea4:	15c00044 	addi	r23,r2,1
10006ea8:	000ec180 	call	1000ec18 <__muldf3>
10006eac:	d9401017 	ldw	r5,64(sp)
10006eb0:	d9000f17 	ldw	r4,60(sp)
10006eb4:	d8c01515 	stw	r3,84(sp)
10006eb8:	d8801415 	stw	r2,80(sp)
10006ebc:	000fd800 	call	1000fd80 <__fixdfsi>
10006ec0:	1009883a 	mov	r4,r2
10006ec4:	1021883a 	mov	r16,r2
10006ec8:	000fe000 	call	1000fe00 <__floatsidf>
10006ecc:	d9000f17 	ldw	r4,60(sp)
10006ed0:	d9401017 	ldw	r5,64(sp)
10006ed4:	100d883a 	mov	r6,r2
10006ed8:	180f883a 	mov	r7,r3
10006edc:	000f4840 	call	1000f484 <__subdf3>
10006ee0:	1829883a 	mov	r20,r3
10006ee4:	d8c00717 	ldw	r3,28(sp)
10006ee8:	84000c04 	addi	r16,r16,48
10006eec:	1023883a 	mov	r17,r2
10006ef0:	1c000005 	stb	r16,0(r3)
10006ef4:	db001617 	ldw	r12,88(sp)
10006ef8:	00800044 	movi	r2,1
10006efc:	60802226 	beq	r12,r2,10006f88 <_dtoa_r+0x1424>
10006f00:	d9c00717 	ldw	r7,28(sp)
10006f04:	8805883a 	mov	r2,r17
10006f08:	b82b883a 	mov	r21,r23
10006f0c:	3b19883a 	add	r12,r7,r12
10006f10:	6023883a 	mov	r17,r12
10006f14:	a007883a 	mov	r3,r20
10006f18:	dc800f15 	stw	r18,60(sp)
10006f1c:	000d883a 	mov	r6,zero
10006f20:	01d00934 	movhi	r7,16420
10006f24:	1009883a 	mov	r4,r2
10006f28:	180b883a 	mov	r5,r3
10006f2c:	000ec180 	call	1000ec18 <__muldf3>
10006f30:	180b883a 	mov	r5,r3
10006f34:	1009883a 	mov	r4,r2
10006f38:	1829883a 	mov	r20,r3
10006f3c:	1025883a 	mov	r18,r2
10006f40:	000fd800 	call	1000fd80 <__fixdfsi>
10006f44:	1009883a 	mov	r4,r2
10006f48:	1021883a 	mov	r16,r2
10006f4c:	000fe000 	call	1000fe00 <__floatsidf>
10006f50:	100d883a 	mov	r6,r2
10006f54:	180f883a 	mov	r7,r3
10006f58:	9009883a 	mov	r4,r18
10006f5c:	a00b883a 	mov	r5,r20
10006f60:	84000c04 	addi	r16,r16,48
10006f64:	000f4840 	call	1000f484 <__subdf3>
10006f68:	ad400044 	addi	r21,r21,1
10006f6c:	ac3fffc5 	stb	r16,-1(r21)
10006f70:	ac7fea1e 	bne	r21,r17,10006f1c <__alt_data_end+0xf8006f1c>
10006f74:	1023883a 	mov	r17,r2
10006f78:	d8801217 	ldw	r2,72(sp)
10006f7c:	dc800f17 	ldw	r18,60(sp)
10006f80:	1829883a 	mov	r20,r3
10006f84:	b8af883a 	add	r23,r23,r2
10006f88:	d9001417 	ldw	r4,80(sp)
10006f8c:	d9401517 	ldw	r5,84(sp)
10006f90:	000d883a 	mov	r6,zero
10006f94:	01cff834 	movhi	r7,16352
10006f98:	000d7440 	call	1000d744 <__adddf3>
10006f9c:	880d883a 	mov	r6,r17
10006fa0:	a00f883a 	mov	r7,r20
10006fa4:	1009883a 	mov	r4,r2
10006fa8:	180b883a 	mov	r5,r3
10006fac:	000eb240 	call	1000eb24 <__ledf2>
10006fb0:	10003e0e 	bge	r2,zero,100070ac <_dtoa_r+0x1548>
10006fb4:	d9001317 	ldw	r4,76(sp)
10006fb8:	bd3fffc3 	ldbu	r20,-1(r23)
10006fbc:	d9000515 	stw	r4,20(sp)
10006fc0:	003d3b06 	br	100064b0 <__alt_data_end+0xf80064b0>
10006fc4:	0027883a 	mov	r19,zero
10006fc8:	003f1b06 	br	10006c38 <__alt_data_end+0xf8006c38>
10006fcc:	d8800817 	ldw	r2,32(sp)
10006fd0:	11e9c83a 	sub	r20,r2,r7
10006fd4:	0005883a 	mov	r2,zero
10006fd8:	003d5406 	br	1000652c <__alt_data_end+0xf800652c>
10006fdc:	00800044 	movi	r2,1
10006fe0:	003dc706 	br	10006700 <__alt_data_end+0xf8006700>
10006fe4:	d8c00217 	ldw	r3,8(sp)
10006fe8:	00800d84 	movi	r2,54
10006fec:	dd400a17 	ldw	r21,40(sp)
10006ff0:	10c5c83a 	sub	r2,r2,r3
10006ff4:	dd000817 	ldw	r20,32(sp)
10006ff8:	003d4c06 	br	1000652c <__alt_data_end+0xf800652c>
10006ffc:	dc800f15 	stw	r18,60(sp)
10007000:	dcc01015 	stw	r19,64(sp)
10007004:	04000084 	movi	r16,2
10007008:	003bed06 	br	10005fc0 <__alt_data_end+0xf8005fc0>
1000700c:	d9000617 	ldw	r4,24(sp)
10007010:	203f0d26 	beq	r4,zero,10006c48 <__alt_data_end+0xf8006c48>
10007014:	d9800c17 	ldw	r6,48(sp)
10007018:	01bcab0e 	bge	zero,r6,100062c8 <__alt_data_end+0xf80062c8>
1000701c:	d9401017 	ldw	r5,64(sp)
10007020:	d9000f17 	ldw	r4,60(sp)
10007024:	000d883a 	mov	r6,zero
10007028:	01d00934 	movhi	r7,16420
1000702c:	000ec180 	call	1000ec18 <__muldf3>
10007030:	81000044 	addi	r4,r16,1
10007034:	d8800f15 	stw	r2,60(sp)
10007038:	d8c01015 	stw	r3,64(sp)
1000703c:	000fe000 	call	1000fe00 <__floatsidf>
10007040:	d9800f17 	ldw	r6,60(sp)
10007044:	d9c01017 	ldw	r7,64(sp)
10007048:	1009883a 	mov	r4,r2
1000704c:	180b883a 	mov	r5,r3
10007050:	000ec180 	call	1000ec18 <__muldf3>
10007054:	01d00734 	movhi	r7,16412
10007058:	000d883a 	mov	r6,zero
1000705c:	1009883a 	mov	r4,r2
10007060:	180b883a 	mov	r5,r3
10007064:	000d7440 	call	1000d744 <__adddf3>
10007068:	d9c00517 	ldw	r7,20(sp)
1000706c:	047f3034 	movhi	r17,64704
10007070:	1021883a 	mov	r16,r2
10007074:	39ffffc4 	addi	r7,r7,-1
10007078:	d9c01315 	stw	r7,76(sp)
1000707c:	1c63883a 	add	r17,r3,r17
10007080:	db000c17 	ldw	r12,48(sp)
10007084:	003bea06 	br	10006030 <__alt_data_end+0xf8006030>
10007088:	dc000915 	stw	r16,36(sp)
1000708c:	003e0e06 	br	100068c8 <__alt_data_end+0xf80068c8>
10007090:	01000e44 	movi	r4,57
10007094:	8825883a 	mov	r18,r17
10007098:	9dc00044 	addi	r23,r19,1
1000709c:	99000005 	stb	r4,0(r19)
100070a0:	a023883a 	mov	r17,r20
100070a4:	dc000915 	stw	r16,36(sp)
100070a8:	003da406 	br	1000673c <__alt_data_end+0xf800673c>
100070ac:	d9801417 	ldw	r6,80(sp)
100070b0:	d9c01517 	ldw	r7,84(sp)
100070b4:	0009883a 	mov	r4,zero
100070b8:	014ff834 	movhi	r5,16352
100070bc:	000f4840 	call	1000f484 <__subdf3>
100070c0:	880d883a 	mov	r6,r17
100070c4:	a00f883a 	mov	r7,r20
100070c8:	1009883a 	mov	r4,r2
100070cc:	180b883a 	mov	r5,r3
100070d0:	000ea480 	call	1000ea48 <__gedf2>
100070d4:	00bc7c0e 	bge	zero,r2,100062c8 <__alt_data_end+0xf80062c8>
100070d8:	01000c04 	movi	r4,48
100070dc:	00000106 	br	100070e4 <_dtoa_r+0x1580>
100070e0:	102f883a 	mov	r23,r2
100070e4:	b8bfffc4 	addi	r2,r23,-1
100070e8:	10c00007 	ldb	r3,0(r2)
100070ec:	193ffc26 	beq	r3,r4,100070e0 <__alt_data_end+0xf80070e0>
100070f0:	d9801317 	ldw	r6,76(sp)
100070f4:	d9800515 	stw	r6,20(sp)
100070f8:	003c4406 	br	1000620c <__alt_data_end+0xf800620c>
100070fc:	d9801317 	ldw	r6,76(sp)
10007100:	d9800515 	stw	r6,20(sp)
10007104:	003cea06 	br	100064b0 <__alt_data_end+0xf80064b0>
10007108:	dd800f17 	ldw	r22,60(sp)
1000710c:	dcc01017 	ldw	r19,64(sp)
10007110:	dc801217 	ldw	r18,72(sp)
10007114:	003c6c06 	br	100062c8 <__alt_data_end+0xf80062c8>
10007118:	903e031e 	bne	r18,zero,10006928 <__alt_data_end+0xf8006928>
1000711c:	003ebb06 	br	10006c0c <__alt_data_end+0xf8006c0c>
10007120:	103e6c1e 	bne	r2,zero,10006ad4 <__alt_data_end+0xf8006ad4>
10007124:	4080004c 	andi	r2,r8,1
10007128:	103e6a26 	beq	r2,zero,10006ad4 <__alt_data_end+0xf8006ad4>
1000712c:	003e6606 	br	10006ac8 <__alt_data_end+0xf8006ac8>
10007130:	d8c00317 	ldw	r3,12(sp)
10007134:	00800084 	movi	r2,2
10007138:	10c02916 	blt	r2,r3,100071e0 <_dtoa_r+0x167c>
1000713c:	d9000c17 	ldw	r4,48(sp)
10007140:	003e8806 	br	10006b64 <__alt_data_end+0xf8006b64>
10007144:	04000084 	movi	r16,2
10007148:	003b9d06 	br	10005fc0 <__alt_data_end+0xf8005fc0>
1000714c:	d9001317 	ldw	r4,76(sp)
10007150:	d9000515 	stw	r4,20(sp)
10007154:	003cd606 	br	100064b0 <__alt_data_end+0xf80064b0>
10007158:	d8801317 	ldw	r2,76(sp)
1000715c:	d8800515 	stw	r2,20(sp)
10007160:	003c2a06 	br	1000620c <__alt_data_end+0xf800620c>
10007164:	d9800317 	ldw	r6,12(sp)
10007168:	00800084 	movi	r2,2
1000716c:	11801516 	blt	r2,r6,100071c4 <_dtoa_r+0x1660>
10007170:	d9c00c17 	ldw	r7,48(sp)
10007174:	d9c00615 	stw	r7,24(sp)
10007178:	003df706 	br	10006958 <__alt_data_end+0xf8006958>
1000717c:	193d3926 	beq	r3,r4,10006664 <__alt_data_end+0xf8006664>
10007180:	00c00f04 	movi	r3,60
10007184:	1885c83a 	sub	r2,r3,r2
10007188:	003ddf06 	br	10006908 <__alt_data_end+0xf8006908>
1000718c:	e009883a 	mov	r4,fp
10007190:	e0001115 	stw	zero,68(fp)
10007194:	000b883a 	mov	r5,zero
10007198:	000921c0 	call	1000921c <_Balloc>
1000719c:	d8800715 	stw	r2,28(sp)
100071a0:	d8c00717 	ldw	r3,28(sp)
100071a4:	00bfffc4 	movi	r2,-1
100071a8:	01000044 	movi	r4,1
100071ac:	d8800c15 	stw	r2,48(sp)
100071b0:	e0c01015 	stw	r3,64(fp)
100071b4:	d9000b15 	stw	r4,44(sp)
100071b8:	d8800615 	stw	r2,24(sp)
100071bc:	d8002215 	stw	zero,136(sp)
100071c0:	003c4106 	br	100062c8 <__alt_data_end+0xf80062c8>
100071c4:	d8c00c17 	ldw	r3,48(sp)
100071c8:	d8c00615 	stw	r3,24(sp)
100071cc:	003e7006 	br	10006b90 <__alt_data_end+0xf8006b90>
100071d0:	04400044 	movi	r17,1
100071d4:	003b2006 	br	10005e58 <__alt_data_end+0xf8005e58>
100071d8:	000b883a 	mov	r5,zero
100071dc:	003b3d06 	br	10005ed4 <__alt_data_end+0xf8005ed4>
100071e0:	d8800c17 	ldw	r2,48(sp)
100071e4:	d8800615 	stw	r2,24(sp)
100071e8:	003e6906 	br	10006b90 <__alt_data_end+0xf8006b90>

100071ec <__sflush_r>:
100071ec:	2880030b 	ldhu	r2,12(r5)
100071f0:	defffb04 	addi	sp,sp,-20
100071f4:	dcc00315 	stw	r19,12(sp)
100071f8:	dc400115 	stw	r17,4(sp)
100071fc:	dfc00415 	stw	ra,16(sp)
10007200:	dc800215 	stw	r18,8(sp)
10007204:	dc000015 	stw	r16,0(sp)
10007208:	10c0020c 	andi	r3,r2,8
1000720c:	2823883a 	mov	r17,r5
10007210:	2027883a 	mov	r19,r4
10007214:	1800311e 	bne	r3,zero,100072dc <__sflush_r+0xf0>
10007218:	28c00117 	ldw	r3,4(r5)
1000721c:	10820014 	ori	r2,r2,2048
10007220:	2880030d 	sth	r2,12(r5)
10007224:	00c04b0e 	bge	zero,r3,10007354 <__sflush_r+0x168>
10007228:	8a000a17 	ldw	r8,40(r17)
1000722c:	40002326 	beq	r8,zero,100072bc <__sflush_r+0xd0>
10007230:	9c000017 	ldw	r16,0(r19)
10007234:	10c4000c 	andi	r3,r2,4096
10007238:	98000015 	stw	zero,0(r19)
1000723c:	18004826 	beq	r3,zero,10007360 <__sflush_r+0x174>
10007240:	89801417 	ldw	r6,80(r17)
10007244:	10c0010c 	andi	r3,r2,4
10007248:	18000626 	beq	r3,zero,10007264 <__sflush_r+0x78>
1000724c:	88c00117 	ldw	r3,4(r17)
10007250:	88800c17 	ldw	r2,48(r17)
10007254:	30cdc83a 	sub	r6,r6,r3
10007258:	10000226 	beq	r2,zero,10007264 <__sflush_r+0x78>
1000725c:	88800f17 	ldw	r2,60(r17)
10007260:	308dc83a 	sub	r6,r6,r2
10007264:	89400717 	ldw	r5,28(r17)
10007268:	000f883a 	mov	r7,zero
1000726c:	9809883a 	mov	r4,r19
10007270:	403ee83a 	callr	r8
10007274:	00ffffc4 	movi	r3,-1
10007278:	10c04426 	beq	r2,r3,1000738c <__sflush_r+0x1a0>
1000727c:	88c0030b 	ldhu	r3,12(r17)
10007280:	89000417 	ldw	r4,16(r17)
10007284:	88000115 	stw	zero,4(r17)
10007288:	197dffcc 	andi	r5,r3,63487
1000728c:	8940030d 	sth	r5,12(r17)
10007290:	89000015 	stw	r4,0(r17)
10007294:	18c4000c 	andi	r3,r3,4096
10007298:	18002c1e 	bne	r3,zero,1000734c <__sflush_r+0x160>
1000729c:	89400c17 	ldw	r5,48(r17)
100072a0:	9c000015 	stw	r16,0(r19)
100072a4:	28000526 	beq	r5,zero,100072bc <__sflush_r+0xd0>
100072a8:	88801004 	addi	r2,r17,64
100072ac:	28800226 	beq	r5,r2,100072b8 <__sflush_r+0xcc>
100072b0:	9809883a 	mov	r4,r19
100072b4:	00079680 	call	10007968 <_free_r>
100072b8:	88000c15 	stw	zero,48(r17)
100072bc:	0005883a 	mov	r2,zero
100072c0:	dfc00417 	ldw	ra,16(sp)
100072c4:	dcc00317 	ldw	r19,12(sp)
100072c8:	dc800217 	ldw	r18,8(sp)
100072cc:	dc400117 	ldw	r17,4(sp)
100072d0:	dc000017 	ldw	r16,0(sp)
100072d4:	dec00504 	addi	sp,sp,20
100072d8:	f800283a 	ret
100072dc:	2c800417 	ldw	r18,16(r5)
100072e0:	903ff626 	beq	r18,zero,100072bc <__alt_data_end+0xf80072bc>
100072e4:	2c000017 	ldw	r16,0(r5)
100072e8:	108000cc 	andi	r2,r2,3
100072ec:	2c800015 	stw	r18,0(r5)
100072f0:	84a1c83a 	sub	r16,r16,r18
100072f4:	1000131e 	bne	r2,zero,10007344 <__sflush_r+0x158>
100072f8:	28800517 	ldw	r2,20(r5)
100072fc:	88800215 	stw	r2,8(r17)
10007300:	04000316 	blt	zero,r16,10007310 <__sflush_r+0x124>
10007304:	003fed06 	br	100072bc <__alt_data_end+0xf80072bc>
10007308:	90a5883a 	add	r18,r18,r2
1000730c:	043feb0e 	bge	zero,r16,100072bc <__alt_data_end+0xf80072bc>
10007310:	88800917 	ldw	r2,36(r17)
10007314:	89400717 	ldw	r5,28(r17)
10007318:	800f883a 	mov	r7,r16
1000731c:	900d883a 	mov	r6,r18
10007320:	9809883a 	mov	r4,r19
10007324:	103ee83a 	callr	r2
10007328:	80a1c83a 	sub	r16,r16,r2
1000732c:	00bff616 	blt	zero,r2,10007308 <__alt_data_end+0xf8007308>
10007330:	88c0030b 	ldhu	r3,12(r17)
10007334:	00bfffc4 	movi	r2,-1
10007338:	18c01014 	ori	r3,r3,64
1000733c:	88c0030d 	sth	r3,12(r17)
10007340:	003fdf06 	br	100072c0 <__alt_data_end+0xf80072c0>
10007344:	0005883a 	mov	r2,zero
10007348:	003fec06 	br	100072fc <__alt_data_end+0xf80072fc>
1000734c:	88801415 	stw	r2,80(r17)
10007350:	003fd206 	br	1000729c <__alt_data_end+0xf800729c>
10007354:	28c00f17 	ldw	r3,60(r5)
10007358:	00ffb316 	blt	zero,r3,10007228 <__alt_data_end+0xf8007228>
1000735c:	003fd706 	br	100072bc <__alt_data_end+0xf80072bc>
10007360:	89400717 	ldw	r5,28(r17)
10007364:	000d883a 	mov	r6,zero
10007368:	01c00044 	movi	r7,1
1000736c:	9809883a 	mov	r4,r19
10007370:	403ee83a 	callr	r8
10007374:	100d883a 	mov	r6,r2
10007378:	00bfffc4 	movi	r2,-1
1000737c:	30801426 	beq	r6,r2,100073d0 <__sflush_r+0x1e4>
10007380:	8880030b 	ldhu	r2,12(r17)
10007384:	8a000a17 	ldw	r8,40(r17)
10007388:	003fae06 	br	10007244 <__alt_data_end+0xf8007244>
1000738c:	98c00017 	ldw	r3,0(r19)
10007390:	183fba26 	beq	r3,zero,1000727c <__alt_data_end+0xf800727c>
10007394:	01000744 	movi	r4,29
10007398:	19000626 	beq	r3,r4,100073b4 <__sflush_r+0x1c8>
1000739c:	01000584 	movi	r4,22
100073a0:	19000426 	beq	r3,r4,100073b4 <__sflush_r+0x1c8>
100073a4:	88c0030b 	ldhu	r3,12(r17)
100073a8:	18c01014 	ori	r3,r3,64
100073ac:	88c0030d 	sth	r3,12(r17)
100073b0:	003fc306 	br	100072c0 <__alt_data_end+0xf80072c0>
100073b4:	8880030b 	ldhu	r2,12(r17)
100073b8:	88c00417 	ldw	r3,16(r17)
100073bc:	88000115 	stw	zero,4(r17)
100073c0:	10bdffcc 	andi	r2,r2,63487
100073c4:	8880030d 	sth	r2,12(r17)
100073c8:	88c00015 	stw	r3,0(r17)
100073cc:	003fb306 	br	1000729c <__alt_data_end+0xf800729c>
100073d0:	98800017 	ldw	r2,0(r19)
100073d4:	103fea26 	beq	r2,zero,10007380 <__alt_data_end+0xf8007380>
100073d8:	00c00744 	movi	r3,29
100073dc:	10c00226 	beq	r2,r3,100073e8 <__sflush_r+0x1fc>
100073e0:	00c00584 	movi	r3,22
100073e4:	10c0031e 	bne	r2,r3,100073f4 <__sflush_r+0x208>
100073e8:	9c000015 	stw	r16,0(r19)
100073ec:	0005883a 	mov	r2,zero
100073f0:	003fb306 	br	100072c0 <__alt_data_end+0xf80072c0>
100073f4:	88c0030b 	ldhu	r3,12(r17)
100073f8:	3005883a 	mov	r2,r6
100073fc:	18c01014 	ori	r3,r3,64
10007400:	88c0030d 	sth	r3,12(r17)
10007404:	003fae06 	br	100072c0 <__alt_data_end+0xf80072c0>

10007408 <_fflush_r>:
10007408:	defffd04 	addi	sp,sp,-12
1000740c:	dc000115 	stw	r16,4(sp)
10007410:	dfc00215 	stw	ra,8(sp)
10007414:	2021883a 	mov	r16,r4
10007418:	20000226 	beq	r4,zero,10007424 <_fflush_r+0x1c>
1000741c:	20800e17 	ldw	r2,56(r4)
10007420:	10000c26 	beq	r2,zero,10007454 <_fflush_r+0x4c>
10007424:	2880030f 	ldh	r2,12(r5)
10007428:	1000051e 	bne	r2,zero,10007440 <_fflush_r+0x38>
1000742c:	0005883a 	mov	r2,zero
10007430:	dfc00217 	ldw	ra,8(sp)
10007434:	dc000117 	ldw	r16,4(sp)
10007438:	dec00304 	addi	sp,sp,12
1000743c:	f800283a 	ret
10007440:	8009883a 	mov	r4,r16
10007444:	dfc00217 	ldw	ra,8(sp)
10007448:	dc000117 	ldw	r16,4(sp)
1000744c:	dec00304 	addi	sp,sp,12
10007450:	00071ec1 	jmpi	100071ec <__sflush_r>
10007454:	d9400015 	stw	r5,0(sp)
10007458:	00077f40 	call	100077f4 <__sinit>
1000745c:	d9400017 	ldw	r5,0(sp)
10007460:	003ff006 	br	10007424 <__alt_data_end+0xf8007424>

10007464 <fflush>:
10007464:	20000526 	beq	r4,zero,1000747c <fflush+0x18>
10007468:	00840074 	movhi	r2,4097
1000746c:	10934c04 	addi	r2,r2,19760
10007470:	200b883a 	mov	r5,r4
10007474:	11000017 	ldw	r4,0(r2)
10007478:	00074081 	jmpi	10007408 <_fflush_r>
1000747c:	00840074 	movhi	r2,4097
10007480:	10934b04 	addi	r2,r2,19756
10007484:	11000017 	ldw	r4,0(r2)
10007488:	01440034 	movhi	r5,4096
1000748c:	295d0204 	addi	r5,r5,29704
10007490:	00082041 	jmpi	10008204 <_fwalk_reent>

10007494 <__fp_unlock>:
10007494:	0005883a 	mov	r2,zero
10007498:	f800283a 	ret

1000749c <_cleanup_r>:
1000749c:	01440074 	movhi	r5,4097
100074a0:	2970e804 	addi	r5,r5,-15456
100074a4:	00082041 	jmpi	10008204 <_fwalk_reent>

100074a8 <__sinit.part.1>:
100074a8:	defff704 	addi	sp,sp,-36
100074ac:	00c40034 	movhi	r3,4096
100074b0:	dfc00815 	stw	ra,32(sp)
100074b4:	ddc00715 	stw	r23,28(sp)
100074b8:	dd800615 	stw	r22,24(sp)
100074bc:	dd400515 	stw	r21,20(sp)
100074c0:	dd000415 	stw	r20,16(sp)
100074c4:	dcc00315 	stw	r19,12(sp)
100074c8:	dc800215 	stw	r18,8(sp)
100074cc:	dc400115 	stw	r17,4(sp)
100074d0:	dc000015 	stw	r16,0(sp)
100074d4:	18dd2704 	addi	r3,r3,29852
100074d8:	24000117 	ldw	r16,4(r4)
100074dc:	20c00f15 	stw	r3,60(r4)
100074e0:	2080bb04 	addi	r2,r4,748
100074e4:	00c000c4 	movi	r3,3
100074e8:	20c0b915 	stw	r3,740(r4)
100074ec:	2080ba15 	stw	r2,744(r4)
100074f0:	2000b815 	stw	zero,736(r4)
100074f4:	05c00204 	movi	r23,8
100074f8:	00800104 	movi	r2,4
100074fc:	2025883a 	mov	r18,r4
10007500:	b80d883a 	mov	r6,r23
10007504:	81001704 	addi	r4,r16,92
10007508:	000b883a 	mov	r5,zero
1000750c:	80000015 	stw	zero,0(r16)
10007510:	80000115 	stw	zero,4(r16)
10007514:	80000215 	stw	zero,8(r16)
10007518:	8080030d 	sth	r2,12(r16)
1000751c:	80001915 	stw	zero,100(r16)
10007520:	8000038d 	sth	zero,14(r16)
10007524:	80000415 	stw	zero,16(r16)
10007528:	80000515 	stw	zero,20(r16)
1000752c:	80000615 	stw	zero,24(r16)
10007530:	00090f40 	call	100090f4 <memset>
10007534:	05840074 	movhi	r22,4097
10007538:	94400217 	ldw	r17,8(r18)
1000753c:	05440074 	movhi	r21,4097
10007540:	05040074 	movhi	r20,4097
10007544:	04c40074 	movhi	r19,4097
10007548:	b5aa4004 	addi	r22,r22,-22272
1000754c:	ad6a5704 	addi	r21,r21,-22180
10007550:	a52a7604 	addi	r20,r20,-22056
10007554:	9cea8d04 	addi	r19,r19,-21964
10007558:	85800815 	stw	r22,32(r16)
1000755c:	85400915 	stw	r21,36(r16)
10007560:	85000a15 	stw	r20,40(r16)
10007564:	84c00b15 	stw	r19,44(r16)
10007568:	84000715 	stw	r16,28(r16)
1000756c:	00800284 	movi	r2,10
10007570:	8880030d 	sth	r2,12(r17)
10007574:	00800044 	movi	r2,1
10007578:	b80d883a 	mov	r6,r23
1000757c:	89001704 	addi	r4,r17,92
10007580:	000b883a 	mov	r5,zero
10007584:	88000015 	stw	zero,0(r17)
10007588:	88000115 	stw	zero,4(r17)
1000758c:	88000215 	stw	zero,8(r17)
10007590:	88001915 	stw	zero,100(r17)
10007594:	8880038d 	sth	r2,14(r17)
10007598:	88000415 	stw	zero,16(r17)
1000759c:	88000515 	stw	zero,20(r17)
100075a0:	88000615 	stw	zero,24(r17)
100075a4:	00090f40 	call	100090f4 <memset>
100075a8:	94000317 	ldw	r16,12(r18)
100075ac:	00800484 	movi	r2,18
100075b0:	8c400715 	stw	r17,28(r17)
100075b4:	8d800815 	stw	r22,32(r17)
100075b8:	8d400915 	stw	r21,36(r17)
100075bc:	8d000a15 	stw	r20,40(r17)
100075c0:	8cc00b15 	stw	r19,44(r17)
100075c4:	8080030d 	sth	r2,12(r16)
100075c8:	00800084 	movi	r2,2
100075cc:	80000015 	stw	zero,0(r16)
100075d0:	80000115 	stw	zero,4(r16)
100075d4:	80000215 	stw	zero,8(r16)
100075d8:	80001915 	stw	zero,100(r16)
100075dc:	8080038d 	sth	r2,14(r16)
100075e0:	80000415 	stw	zero,16(r16)
100075e4:	80000515 	stw	zero,20(r16)
100075e8:	80000615 	stw	zero,24(r16)
100075ec:	b80d883a 	mov	r6,r23
100075f0:	000b883a 	mov	r5,zero
100075f4:	81001704 	addi	r4,r16,92
100075f8:	00090f40 	call	100090f4 <memset>
100075fc:	00800044 	movi	r2,1
10007600:	84000715 	stw	r16,28(r16)
10007604:	85800815 	stw	r22,32(r16)
10007608:	85400915 	stw	r21,36(r16)
1000760c:	85000a15 	stw	r20,40(r16)
10007610:	84c00b15 	stw	r19,44(r16)
10007614:	90800e15 	stw	r2,56(r18)
10007618:	dfc00817 	ldw	ra,32(sp)
1000761c:	ddc00717 	ldw	r23,28(sp)
10007620:	dd800617 	ldw	r22,24(sp)
10007624:	dd400517 	ldw	r21,20(sp)
10007628:	dd000417 	ldw	r20,16(sp)
1000762c:	dcc00317 	ldw	r19,12(sp)
10007630:	dc800217 	ldw	r18,8(sp)
10007634:	dc400117 	ldw	r17,4(sp)
10007638:	dc000017 	ldw	r16,0(sp)
1000763c:	dec00904 	addi	sp,sp,36
10007640:	f800283a 	ret

10007644 <__fp_lock>:
10007644:	0005883a 	mov	r2,zero
10007648:	f800283a 	ret

1000764c <__sfmoreglue>:
1000764c:	defffc04 	addi	sp,sp,-16
10007650:	dc800215 	stw	r18,8(sp)
10007654:	2825883a 	mov	r18,r5
10007658:	dc000015 	stw	r16,0(sp)
1000765c:	01401a04 	movi	r5,104
10007660:	2021883a 	mov	r16,r4
10007664:	913fffc4 	addi	r4,r18,-1
10007668:	dfc00315 	stw	ra,12(sp)
1000766c:	dc400115 	stw	r17,4(sp)
10007670:	000d71c0 	call	1000d71c <__mulsi3>
10007674:	8009883a 	mov	r4,r16
10007678:	11401d04 	addi	r5,r2,116
1000767c:	1023883a 	mov	r17,r2
10007680:	00085600 	call	10008560 <_malloc_r>
10007684:	1021883a 	mov	r16,r2
10007688:	10000726 	beq	r2,zero,100076a8 <__sfmoreglue+0x5c>
1000768c:	11000304 	addi	r4,r2,12
10007690:	10000015 	stw	zero,0(r2)
10007694:	14800115 	stw	r18,4(r2)
10007698:	11000215 	stw	r4,8(r2)
1000769c:	89801a04 	addi	r6,r17,104
100076a0:	000b883a 	mov	r5,zero
100076a4:	00090f40 	call	100090f4 <memset>
100076a8:	8005883a 	mov	r2,r16
100076ac:	dfc00317 	ldw	ra,12(sp)
100076b0:	dc800217 	ldw	r18,8(sp)
100076b4:	dc400117 	ldw	r17,4(sp)
100076b8:	dc000017 	ldw	r16,0(sp)
100076bc:	dec00404 	addi	sp,sp,16
100076c0:	f800283a 	ret

100076c4 <__sfp>:
100076c4:	defffb04 	addi	sp,sp,-20
100076c8:	dc000015 	stw	r16,0(sp)
100076cc:	04040074 	movhi	r16,4097
100076d0:	84134b04 	addi	r16,r16,19756
100076d4:	dcc00315 	stw	r19,12(sp)
100076d8:	2027883a 	mov	r19,r4
100076dc:	81000017 	ldw	r4,0(r16)
100076e0:	dfc00415 	stw	ra,16(sp)
100076e4:	dc800215 	stw	r18,8(sp)
100076e8:	20800e17 	ldw	r2,56(r4)
100076ec:	dc400115 	stw	r17,4(sp)
100076f0:	1000021e 	bne	r2,zero,100076fc <__sfp+0x38>
100076f4:	00074a80 	call	100074a8 <__sinit.part.1>
100076f8:	81000017 	ldw	r4,0(r16)
100076fc:	2480b804 	addi	r18,r4,736
10007700:	047fffc4 	movi	r17,-1
10007704:	91000117 	ldw	r4,4(r18)
10007708:	94000217 	ldw	r16,8(r18)
1000770c:	213fffc4 	addi	r4,r4,-1
10007710:	20000a16 	blt	r4,zero,1000773c <__sfp+0x78>
10007714:	8080030f 	ldh	r2,12(r16)
10007718:	10000c26 	beq	r2,zero,1000774c <__sfp+0x88>
1000771c:	80c01d04 	addi	r3,r16,116
10007720:	00000206 	br	1000772c <__sfp+0x68>
10007724:	18bfe60f 	ldh	r2,-104(r3)
10007728:	10000826 	beq	r2,zero,1000774c <__sfp+0x88>
1000772c:	213fffc4 	addi	r4,r4,-1
10007730:	1c3ffd04 	addi	r16,r3,-12
10007734:	18c01a04 	addi	r3,r3,104
10007738:	247ffa1e 	bne	r4,r17,10007724 <__alt_data_end+0xf8007724>
1000773c:	90800017 	ldw	r2,0(r18)
10007740:	10001d26 	beq	r2,zero,100077b8 <__sfp+0xf4>
10007744:	1025883a 	mov	r18,r2
10007748:	003fee06 	br	10007704 <__alt_data_end+0xf8007704>
1000774c:	00bfffc4 	movi	r2,-1
10007750:	8080038d 	sth	r2,14(r16)
10007754:	00800044 	movi	r2,1
10007758:	8080030d 	sth	r2,12(r16)
1000775c:	80001915 	stw	zero,100(r16)
10007760:	80000015 	stw	zero,0(r16)
10007764:	80000215 	stw	zero,8(r16)
10007768:	80000115 	stw	zero,4(r16)
1000776c:	80000415 	stw	zero,16(r16)
10007770:	80000515 	stw	zero,20(r16)
10007774:	80000615 	stw	zero,24(r16)
10007778:	01800204 	movi	r6,8
1000777c:	000b883a 	mov	r5,zero
10007780:	81001704 	addi	r4,r16,92
10007784:	00090f40 	call	100090f4 <memset>
10007788:	8005883a 	mov	r2,r16
1000778c:	80000c15 	stw	zero,48(r16)
10007790:	80000d15 	stw	zero,52(r16)
10007794:	80001115 	stw	zero,68(r16)
10007798:	80001215 	stw	zero,72(r16)
1000779c:	dfc00417 	ldw	ra,16(sp)
100077a0:	dcc00317 	ldw	r19,12(sp)
100077a4:	dc800217 	ldw	r18,8(sp)
100077a8:	dc400117 	ldw	r17,4(sp)
100077ac:	dc000017 	ldw	r16,0(sp)
100077b0:	dec00504 	addi	sp,sp,20
100077b4:	f800283a 	ret
100077b8:	01400104 	movi	r5,4
100077bc:	9809883a 	mov	r4,r19
100077c0:	000764c0 	call	1000764c <__sfmoreglue>
100077c4:	90800015 	stw	r2,0(r18)
100077c8:	103fde1e 	bne	r2,zero,10007744 <__alt_data_end+0xf8007744>
100077cc:	00800304 	movi	r2,12
100077d0:	98800015 	stw	r2,0(r19)
100077d4:	0005883a 	mov	r2,zero
100077d8:	003ff006 	br	1000779c <__alt_data_end+0xf800779c>

100077dc <_cleanup>:
100077dc:	00840074 	movhi	r2,4097
100077e0:	10934b04 	addi	r2,r2,19756
100077e4:	11000017 	ldw	r4,0(r2)
100077e8:	01440074 	movhi	r5,4097
100077ec:	2970e804 	addi	r5,r5,-15456
100077f0:	00082041 	jmpi	10008204 <_fwalk_reent>

100077f4 <__sinit>:
100077f4:	20800e17 	ldw	r2,56(r4)
100077f8:	10000126 	beq	r2,zero,10007800 <__sinit+0xc>
100077fc:	f800283a 	ret
10007800:	00074a81 	jmpi	100074a8 <__sinit.part.1>

10007804 <__sfp_lock_acquire>:
10007804:	f800283a 	ret

10007808 <__sfp_lock_release>:
10007808:	f800283a 	ret

1000780c <__sinit_lock_acquire>:
1000780c:	f800283a 	ret

10007810 <__sinit_lock_release>:
10007810:	f800283a 	ret

10007814 <__fp_lock_all>:
10007814:	00840074 	movhi	r2,4097
10007818:	10934c04 	addi	r2,r2,19760
1000781c:	11000017 	ldw	r4,0(r2)
10007820:	01440034 	movhi	r5,4096
10007824:	295d9104 	addi	r5,r5,30276
10007828:	00081401 	jmpi	10008140 <_fwalk>

1000782c <__fp_unlock_all>:
1000782c:	00840074 	movhi	r2,4097
10007830:	10934c04 	addi	r2,r2,19760
10007834:	11000017 	ldw	r4,0(r2)
10007838:	01440034 	movhi	r5,4096
1000783c:	295d2504 	addi	r5,r5,29844
10007840:	00081401 	jmpi	10008140 <_fwalk>

10007844 <_malloc_trim_r>:
10007844:	defffb04 	addi	sp,sp,-20
10007848:	dcc00315 	stw	r19,12(sp)
1000784c:	04c40074 	movhi	r19,4097
10007850:	dc800215 	stw	r18,8(sp)
10007854:	dc400115 	stw	r17,4(sp)
10007858:	dc000015 	stw	r16,0(sp)
1000785c:	dfc00415 	stw	ra,16(sp)
10007860:	2821883a 	mov	r16,r5
10007864:	9ccdbe04 	addi	r19,r19,14072
10007868:	2025883a 	mov	r18,r4
1000786c:	00105840 	call	10010584 <__malloc_lock>
10007870:	98800217 	ldw	r2,8(r19)
10007874:	14400117 	ldw	r17,4(r2)
10007878:	00bfff04 	movi	r2,-4
1000787c:	88a2703a 	and	r17,r17,r2
10007880:	8c21c83a 	sub	r16,r17,r16
10007884:	8403fbc4 	addi	r16,r16,4079
10007888:	8020d33a 	srli	r16,r16,12
1000788c:	0083ffc4 	movi	r2,4095
10007890:	843fffc4 	addi	r16,r16,-1
10007894:	8020933a 	slli	r16,r16,12
10007898:	1400060e 	bge	r2,r16,100078b4 <_malloc_trim_r+0x70>
1000789c:	000b883a 	mov	r5,zero
100078a0:	9009883a 	mov	r4,r18
100078a4:	000a8ac0 	call	1000a8ac <_sbrk_r>
100078a8:	98c00217 	ldw	r3,8(r19)
100078ac:	1c47883a 	add	r3,r3,r17
100078b0:	10c00a26 	beq	r2,r3,100078dc <_malloc_trim_r+0x98>
100078b4:	9009883a 	mov	r4,r18
100078b8:	00105a80 	call	100105a8 <__malloc_unlock>
100078bc:	0005883a 	mov	r2,zero
100078c0:	dfc00417 	ldw	ra,16(sp)
100078c4:	dcc00317 	ldw	r19,12(sp)
100078c8:	dc800217 	ldw	r18,8(sp)
100078cc:	dc400117 	ldw	r17,4(sp)
100078d0:	dc000017 	ldw	r16,0(sp)
100078d4:	dec00504 	addi	sp,sp,20
100078d8:	f800283a 	ret
100078dc:	040bc83a 	sub	r5,zero,r16
100078e0:	9009883a 	mov	r4,r18
100078e4:	000a8ac0 	call	1000a8ac <_sbrk_r>
100078e8:	00ffffc4 	movi	r3,-1
100078ec:	10c00d26 	beq	r2,r3,10007924 <_malloc_trim_r+0xe0>
100078f0:	00c40074 	movhi	r3,4097
100078f4:	18da3804 	addi	r3,r3,26848
100078f8:	18800017 	ldw	r2,0(r3)
100078fc:	99000217 	ldw	r4,8(r19)
10007900:	8c23c83a 	sub	r17,r17,r16
10007904:	8c400054 	ori	r17,r17,1
10007908:	1421c83a 	sub	r16,r2,r16
1000790c:	24400115 	stw	r17,4(r4)
10007910:	9009883a 	mov	r4,r18
10007914:	1c000015 	stw	r16,0(r3)
10007918:	00105a80 	call	100105a8 <__malloc_unlock>
1000791c:	00800044 	movi	r2,1
10007920:	003fe706 	br	100078c0 <__alt_data_end+0xf80078c0>
10007924:	000b883a 	mov	r5,zero
10007928:	9009883a 	mov	r4,r18
1000792c:	000a8ac0 	call	1000a8ac <_sbrk_r>
10007930:	99000217 	ldw	r4,8(r19)
10007934:	014003c4 	movi	r5,15
10007938:	1107c83a 	sub	r3,r2,r4
1000793c:	28ffdd0e 	bge	r5,r3,100078b4 <__alt_data_end+0xf80078b4>
10007940:	01440074 	movhi	r5,4097
10007944:	29534e04 	addi	r5,r5,19768
10007948:	29400017 	ldw	r5,0(r5)
1000794c:	18c00054 	ori	r3,r3,1
10007950:	20c00115 	stw	r3,4(r4)
10007954:	00c40074 	movhi	r3,4097
10007958:	1145c83a 	sub	r2,r2,r5
1000795c:	18da3804 	addi	r3,r3,26848
10007960:	18800015 	stw	r2,0(r3)
10007964:	003fd306 	br	100078b4 <__alt_data_end+0xf80078b4>

10007968 <_free_r>:
10007968:	28004126 	beq	r5,zero,10007a70 <_free_r+0x108>
1000796c:	defffd04 	addi	sp,sp,-12
10007970:	dc400115 	stw	r17,4(sp)
10007974:	dc000015 	stw	r16,0(sp)
10007978:	2023883a 	mov	r17,r4
1000797c:	2821883a 	mov	r16,r5
10007980:	dfc00215 	stw	ra,8(sp)
10007984:	00105840 	call	10010584 <__malloc_lock>
10007988:	81ffff17 	ldw	r7,-4(r16)
1000798c:	00bfff84 	movi	r2,-2
10007990:	01040074 	movhi	r4,4097
10007994:	81bffe04 	addi	r6,r16,-8
10007998:	3884703a 	and	r2,r7,r2
1000799c:	210dbe04 	addi	r4,r4,14072
100079a0:	308b883a 	add	r5,r6,r2
100079a4:	2a400117 	ldw	r9,4(r5)
100079a8:	22000217 	ldw	r8,8(r4)
100079ac:	00ffff04 	movi	r3,-4
100079b0:	48c6703a 	and	r3,r9,r3
100079b4:	2a005726 	beq	r5,r8,10007b14 <_free_r+0x1ac>
100079b8:	28c00115 	stw	r3,4(r5)
100079bc:	39c0004c 	andi	r7,r7,1
100079c0:	3800091e 	bne	r7,zero,100079e8 <_free_r+0x80>
100079c4:	823ffe17 	ldw	r8,-8(r16)
100079c8:	22400204 	addi	r9,r4,8
100079cc:	320dc83a 	sub	r6,r6,r8
100079d0:	31c00217 	ldw	r7,8(r6)
100079d4:	1205883a 	add	r2,r2,r8
100079d8:	3a406526 	beq	r7,r9,10007b70 <_free_r+0x208>
100079dc:	32000317 	ldw	r8,12(r6)
100079e0:	3a000315 	stw	r8,12(r7)
100079e4:	41c00215 	stw	r7,8(r8)
100079e8:	28cf883a 	add	r7,r5,r3
100079ec:	39c00117 	ldw	r7,4(r7)
100079f0:	39c0004c 	andi	r7,r7,1
100079f4:	38003a26 	beq	r7,zero,10007ae0 <_free_r+0x178>
100079f8:	10c00054 	ori	r3,r2,1
100079fc:	30c00115 	stw	r3,4(r6)
10007a00:	3087883a 	add	r3,r6,r2
10007a04:	18800015 	stw	r2,0(r3)
10007a08:	00c07fc4 	movi	r3,511
10007a0c:	18801936 	bltu	r3,r2,10007a74 <_free_r+0x10c>
10007a10:	1004d0fa 	srli	r2,r2,3
10007a14:	01c00044 	movi	r7,1
10007a18:	21400117 	ldw	r5,4(r4)
10007a1c:	10c00044 	addi	r3,r2,1
10007a20:	18c7883a 	add	r3,r3,r3
10007a24:	1005d0ba 	srai	r2,r2,2
10007a28:	18c7883a 	add	r3,r3,r3
10007a2c:	18c7883a 	add	r3,r3,r3
10007a30:	1907883a 	add	r3,r3,r4
10007a34:	3884983a 	sll	r2,r7,r2
10007a38:	19c00017 	ldw	r7,0(r3)
10007a3c:	1a3ffe04 	addi	r8,r3,-8
10007a40:	1144b03a 	or	r2,r2,r5
10007a44:	32000315 	stw	r8,12(r6)
10007a48:	31c00215 	stw	r7,8(r6)
10007a4c:	20800115 	stw	r2,4(r4)
10007a50:	19800015 	stw	r6,0(r3)
10007a54:	39800315 	stw	r6,12(r7)
10007a58:	8809883a 	mov	r4,r17
10007a5c:	dfc00217 	ldw	ra,8(sp)
10007a60:	dc400117 	ldw	r17,4(sp)
10007a64:	dc000017 	ldw	r16,0(sp)
10007a68:	dec00304 	addi	sp,sp,12
10007a6c:	00105a81 	jmpi	100105a8 <__malloc_unlock>
10007a70:	f800283a 	ret
10007a74:	100ad27a 	srli	r5,r2,9
10007a78:	00c00104 	movi	r3,4
10007a7c:	19404a36 	bltu	r3,r5,10007ba8 <_free_r+0x240>
10007a80:	100ad1ba 	srli	r5,r2,6
10007a84:	28c00e44 	addi	r3,r5,57
10007a88:	18c7883a 	add	r3,r3,r3
10007a8c:	29400e04 	addi	r5,r5,56
10007a90:	18c7883a 	add	r3,r3,r3
10007a94:	18c7883a 	add	r3,r3,r3
10007a98:	1909883a 	add	r4,r3,r4
10007a9c:	20c00017 	ldw	r3,0(r4)
10007aa0:	01c40074 	movhi	r7,4097
10007aa4:	213ffe04 	addi	r4,r4,-8
10007aa8:	39cdbe04 	addi	r7,r7,14072
10007aac:	20c04426 	beq	r4,r3,10007bc0 <_free_r+0x258>
10007ab0:	01ffff04 	movi	r7,-4
10007ab4:	19400117 	ldw	r5,4(r3)
10007ab8:	29ca703a 	and	r5,r5,r7
10007abc:	1140022e 	bgeu	r2,r5,10007ac8 <_free_r+0x160>
10007ac0:	18c00217 	ldw	r3,8(r3)
10007ac4:	20fffb1e 	bne	r4,r3,10007ab4 <__alt_data_end+0xf8007ab4>
10007ac8:	19000317 	ldw	r4,12(r3)
10007acc:	31000315 	stw	r4,12(r6)
10007ad0:	30c00215 	stw	r3,8(r6)
10007ad4:	21800215 	stw	r6,8(r4)
10007ad8:	19800315 	stw	r6,12(r3)
10007adc:	003fde06 	br	10007a58 <__alt_data_end+0xf8007a58>
10007ae0:	29c00217 	ldw	r7,8(r5)
10007ae4:	10c5883a 	add	r2,r2,r3
10007ae8:	00c40074 	movhi	r3,4097
10007aec:	18cdc004 	addi	r3,r3,14080
10007af0:	38c03b26 	beq	r7,r3,10007be0 <_free_r+0x278>
10007af4:	2a000317 	ldw	r8,12(r5)
10007af8:	11400054 	ori	r5,r2,1
10007afc:	3087883a 	add	r3,r6,r2
10007b00:	3a000315 	stw	r8,12(r7)
10007b04:	41c00215 	stw	r7,8(r8)
10007b08:	31400115 	stw	r5,4(r6)
10007b0c:	18800015 	stw	r2,0(r3)
10007b10:	003fbd06 	br	10007a08 <__alt_data_end+0xf8007a08>
10007b14:	39c0004c 	andi	r7,r7,1
10007b18:	10c5883a 	add	r2,r2,r3
10007b1c:	3800071e 	bne	r7,zero,10007b3c <_free_r+0x1d4>
10007b20:	81fffe17 	ldw	r7,-8(r16)
10007b24:	31cdc83a 	sub	r6,r6,r7
10007b28:	30c00317 	ldw	r3,12(r6)
10007b2c:	31400217 	ldw	r5,8(r6)
10007b30:	11c5883a 	add	r2,r2,r7
10007b34:	28c00315 	stw	r3,12(r5)
10007b38:	19400215 	stw	r5,8(r3)
10007b3c:	10c00054 	ori	r3,r2,1
10007b40:	30c00115 	stw	r3,4(r6)
10007b44:	00c40074 	movhi	r3,4097
10007b48:	18d34f04 	addi	r3,r3,19772
10007b4c:	18c00017 	ldw	r3,0(r3)
10007b50:	21800215 	stw	r6,8(r4)
10007b54:	10ffc036 	bltu	r2,r3,10007a58 <__alt_data_end+0xf8007a58>
10007b58:	00840074 	movhi	r2,4097
10007b5c:	109a2f04 	addi	r2,r2,26812
10007b60:	11400017 	ldw	r5,0(r2)
10007b64:	8809883a 	mov	r4,r17
10007b68:	00078440 	call	10007844 <_malloc_trim_r>
10007b6c:	003fba06 	br	10007a58 <__alt_data_end+0xf8007a58>
10007b70:	28c9883a 	add	r4,r5,r3
10007b74:	21000117 	ldw	r4,4(r4)
10007b78:	2100004c 	andi	r4,r4,1
10007b7c:	2000391e 	bne	r4,zero,10007c64 <_free_r+0x2fc>
10007b80:	29c00217 	ldw	r7,8(r5)
10007b84:	29000317 	ldw	r4,12(r5)
10007b88:	1885883a 	add	r2,r3,r2
10007b8c:	10c00054 	ori	r3,r2,1
10007b90:	39000315 	stw	r4,12(r7)
10007b94:	21c00215 	stw	r7,8(r4)
10007b98:	30c00115 	stw	r3,4(r6)
10007b9c:	308d883a 	add	r6,r6,r2
10007ba0:	30800015 	stw	r2,0(r6)
10007ba4:	003fac06 	br	10007a58 <__alt_data_end+0xf8007a58>
10007ba8:	00c00504 	movi	r3,20
10007bac:	19401536 	bltu	r3,r5,10007c04 <_free_r+0x29c>
10007bb0:	28c01704 	addi	r3,r5,92
10007bb4:	18c7883a 	add	r3,r3,r3
10007bb8:	294016c4 	addi	r5,r5,91
10007bbc:	003fb406 	br	10007a90 <__alt_data_end+0xf8007a90>
10007bc0:	280bd0ba 	srai	r5,r5,2
10007bc4:	00c00044 	movi	r3,1
10007bc8:	38800117 	ldw	r2,4(r7)
10007bcc:	194a983a 	sll	r5,r3,r5
10007bd0:	2007883a 	mov	r3,r4
10007bd4:	2884b03a 	or	r2,r5,r2
10007bd8:	38800115 	stw	r2,4(r7)
10007bdc:	003fbb06 	br	10007acc <__alt_data_end+0xf8007acc>
10007be0:	21800515 	stw	r6,20(r4)
10007be4:	21800415 	stw	r6,16(r4)
10007be8:	10c00054 	ori	r3,r2,1
10007bec:	31c00315 	stw	r7,12(r6)
10007bf0:	31c00215 	stw	r7,8(r6)
10007bf4:	30c00115 	stw	r3,4(r6)
10007bf8:	308d883a 	add	r6,r6,r2
10007bfc:	30800015 	stw	r2,0(r6)
10007c00:	003f9506 	br	10007a58 <__alt_data_end+0xf8007a58>
10007c04:	00c01504 	movi	r3,84
10007c08:	19400536 	bltu	r3,r5,10007c20 <_free_r+0x2b8>
10007c0c:	100ad33a 	srli	r5,r2,12
10007c10:	28c01bc4 	addi	r3,r5,111
10007c14:	18c7883a 	add	r3,r3,r3
10007c18:	29401b84 	addi	r5,r5,110
10007c1c:	003f9c06 	br	10007a90 <__alt_data_end+0xf8007a90>
10007c20:	00c05504 	movi	r3,340
10007c24:	19400536 	bltu	r3,r5,10007c3c <_free_r+0x2d4>
10007c28:	100ad3fa 	srli	r5,r2,15
10007c2c:	28c01e04 	addi	r3,r5,120
10007c30:	18c7883a 	add	r3,r3,r3
10007c34:	29401dc4 	addi	r5,r5,119
10007c38:	003f9506 	br	10007a90 <__alt_data_end+0xf8007a90>
10007c3c:	00c15504 	movi	r3,1364
10007c40:	19400536 	bltu	r3,r5,10007c58 <_free_r+0x2f0>
10007c44:	100ad4ba 	srli	r5,r2,18
10007c48:	28c01f44 	addi	r3,r5,125
10007c4c:	18c7883a 	add	r3,r3,r3
10007c50:	29401f04 	addi	r5,r5,124
10007c54:	003f8e06 	br	10007a90 <__alt_data_end+0xf8007a90>
10007c58:	00c03f84 	movi	r3,254
10007c5c:	01401f84 	movi	r5,126
10007c60:	003f8b06 	br	10007a90 <__alt_data_end+0xf8007a90>
10007c64:	10c00054 	ori	r3,r2,1
10007c68:	30c00115 	stw	r3,4(r6)
10007c6c:	308d883a 	add	r6,r6,r2
10007c70:	30800015 	stw	r2,0(r6)
10007c74:	003f7806 	br	10007a58 <__alt_data_end+0xf8007a58>

10007c78 <__sfvwrite_r>:
10007c78:	30800217 	ldw	r2,8(r6)
10007c7c:	10006726 	beq	r2,zero,10007e1c <__sfvwrite_r+0x1a4>
10007c80:	28c0030b 	ldhu	r3,12(r5)
10007c84:	defff404 	addi	sp,sp,-48
10007c88:	dd400715 	stw	r21,28(sp)
10007c8c:	dd000615 	stw	r20,24(sp)
10007c90:	dc000215 	stw	r16,8(sp)
10007c94:	dfc00b15 	stw	ra,44(sp)
10007c98:	df000a15 	stw	fp,40(sp)
10007c9c:	ddc00915 	stw	r23,36(sp)
10007ca0:	dd800815 	stw	r22,32(sp)
10007ca4:	dcc00515 	stw	r19,20(sp)
10007ca8:	dc800415 	stw	r18,16(sp)
10007cac:	dc400315 	stw	r17,12(sp)
10007cb0:	1880020c 	andi	r2,r3,8
10007cb4:	2821883a 	mov	r16,r5
10007cb8:	202b883a 	mov	r21,r4
10007cbc:	3029883a 	mov	r20,r6
10007cc0:	10002726 	beq	r2,zero,10007d60 <__sfvwrite_r+0xe8>
10007cc4:	28800417 	ldw	r2,16(r5)
10007cc8:	10002526 	beq	r2,zero,10007d60 <__sfvwrite_r+0xe8>
10007ccc:	1880008c 	andi	r2,r3,2
10007cd0:	a4400017 	ldw	r17,0(r20)
10007cd4:	10002a26 	beq	r2,zero,10007d80 <__sfvwrite_r+0x108>
10007cd8:	05a00034 	movhi	r22,32768
10007cdc:	0027883a 	mov	r19,zero
10007ce0:	0025883a 	mov	r18,zero
10007ce4:	b5bf0004 	addi	r22,r22,-1024
10007ce8:	980d883a 	mov	r6,r19
10007cec:	a809883a 	mov	r4,r21
10007cf0:	90004626 	beq	r18,zero,10007e0c <__sfvwrite_r+0x194>
10007cf4:	900f883a 	mov	r7,r18
10007cf8:	b480022e 	bgeu	r22,r18,10007d04 <__sfvwrite_r+0x8c>
10007cfc:	01e00034 	movhi	r7,32768
10007d00:	39ff0004 	addi	r7,r7,-1024
10007d04:	80800917 	ldw	r2,36(r16)
10007d08:	81400717 	ldw	r5,28(r16)
10007d0c:	103ee83a 	callr	r2
10007d10:	00805a0e 	bge	zero,r2,10007e7c <__sfvwrite_r+0x204>
10007d14:	a0c00217 	ldw	r3,8(r20)
10007d18:	98a7883a 	add	r19,r19,r2
10007d1c:	90a5c83a 	sub	r18,r18,r2
10007d20:	1885c83a 	sub	r2,r3,r2
10007d24:	a0800215 	stw	r2,8(r20)
10007d28:	103fef1e 	bne	r2,zero,10007ce8 <__alt_data_end+0xf8007ce8>
10007d2c:	0005883a 	mov	r2,zero
10007d30:	dfc00b17 	ldw	ra,44(sp)
10007d34:	df000a17 	ldw	fp,40(sp)
10007d38:	ddc00917 	ldw	r23,36(sp)
10007d3c:	dd800817 	ldw	r22,32(sp)
10007d40:	dd400717 	ldw	r21,28(sp)
10007d44:	dd000617 	ldw	r20,24(sp)
10007d48:	dcc00517 	ldw	r19,20(sp)
10007d4c:	dc800417 	ldw	r18,16(sp)
10007d50:	dc400317 	ldw	r17,12(sp)
10007d54:	dc000217 	ldw	r16,8(sp)
10007d58:	dec00c04 	addi	sp,sp,48
10007d5c:	f800283a 	ret
10007d60:	800b883a 	mov	r5,r16
10007d64:	a809883a 	mov	r4,r21
10007d68:	00057e80 	call	100057e8 <__swsetup_r>
10007d6c:	1000ee1e 	bne	r2,zero,10008128 <__sfvwrite_r+0x4b0>
10007d70:	80c0030b 	ldhu	r3,12(r16)
10007d74:	a4400017 	ldw	r17,0(r20)
10007d78:	1880008c 	andi	r2,r3,2
10007d7c:	103fd61e 	bne	r2,zero,10007cd8 <__alt_data_end+0xf8007cd8>
10007d80:	1880004c 	andi	r2,r3,1
10007d84:	1000421e 	bne	r2,zero,10007e90 <__sfvwrite_r+0x218>
10007d88:	0039883a 	mov	fp,zero
10007d8c:	0025883a 	mov	r18,zero
10007d90:	90001a26 	beq	r18,zero,10007dfc <__sfvwrite_r+0x184>
10007d94:	1880800c 	andi	r2,r3,512
10007d98:	84c00217 	ldw	r19,8(r16)
10007d9c:	10002126 	beq	r2,zero,10007e24 <__sfvwrite_r+0x1ac>
10007da0:	982f883a 	mov	r23,r19
10007da4:	94c09636 	bltu	r18,r19,10008000 <__sfvwrite_r+0x388>
10007da8:	1881200c 	andi	r2,r3,1152
10007dac:	1000a11e 	bne	r2,zero,10008034 <__sfvwrite_r+0x3bc>
10007db0:	81000017 	ldw	r4,0(r16)
10007db4:	b80d883a 	mov	r6,r23
10007db8:	e00b883a 	mov	r5,fp
10007dbc:	0008f980 	call	10008f98 <memmove>
10007dc0:	80c00217 	ldw	r3,8(r16)
10007dc4:	81000017 	ldw	r4,0(r16)
10007dc8:	9005883a 	mov	r2,r18
10007dcc:	1ce7c83a 	sub	r19,r3,r19
10007dd0:	25cf883a 	add	r7,r4,r23
10007dd4:	84c00215 	stw	r19,8(r16)
10007dd8:	81c00015 	stw	r7,0(r16)
10007ddc:	a0c00217 	ldw	r3,8(r20)
10007de0:	e0b9883a 	add	fp,fp,r2
10007de4:	90a5c83a 	sub	r18,r18,r2
10007de8:	18a7c83a 	sub	r19,r3,r2
10007dec:	a4c00215 	stw	r19,8(r20)
10007df0:	983fce26 	beq	r19,zero,10007d2c <__alt_data_end+0xf8007d2c>
10007df4:	80c0030b 	ldhu	r3,12(r16)
10007df8:	903fe61e 	bne	r18,zero,10007d94 <__alt_data_end+0xf8007d94>
10007dfc:	8f000017 	ldw	fp,0(r17)
10007e00:	8c800117 	ldw	r18,4(r17)
10007e04:	8c400204 	addi	r17,r17,8
10007e08:	003fe106 	br	10007d90 <__alt_data_end+0xf8007d90>
10007e0c:	8cc00017 	ldw	r19,0(r17)
10007e10:	8c800117 	ldw	r18,4(r17)
10007e14:	8c400204 	addi	r17,r17,8
10007e18:	003fb306 	br	10007ce8 <__alt_data_end+0xf8007ce8>
10007e1c:	0005883a 	mov	r2,zero
10007e20:	f800283a 	ret
10007e24:	81000017 	ldw	r4,0(r16)
10007e28:	80800417 	ldw	r2,16(r16)
10007e2c:	11005a36 	bltu	r2,r4,10007f98 <__sfvwrite_r+0x320>
10007e30:	85c00517 	ldw	r23,20(r16)
10007e34:	95c05836 	bltu	r18,r23,10007f98 <__sfvwrite_r+0x320>
10007e38:	00a00034 	movhi	r2,32768
10007e3c:	10bfffc4 	addi	r2,r2,-1
10007e40:	9009883a 	mov	r4,r18
10007e44:	1480012e 	bgeu	r2,r18,10007e4c <__sfvwrite_r+0x1d4>
10007e48:	1009883a 	mov	r4,r2
10007e4c:	b80b883a 	mov	r5,r23
10007e50:	00030a80 	call	100030a8 <__divsi3>
10007e54:	b80b883a 	mov	r5,r23
10007e58:	1009883a 	mov	r4,r2
10007e5c:	000d71c0 	call	1000d71c <__mulsi3>
10007e60:	81400717 	ldw	r5,28(r16)
10007e64:	80c00917 	ldw	r3,36(r16)
10007e68:	100f883a 	mov	r7,r2
10007e6c:	e00d883a 	mov	r6,fp
10007e70:	a809883a 	mov	r4,r21
10007e74:	183ee83a 	callr	r3
10007e78:	00bfd816 	blt	zero,r2,10007ddc <__alt_data_end+0xf8007ddc>
10007e7c:	8080030b 	ldhu	r2,12(r16)
10007e80:	10801014 	ori	r2,r2,64
10007e84:	8080030d 	sth	r2,12(r16)
10007e88:	00bfffc4 	movi	r2,-1
10007e8c:	003fa806 	br	10007d30 <__alt_data_end+0xf8007d30>
10007e90:	0027883a 	mov	r19,zero
10007e94:	0011883a 	mov	r8,zero
10007e98:	0039883a 	mov	fp,zero
10007e9c:	0025883a 	mov	r18,zero
10007ea0:	90001f26 	beq	r18,zero,10007f20 <__sfvwrite_r+0x2a8>
10007ea4:	40005a26 	beq	r8,zero,10008010 <__sfvwrite_r+0x398>
10007ea8:	982d883a 	mov	r22,r19
10007eac:	94c0012e 	bgeu	r18,r19,10007eb4 <__sfvwrite_r+0x23c>
10007eb0:	902d883a 	mov	r22,r18
10007eb4:	81000017 	ldw	r4,0(r16)
10007eb8:	80800417 	ldw	r2,16(r16)
10007ebc:	b02f883a 	mov	r23,r22
10007ec0:	81c00517 	ldw	r7,20(r16)
10007ec4:	1100032e 	bgeu	r2,r4,10007ed4 <__sfvwrite_r+0x25c>
10007ec8:	80c00217 	ldw	r3,8(r16)
10007ecc:	38c7883a 	add	r3,r7,r3
10007ed0:	1d801816 	blt	r3,r22,10007f34 <__sfvwrite_r+0x2bc>
10007ed4:	b1c03e16 	blt	r22,r7,10007fd0 <__sfvwrite_r+0x358>
10007ed8:	80800917 	ldw	r2,36(r16)
10007edc:	81400717 	ldw	r5,28(r16)
10007ee0:	e00d883a 	mov	r6,fp
10007ee4:	da000115 	stw	r8,4(sp)
10007ee8:	a809883a 	mov	r4,r21
10007eec:	103ee83a 	callr	r2
10007ef0:	102f883a 	mov	r23,r2
10007ef4:	da000117 	ldw	r8,4(sp)
10007ef8:	00bfe00e 	bge	zero,r2,10007e7c <__alt_data_end+0xf8007e7c>
10007efc:	9de7c83a 	sub	r19,r19,r23
10007f00:	98001f26 	beq	r19,zero,10007f80 <__sfvwrite_r+0x308>
10007f04:	a0800217 	ldw	r2,8(r20)
10007f08:	e5f9883a 	add	fp,fp,r23
10007f0c:	95e5c83a 	sub	r18,r18,r23
10007f10:	15efc83a 	sub	r23,r2,r23
10007f14:	a5c00215 	stw	r23,8(r20)
10007f18:	b83f8426 	beq	r23,zero,10007d2c <__alt_data_end+0xf8007d2c>
10007f1c:	903fe11e 	bne	r18,zero,10007ea4 <__alt_data_end+0xf8007ea4>
10007f20:	8f000017 	ldw	fp,0(r17)
10007f24:	8c800117 	ldw	r18,4(r17)
10007f28:	0011883a 	mov	r8,zero
10007f2c:	8c400204 	addi	r17,r17,8
10007f30:	003fdb06 	br	10007ea0 <__alt_data_end+0xf8007ea0>
10007f34:	180d883a 	mov	r6,r3
10007f38:	e00b883a 	mov	r5,fp
10007f3c:	da000115 	stw	r8,4(sp)
10007f40:	d8c00015 	stw	r3,0(sp)
10007f44:	0008f980 	call	10008f98 <memmove>
10007f48:	d8c00017 	ldw	r3,0(sp)
10007f4c:	80800017 	ldw	r2,0(r16)
10007f50:	800b883a 	mov	r5,r16
10007f54:	a809883a 	mov	r4,r21
10007f58:	10c5883a 	add	r2,r2,r3
10007f5c:	80800015 	stw	r2,0(r16)
10007f60:	d8c00015 	stw	r3,0(sp)
10007f64:	00074080 	call	10007408 <_fflush_r>
10007f68:	d8c00017 	ldw	r3,0(sp)
10007f6c:	da000117 	ldw	r8,4(sp)
10007f70:	103fc21e 	bne	r2,zero,10007e7c <__alt_data_end+0xf8007e7c>
10007f74:	182f883a 	mov	r23,r3
10007f78:	9de7c83a 	sub	r19,r19,r23
10007f7c:	983fe11e 	bne	r19,zero,10007f04 <__alt_data_end+0xf8007f04>
10007f80:	800b883a 	mov	r5,r16
10007f84:	a809883a 	mov	r4,r21
10007f88:	00074080 	call	10007408 <_fflush_r>
10007f8c:	103fbb1e 	bne	r2,zero,10007e7c <__alt_data_end+0xf8007e7c>
10007f90:	0011883a 	mov	r8,zero
10007f94:	003fdb06 	br	10007f04 <__alt_data_end+0xf8007f04>
10007f98:	94c0012e 	bgeu	r18,r19,10007fa0 <__sfvwrite_r+0x328>
10007f9c:	9027883a 	mov	r19,r18
10007fa0:	980d883a 	mov	r6,r19
10007fa4:	e00b883a 	mov	r5,fp
10007fa8:	0008f980 	call	10008f98 <memmove>
10007fac:	80800217 	ldw	r2,8(r16)
10007fb0:	80c00017 	ldw	r3,0(r16)
10007fb4:	14c5c83a 	sub	r2,r2,r19
10007fb8:	1cc7883a 	add	r3,r3,r19
10007fbc:	80800215 	stw	r2,8(r16)
10007fc0:	80c00015 	stw	r3,0(r16)
10007fc4:	10004326 	beq	r2,zero,100080d4 <__sfvwrite_r+0x45c>
10007fc8:	9805883a 	mov	r2,r19
10007fcc:	003f8306 	br	10007ddc <__alt_data_end+0xf8007ddc>
10007fd0:	b00d883a 	mov	r6,r22
10007fd4:	e00b883a 	mov	r5,fp
10007fd8:	da000115 	stw	r8,4(sp)
10007fdc:	0008f980 	call	10008f98 <memmove>
10007fe0:	80800217 	ldw	r2,8(r16)
10007fe4:	80c00017 	ldw	r3,0(r16)
10007fe8:	da000117 	ldw	r8,4(sp)
10007fec:	1585c83a 	sub	r2,r2,r22
10007ff0:	1dad883a 	add	r22,r3,r22
10007ff4:	80800215 	stw	r2,8(r16)
10007ff8:	85800015 	stw	r22,0(r16)
10007ffc:	003fbf06 	br	10007efc <__alt_data_end+0xf8007efc>
10008000:	81000017 	ldw	r4,0(r16)
10008004:	9027883a 	mov	r19,r18
10008008:	902f883a 	mov	r23,r18
1000800c:	003f6906 	br	10007db4 <__alt_data_end+0xf8007db4>
10008010:	900d883a 	mov	r6,r18
10008014:	01400284 	movi	r5,10
10008018:	e009883a 	mov	r4,fp
1000801c:	0008d6c0 	call	10008d6c <memchr>
10008020:	10003e26 	beq	r2,zero,1000811c <__sfvwrite_r+0x4a4>
10008024:	10800044 	addi	r2,r2,1
10008028:	1727c83a 	sub	r19,r2,fp
1000802c:	02000044 	movi	r8,1
10008030:	003f9d06 	br	10007ea8 <__alt_data_end+0xf8007ea8>
10008034:	80800517 	ldw	r2,20(r16)
10008038:	81400417 	ldw	r5,16(r16)
1000803c:	81c00017 	ldw	r7,0(r16)
10008040:	10a7883a 	add	r19,r2,r2
10008044:	9885883a 	add	r2,r19,r2
10008048:	1026d7fa 	srli	r19,r2,31
1000804c:	396dc83a 	sub	r22,r7,r5
10008050:	b1000044 	addi	r4,r22,1
10008054:	9885883a 	add	r2,r19,r2
10008058:	1027d07a 	srai	r19,r2,1
1000805c:	2485883a 	add	r2,r4,r18
10008060:	980d883a 	mov	r6,r19
10008064:	9880022e 	bgeu	r19,r2,10008070 <__sfvwrite_r+0x3f8>
10008068:	1027883a 	mov	r19,r2
1000806c:	100d883a 	mov	r6,r2
10008070:	18c1000c 	andi	r3,r3,1024
10008074:	18001c26 	beq	r3,zero,100080e8 <__sfvwrite_r+0x470>
10008078:	300b883a 	mov	r5,r6
1000807c:	a809883a 	mov	r4,r21
10008080:	00085600 	call	10008560 <_malloc_r>
10008084:	102f883a 	mov	r23,r2
10008088:	10002926 	beq	r2,zero,10008130 <__sfvwrite_r+0x4b8>
1000808c:	81400417 	ldw	r5,16(r16)
10008090:	b00d883a 	mov	r6,r22
10008094:	1009883a 	mov	r4,r2
10008098:	0008e500 	call	10008e50 <memcpy>
1000809c:	8080030b 	ldhu	r2,12(r16)
100080a0:	00fedfc4 	movi	r3,-1153
100080a4:	10c4703a 	and	r2,r2,r3
100080a8:	10802014 	ori	r2,r2,128
100080ac:	8080030d 	sth	r2,12(r16)
100080b0:	bd89883a 	add	r4,r23,r22
100080b4:	9d8fc83a 	sub	r7,r19,r22
100080b8:	85c00415 	stw	r23,16(r16)
100080bc:	84c00515 	stw	r19,20(r16)
100080c0:	81000015 	stw	r4,0(r16)
100080c4:	9027883a 	mov	r19,r18
100080c8:	81c00215 	stw	r7,8(r16)
100080cc:	902f883a 	mov	r23,r18
100080d0:	003f3806 	br	10007db4 <__alt_data_end+0xf8007db4>
100080d4:	800b883a 	mov	r5,r16
100080d8:	a809883a 	mov	r4,r21
100080dc:	00074080 	call	10007408 <_fflush_r>
100080e0:	103fb926 	beq	r2,zero,10007fc8 <__alt_data_end+0xf8007fc8>
100080e4:	003f6506 	br	10007e7c <__alt_data_end+0xf8007e7c>
100080e8:	a809883a 	mov	r4,r21
100080ec:	000a2d40 	call	1000a2d4 <_realloc_r>
100080f0:	102f883a 	mov	r23,r2
100080f4:	103fee1e 	bne	r2,zero,100080b0 <__alt_data_end+0xf80080b0>
100080f8:	81400417 	ldw	r5,16(r16)
100080fc:	a809883a 	mov	r4,r21
10008100:	00079680 	call	10007968 <_free_r>
10008104:	8080030b 	ldhu	r2,12(r16)
10008108:	00ffdfc4 	movi	r3,-129
1000810c:	1884703a 	and	r2,r3,r2
10008110:	00c00304 	movi	r3,12
10008114:	a8c00015 	stw	r3,0(r21)
10008118:	003f5906 	br	10007e80 <__alt_data_end+0xf8007e80>
1000811c:	94c00044 	addi	r19,r18,1
10008120:	02000044 	movi	r8,1
10008124:	003f6006 	br	10007ea8 <__alt_data_end+0xf8007ea8>
10008128:	00bfffc4 	movi	r2,-1
1000812c:	003f0006 	br	10007d30 <__alt_data_end+0xf8007d30>
10008130:	00800304 	movi	r2,12
10008134:	a8800015 	stw	r2,0(r21)
10008138:	8080030b 	ldhu	r2,12(r16)
1000813c:	003f5006 	br	10007e80 <__alt_data_end+0xf8007e80>

10008140 <_fwalk>:
10008140:	defff704 	addi	sp,sp,-36
10008144:	dd000415 	stw	r20,16(sp)
10008148:	dfc00815 	stw	ra,32(sp)
1000814c:	ddc00715 	stw	r23,28(sp)
10008150:	dd800615 	stw	r22,24(sp)
10008154:	dd400515 	stw	r21,20(sp)
10008158:	dcc00315 	stw	r19,12(sp)
1000815c:	dc800215 	stw	r18,8(sp)
10008160:	dc400115 	stw	r17,4(sp)
10008164:	dc000015 	stw	r16,0(sp)
10008168:	2500b804 	addi	r20,r4,736
1000816c:	a0002326 	beq	r20,zero,100081fc <_fwalk+0xbc>
10008170:	282b883a 	mov	r21,r5
10008174:	002f883a 	mov	r23,zero
10008178:	05800044 	movi	r22,1
1000817c:	04ffffc4 	movi	r19,-1
10008180:	a4400117 	ldw	r17,4(r20)
10008184:	a4800217 	ldw	r18,8(r20)
10008188:	8c7fffc4 	addi	r17,r17,-1
1000818c:	88000d16 	blt	r17,zero,100081c4 <_fwalk+0x84>
10008190:	94000304 	addi	r16,r18,12
10008194:	94800384 	addi	r18,r18,14
10008198:	8080000b 	ldhu	r2,0(r16)
1000819c:	8c7fffc4 	addi	r17,r17,-1
100081a0:	813ffd04 	addi	r4,r16,-12
100081a4:	b080042e 	bgeu	r22,r2,100081b8 <_fwalk+0x78>
100081a8:	9080000f 	ldh	r2,0(r18)
100081ac:	14c00226 	beq	r2,r19,100081b8 <_fwalk+0x78>
100081b0:	a83ee83a 	callr	r21
100081b4:	b8aeb03a 	or	r23,r23,r2
100081b8:	84001a04 	addi	r16,r16,104
100081bc:	94801a04 	addi	r18,r18,104
100081c0:	8cfff51e 	bne	r17,r19,10008198 <__alt_data_end+0xf8008198>
100081c4:	a5000017 	ldw	r20,0(r20)
100081c8:	a03fed1e 	bne	r20,zero,10008180 <__alt_data_end+0xf8008180>
100081cc:	b805883a 	mov	r2,r23
100081d0:	dfc00817 	ldw	ra,32(sp)
100081d4:	ddc00717 	ldw	r23,28(sp)
100081d8:	dd800617 	ldw	r22,24(sp)
100081dc:	dd400517 	ldw	r21,20(sp)
100081e0:	dd000417 	ldw	r20,16(sp)
100081e4:	dcc00317 	ldw	r19,12(sp)
100081e8:	dc800217 	ldw	r18,8(sp)
100081ec:	dc400117 	ldw	r17,4(sp)
100081f0:	dc000017 	ldw	r16,0(sp)
100081f4:	dec00904 	addi	sp,sp,36
100081f8:	f800283a 	ret
100081fc:	002f883a 	mov	r23,zero
10008200:	003ff206 	br	100081cc <__alt_data_end+0xf80081cc>

10008204 <_fwalk_reent>:
10008204:	defff704 	addi	sp,sp,-36
10008208:	dd000415 	stw	r20,16(sp)
1000820c:	dfc00815 	stw	ra,32(sp)
10008210:	ddc00715 	stw	r23,28(sp)
10008214:	dd800615 	stw	r22,24(sp)
10008218:	dd400515 	stw	r21,20(sp)
1000821c:	dcc00315 	stw	r19,12(sp)
10008220:	dc800215 	stw	r18,8(sp)
10008224:	dc400115 	stw	r17,4(sp)
10008228:	dc000015 	stw	r16,0(sp)
1000822c:	2500b804 	addi	r20,r4,736
10008230:	a0002326 	beq	r20,zero,100082c0 <_fwalk_reent+0xbc>
10008234:	282b883a 	mov	r21,r5
10008238:	2027883a 	mov	r19,r4
1000823c:	002f883a 	mov	r23,zero
10008240:	05800044 	movi	r22,1
10008244:	04bfffc4 	movi	r18,-1
10008248:	a4400117 	ldw	r17,4(r20)
1000824c:	a4000217 	ldw	r16,8(r20)
10008250:	8c7fffc4 	addi	r17,r17,-1
10008254:	88000c16 	blt	r17,zero,10008288 <_fwalk_reent+0x84>
10008258:	84000304 	addi	r16,r16,12
1000825c:	8080000b 	ldhu	r2,0(r16)
10008260:	8c7fffc4 	addi	r17,r17,-1
10008264:	817ffd04 	addi	r5,r16,-12
10008268:	b080052e 	bgeu	r22,r2,10008280 <_fwalk_reent+0x7c>
1000826c:	8080008f 	ldh	r2,2(r16)
10008270:	9809883a 	mov	r4,r19
10008274:	14800226 	beq	r2,r18,10008280 <_fwalk_reent+0x7c>
10008278:	a83ee83a 	callr	r21
1000827c:	b8aeb03a 	or	r23,r23,r2
10008280:	84001a04 	addi	r16,r16,104
10008284:	8cbff51e 	bne	r17,r18,1000825c <__alt_data_end+0xf800825c>
10008288:	a5000017 	ldw	r20,0(r20)
1000828c:	a03fee1e 	bne	r20,zero,10008248 <__alt_data_end+0xf8008248>
10008290:	b805883a 	mov	r2,r23
10008294:	dfc00817 	ldw	ra,32(sp)
10008298:	ddc00717 	ldw	r23,28(sp)
1000829c:	dd800617 	ldw	r22,24(sp)
100082a0:	dd400517 	ldw	r21,20(sp)
100082a4:	dd000417 	ldw	r20,16(sp)
100082a8:	dcc00317 	ldw	r19,12(sp)
100082ac:	dc800217 	ldw	r18,8(sp)
100082b0:	dc400117 	ldw	r17,4(sp)
100082b4:	dc000017 	ldw	r16,0(sp)
100082b8:	dec00904 	addi	sp,sp,36
100082bc:	f800283a 	ret
100082c0:	002f883a 	mov	r23,zero
100082c4:	003ff206 	br	10008290 <__alt_data_end+0xf8008290>

100082c8 <_setlocale_r>:
100082c8:	30001b26 	beq	r6,zero,10008338 <_setlocale_r+0x70>
100082cc:	01440074 	movhi	r5,4097
100082d0:	defffe04 	addi	sp,sp,-8
100082d4:	294bf604 	addi	r5,r5,12248
100082d8:	3009883a 	mov	r4,r6
100082dc:	dc000015 	stw	r16,0(sp)
100082e0:	dfc00115 	stw	ra,4(sp)
100082e4:	3021883a 	mov	r16,r6
100082e8:	000aa3c0 	call	1000aa3c <strcmp>
100082ec:	1000061e 	bne	r2,zero,10008308 <_setlocale_r+0x40>
100082f0:	00840074 	movhi	r2,4097
100082f4:	108bf504 	addi	r2,r2,12244
100082f8:	dfc00117 	ldw	ra,4(sp)
100082fc:	dc000017 	ldw	r16,0(sp)
10008300:	dec00204 	addi	sp,sp,8
10008304:	f800283a 	ret
10008308:	01440074 	movhi	r5,4097
1000830c:	294bf504 	addi	r5,r5,12244
10008310:	8009883a 	mov	r4,r16
10008314:	000aa3c0 	call	1000aa3c <strcmp>
10008318:	103ff526 	beq	r2,zero,100082f0 <__alt_data_end+0xf80082f0>
1000831c:	01440074 	movhi	r5,4097
10008320:	294be004 	addi	r5,r5,12160
10008324:	8009883a 	mov	r4,r16
10008328:	000aa3c0 	call	1000aa3c <strcmp>
1000832c:	103ff026 	beq	r2,zero,100082f0 <__alt_data_end+0xf80082f0>
10008330:	0005883a 	mov	r2,zero
10008334:	003ff006 	br	100082f8 <__alt_data_end+0xf80082f8>
10008338:	00840074 	movhi	r2,4097
1000833c:	108bf504 	addi	r2,r2,12244
10008340:	f800283a 	ret

10008344 <__locale_charset>:
10008344:	00840074 	movhi	r2,4097
10008348:	108da804 	addi	r2,r2,13984
1000834c:	f800283a 	ret

10008350 <__locale_mb_cur_max>:
10008350:	00840074 	movhi	r2,4097
10008354:	10934d04 	addi	r2,r2,19764
10008358:	10800017 	ldw	r2,0(r2)
1000835c:	f800283a 	ret

10008360 <__locale_msgcharset>:
10008360:	00840074 	movhi	r2,4097
10008364:	108da004 	addi	r2,r2,13952
10008368:	f800283a 	ret

1000836c <__locale_cjk_lang>:
1000836c:	0005883a 	mov	r2,zero
10008370:	f800283a 	ret

10008374 <_localeconv_r>:
10008374:	00840074 	movhi	r2,4097
10008378:	108db004 	addi	r2,r2,14016
1000837c:	f800283a 	ret

10008380 <setlocale>:
10008380:	00840074 	movhi	r2,4097
10008384:	10934c04 	addi	r2,r2,19760
10008388:	280d883a 	mov	r6,r5
1000838c:	200b883a 	mov	r5,r4
10008390:	11000017 	ldw	r4,0(r2)
10008394:	00082c81 	jmpi	100082c8 <_setlocale_r>

10008398 <localeconv>:
10008398:	00840074 	movhi	r2,4097
1000839c:	108db004 	addi	r2,r2,14016
100083a0:	f800283a 	ret

100083a4 <__smakebuf_r>:
100083a4:	2880030b 	ldhu	r2,12(r5)
100083a8:	10c0008c 	andi	r3,r2,2
100083ac:	1800411e 	bne	r3,zero,100084b4 <__smakebuf_r+0x110>
100083b0:	deffec04 	addi	sp,sp,-80
100083b4:	dc000f15 	stw	r16,60(sp)
100083b8:	2821883a 	mov	r16,r5
100083bc:	2940038f 	ldh	r5,14(r5)
100083c0:	dc401015 	stw	r17,64(sp)
100083c4:	dfc01315 	stw	ra,76(sp)
100083c8:	dcc01215 	stw	r19,72(sp)
100083cc:	dc801115 	stw	r18,68(sp)
100083d0:	2023883a 	mov	r17,r4
100083d4:	28001c16 	blt	r5,zero,10008448 <__smakebuf_r+0xa4>
100083d8:	d80d883a 	mov	r6,sp
100083dc:	000c6ac0 	call	1000c6ac <_fstat_r>
100083e0:	10001816 	blt	r2,zero,10008444 <__smakebuf_r+0xa0>
100083e4:	d8800117 	ldw	r2,4(sp)
100083e8:	00e00014 	movui	r3,32768
100083ec:	10bc000c 	andi	r2,r2,61440
100083f0:	14c80020 	cmpeqi	r19,r2,8192
100083f4:	10c03726 	beq	r2,r3,100084d4 <__smakebuf_r+0x130>
100083f8:	80c0030b 	ldhu	r3,12(r16)
100083fc:	18c20014 	ori	r3,r3,2048
10008400:	80c0030d 	sth	r3,12(r16)
10008404:	00c80004 	movi	r3,8192
10008408:	10c0521e 	bne	r2,r3,10008554 <__smakebuf_r+0x1b0>
1000840c:	8140038f 	ldh	r5,14(r16)
10008410:	8809883a 	mov	r4,r17
10008414:	000c7080 	call	1000c708 <_isatty_r>
10008418:	10004c26 	beq	r2,zero,1000854c <__smakebuf_r+0x1a8>
1000841c:	8080030b 	ldhu	r2,12(r16)
10008420:	80c010c4 	addi	r3,r16,67
10008424:	80c00015 	stw	r3,0(r16)
10008428:	10800054 	ori	r2,r2,1
1000842c:	8080030d 	sth	r2,12(r16)
10008430:	00800044 	movi	r2,1
10008434:	80c00415 	stw	r3,16(r16)
10008438:	80800515 	stw	r2,20(r16)
1000843c:	04810004 	movi	r18,1024
10008440:	00000706 	br	10008460 <__smakebuf_r+0xbc>
10008444:	8080030b 	ldhu	r2,12(r16)
10008448:	10c0200c 	andi	r3,r2,128
1000844c:	18001f1e 	bne	r3,zero,100084cc <__smakebuf_r+0x128>
10008450:	04810004 	movi	r18,1024
10008454:	10820014 	ori	r2,r2,2048
10008458:	8080030d 	sth	r2,12(r16)
1000845c:	0027883a 	mov	r19,zero
10008460:	900b883a 	mov	r5,r18
10008464:	8809883a 	mov	r4,r17
10008468:	00085600 	call	10008560 <_malloc_r>
1000846c:	10002c26 	beq	r2,zero,10008520 <__smakebuf_r+0x17c>
10008470:	80c0030b 	ldhu	r3,12(r16)
10008474:	01040034 	movhi	r4,4096
10008478:	211d2704 	addi	r4,r4,29852
1000847c:	89000f15 	stw	r4,60(r17)
10008480:	18c02014 	ori	r3,r3,128
10008484:	80c0030d 	sth	r3,12(r16)
10008488:	80800015 	stw	r2,0(r16)
1000848c:	80800415 	stw	r2,16(r16)
10008490:	84800515 	stw	r18,20(r16)
10008494:	98001a1e 	bne	r19,zero,10008500 <__smakebuf_r+0x15c>
10008498:	dfc01317 	ldw	ra,76(sp)
1000849c:	dcc01217 	ldw	r19,72(sp)
100084a0:	dc801117 	ldw	r18,68(sp)
100084a4:	dc401017 	ldw	r17,64(sp)
100084a8:	dc000f17 	ldw	r16,60(sp)
100084ac:	dec01404 	addi	sp,sp,80
100084b0:	f800283a 	ret
100084b4:	288010c4 	addi	r2,r5,67
100084b8:	28800015 	stw	r2,0(r5)
100084bc:	28800415 	stw	r2,16(r5)
100084c0:	00800044 	movi	r2,1
100084c4:	28800515 	stw	r2,20(r5)
100084c8:	f800283a 	ret
100084cc:	04801004 	movi	r18,64
100084d0:	003fe006 	br	10008454 <__alt_data_end+0xf8008454>
100084d4:	81000a17 	ldw	r4,40(r16)
100084d8:	00c40074 	movhi	r3,4097
100084dc:	18ea7604 	addi	r3,r3,-22056
100084e0:	20ffc51e 	bne	r4,r3,100083f8 <__alt_data_end+0xf80083f8>
100084e4:	8080030b 	ldhu	r2,12(r16)
100084e8:	04810004 	movi	r18,1024
100084ec:	84801315 	stw	r18,76(r16)
100084f0:	1484b03a 	or	r2,r2,r18
100084f4:	8080030d 	sth	r2,12(r16)
100084f8:	0027883a 	mov	r19,zero
100084fc:	003fd806 	br	10008460 <__alt_data_end+0xf8008460>
10008500:	8140038f 	ldh	r5,14(r16)
10008504:	8809883a 	mov	r4,r17
10008508:	000c7080 	call	1000c708 <_isatty_r>
1000850c:	103fe226 	beq	r2,zero,10008498 <__alt_data_end+0xf8008498>
10008510:	8080030b 	ldhu	r2,12(r16)
10008514:	10800054 	ori	r2,r2,1
10008518:	8080030d 	sth	r2,12(r16)
1000851c:	003fde06 	br	10008498 <__alt_data_end+0xf8008498>
10008520:	8080030b 	ldhu	r2,12(r16)
10008524:	10c0800c 	andi	r3,r2,512
10008528:	183fdb1e 	bne	r3,zero,10008498 <__alt_data_end+0xf8008498>
1000852c:	10800094 	ori	r2,r2,2
10008530:	80c010c4 	addi	r3,r16,67
10008534:	8080030d 	sth	r2,12(r16)
10008538:	00800044 	movi	r2,1
1000853c:	80c00015 	stw	r3,0(r16)
10008540:	80c00415 	stw	r3,16(r16)
10008544:	80800515 	stw	r2,20(r16)
10008548:	003fd306 	br	10008498 <__alt_data_end+0xf8008498>
1000854c:	04810004 	movi	r18,1024
10008550:	003fc306 	br	10008460 <__alt_data_end+0xf8008460>
10008554:	0027883a 	mov	r19,zero
10008558:	04810004 	movi	r18,1024
1000855c:	003fc006 	br	10008460 <__alt_data_end+0xf8008460>

10008560 <_malloc_r>:
10008560:	defff504 	addi	sp,sp,-44
10008564:	dc800315 	stw	r18,12(sp)
10008568:	dfc00a15 	stw	ra,40(sp)
1000856c:	df000915 	stw	fp,36(sp)
10008570:	ddc00815 	stw	r23,32(sp)
10008574:	dd800715 	stw	r22,28(sp)
10008578:	dd400615 	stw	r21,24(sp)
1000857c:	dd000515 	stw	r20,20(sp)
10008580:	dcc00415 	stw	r19,16(sp)
10008584:	dc400215 	stw	r17,8(sp)
10008588:	dc000115 	stw	r16,4(sp)
1000858c:	288002c4 	addi	r2,r5,11
10008590:	00c00584 	movi	r3,22
10008594:	2025883a 	mov	r18,r4
10008598:	18807f2e 	bgeu	r3,r2,10008798 <_malloc_r+0x238>
1000859c:	047ffe04 	movi	r17,-8
100085a0:	1462703a 	and	r17,r2,r17
100085a4:	8800a316 	blt	r17,zero,10008834 <_malloc_r+0x2d4>
100085a8:	8940a236 	bltu	r17,r5,10008834 <_malloc_r+0x2d4>
100085ac:	00105840 	call	10010584 <__malloc_lock>
100085b0:	00807dc4 	movi	r2,503
100085b4:	1441e92e 	bgeu	r2,r17,10008d5c <_malloc_r+0x7fc>
100085b8:	8804d27a 	srli	r2,r17,9
100085bc:	1000a126 	beq	r2,zero,10008844 <_malloc_r+0x2e4>
100085c0:	00c00104 	movi	r3,4
100085c4:	18811e36 	bltu	r3,r2,10008a40 <_malloc_r+0x4e0>
100085c8:	8804d1ba 	srli	r2,r17,6
100085cc:	12000e44 	addi	r8,r2,57
100085d0:	11c00e04 	addi	r7,r2,56
100085d4:	4209883a 	add	r4,r8,r8
100085d8:	04c40074 	movhi	r19,4097
100085dc:	2109883a 	add	r4,r4,r4
100085e0:	9ccdbe04 	addi	r19,r19,14072
100085e4:	2109883a 	add	r4,r4,r4
100085e8:	9909883a 	add	r4,r19,r4
100085ec:	24000117 	ldw	r16,4(r4)
100085f0:	213ffe04 	addi	r4,r4,-8
100085f4:	24009726 	beq	r4,r16,10008854 <_malloc_r+0x2f4>
100085f8:	80800117 	ldw	r2,4(r16)
100085fc:	01bfff04 	movi	r6,-4
10008600:	014003c4 	movi	r5,15
10008604:	1184703a 	and	r2,r2,r6
10008608:	1447c83a 	sub	r3,r2,r17
1000860c:	28c00716 	blt	r5,r3,1000862c <_malloc_r+0xcc>
10008610:	1800920e 	bge	r3,zero,1000885c <_malloc_r+0x2fc>
10008614:	84000317 	ldw	r16,12(r16)
10008618:	24008e26 	beq	r4,r16,10008854 <_malloc_r+0x2f4>
1000861c:	80800117 	ldw	r2,4(r16)
10008620:	1184703a 	and	r2,r2,r6
10008624:	1447c83a 	sub	r3,r2,r17
10008628:	28fff90e 	bge	r5,r3,10008610 <__alt_data_end+0xf8008610>
1000862c:	3809883a 	mov	r4,r7
10008630:	01840074 	movhi	r6,4097
10008634:	9c000417 	ldw	r16,16(r19)
10008638:	318dbe04 	addi	r6,r6,14072
1000863c:	32000204 	addi	r8,r6,8
10008640:	82013426 	beq	r16,r8,10008b14 <_malloc_r+0x5b4>
10008644:	80c00117 	ldw	r3,4(r16)
10008648:	00bfff04 	movi	r2,-4
1000864c:	188e703a 	and	r7,r3,r2
10008650:	3c45c83a 	sub	r2,r7,r17
10008654:	00c003c4 	movi	r3,15
10008658:	18811f16 	blt	r3,r2,10008ad8 <_malloc_r+0x578>
1000865c:	32000515 	stw	r8,20(r6)
10008660:	32000415 	stw	r8,16(r6)
10008664:	10007f0e 	bge	r2,zero,10008864 <_malloc_r+0x304>
10008668:	00807fc4 	movi	r2,511
1000866c:	11c0fd36 	bltu	r2,r7,10008a64 <_malloc_r+0x504>
10008670:	3806d0fa 	srli	r3,r7,3
10008674:	01c00044 	movi	r7,1
10008678:	30800117 	ldw	r2,4(r6)
1000867c:	19400044 	addi	r5,r3,1
10008680:	294b883a 	add	r5,r5,r5
10008684:	1807d0ba 	srai	r3,r3,2
10008688:	294b883a 	add	r5,r5,r5
1000868c:	294b883a 	add	r5,r5,r5
10008690:	298b883a 	add	r5,r5,r6
10008694:	38c6983a 	sll	r3,r7,r3
10008698:	29c00017 	ldw	r7,0(r5)
1000869c:	2a7ffe04 	addi	r9,r5,-8
100086a0:	1886b03a 	or	r3,r3,r2
100086a4:	82400315 	stw	r9,12(r16)
100086a8:	81c00215 	stw	r7,8(r16)
100086ac:	30c00115 	stw	r3,4(r6)
100086b0:	2c000015 	stw	r16,0(r5)
100086b4:	3c000315 	stw	r16,12(r7)
100086b8:	2005d0ba 	srai	r2,r4,2
100086bc:	01400044 	movi	r5,1
100086c0:	288a983a 	sll	r5,r5,r2
100086c4:	19406f36 	bltu	r3,r5,10008884 <_malloc_r+0x324>
100086c8:	28c4703a 	and	r2,r5,r3
100086cc:	10000a1e 	bne	r2,zero,100086f8 <_malloc_r+0x198>
100086d0:	00bfff04 	movi	r2,-4
100086d4:	294b883a 	add	r5,r5,r5
100086d8:	2088703a 	and	r4,r4,r2
100086dc:	28c4703a 	and	r2,r5,r3
100086e0:	21000104 	addi	r4,r4,4
100086e4:	1000041e 	bne	r2,zero,100086f8 <_malloc_r+0x198>
100086e8:	294b883a 	add	r5,r5,r5
100086ec:	28c4703a 	and	r2,r5,r3
100086f0:	21000104 	addi	r4,r4,4
100086f4:	103ffc26 	beq	r2,zero,100086e8 <__alt_data_end+0xf80086e8>
100086f8:	02bfff04 	movi	r10,-4
100086fc:	024003c4 	movi	r9,15
10008700:	21800044 	addi	r6,r4,1
10008704:	318d883a 	add	r6,r6,r6
10008708:	318d883a 	add	r6,r6,r6
1000870c:	318d883a 	add	r6,r6,r6
10008710:	998d883a 	add	r6,r19,r6
10008714:	333ffe04 	addi	r12,r6,-8
10008718:	2017883a 	mov	r11,r4
1000871c:	31800104 	addi	r6,r6,4
10008720:	34000017 	ldw	r16,0(r6)
10008724:	31fffd04 	addi	r7,r6,-12
10008728:	81c0041e 	bne	r16,r7,1000873c <_malloc_r+0x1dc>
1000872c:	0000fb06 	br	10008b1c <_malloc_r+0x5bc>
10008730:	1801030e 	bge	r3,zero,10008b40 <_malloc_r+0x5e0>
10008734:	84000317 	ldw	r16,12(r16)
10008738:	81c0f826 	beq	r16,r7,10008b1c <_malloc_r+0x5bc>
1000873c:	80800117 	ldw	r2,4(r16)
10008740:	1284703a 	and	r2,r2,r10
10008744:	1447c83a 	sub	r3,r2,r17
10008748:	48fff90e 	bge	r9,r3,10008730 <__alt_data_end+0xf8008730>
1000874c:	80800317 	ldw	r2,12(r16)
10008750:	81000217 	ldw	r4,8(r16)
10008754:	89400054 	ori	r5,r17,1
10008758:	81400115 	stw	r5,4(r16)
1000875c:	20800315 	stw	r2,12(r4)
10008760:	11000215 	stw	r4,8(r2)
10008764:	8463883a 	add	r17,r16,r17
10008768:	9c400515 	stw	r17,20(r19)
1000876c:	9c400415 	stw	r17,16(r19)
10008770:	18800054 	ori	r2,r3,1
10008774:	88800115 	stw	r2,4(r17)
10008778:	8a000315 	stw	r8,12(r17)
1000877c:	8a000215 	stw	r8,8(r17)
10008780:	88e3883a 	add	r17,r17,r3
10008784:	88c00015 	stw	r3,0(r17)
10008788:	9009883a 	mov	r4,r18
1000878c:	00105a80 	call	100105a8 <__malloc_unlock>
10008790:	80800204 	addi	r2,r16,8
10008794:	00001b06 	br	10008804 <_malloc_r+0x2a4>
10008798:	04400404 	movi	r17,16
1000879c:	89402536 	bltu	r17,r5,10008834 <_malloc_r+0x2d4>
100087a0:	00105840 	call	10010584 <__malloc_lock>
100087a4:	00800184 	movi	r2,6
100087a8:	01000084 	movi	r4,2
100087ac:	04c40074 	movhi	r19,4097
100087b0:	1085883a 	add	r2,r2,r2
100087b4:	9ccdbe04 	addi	r19,r19,14072
100087b8:	1085883a 	add	r2,r2,r2
100087bc:	9885883a 	add	r2,r19,r2
100087c0:	14000117 	ldw	r16,4(r2)
100087c4:	10fffe04 	addi	r3,r2,-8
100087c8:	80c0d926 	beq	r16,r3,10008b30 <_malloc_r+0x5d0>
100087cc:	80c00117 	ldw	r3,4(r16)
100087d0:	81000317 	ldw	r4,12(r16)
100087d4:	00bfff04 	movi	r2,-4
100087d8:	1884703a 	and	r2,r3,r2
100087dc:	81400217 	ldw	r5,8(r16)
100087e0:	8085883a 	add	r2,r16,r2
100087e4:	10c00117 	ldw	r3,4(r2)
100087e8:	29000315 	stw	r4,12(r5)
100087ec:	21400215 	stw	r5,8(r4)
100087f0:	18c00054 	ori	r3,r3,1
100087f4:	10c00115 	stw	r3,4(r2)
100087f8:	9009883a 	mov	r4,r18
100087fc:	00105a80 	call	100105a8 <__malloc_unlock>
10008800:	80800204 	addi	r2,r16,8
10008804:	dfc00a17 	ldw	ra,40(sp)
10008808:	df000917 	ldw	fp,36(sp)
1000880c:	ddc00817 	ldw	r23,32(sp)
10008810:	dd800717 	ldw	r22,28(sp)
10008814:	dd400617 	ldw	r21,24(sp)
10008818:	dd000517 	ldw	r20,20(sp)
1000881c:	dcc00417 	ldw	r19,16(sp)
10008820:	dc800317 	ldw	r18,12(sp)
10008824:	dc400217 	ldw	r17,8(sp)
10008828:	dc000117 	ldw	r16,4(sp)
1000882c:	dec00b04 	addi	sp,sp,44
10008830:	f800283a 	ret
10008834:	00800304 	movi	r2,12
10008838:	90800015 	stw	r2,0(r18)
1000883c:	0005883a 	mov	r2,zero
10008840:	003ff006 	br	10008804 <__alt_data_end+0xf8008804>
10008844:	01002004 	movi	r4,128
10008848:	02001004 	movi	r8,64
1000884c:	01c00fc4 	movi	r7,63
10008850:	003f6106 	br	100085d8 <__alt_data_end+0xf80085d8>
10008854:	4009883a 	mov	r4,r8
10008858:	003f7506 	br	10008630 <__alt_data_end+0xf8008630>
1000885c:	81000317 	ldw	r4,12(r16)
10008860:	003fde06 	br	100087dc <__alt_data_end+0xf80087dc>
10008864:	81c5883a 	add	r2,r16,r7
10008868:	11400117 	ldw	r5,4(r2)
1000886c:	9009883a 	mov	r4,r18
10008870:	29400054 	ori	r5,r5,1
10008874:	11400115 	stw	r5,4(r2)
10008878:	00105a80 	call	100105a8 <__malloc_unlock>
1000887c:	80800204 	addi	r2,r16,8
10008880:	003fe006 	br	10008804 <__alt_data_end+0xf8008804>
10008884:	9c000217 	ldw	r16,8(r19)
10008888:	00bfff04 	movi	r2,-4
1000888c:	85800117 	ldw	r22,4(r16)
10008890:	b0ac703a 	and	r22,r22,r2
10008894:	b4400336 	bltu	r22,r17,100088a4 <_malloc_r+0x344>
10008898:	b445c83a 	sub	r2,r22,r17
1000889c:	00c003c4 	movi	r3,15
100088a0:	18805d16 	blt	r3,r2,10008a18 <_malloc_r+0x4b8>
100088a4:	05c40074 	movhi	r23,4097
100088a8:	00840074 	movhi	r2,4097
100088ac:	109a2f04 	addi	r2,r2,26812
100088b0:	bdd34e04 	addi	r23,r23,19768
100088b4:	15400017 	ldw	r21,0(r2)
100088b8:	b8c00017 	ldw	r3,0(r23)
100088bc:	00bfffc4 	movi	r2,-1
100088c0:	858d883a 	add	r6,r16,r22
100088c4:	8d6b883a 	add	r21,r17,r21
100088c8:	1880ea26 	beq	r3,r2,10008c74 <_malloc_r+0x714>
100088cc:	ad4403c4 	addi	r21,r21,4111
100088d0:	00bc0004 	movi	r2,-4096
100088d4:	a8aa703a 	and	r21,r21,r2
100088d8:	a80b883a 	mov	r5,r21
100088dc:	9009883a 	mov	r4,r18
100088e0:	d9800015 	stw	r6,0(sp)
100088e4:	000a8ac0 	call	1000a8ac <_sbrk_r>
100088e8:	1029883a 	mov	r20,r2
100088ec:	00bfffc4 	movi	r2,-1
100088f0:	d9800017 	ldw	r6,0(sp)
100088f4:	a080e826 	beq	r20,r2,10008c98 <_malloc_r+0x738>
100088f8:	a180a636 	bltu	r20,r6,10008b94 <_malloc_r+0x634>
100088fc:	07040074 	movhi	fp,4097
10008900:	e71a3804 	addi	fp,fp,26848
10008904:	e0800017 	ldw	r2,0(fp)
10008908:	a887883a 	add	r3,r21,r2
1000890c:	e0c00015 	stw	r3,0(fp)
10008910:	3500e626 	beq	r6,r20,10008cac <_malloc_r+0x74c>
10008914:	b9000017 	ldw	r4,0(r23)
10008918:	00bfffc4 	movi	r2,-1
1000891c:	2080ee26 	beq	r4,r2,10008cd8 <_malloc_r+0x778>
10008920:	a185c83a 	sub	r2,r20,r6
10008924:	10c5883a 	add	r2,r2,r3
10008928:	e0800015 	stw	r2,0(fp)
1000892c:	a0c001cc 	andi	r3,r20,7
10008930:	1800bc26 	beq	r3,zero,10008c24 <_malloc_r+0x6c4>
10008934:	a0e9c83a 	sub	r20,r20,r3
10008938:	00840204 	movi	r2,4104
1000893c:	a5000204 	addi	r20,r20,8
10008940:	10c7c83a 	sub	r3,r2,r3
10008944:	a545883a 	add	r2,r20,r21
10008948:	1083ffcc 	andi	r2,r2,4095
1000894c:	18abc83a 	sub	r21,r3,r2
10008950:	a80b883a 	mov	r5,r21
10008954:	9009883a 	mov	r4,r18
10008958:	000a8ac0 	call	1000a8ac <_sbrk_r>
1000895c:	00ffffc4 	movi	r3,-1
10008960:	10c0e126 	beq	r2,r3,10008ce8 <_malloc_r+0x788>
10008964:	1505c83a 	sub	r2,r2,r20
10008968:	1545883a 	add	r2,r2,r21
1000896c:	10800054 	ori	r2,r2,1
10008970:	e0c00017 	ldw	r3,0(fp)
10008974:	9d000215 	stw	r20,8(r19)
10008978:	a0800115 	stw	r2,4(r20)
1000897c:	a8c7883a 	add	r3,r21,r3
10008980:	e0c00015 	stw	r3,0(fp)
10008984:	84c00e26 	beq	r16,r19,100089c0 <_malloc_r+0x460>
10008988:	018003c4 	movi	r6,15
1000898c:	3580a72e 	bgeu	r6,r22,10008c2c <_malloc_r+0x6cc>
10008990:	81400117 	ldw	r5,4(r16)
10008994:	013ffe04 	movi	r4,-8
10008998:	b0bffd04 	addi	r2,r22,-12
1000899c:	1104703a 	and	r2,r2,r4
100089a0:	2900004c 	andi	r4,r5,1
100089a4:	2088b03a 	or	r4,r4,r2
100089a8:	81000115 	stw	r4,4(r16)
100089ac:	01400144 	movi	r5,5
100089b0:	8089883a 	add	r4,r16,r2
100089b4:	21400115 	stw	r5,4(r4)
100089b8:	21400215 	stw	r5,8(r4)
100089bc:	3080cd36 	bltu	r6,r2,10008cf4 <_malloc_r+0x794>
100089c0:	00840074 	movhi	r2,4097
100089c4:	109a2e04 	addi	r2,r2,26808
100089c8:	11000017 	ldw	r4,0(r2)
100089cc:	20c0012e 	bgeu	r4,r3,100089d4 <_malloc_r+0x474>
100089d0:	10c00015 	stw	r3,0(r2)
100089d4:	00840074 	movhi	r2,4097
100089d8:	109a2d04 	addi	r2,r2,26804
100089dc:	11000017 	ldw	r4,0(r2)
100089e0:	9c000217 	ldw	r16,8(r19)
100089e4:	20c0012e 	bgeu	r4,r3,100089ec <_malloc_r+0x48c>
100089e8:	10c00015 	stw	r3,0(r2)
100089ec:	80c00117 	ldw	r3,4(r16)
100089f0:	00bfff04 	movi	r2,-4
100089f4:	1886703a 	and	r3,r3,r2
100089f8:	1c45c83a 	sub	r2,r3,r17
100089fc:	1c400236 	bltu	r3,r17,10008a08 <_malloc_r+0x4a8>
10008a00:	00c003c4 	movi	r3,15
10008a04:	18800416 	blt	r3,r2,10008a18 <_malloc_r+0x4b8>
10008a08:	9009883a 	mov	r4,r18
10008a0c:	00105a80 	call	100105a8 <__malloc_unlock>
10008a10:	0005883a 	mov	r2,zero
10008a14:	003f7b06 	br	10008804 <__alt_data_end+0xf8008804>
10008a18:	88c00054 	ori	r3,r17,1
10008a1c:	80c00115 	stw	r3,4(r16)
10008a20:	8463883a 	add	r17,r16,r17
10008a24:	10800054 	ori	r2,r2,1
10008a28:	9c400215 	stw	r17,8(r19)
10008a2c:	88800115 	stw	r2,4(r17)
10008a30:	9009883a 	mov	r4,r18
10008a34:	00105a80 	call	100105a8 <__malloc_unlock>
10008a38:	80800204 	addi	r2,r16,8
10008a3c:	003f7106 	br	10008804 <__alt_data_end+0xf8008804>
10008a40:	00c00504 	movi	r3,20
10008a44:	18804a2e 	bgeu	r3,r2,10008b70 <_malloc_r+0x610>
10008a48:	00c01504 	movi	r3,84
10008a4c:	18806e36 	bltu	r3,r2,10008c08 <_malloc_r+0x6a8>
10008a50:	8804d33a 	srli	r2,r17,12
10008a54:	12001bc4 	addi	r8,r2,111
10008a58:	11c01b84 	addi	r7,r2,110
10008a5c:	4209883a 	add	r4,r8,r8
10008a60:	003edd06 	br	100085d8 <__alt_data_end+0xf80085d8>
10008a64:	3804d27a 	srli	r2,r7,9
10008a68:	00c00104 	movi	r3,4
10008a6c:	1880442e 	bgeu	r3,r2,10008b80 <_malloc_r+0x620>
10008a70:	00c00504 	movi	r3,20
10008a74:	18808136 	bltu	r3,r2,10008c7c <_malloc_r+0x71c>
10008a78:	11401704 	addi	r5,r2,92
10008a7c:	10c016c4 	addi	r3,r2,91
10008a80:	294b883a 	add	r5,r5,r5
10008a84:	294b883a 	add	r5,r5,r5
10008a88:	294b883a 	add	r5,r5,r5
10008a8c:	994b883a 	add	r5,r19,r5
10008a90:	28800017 	ldw	r2,0(r5)
10008a94:	01840074 	movhi	r6,4097
10008a98:	297ffe04 	addi	r5,r5,-8
10008a9c:	318dbe04 	addi	r6,r6,14072
10008aa0:	28806526 	beq	r5,r2,10008c38 <_malloc_r+0x6d8>
10008aa4:	01bfff04 	movi	r6,-4
10008aa8:	10c00117 	ldw	r3,4(r2)
10008aac:	1986703a 	and	r3,r3,r6
10008ab0:	38c0022e 	bgeu	r7,r3,10008abc <_malloc_r+0x55c>
10008ab4:	10800217 	ldw	r2,8(r2)
10008ab8:	28bffb1e 	bne	r5,r2,10008aa8 <__alt_data_end+0xf8008aa8>
10008abc:	11400317 	ldw	r5,12(r2)
10008ac0:	98c00117 	ldw	r3,4(r19)
10008ac4:	81400315 	stw	r5,12(r16)
10008ac8:	80800215 	stw	r2,8(r16)
10008acc:	2c000215 	stw	r16,8(r5)
10008ad0:	14000315 	stw	r16,12(r2)
10008ad4:	003ef806 	br	100086b8 <__alt_data_end+0xf80086b8>
10008ad8:	88c00054 	ori	r3,r17,1
10008adc:	80c00115 	stw	r3,4(r16)
10008ae0:	8463883a 	add	r17,r16,r17
10008ae4:	34400515 	stw	r17,20(r6)
10008ae8:	34400415 	stw	r17,16(r6)
10008aec:	10c00054 	ori	r3,r2,1
10008af0:	8a000315 	stw	r8,12(r17)
10008af4:	8a000215 	stw	r8,8(r17)
10008af8:	88c00115 	stw	r3,4(r17)
10008afc:	88a3883a 	add	r17,r17,r2
10008b00:	88800015 	stw	r2,0(r17)
10008b04:	9009883a 	mov	r4,r18
10008b08:	00105a80 	call	100105a8 <__malloc_unlock>
10008b0c:	80800204 	addi	r2,r16,8
10008b10:	003f3c06 	br	10008804 <__alt_data_end+0xf8008804>
10008b14:	30c00117 	ldw	r3,4(r6)
10008b18:	003ee706 	br	100086b8 <__alt_data_end+0xf80086b8>
10008b1c:	5ac00044 	addi	r11,r11,1
10008b20:	588000cc 	andi	r2,r11,3
10008b24:	31800204 	addi	r6,r6,8
10008b28:	103efd1e 	bne	r2,zero,10008720 <__alt_data_end+0xf8008720>
10008b2c:	00002406 	br	10008bc0 <_malloc_r+0x660>
10008b30:	14000317 	ldw	r16,12(r2)
10008b34:	143f251e 	bne	r2,r16,100087cc <__alt_data_end+0xf80087cc>
10008b38:	21000084 	addi	r4,r4,2
10008b3c:	003ebc06 	br	10008630 <__alt_data_end+0xf8008630>
10008b40:	8085883a 	add	r2,r16,r2
10008b44:	10c00117 	ldw	r3,4(r2)
10008b48:	81000317 	ldw	r4,12(r16)
10008b4c:	81400217 	ldw	r5,8(r16)
10008b50:	18c00054 	ori	r3,r3,1
10008b54:	10c00115 	stw	r3,4(r2)
10008b58:	29000315 	stw	r4,12(r5)
10008b5c:	21400215 	stw	r5,8(r4)
10008b60:	9009883a 	mov	r4,r18
10008b64:	00105a80 	call	100105a8 <__malloc_unlock>
10008b68:	80800204 	addi	r2,r16,8
10008b6c:	003f2506 	br	10008804 <__alt_data_end+0xf8008804>
10008b70:	12001704 	addi	r8,r2,92
10008b74:	11c016c4 	addi	r7,r2,91
10008b78:	4209883a 	add	r4,r8,r8
10008b7c:	003e9606 	br	100085d8 <__alt_data_end+0xf80085d8>
10008b80:	3804d1ba 	srli	r2,r7,6
10008b84:	11400e44 	addi	r5,r2,57
10008b88:	10c00e04 	addi	r3,r2,56
10008b8c:	294b883a 	add	r5,r5,r5
10008b90:	003fbc06 	br	10008a84 <__alt_data_end+0xf8008a84>
10008b94:	84ff5926 	beq	r16,r19,100088fc <__alt_data_end+0xf80088fc>
10008b98:	00840074 	movhi	r2,4097
10008b9c:	108dbe04 	addi	r2,r2,14072
10008ba0:	14000217 	ldw	r16,8(r2)
10008ba4:	00bfff04 	movi	r2,-4
10008ba8:	80c00117 	ldw	r3,4(r16)
10008bac:	1886703a 	and	r3,r3,r2
10008bb0:	003f9106 	br	100089f8 <__alt_data_end+0xf80089f8>
10008bb4:	60800217 	ldw	r2,8(r12)
10008bb8:	213fffc4 	addi	r4,r4,-1
10008bbc:	1300651e 	bne	r2,r12,10008d54 <_malloc_r+0x7f4>
10008bc0:	208000cc 	andi	r2,r4,3
10008bc4:	633ffe04 	addi	r12,r12,-8
10008bc8:	103ffa1e 	bne	r2,zero,10008bb4 <__alt_data_end+0xf8008bb4>
10008bcc:	98800117 	ldw	r2,4(r19)
10008bd0:	0146303a 	nor	r3,zero,r5
10008bd4:	1884703a 	and	r2,r3,r2
10008bd8:	98800115 	stw	r2,4(r19)
10008bdc:	294b883a 	add	r5,r5,r5
10008be0:	117f2836 	bltu	r2,r5,10008884 <__alt_data_end+0xf8008884>
10008be4:	283f2726 	beq	r5,zero,10008884 <__alt_data_end+0xf8008884>
10008be8:	2886703a 	and	r3,r5,r2
10008bec:	5809883a 	mov	r4,r11
10008bf0:	183ec31e 	bne	r3,zero,10008700 <__alt_data_end+0xf8008700>
10008bf4:	294b883a 	add	r5,r5,r5
10008bf8:	2886703a 	and	r3,r5,r2
10008bfc:	21000104 	addi	r4,r4,4
10008c00:	183ffc26 	beq	r3,zero,10008bf4 <__alt_data_end+0xf8008bf4>
10008c04:	003ebe06 	br	10008700 <__alt_data_end+0xf8008700>
10008c08:	00c05504 	movi	r3,340
10008c0c:	18801236 	bltu	r3,r2,10008c58 <_malloc_r+0x6f8>
10008c10:	8804d3fa 	srli	r2,r17,15
10008c14:	12001e04 	addi	r8,r2,120
10008c18:	11c01dc4 	addi	r7,r2,119
10008c1c:	4209883a 	add	r4,r8,r8
10008c20:	003e6d06 	br	100085d8 <__alt_data_end+0xf80085d8>
10008c24:	00c40004 	movi	r3,4096
10008c28:	003f4606 	br	10008944 <__alt_data_end+0xf8008944>
10008c2c:	00800044 	movi	r2,1
10008c30:	a0800115 	stw	r2,4(r20)
10008c34:	003f7406 	br	10008a08 <__alt_data_end+0xf8008a08>
10008c38:	1805d0ba 	srai	r2,r3,2
10008c3c:	01c00044 	movi	r7,1
10008c40:	30c00117 	ldw	r3,4(r6)
10008c44:	388e983a 	sll	r7,r7,r2
10008c48:	2805883a 	mov	r2,r5
10008c4c:	38c6b03a 	or	r3,r7,r3
10008c50:	30c00115 	stw	r3,4(r6)
10008c54:	003f9b06 	br	10008ac4 <__alt_data_end+0xf8008ac4>
10008c58:	00c15504 	movi	r3,1364
10008c5c:	18801a36 	bltu	r3,r2,10008cc8 <_malloc_r+0x768>
10008c60:	8804d4ba 	srli	r2,r17,18
10008c64:	12001f44 	addi	r8,r2,125
10008c68:	11c01f04 	addi	r7,r2,124
10008c6c:	4209883a 	add	r4,r8,r8
10008c70:	003e5906 	br	100085d8 <__alt_data_end+0xf80085d8>
10008c74:	ad400404 	addi	r21,r21,16
10008c78:	003f1706 	br	100088d8 <__alt_data_end+0xf80088d8>
10008c7c:	00c01504 	movi	r3,84
10008c80:	18802336 	bltu	r3,r2,10008d10 <_malloc_r+0x7b0>
10008c84:	3804d33a 	srli	r2,r7,12
10008c88:	11401bc4 	addi	r5,r2,111
10008c8c:	10c01b84 	addi	r3,r2,110
10008c90:	294b883a 	add	r5,r5,r5
10008c94:	003f7b06 	br	10008a84 <__alt_data_end+0xf8008a84>
10008c98:	9c000217 	ldw	r16,8(r19)
10008c9c:	00bfff04 	movi	r2,-4
10008ca0:	80c00117 	ldw	r3,4(r16)
10008ca4:	1886703a 	and	r3,r3,r2
10008ca8:	003f5306 	br	100089f8 <__alt_data_end+0xf80089f8>
10008cac:	3083ffcc 	andi	r2,r6,4095
10008cb0:	103f181e 	bne	r2,zero,10008914 <__alt_data_end+0xf8008914>
10008cb4:	99000217 	ldw	r4,8(r19)
10008cb8:	b545883a 	add	r2,r22,r21
10008cbc:	10800054 	ori	r2,r2,1
10008cc0:	20800115 	stw	r2,4(r4)
10008cc4:	003f3e06 	br	100089c0 <__alt_data_end+0xf80089c0>
10008cc8:	01003f84 	movi	r4,254
10008ccc:	02001fc4 	movi	r8,127
10008cd0:	01c01f84 	movi	r7,126
10008cd4:	003e4006 	br	100085d8 <__alt_data_end+0xf80085d8>
10008cd8:	00840074 	movhi	r2,4097
10008cdc:	10934e04 	addi	r2,r2,19768
10008ce0:	15000015 	stw	r20,0(r2)
10008ce4:	003f1106 	br	1000892c <__alt_data_end+0xf800892c>
10008ce8:	00800044 	movi	r2,1
10008cec:	002b883a 	mov	r21,zero
10008cf0:	003f1f06 	br	10008970 <__alt_data_end+0xf8008970>
10008cf4:	81400204 	addi	r5,r16,8
10008cf8:	9009883a 	mov	r4,r18
10008cfc:	00079680 	call	10007968 <_free_r>
10008d00:	00840074 	movhi	r2,4097
10008d04:	109a3804 	addi	r2,r2,26848
10008d08:	10c00017 	ldw	r3,0(r2)
10008d0c:	003f2c06 	br	100089c0 <__alt_data_end+0xf80089c0>
10008d10:	00c05504 	movi	r3,340
10008d14:	18800536 	bltu	r3,r2,10008d2c <_malloc_r+0x7cc>
10008d18:	3804d3fa 	srli	r2,r7,15
10008d1c:	11401e04 	addi	r5,r2,120
10008d20:	10c01dc4 	addi	r3,r2,119
10008d24:	294b883a 	add	r5,r5,r5
10008d28:	003f5606 	br	10008a84 <__alt_data_end+0xf8008a84>
10008d2c:	00c15504 	movi	r3,1364
10008d30:	18800536 	bltu	r3,r2,10008d48 <_malloc_r+0x7e8>
10008d34:	3804d4ba 	srli	r2,r7,18
10008d38:	11401f44 	addi	r5,r2,125
10008d3c:	10c01f04 	addi	r3,r2,124
10008d40:	294b883a 	add	r5,r5,r5
10008d44:	003f4f06 	br	10008a84 <__alt_data_end+0xf8008a84>
10008d48:	01403f84 	movi	r5,254
10008d4c:	00c01f84 	movi	r3,126
10008d50:	003f4c06 	br	10008a84 <__alt_data_end+0xf8008a84>
10008d54:	98800117 	ldw	r2,4(r19)
10008d58:	003fa006 	br	10008bdc <__alt_data_end+0xf8008bdc>
10008d5c:	8808d0fa 	srli	r4,r17,3
10008d60:	20800044 	addi	r2,r4,1
10008d64:	1085883a 	add	r2,r2,r2
10008d68:	003e9006 	br	100087ac <__alt_data_end+0xf80087ac>

10008d6c <memchr>:
10008d6c:	208000cc 	andi	r2,r4,3
10008d70:	280f883a 	mov	r7,r5
10008d74:	10003426 	beq	r2,zero,10008e48 <memchr+0xdc>
10008d78:	30bfffc4 	addi	r2,r6,-1
10008d7c:	30001a26 	beq	r6,zero,10008de8 <memchr+0x7c>
10008d80:	20c00003 	ldbu	r3,0(r4)
10008d84:	29803fcc 	andi	r6,r5,255
10008d88:	30c0051e 	bne	r6,r3,10008da0 <memchr+0x34>
10008d8c:	00001806 	br	10008df0 <memchr+0x84>
10008d90:	10001526 	beq	r2,zero,10008de8 <memchr+0x7c>
10008d94:	20c00003 	ldbu	r3,0(r4)
10008d98:	10bfffc4 	addi	r2,r2,-1
10008d9c:	30c01426 	beq	r6,r3,10008df0 <memchr+0x84>
10008da0:	21000044 	addi	r4,r4,1
10008da4:	20c000cc 	andi	r3,r4,3
10008da8:	183ff91e 	bne	r3,zero,10008d90 <__alt_data_end+0xf8008d90>
10008dac:	020000c4 	movi	r8,3
10008db0:	40801136 	bltu	r8,r2,10008df8 <memchr+0x8c>
10008db4:	10000c26 	beq	r2,zero,10008de8 <memchr+0x7c>
10008db8:	20c00003 	ldbu	r3,0(r4)
10008dbc:	29403fcc 	andi	r5,r5,255
10008dc0:	28c00b26 	beq	r5,r3,10008df0 <memchr+0x84>
10008dc4:	20c00044 	addi	r3,r4,1
10008dc8:	39803fcc 	andi	r6,r7,255
10008dcc:	2089883a 	add	r4,r4,r2
10008dd0:	00000306 	br	10008de0 <memchr+0x74>
10008dd4:	18c00044 	addi	r3,r3,1
10008dd8:	197fffc3 	ldbu	r5,-1(r3)
10008ddc:	31400526 	beq	r6,r5,10008df4 <memchr+0x88>
10008de0:	1805883a 	mov	r2,r3
10008de4:	20fffb1e 	bne	r4,r3,10008dd4 <__alt_data_end+0xf8008dd4>
10008de8:	0005883a 	mov	r2,zero
10008dec:	f800283a 	ret
10008df0:	2005883a 	mov	r2,r4
10008df4:	f800283a 	ret
10008df8:	28c03fcc 	andi	r3,r5,255
10008dfc:	1812923a 	slli	r9,r3,8
10008e00:	02ffbff4 	movhi	r11,65279
10008e04:	02a02074 	movhi	r10,32897
10008e08:	48d2b03a 	or	r9,r9,r3
10008e0c:	4806943a 	slli	r3,r9,16
10008e10:	5affbfc4 	addi	r11,r11,-257
10008e14:	52a02004 	addi	r10,r10,-32640
10008e18:	48d2b03a 	or	r9,r9,r3
10008e1c:	20c00017 	ldw	r3,0(r4)
10008e20:	48c6f03a 	xor	r3,r9,r3
10008e24:	1acd883a 	add	r6,r3,r11
10008e28:	00c6303a 	nor	r3,zero,r3
10008e2c:	30c6703a 	and	r3,r6,r3
10008e30:	1a86703a 	and	r3,r3,r10
10008e34:	183fe01e 	bne	r3,zero,10008db8 <__alt_data_end+0xf8008db8>
10008e38:	10bfff04 	addi	r2,r2,-4
10008e3c:	21000104 	addi	r4,r4,4
10008e40:	40bff636 	bltu	r8,r2,10008e1c <__alt_data_end+0xf8008e1c>
10008e44:	003fdb06 	br	10008db4 <__alt_data_end+0xf8008db4>
10008e48:	3005883a 	mov	r2,r6
10008e4c:	003fd706 	br	10008dac <__alt_data_end+0xf8008dac>

10008e50 <memcpy>:
10008e50:	defffd04 	addi	sp,sp,-12
10008e54:	dfc00215 	stw	ra,8(sp)
10008e58:	dc400115 	stw	r17,4(sp)
10008e5c:	dc000015 	stw	r16,0(sp)
10008e60:	00c003c4 	movi	r3,15
10008e64:	2005883a 	mov	r2,r4
10008e68:	1980452e 	bgeu	r3,r6,10008f80 <memcpy+0x130>
10008e6c:	2906b03a 	or	r3,r5,r4
10008e70:	18c000cc 	andi	r3,r3,3
10008e74:	1800441e 	bne	r3,zero,10008f88 <memcpy+0x138>
10008e78:	347ffc04 	addi	r17,r6,-16
10008e7c:	8822d13a 	srli	r17,r17,4
10008e80:	28c00104 	addi	r3,r5,4
10008e84:	23400104 	addi	r13,r4,4
10008e88:	8820913a 	slli	r16,r17,4
10008e8c:	2b000204 	addi	r12,r5,8
10008e90:	22c00204 	addi	r11,r4,8
10008e94:	84000504 	addi	r16,r16,20
10008e98:	2a800304 	addi	r10,r5,12
10008e9c:	22400304 	addi	r9,r4,12
10008ea0:	2c21883a 	add	r16,r5,r16
10008ea4:	2811883a 	mov	r8,r5
10008ea8:	200f883a 	mov	r7,r4
10008eac:	41000017 	ldw	r4,0(r8)
10008eb0:	1fc00017 	ldw	ra,0(r3)
10008eb4:	63c00017 	ldw	r15,0(r12)
10008eb8:	39000015 	stw	r4,0(r7)
10008ebc:	53800017 	ldw	r14,0(r10)
10008ec0:	6fc00015 	stw	ra,0(r13)
10008ec4:	5bc00015 	stw	r15,0(r11)
10008ec8:	4b800015 	stw	r14,0(r9)
10008ecc:	18c00404 	addi	r3,r3,16
10008ed0:	39c00404 	addi	r7,r7,16
10008ed4:	42000404 	addi	r8,r8,16
10008ed8:	6b400404 	addi	r13,r13,16
10008edc:	63000404 	addi	r12,r12,16
10008ee0:	5ac00404 	addi	r11,r11,16
10008ee4:	52800404 	addi	r10,r10,16
10008ee8:	4a400404 	addi	r9,r9,16
10008eec:	1c3fef1e 	bne	r3,r16,10008eac <__alt_data_end+0xf8008eac>
10008ef0:	89c00044 	addi	r7,r17,1
10008ef4:	380e913a 	slli	r7,r7,4
10008ef8:	310003cc 	andi	r4,r6,15
10008efc:	02c000c4 	movi	r11,3
10008f00:	11c7883a 	add	r3,r2,r7
10008f04:	29cb883a 	add	r5,r5,r7
10008f08:	5900212e 	bgeu	r11,r4,10008f90 <memcpy+0x140>
10008f0c:	1813883a 	mov	r9,r3
10008f10:	2811883a 	mov	r8,r5
10008f14:	200f883a 	mov	r7,r4
10008f18:	42800017 	ldw	r10,0(r8)
10008f1c:	4a400104 	addi	r9,r9,4
10008f20:	39ffff04 	addi	r7,r7,-4
10008f24:	4abfff15 	stw	r10,-4(r9)
10008f28:	42000104 	addi	r8,r8,4
10008f2c:	59fffa36 	bltu	r11,r7,10008f18 <__alt_data_end+0xf8008f18>
10008f30:	213fff04 	addi	r4,r4,-4
10008f34:	2008d0ba 	srli	r4,r4,2
10008f38:	318000cc 	andi	r6,r6,3
10008f3c:	21000044 	addi	r4,r4,1
10008f40:	2109883a 	add	r4,r4,r4
10008f44:	2109883a 	add	r4,r4,r4
10008f48:	1907883a 	add	r3,r3,r4
10008f4c:	290b883a 	add	r5,r5,r4
10008f50:	30000626 	beq	r6,zero,10008f6c <memcpy+0x11c>
10008f54:	198d883a 	add	r6,r3,r6
10008f58:	29c00003 	ldbu	r7,0(r5)
10008f5c:	18c00044 	addi	r3,r3,1
10008f60:	29400044 	addi	r5,r5,1
10008f64:	19ffffc5 	stb	r7,-1(r3)
10008f68:	19bffb1e 	bne	r3,r6,10008f58 <__alt_data_end+0xf8008f58>
10008f6c:	dfc00217 	ldw	ra,8(sp)
10008f70:	dc400117 	ldw	r17,4(sp)
10008f74:	dc000017 	ldw	r16,0(sp)
10008f78:	dec00304 	addi	sp,sp,12
10008f7c:	f800283a 	ret
10008f80:	2007883a 	mov	r3,r4
10008f84:	003ff206 	br	10008f50 <__alt_data_end+0xf8008f50>
10008f88:	2007883a 	mov	r3,r4
10008f8c:	003ff106 	br	10008f54 <__alt_data_end+0xf8008f54>
10008f90:	200d883a 	mov	r6,r4
10008f94:	003fee06 	br	10008f50 <__alt_data_end+0xf8008f50>

10008f98 <memmove>:
10008f98:	2005883a 	mov	r2,r4
10008f9c:	29000b2e 	bgeu	r5,r4,10008fcc <memmove+0x34>
10008fa0:	298f883a 	add	r7,r5,r6
10008fa4:	21c0092e 	bgeu	r4,r7,10008fcc <memmove+0x34>
10008fa8:	2187883a 	add	r3,r4,r6
10008fac:	198bc83a 	sub	r5,r3,r6
10008fb0:	30004826 	beq	r6,zero,100090d4 <memmove+0x13c>
10008fb4:	39ffffc4 	addi	r7,r7,-1
10008fb8:	39000003 	ldbu	r4,0(r7)
10008fbc:	18ffffc4 	addi	r3,r3,-1
10008fc0:	19000005 	stb	r4,0(r3)
10008fc4:	28fffb1e 	bne	r5,r3,10008fb4 <__alt_data_end+0xf8008fb4>
10008fc8:	f800283a 	ret
10008fcc:	00c003c4 	movi	r3,15
10008fd0:	1980412e 	bgeu	r3,r6,100090d8 <memmove+0x140>
10008fd4:	2886b03a 	or	r3,r5,r2
10008fd8:	18c000cc 	andi	r3,r3,3
10008fdc:	1800401e 	bne	r3,zero,100090e0 <memmove+0x148>
10008fe0:	33fffc04 	addi	r15,r6,-16
10008fe4:	781ed13a 	srli	r15,r15,4
10008fe8:	28c00104 	addi	r3,r5,4
10008fec:	13400104 	addi	r13,r2,4
10008ff0:	781c913a 	slli	r14,r15,4
10008ff4:	2b000204 	addi	r12,r5,8
10008ff8:	12c00204 	addi	r11,r2,8
10008ffc:	73800504 	addi	r14,r14,20
10009000:	2a800304 	addi	r10,r5,12
10009004:	12400304 	addi	r9,r2,12
10009008:	2b9d883a 	add	r14,r5,r14
1000900c:	2811883a 	mov	r8,r5
10009010:	100f883a 	mov	r7,r2
10009014:	41000017 	ldw	r4,0(r8)
10009018:	39c00404 	addi	r7,r7,16
1000901c:	18c00404 	addi	r3,r3,16
10009020:	393ffc15 	stw	r4,-16(r7)
10009024:	193ffc17 	ldw	r4,-16(r3)
10009028:	6b400404 	addi	r13,r13,16
1000902c:	5ac00404 	addi	r11,r11,16
10009030:	693ffc15 	stw	r4,-16(r13)
10009034:	61000017 	ldw	r4,0(r12)
10009038:	4a400404 	addi	r9,r9,16
1000903c:	42000404 	addi	r8,r8,16
10009040:	593ffc15 	stw	r4,-16(r11)
10009044:	51000017 	ldw	r4,0(r10)
10009048:	63000404 	addi	r12,r12,16
1000904c:	52800404 	addi	r10,r10,16
10009050:	493ffc15 	stw	r4,-16(r9)
10009054:	1bbfef1e 	bne	r3,r14,10009014 <__alt_data_end+0xf8009014>
10009058:	79000044 	addi	r4,r15,1
1000905c:	2008913a 	slli	r4,r4,4
10009060:	328003cc 	andi	r10,r6,15
10009064:	02c000c4 	movi	r11,3
10009068:	1107883a 	add	r3,r2,r4
1000906c:	290b883a 	add	r5,r5,r4
10009070:	5a801e2e 	bgeu	r11,r10,100090ec <memmove+0x154>
10009074:	1813883a 	mov	r9,r3
10009078:	2811883a 	mov	r8,r5
1000907c:	500f883a 	mov	r7,r10
10009080:	41000017 	ldw	r4,0(r8)
10009084:	4a400104 	addi	r9,r9,4
10009088:	39ffff04 	addi	r7,r7,-4
1000908c:	493fff15 	stw	r4,-4(r9)
10009090:	42000104 	addi	r8,r8,4
10009094:	59fffa36 	bltu	r11,r7,10009080 <__alt_data_end+0xf8009080>
10009098:	513fff04 	addi	r4,r10,-4
1000909c:	2008d0ba 	srli	r4,r4,2
100090a0:	318000cc 	andi	r6,r6,3
100090a4:	21000044 	addi	r4,r4,1
100090a8:	2109883a 	add	r4,r4,r4
100090ac:	2109883a 	add	r4,r4,r4
100090b0:	1907883a 	add	r3,r3,r4
100090b4:	290b883a 	add	r5,r5,r4
100090b8:	30000b26 	beq	r6,zero,100090e8 <memmove+0x150>
100090bc:	198d883a 	add	r6,r3,r6
100090c0:	29c00003 	ldbu	r7,0(r5)
100090c4:	18c00044 	addi	r3,r3,1
100090c8:	29400044 	addi	r5,r5,1
100090cc:	19ffffc5 	stb	r7,-1(r3)
100090d0:	19bffb1e 	bne	r3,r6,100090c0 <__alt_data_end+0xf80090c0>
100090d4:	f800283a 	ret
100090d8:	1007883a 	mov	r3,r2
100090dc:	003ff606 	br	100090b8 <__alt_data_end+0xf80090b8>
100090e0:	1007883a 	mov	r3,r2
100090e4:	003ff506 	br	100090bc <__alt_data_end+0xf80090bc>
100090e8:	f800283a 	ret
100090ec:	500d883a 	mov	r6,r10
100090f0:	003ff106 	br	100090b8 <__alt_data_end+0xf80090b8>

100090f4 <memset>:
100090f4:	20c000cc 	andi	r3,r4,3
100090f8:	2005883a 	mov	r2,r4
100090fc:	18004426 	beq	r3,zero,10009210 <memset+0x11c>
10009100:	31ffffc4 	addi	r7,r6,-1
10009104:	30004026 	beq	r6,zero,10009208 <memset+0x114>
10009108:	2813883a 	mov	r9,r5
1000910c:	200d883a 	mov	r6,r4
10009110:	2007883a 	mov	r3,r4
10009114:	00000406 	br	10009128 <memset+0x34>
10009118:	3a3fffc4 	addi	r8,r7,-1
1000911c:	31800044 	addi	r6,r6,1
10009120:	38003926 	beq	r7,zero,10009208 <memset+0x114>
10009124:	400f883a 	mov	r7,r8
10009128:	18c00044 	addi	r3,r3,1
1000912c:	32400005 	stb	r9,0(r6)
10009130:	1a0000cc 	andi	r8,r3,3
10009134:	403ff81e 	bne	r8,zero,10009118 <__alt_data_end+0xf8009118>
10009138:	010000c4 	movi	r4,3
1000913c:	21c02d2e 	bgeu	r4,r7,100091f4 <memset+0x100>
10009140:	29003fcc 	andi	r4,r5,255
10009144:	200c923a 	slli	r6,r4,8
10009148:	3108b03a 	or	r4,r6,r4
1000914c:	200c943a 	slli	r6,r4,16
10009150:	218cb03a 	or	r6,r4,r6
10009154:	010003c4 	movi	r4,15
10009158:	21c0182e 	bgeu	r4,r7,100091bc <memset+0xc8>
1000915c:	3b3ffc04 	addi	r12,r7,-16
10009160:	6018d13a 	srli	r12,r12,4
10009164:	1a000104 	addi	r8,r3,4
10009168:	1ac00204 	addi	r11,r3,8
1000916c:	6008913a 	slli	r4,r12,4
10009170:	1a800304 	addi	r10,r3,12
10009174:	1813883a 	mov	r9,r3
10009178:	21000504 	addi	r4,r4,20
1000917c:	1909883a 	add	r4,r3,r4
10009180:	49800015 	stw	r6,0(r9)
10009184:	41800015 	stw	r6,0(r8)
10009188:	59800015 	stw	r6,0(r11)
1000918c:	51800015 	stw	r6,0(r10)
10009190:	42000404 	addi	r8,r8,16
10009194:	4a400404 	addi	r9,r9,16
10009198:	5ac00404 	addi	r11,r11,16
1000919c:	52800404 	addi	r10,r10,16
100091a0:	413ff71e 	bne	r8,r4,10009180 <__alt_data_end+0xf8009180>
100091a4:	63000044 	addi	r12,r12,1
100091a8:	6018913a 	slli	r12,r12,4
100091ac:	39c003cc 	andi	r7,r7,15
100091b0:	010000c4 	movi	r4,3
100091b4:	1b07883a 	add	r3,r3,r12
100091b8:	21c00e2e 	bgeu	r4,r7,100091f4 <memset+0x100>
100091bc:	1813883a 	mov	r9,r3
100091c0:	3811883a 	mov	r8,r7
100091c4:	010000c4 	movi	r4,3
100091c8:	49800015 	stw	r6,0(r9)
100091cc:	423fff04 	addi	r8,r8,-4
100091d0:	4a400104 	addi	r9,r9,4
100091d4:	223ffc36 	bltu	r4,r8,100091c8 <__alt_data_end+0xf80091c8>
100091d8:	393fff04 	addi	r4,r7,-4
100091dc:	2008d0ba 	srli	r4,r4,2
100091e0:	39c000cc 	andi	r7,r7,3
100091e4:	21000044 	addi	r4,r4,1
100091e8:	2109883a 	add	r4,r4,r4
100091ec:	2109883a 	add	r4,r4,r4
100091f0:	1907883a 	add	r3,r3,r4
100091f4:	38000526 	beq	r7,zero,1000920c <memset+0x118>
100091f8:	19cf883a 	add	r7,r3,r7
100091fc:	19400005 	stb	r5,0(r3)
10009200:	18c00044 	addi	r3,r3,1
10009204:	38fffd1e 	bne	r7,r3,100091fc <__alt_data_end+0xf80091fc>
10009208:	f800283a 	ret
1000920c:	f800283a 	ret
10009210:	2007883a 	mov	r3,r4
10009214:	300f883a 	mov	r7,r6
10009218:	003fc706 	br	10009138 <__alt_data_end+0xf8009138>

1000921c <_Balloc>:
1000921c:	20801317 	ldw	r2,76(r4)
10009220:	defffc04 	addi	sp,sp,-16
10009224:	dc400115 	stw	r17,4(sp)
10009228:	dc000015 	stw	r16,0(sp)
1000922c:	dfc00315 	stw	ra,12(sp)
10009230:	dc800215 	stw	r18,8(sp)
10009234:	2023883a 	mov	r17,r4
10009238:	2821883a 	mov	r16,r5
1000923c:	10000f26 	beq	r2,zero,1000927c <_Balloc+0x60>
10009240:	8407883a 	add	r3,r16,r16
10009244:	18c7883a 	add	r3,r3,r3
10009248:	10c7883a 	add	r3,r2,r3
1000924c:	18800017 	ldw	r2,0(r3)
10009250:	10001126 	beq	r2,zero,10009298 <_Balloc+0x7c>
10009254:	11000017 	ldw	r4,0(r2)
10009258:	19000015 	stw	r4,0(r3)
1000925c:	10000415 	stw	zero,16(r2)
10009260:	10000315 	stw	zero,12(r2)
10009264:	dfc00317 	ldw	ra,12(sp)
10009268:	dc800217 	ldw	r18,8(sp)
1000926c:	dc400117 	ldw	r17,4(sp)
10009270:	dc000017 	ldw	r16,0(sp)
10009274:	dec00404 	addi	sp,sp,16
10009278:	f800283a 	ret
1000927c:	01800844 	movi	r6,33
10009280:	01400104 	movi	r5,4
10009284:	000c2c40 	call	1000c2c4 <_calloc_r>
10009288:	88801315 	stw	r2,76(r17)
1000928c:	103fec1e 	bne	r2,zero,10009240 <__alt_data_end+0xf8009240>
10009290:	0005883a 	mov	r2,zero
10009294:	003ff306 	br	10009264 <__alt_data_end+0xf8009264>
10009298:	01400044 	movi	r5,1
1000929c:	2c24983a 	sll	r18,r5,r16
100092a0:	8809883a 	mov	r4,r17
100092a4:	91800144 	addi	r6,r18,5
100092a8:	318d883a 	add	r6,r6,r6
100092ac:	318d883a 	add	r6,r6,r6
100092b0:	000c2c40 	call	1000c2c4 <_calloc_r>
100092b4:	103ff626 	beq	r2,zero,10009290 <__alt_data_end+0xf8009290>
100092b8:	14000115 	stw	r16,4(r2)
100092bc:	14800215 	stw	r18,8(r2)
100092c0:	003fe606 	br	1000925c <__alt_data_end+0xf800925c>

100092c4 <_Bfree>:
100092c4:	28000826 	beq	r5,zero,100092e8 <_Bfree+0x24>
100092c8:	28c00117 	ldw	r3,4(r5)
100092cc:	20801317 	ldw	r2,76(r4)
100092d0:	18c7883a 	add	r3,r3,r3
100092d4:	18c7883a 	add	r3,r3,r3
100092d8:	10c5883a 	add	r2,r2,r3
100092dc:	10c00017 	ldw	r3,0(r2)
100092e0:	28c00015 	stw	r3,0(r5)
100092e4:	11400015 	stw	r5,0(r2)
100092e8:	f800283a 	ret

100092ec <__multadd>:
100092ec:	defff704 	addi	sp,sp,-36
100092f0:	dc800215 	stw	r18,8(sp)
100092f4:	2c800417 	ldw	r18,16(r5)
100092f8:	dd800615 	stw	r22,24(sp)
100092fc:	dd400515 	stw	r21,20(sp)
10009300:	dd000415 	stw	r20,16(sp)
10009304:	dcc00315 	stw	r19,12(sp)
10009308:	dc400115 	stw	r17,4(sp)
1000930c:	dc000015 	stw	r16,0(sp)
10009310:	dfc00815 	stw	ra,32(sp)
10009314:	ddc00715 	stw	r23,28(sp)
10009318:	2827883a 	mov	r19,r5
1000931c:	2029883a 	mov	r20,r4
10009320:	3023883a 	mov	r17,r6
10009324:	3821883a 	mov	r16,r7
10009328:	2d400504 	addi	r21,r5,20
1000932c:	002d883a 	mov	r22,zero
10009330:	adc00017 	ldw	r23,0(r21)
10009334:	880b883a 	mov	r5,r17
10009338:	ad400104 	addi	r21,r21,4
1000933c:	b93fffcc 	andi	r4,r23,65535
10009340:	000d71c0 	call	1000d71c <__mulsi3>
10009344:	b808d43a 	srli	r4,r23,16
10009348:	880b883a 	mov	r5,r17
1000934c:	1421883a 	add	r16,r2,r16
10009350:	000d71c0 	call	1000d71c <__mulsi3>
10009354:	800ed43a 	srli	r7,r16,16
10009358:	80ffffcc 	andi	r3,r16,65535
1000935c:	b5800044 	addi	r22,r22,1
10009360:	11c5883a 	add	r2,r2,r7
10009364:	100e943a 	slli	r7,r2,16
10009368:	1020d43a 	srli	r16,r2,16
1000936c:	38c7883a 	add	r3,r7,r3
10009370:	a8ffff15 	stw	r3,-4(r21)
10009374:	b4bfee16 	blt	r22,r18,10009330 <__alt_data_end+0xf8009330>
10009378:	80000926 	beq	r16,zero,100093a0 <__multadd+0xb4>
1000937c:	98800217 	ldw	r2,8(r19)
10009380:	9080130e 	bge	r18,r2,100093d0 <__multadd+0xe4>
10009384:	90800144 	addi	r2,r18,5
10009388:	1085883a 	add	r2,r2,r2
1000938c:	1085883a 	add	r2,r2,r2
10009390:	9885883a 	add	r2,r19,r2
10009394:	14000015 	stw	r16,0(r2)
10009398:	94800044 	addi	r18,r18,1
1000939c:	9c800415 	stw	r18,16(r19)
100093a0:	9805883a 	mov	r2,r19
100093a4:	dfc00817 	ldw	ra,32(sp)
100093a8:	ddc00717 	ldw	r23,28(sp)
100093ac:	dd800617 	ldw	r22,24(sp)
100093b0:	dd400517 	ldw	r21,20(sp)
100093b4:	dd000417 	ldw	r20,16(sp)
100093b8:	dcc00317 	ldw	r19,12(sp)
100093bc:	dc800217 	ldw	r18,8(sp)
100093c0:	dc400117 	ldw	r17,4(sp)
100093c4:	dc000017 	ldw	r16,0(sp)
100093c8:	dec00904 	addi	sp,sp,36
100093cc:	f800283a 	ret
100093d0:	99400117 	ldw	r5,4(r19)
100093d4:	a009883a 	mov	r4,r20
100093d8:	29400044 	addi	r5,r5,1
100093dc:	000921c0 	call	1000921c <_Balloc>
100093e0:	99800417 	ldw	r6,16(r19)
100093e4:	99400304 	addi	r5,r19,12
100093e8:	11000304 	addi	r4,r2,12
100093ec:	31800084 	addi	r6,r6,2
100093f0:	318d883a 	add	r6,r6,r6
100093f4:	318d883a 	add	r6,r6,r6
100093f8:	1023883a 	mov	r17,r2
100093fc:	0008e500 	call	10008e50 <memcpy>
10009400:	98000a26 	beq	r19,zero,1000942c <__multadd+0x140>
10009404:	98c00117 	ldw	r3,4(r19)
10009408:	a0801317 	ldw	r2,76(r20)
1000940c:	18c7883a 	add	r3,r3,r3
10009410:	18c7883a 	add	r3,r3,r3
10009414:	10c5883a 	add	r2,r2,r3
10009418:	10c00017 	ldw	r3,0(r2)
1000941c:	98c00015 	stw	r3,0(r19)
10009420:	14c00015 	stw	r19,0(r2)
10009424:	8827883a 	mov	r19,r17
10009428:	003fd606 	br	10009384 <__alt_data_end+0xf8009384>
1000942c:	8827883a 	mov	r19,r17
10009430:	003fd406 	br	10009384 <__alt_data_end+0xf8009384>

10009434 <__s2b>:
10009434:	defff904 	addi	sp,sp,-28
10009438:	dc400115 	stw	r17,4(sp)
1000943c:	dc000015 	stw	r16,0(sp)
10009440:	2023883a 	mov	r17,r4
10009444:	2821883a 	mov	r16,r5
10009448:	39000204 	addi	r4,r7,8
1000944c:	01400244 	movi	r5,9
10009450:	dcc00315 	stw	r19,12(sp)
10009454:	dc800215 	stw	r18,8(sp)
10009458:	dfc00615 	stw	ra,24(sp)
1000945c:	dd400515 	stw	r21,20(sp)
10009460:	dd000415 	stw	r20,16(sp)
10009464:	3825883a 	mov	r18,r7
10009468:	3027883a 	mov	r19,r6
1000946c:	00030a80 	call	100030a8 <__divsi3>
10009470:	00c00044 	movi	r3,1
10009474:	000b883a 	mov	r5,zero
10009478:	1880030e 	bge	r3,r2,10009488 <__s2b+0x54>
1000947c:	18c7883a 	add	r3,r3,r3
10009480:	29400044 	addi	r5,r5,1
10009484:	18bffd16 	blt	r3,r2,1000947c <__alt_data_end+0xf800947c>
10009488:	8809883a 	mov	r4,r17
1000948c:	000921c0 	call	1000921c <_Balloc>
10009490:	d8c00717 	ldw	r3,28(sp)
10009494:	10c00515 	stw	r3,20(r2)
10009498:	00c00044 	movi	r3,1
1000949c:	10c00415 	stw	r3,16(r2)
100094a0:	00c00244 	movi	r3,9
100094a4:	1cc0210e 	bge	r3,r19,1000952c <__s2b+0xf8>
100094a8:	80eb883a 	add	r21,r16,r3
100094ac:	a829883a 	mov	r20,r21
100094b0:	84e1883a 	add	r16,r16,r19
100094b4:	a1c00007 	ldb	r7,0(r20)
100094b8:	01800284 	movi	r6,10
100094bc:	a5000044 	addi	r20,r20,1
100094c0:	100b883a 	mov	r5,r2
100094c4:	39fff404 	addi	r7,r7,-48
100094c8:	8809883a 	mov	r4,r17
100094cc:	00092ec0 	call	100092ec <__multadd>
100094d0:	a43ff81e 	bne	r20,r16,100094b4 <__alt_data_end+0xf80094b4>
100094d4:	ace1883a 	add	r16,r21,r19
100094d8:	843ffe04 	addi	r16,r16,-8
100094dc:	9c800a0e 	bge	r19,r18,10009508 <__s2b+0xd4>
100094e0:	94e5c83a 	sub	r18,r18,r19
100094e4:	84a5883a 	add	r18,r16,r18
100094e8:	81c00007 	ldb	r7,0(r16)
100094ec:	01800284 	movi	r6,10
100094f0:	84000044 	addi	r16,r16,1
100094f4:	100b883a 	mov	r5,r2
100094f8:	39fff404 	addi	r7,r7,-48
100094fc:	8809883a 	mov	r4,r17
10009500:	00092ec0 	call	100092ec <__multadd>
10009504:	84bff81e 	bne	r16,r18,100094e8 <__alt_data_end+0xf80094e8>
10009508:	dfc00617 	ldw	ra,24(sp)
1000950c:	dd400517 	ldw	r21,20(sp)
10009510:	dd000417 	ldw	r20,16(sp)
10009514:	dcc00317 	ldw	r19,12(sp)
10009518:	dc800217 	ldw	r18,8(sp)
1000951c:	dc400117 	ldw	r17,4(sp)
10009520:	dc000017 	ldw	r16,0(sp)
10009524:	dec00704 	addi	sp,sp,28
10009528:	f800283a 	ret
1000952c:	84000284 	addi	r16,r16,10
10009530:	1827883a 	mov	r19,r3
10009534:	003fe906 	br	100094dc <__alt_data_end+0xf80094dc>

10009538 <__hi0bits>:
10009538:	20bfffec 	andhi	r2,r4,65535
1000953c:	1000141e 	bne	r2,zero,10009590 <__hi0bits+0x58>
10009540:	2008943a 	slli	r4,r4,16
10009544:	00800404 	movi	r2,16
10009548:	20ffc02c 	andhi	r3,r4,65280
1000954c:	1800021e 	bne	r3,zero,10009558 <__hi0bits+0x20>
10009550:	2008923a 	slli	r4,r4,8
10009554:	10800204 	addi	r2,r2,8
10009558:	20fc002c 	andhi	r3,r4,61440
1000955c:	1800021e 	bne	r3,zero,10009568 <__hi0bits+0x30>
10009560:	2008913a 	slli	r4,r4,4
10009564:	10800104 	addi	r2,r2,4
10009568:	20f0002c 	andhi	r3,r4,49152
1000956c:	1800031e 	bne	r3,zero,1000957c <__hi0bits+0x44>
10009570:	2109883a 	add	r4,r4,r4
10009574:	10800084 	addi	r2,r2,2
10009578:	2109883a 	add	r4,r4,r4
1000957c:	20000316 	blt	r4,zero,1000958c <__hi0bits+0x54>
10009580:	2110002c 	andhi	r4,r4,16384
10009584:	2000041e 	bne	r4,zero,10009598 <__hi0bits+0x60>
10009588:	00800804 	movi	r2,32
1000958c:	f800283a 	ret
10009590:	0005883a 	mov	r2,zero
10009594:	003fec06 	br	10009548 <__alt_data_end+0xf8009548>
10009598:	10800044 	addi	r2,r2,1
1000959c:	f800283a 	ret

100095a0 <__lo0bits>:
100095a0:	20c00017 	ldw	r3,0(r4)
100095a4:	188001cc 	andi	r2,r3,7
100095a8:	10000826 	beq	r2,zero,100095cc <__lo0bits+0x2c>
100095ac:	1880004c 	andi	r2,r3,1
100095b0:	1000211e 	bne	r2,zero,10009638 <__lo0bits+0x98>
100095b4:	1880008c 	andi	r2,r3,2
100095b8:	1000211e 	bne	r2,zero,10009640 <__lo0bits+0xa0>
100095bc:	1806d0ba 	srli	r3,r3,2
100095c0:	00800084 	movi	r2,2
100095c4:	20c00015 	stw	r3,0(r4)
100095c8:	f800283a 	ret
100095cc:	18bfffcc 	andi	r2,r3,65535
100095d0:	10001326 	beq	r2,zero,10009620 <__lo0bits+0x80>
100095d4:	0005883a 	mov	r2,zero
100095d8:	19403fcc 	andi	r5,r3,255
100095dc:	2800021e 	bne	r5,zero,100095e8 <__lo0bits+0x48>
100095e0:	1806d23a 	srli	r3,r3,8
100095e4:	10800204 	addi	r2,r2,8
100095e8:	194003cc 	andi	r5,r3,15
100095ec:	2800021e 	bne	r5,zero,100095f8 <__lo0bits+0x58>
100095f0:	1806d13a 	srli	r3,r3,4
100095f4:	10800104 	addi	r2,r2,4
100095f8:	194000cc 	andi	r5,r3,3
100095fc:	2800021e 	bne	r5,zero,10009608 <__lo0bits+0x68>
10009600:	1806d0ba 	srli	r3,r3,2
10009604:	10800084 	addi	r2,r2,2
10009608:	1940004c 	andi	r5,r3,1
1000960c:	2800081e 	bne	r5,zero,10009630 <__lo0bits+0x90>
10009610:	1806d07a 	srli	r3,r3,1
10009614:	1800051e 	bne	r3,zero,1000962c <__lo0bits+0x8c>
10009618:	00800804 	movi	r2,32
1000961c:	f800283a 	ret
10009620:	1806d43a 	srli	r3,r3,16
10009624:	00800404 	movi	r2,16
10009628:	003feb06 	br	100095d8 <__alt_data_end+0xf80095d8>
1000962c:	10800044 	addi	r2,r2,1
10009630:	20c00015 	stw	r3,0(r4)
10009634:	f800283a 	ret
10009638:	0005883a 	mov	r2,zero
1000963c:	f800283a 	ret
10009640:	1806d07a 	srli	r3,r3,1
10009644:	00800044 	movi	r2,1
10009648:	20c00015 	stw	r3,0(r4)
1000964c:	f800283a 	ret

10009650 <__i2b>:
10009650:	defffd04 	addi	sp,sp,-12
10009654:	dc000015 	stw	r16,0(sp)
10009658:	04000044 	movi	r16,1
1000965c:	dc400115 	stw	r17,4(sp)
10009660:	2823883a 	mov	r17,r5
10009664:	800b883a 	mov	r5,r16
10009668:	dfc00215 	stw	ra,8(sp)
1000966c:	000921c0 	call	1000921c <_Balloc>
10009670:	14400515 	stw	r17,20(r2)
10009674:	14000415 	stw	r16,16(r2)
10009678:	dfc00217 	ldw	ra,8(sp)
1000967c:	dc400117 	ldw	r17,4(sp)
10009680:	dc000017 	ldw	r16,0(sp)
10009684:	dec00304 	addi	sp,sp,12
10009688:	f800283a 	ret

1000968c <__multiply>:
1000968c:	deffef04 	addi	sp,sp,-68
10009690:	dc400815 	stw	r17,32(sp)
10009694:	dc000715 	stw	r16,28(sp)
10009698:	34400417 	ldw	r17,16(r6)
1000969c:	2c000417 	ldw	r16,16(r5)
100096a0:	dd800d15 	stw	r22,52(sp)
100096a4:	dc800915 	stw	r18,36(sp)
100096a8:	dfc01015 	stw	ra,64(sp)
100096ac:	df000f15 	stw	fp,60(sp)
100096b0:	ddc00e15 	stw	r23,56(sp)
100096b4:	dd400c15 	stw	r21,48(sp)
100096b8:	dd000b15 	stw	r20,44(sp)
100096bc:	dcc00a15 	stw	r19,40(sp)
100096c0:	2825883a 	mov	r18,r5
100096c4:	302d883a 	mov	r22,r6
100096c8:	8440050e 	bge	r16,r17,100096e0 <__multiply+0x54>
100096cc:	8007883a 	mov	r3,r16
100096d0:	3025883a 	mov	r18,r6
100096d4:	8821883a 	mov	r16,r17
100096d8:	282d883a 	mov	r22,r5
100096dc:	1823883a 	mov	r17,r3
100096e0:	90800217 	ldw	r2,8(r18)
100096e4:	8447883a 	add	r3,r16,r17
100096e8:	d8c00215 	stw	r3,8(sp)
100096ec:	91400117 	ldw	r5,4(r18)
100096f0:	10c0010e 	bge	r2,r3,100096f8 <__multiply+0x6c>
100096f4:	29400044 	addi	r5,r5,1
100096f8:	000921c0 	call	1000921c <_Balloc>
100096fc:	d8c00217 	ldw	r3,8(sp)
10009700:	d8800615 	stw	r2,24(sp)
10009704:	18eb883a 	add	r21,r3,r3
10009708:	ad6b883a 	add	r21,r21,r21
1000970c:	10c00504 	addi	r3,r2,20
10009710:	1d6b883a 	add	r21,r3,r21
10009714:	d8c00115 	stw	r3,4(sp)
10009718:	dd400315 	stw	r21,12(sp)
1000971c:	1805883a 	mov	r2,r3
10009720:	1d40042e 	bgeu	r3,r21,10009734 <__multiply+0xa8>
10009724:	d8c00317 	ldw	r3,12(sp)
10009728:	10000015 	stw	zero,0(r2)
1000972c:	10800104 	addi	r2,r2,4
10009730:	10fffc36 	bltu	r2,r3,10009724 <__alt_data_end+0xf8009724>
10009734:	8c63883a 	add	r17,r17,r17
10009738:	b5800504 	addi	r22,r22,20
1000973c:	8c63883a 	add	r17,r17,r17
10009740:	94800504 	addi	r18,r18,20
10009744:	8421883a 	add	r16,r16,r16
10009748:	b463883a 	add	r17,r22,r17
1000974c:	8421883a 	add	r16,r16,r16
10009750:	dd800015 	stw	r22,0(sp)
10009754:	dc800415 	stw	r18,16(sp)
10009758:	dc400515 	stw	r17,20(sp)
1000975c:	9429883a 	add	r20,r18,r16
10009760:	b4404f2e 	bgeu	r22,r17,100098a0 <__multiply+0x214>
10009764:	d8c00017 	ldw	r3,0(sp)
10009768:	1c800017 	ldw	r18,0(r3)
1000976c:	947fffcc 	andi	r17,r18,65535
10009770:	88001e26 	beq	r17,zero,100097ec <__multiply+0x160>
10009774:	dd800117 	ldw	r22,4(sp)
10009778:	dd400417 	ldw	r21,16(sp)
1000977c:	0027883a 	mov	r19,zero
10009780:	ac800017 	ldw	r18,0(r21)
10009784:	b4000017 	ldw	r16,0(r22)
10009788:	880b883a 	mov	r5,r17
1000978c:	913fffcc 	andi	r4,r18,65535
10009790:	000d71c0 	call	1000d71c <__mulsi3>
10009794:	9008d43a 	srli	r4,r18,16
10009798:	84bfffcc 	andi	r18,r16,65535
1000979c:	1485883a 	add	r2,r2,r18
100097a0:	14e5883a 	add	r18,r2,r19
100097a4:	8020d43a 	srli	r16,r16,16
100097a8:	9026d43a 	srli	r19,r18,16
100097ac:	880b883a 	mov	r5,r17
100097b0:	000d71c0 	call	1000d71c <__mulsi3>
100097b4:	1405883a 	add	r2,r2,r16
100097b8:	14e1883a 	add	r16,r2,r19
100097bc:	90ffffcc 	andi	r3,r18,65535
100097c0:	8024943a 	slli	r18,r16,16
100097c4:	ad400104 	addi	r21,r21,4
100097c8:	b005883a 	mov	r2,r22
100097cc:	90c6b03a 	or	r3,r18,r3
100097d0:	b0c00015 	stw	r3,0(r22)
100097d4:	8026d43a 	srli	r19,r16,16
100097d8:	b5800104 	addi	r22,r22,4
100097dc:	ad3fe836 	bltu	r21,r20,10009780 <__alt_data_end+0xf8009780>
100097e0:	d8c00017 	ldw	r3,0(sp)
100097e4:	14c00115 	stw	r19,4(r2)
100097e8:	1c800017 	ldw	r18,0(r3)
100097ec:	9024d43a 	srli	r18,r18,16
100097f0:	90002226 	beq	r18,zero,1000987c <__multiply+0x1f0>
100097f4:	d8c00117 	ldw	r3,4(sp)
100097f8:	dd800417 	ldw	r22,16(sp)
100097fc:	002f883a 	mov	r23,zero
10009800:	1f000017 	ldw	fp,0(r3)
10009804:	1823883a 	mov	r17,r3
10009808:	182b883a 	mov	r21,r3
1000980c:	e021883a 	mov	r16,fp
10009810:	00000106 	br	10009818 <__multiply+0x18c>
10009814:	982b883a 	mov	r21,r19
10009818:	b100000b 	ldhu	r4,0(r22)
1000981c:	8020d43a 	srli	r16,r16,16
10009820:	900b883a 	mov	r5,r18
10009824:	000d71c0 	call	1000d71c <__mulsi3>
10009828:	1405883a 	add	r2,r2,r16
1000982c:	15ef883a 	add	r23,r2,r23
10009830:	b804943a 	slli	r2,r23,16
10009834:	e0ffffcc 	andi	r3,fp,65535
10009838:	8c400104 	addi	r17,r17,4
1000983c:	10c6b03a 	or	r3,r2,r3
10009840:	88ffff15 	stw	r3,-4(r17)
10009844:	b5800104 	addi	r22,r22,4
10009848:	b13fff17 	ldw	r4,-4(r22)
1000984c:	acc00104 	addi	r19,r21,4
10009850:	900b883a 	mov	r5,r18
10009854:	2008d43a 	srli	r4,r4,16
10009858:	9c000017 	ldw	r16,0(r19)
1000985c:	000d71c0 	call	1000d71c <__mulsi3>
10009860:	b806d43a 	srli	r3,r23,16
10009864:	813fffcc 	andi	r4,r16,65535
10009868:	1105883a 	add	r2,r2,r4
1000986c:	10f9883a 	add	fp,r2,r3
10009870:	e02ed43a 	srli	r23,fp,16
10009874:	b53fe736 	bltu	r22,r20,10009814 <__alt_data_end+0xf8009814>
10009878:	af000115 	stw	fp,4(r21)
1000987c:	d8c00017 	ldw	r3,0(sp)
10009880:	d9000517 	ldw	r4,20(sp)
10009884:	18c00104 	addi	r3,r3,4
10009888:	d8c00015 	stw	r3,0(sp)
1000988c:	d8c00117 	ldw	r3,4(sp)
10009890:	18c00104 	addi	r3,r3,4
10009894:	d8c00115 	stw	r3,4(sp)
10009898:	d8c00017 	ldw	r3,0(sp)
1000989c:	193fb136 	bltu	r3,r4,10009764 <__alt_data_end+0xf8009764>
100098a0:	d8c00217 	ldw	r3,8(sp)
100098a4:	00c00c0e 	bge	zero,r3,100098d8 <__multiply+0x24c>
100098a8:	d8c00317 	ldw	r3,12(sp)
100098ac:	18bfff17 	ldw	r2,-4(r3)
100098b0:	1d7fff04 	addi	r21,r3,-4
100098b4:	10000326 	beq	r2,zero,100098c4 <__multiply+0x238>
100098b8:	00000706 	br	100098d8 <__multiply+0x24c>
100098bc:	a8800017 	ldw	r2,0(r21)
100098c0:	1000051e 	bne	r2,zero,100098d8 <__multiply+0x24c>
100098c4:	d8c00217 	ldw	r3,8(sp)
100098c8:	ad7fff04 	addi	r21,r21,-4
100098cc:	18ffffc4 	addi	r3,r3,-1
100098d0:	d8c00215 	stw	r3,8(sp)
100098d4:	183ff91e 	bne	r3,zero,100098bc <__alt_data_end+0xf80098bc>
100098d8:	d8c00617 	ldw	r3,24(sp)
100098dc:	d9000217 	ldw	r4,8(sp)
100098e0:	1805883a 	mov	r2,r3
100098e4:	19000415 	stw	r4,16(r3)
100098e8:	dfc01017 	ldw	ra,64(sp)
100098ec:	df000f17 	ldw	fp,60(sp)
100098f0:	ddc00e17 	ldw	r23,56(sp)
100098f4:	dd800d17 	ldw	r22,52(sp)
100098f8:	dd400c17 	ldw	r21,48(sp)
100098fc:	dd000b17 	ldw	r20,44(sp)
10009900:	dcc00a17 	ldw	r19,40(sp)
10009904:	dc800917 	ldw	r18,36(sp)
10009908:	dc400817 	ldw	r17,32(sp)
1000990c:	dc000717 	ldw	r16,28(sp)
10009910:	dec01104 	addi	sp,sp,68
10009914:	f800283a 	ret

10009918 <__pow5mult>:
10009918:	defffa04 	addi	sp,sp,-24
1000991c:	dcc00315 	stw	r19,12(sp)
10009920:	dc000015 	stw	r16,0(sp)
10009924:	dfc00515 	stw	ra,20(sp)
10009928:	dd000415 	stw	r20,16(sp)
1000992c:	dc800215 	stw	r18,8(sp)
10009930:	dc400115 	stw	r17,4(sp)
10009934:	308000cc 	andi	r2,r6,3
10009938:	3021883a 	mov	r16,r6
1000993c:	2027883a 	mov	r19,r4
10009940:	10002f1e 	bne	r2,zero,10009a00 <__pow5mult+0xe8>
10009944:	2825883a 	mov	r18,r5
10009948:	8021d0ba 	srai	r16,r16,2
1000994c:	80001a26 	beq	r16,zero,100099b8 <__pow5mult+0xa0>
10009950:	9c401217 	ldw	r17,72(r19)
10009954:	8800061e 	bne	r17,zero,10009970 <__pow5mult+0x58>
10009958:	00003406 	br	10009a2c <__pow5mult+0x114>
1000995c:	8021d07a 	srai	r16,r16,1
10009960:	80001526 	beq	r16,zero,100099b8 <__pow5mult+0xa0>
10009964:	88800017 	ldw	r2,0(r17)
10009968:	10001c26 	beq	r2,zero,100099dc <__pow5mult+0xc4>
1000996c:	1023883a 	mov	r17,r2
10009970:	8080004c 	andi	r2,r16,1
10009974:	103ff926 	beq	r2,zero,1000995c <__alt_data_end+0xf800995c>
10009978:	880d883a 	mov	r6,r17
1000997c:	900b883a 	mov	r5,r18
10009980:	9809883a 	mov	r4,r19
10009984:	000968c0 	call	1000968c <__multiply>
10009988:	90001b26 	beq	r18,zero,100099f8 <__pow5mult+0xe0>
1000998c:	91000117 	ldw	r4,4(r18)
10009990:	98c01317 	ldw	r3,76(r19)
10009994:	8021d07a 	srai	r16,r16,1
10009998:	2109883a 	add	r4,r4,r4
1000999c:	2109883a 	add	r4,r4,r4
100099a0:	1907883a 	add	r3,r3,r4
100099a4:	19000017 	ldw	r4,0(r3)
100099a8:	91000015 	stw	r4,0(r18)
100099ac:	1c800015 	stw	r18,0(r3)
100099b0:	1025883a 	mov	r18,r2
100099b4:	803feb1e 	bne	r16,zero,10009964 <__alt_data_end+0xf8009964>
100099b8:	9005883a 	mov	r2,r18
100099bc:	dfc00517 	ldw	ra,20(sp)
100099c0:	dd000417 	ldw	r20,16(sp)
100099c4:	dcc00317 	ldw	r19,12(sp)
100099c8:	dc800217 	ldw	r18,8(sp)
100099cc:	dc400117 	ldw	r17,4(sp)
100099d0:	dc000017 	ldw	r16,0(sp)
100099d4:	dec00604 	addi	sp,sp,24
100099d8:	f800283a 	ret
100099dc:	880d883a 	mov	r6,r17
100099e0:	880b883a 	mov	r5,r17
100099e4:	9809883a 	mov	r4,r19
100099e8:	000968c0 	call	1000968c <__multiply>
100099ec:	88800015 	stw	r2,0(r17)
100099f0:	10000015 	stw	zero,0(r2)
100099f4:	003fdd06 	br	1000996c <__alt_data_end+0xf800996c>
100099f8:	1025883a 	mov	r18,r2
100099fc:	003fd706 	br	1000995c <__alt_data_end+0xf800995c>
10009a00:	10bfffc4 	addi	r2,r2,-1
10009a04:	1085883a 	add	r2,r2,r2
10009a08:	00c40074 	movhi	r3,4097
10009a0c:	18cbf904 	addi	r3,r3,12260
10009a10:	1085883a 	add	r2,r2,r2
10009a14:	1885883a 	add	r2,r3,r2
10009a18:	11800017 	ldw	r6,0(r2)
10009a1c:	000f883a 	mov	r7,zero
10009a20:	00092ec0 	call	100092ec <__multadd>
10009a24:	1025883a 	mov	r18,r2
10009a28:	003fc706 	br	10009948 <__alt_data_end+0xf8009948>
10009a2c:	05000044 	movi	r20,1
10009a30:	a00b883a 	mov	r5,r20
10009a34:	9809883a 	mov	r4,r19
10009a38:	000921c0 	call	1000921c <_Balloc>
10009a3c:	1023883a 	mov	r17,r2
10009a40:	00809c44 	movi	r2,625
10009a44:	88800515 	stw	r2,20(r17)
10009a48:	8d000415 	stw	r20,16(r17)
10009a4c:	9c401215 	stw	r17,72(r19)
10009a50:	88000015 	stw	zero,0(r17)
10009a54:	003fc606 	br	10009970 <__alt_data_end+0xf8009970>

10009a58 <__lshift>:
10009a58:	defff904 	addi	sp,sp,-28
10009a5c:	dd400515 	stw	r21,20(sp)
10009a60:	dcc00315 	stw	r19,12(sp)
10009a64:	302bd17a 	srai	r21,r6,5
10009a68:	2cc00417 	ldw	r19,16(r5)
10009a6c:	28800217 	ldw	r2,8(r5)
10009a70:	dd000415 	stw	r20,16(sp)
10009a74:	ace7883a 	add	r19,r21,r19
10009a78:	dc800215 	stw	r18,8(sp)
10009a7c:	dc400115 	stw	r17,4(sp)
10009a80:	dc000015 	stw	r16,0(sp)
10009a84:	dfc00615 	stw	ra,24(sp)
10009a88:	9c000044 	addi	r16,r19,1
10009a8c:	2823883a 	mov	r17,r5
10009a90:	3029883a 	mov	r20,r6
10009a94:	2025883a 	mov	r18,r4
10009a98:	29400117 	ldw	r5,4(r5)
10009a9c:	1400030e 	bge	r2,r16,10009aac <__lshift+0x54>
10009aa0:	1085883a 	add	r2,r2,r2
10009aa4:	29400044 	addi	r5,r5,1
10009aa8:	143ffd16 	blt	r2,r16,10009aa0 <__alt_data_end+0xf8009aa0>
10009aac:	9009883a 	mov	r4,r18
10009ab0:	000921c0 	call	1000921c <_Balloc>
10009ab4:	10c00504 	addi	r3,r2,20
10009ab8:	0540070e 	bge	zero,r21,10009ad8 <__lshift+0x80>
10009abc:	ad6b883a 	add	r21,r21,r21
10009ac0:	ad6b883a 	add	r21,r21,r21
10009ac4:	1809883a 	mov	r4,r3
10009ac8:	1d47883a 	add	r3,r3,r21
10009acc:	20000015 	stw	zero,0(r4)
10009ad0:	21000104 	addi	r4,r4,4
10009ad4:	193ffd1e 	bne	r3,r4,10009acc <__alt_data_end+0xf8009acc>
10009ad8:	8a000417 	ldw	r8,16(r17)
10009adc:	89000504 	addi	r4,r17,20
10009ae0:	a18007cc 	andi	r6,r20,31
10009ae4:	4211883a 	add	r8,r8,r8
10009ae8:	4211883a 	add	r8,r8,r8
10009aec:	2211883a 	add	r8,r4,r8
10009af0:	30002326 	beq	r6,zero,10009b80 <__lshift+0x128>
10009af4:	02400804 	movi	r9,32
10009af8:	4993c83a 	sub	r9,r9,r6
10009afc:	000b883a 	mov	r5,zero
10009b00:	21c00017 	ldw	r7,0(r4)
10009b04:	1815883a 	mov	r10,r3
10009b08:	18c00104 	addi	r3,r3,4
10009b0c:	398e983a 	sll	r7,r7,r6
10009b10:	21000104 	addi	r4,r4,4
10009b14:	394ab03a 	or	r5,r7,r5
10009b18:	197fff15 	stw	r5,-4(r3)
10009b1c:	217fff17 	ldw	r5,-4(r4)
10009b20:	2a4ad83a 	srl	r5,r5,r9
10009b24:	223ff636 	bltu	r4,r8,10009b00 <__alt_data_end+0xf8009b00>
10009b28:	51400115 	stw	r5,4(r10)
10009b2c:	28001a1e 	bne	r5,zero,10009b98 <__lshift+0x140>
10009b30:	843fffc4 	addi	r16,r16,-1
10009b34:	14000415 	stw	r16,16(r2)
10009b38:	88000826 	beq	r17,zero,10009b5c <__lshift+0x104>
10009b3c:	89000117 	ldw	r4,4(r17)
10009b40:	90c01317 	ldw	r3,76(r18)
10009b44:	2109883a 	add	r4,r4,r4
10009b48:	2109883a 	add	r4,r4,r4
10009b4c:	1907883a 	add	r3,r3,r4
10009b50:	19000017 	ldw	r4,0(r3)
10009b54:	89000015 	stw	r4,0(r17)
10009b58:	1c400015 	stw	r17,0(r3)
10009b5c:	dfc00617 	ldw	ra,24(sp)
10009b60:	dd400517 	ldw	r21,20(sp)
10009b64:	dd000417 	ldw	r20,16(sp)
10009b68:	dcc00317 	ldw	r19,12(sp)
10009b6c:	dc800217 	ldw	r18,8(sp)
10009b70:	dc400117 	ldw	r17,4(sp)
10009b74:	dc000017 	ldw	r16,0(sp)
10009b78:	dec00704 	addi	sp,sp,28
10009b7c:	f800283a 	ret
10009b80:	21400017 	ldw	r5,0(r4)
10009b84:	18c00104 	addi	r3,r3,4
10009b88:	21000104 	addi	r4,r4,4
10009b8c:	197fff15 	stw	r5,-4(r3)
10009b90:	223ffb36 	bltu	r4,r8,10009b80 <__alt_data_end+0xf8009b80>
10009b94:	003fe606 	br	10009b30 <__alt_data_end+0xf8009b30>
10009b98:	9c000084 	addi	r16,r19,2
10009b9c:	003fe406 	br	10009b30 <__alt_data_end+0xf8009b30>

10009ba0 <__mcmp>:
10009ba0:	20800417 	ldw	r2,16(r4)
10009ba4:	28c00417 	ldw	r3,16(r5)
10009ba8:	10c5c83a 	sub	r2,r2,r3
10009bac:	1000111e 	bne	r2,zero,10009bf4 <__mcmp+0x54>
10009bb0:	18c7883a 	add	r3,r3,r3
10009bb4:	18c7883a 	add	r3,r3,r3
10009bb8:	21000504 	addi	r4,r4,20
10009bbc:	29400504 	addi	r5,r5,20
10009bc0:	20c5883a 	add	r2,r4,r3
10009bc4:	28cb883a 	add	r5,r5,r3
10009bc8:	00000106 	br	10009bd0 <__mcmp+0x30>
10009bcc:	20800a2e 	bgeu	r4,r2,10009bf8 <__mcmp+0x58>
10009bd0:	10bfff04 	addi	r2,r2,-4
10009bd4:	297fff04 	addi	r5,r5,-4
10009bd8:	11800017 	ldw	r6,0(r2)
10009bdc:	28c00017 	ldw	r3,0(r5)
10009be0:	30fffa26 	beq	r6,r3,10009bcc <__alt_data_end+0xf8009bcc>
10009be4:	30c00236 	bltu	r6,r3,10009bf0 <__mcmp+0x50>
10009be8:	00800044 	movi	r2,1
10009bec:	f800283a 	ret
10009bf0:	00bfffc4 	movi	r2,-1
10009bf4:	f800283a 	ret
10009bf8:	0005883a 	mov	r2,zero
10009bfc:	f800283a 	ret

10009c00 <__mdiff>:
10009c00:	28c00417 	ldw	r3,16(r5)
10009c04:	30800417 	ldw	r2,16(r6)
10009c08:	defffa04 	addi	sp,sp,-24
10009c0c:	dcc00315 	stw	r19,12(sp)
10009c10:	dc800215 	stw	r18,8(sp)
10009c14:	dfc00515 	stw	ra,20(sp)
10009c18:	dd000415 	stw	r20,16(sp)
10009c1c:	dc400115 	stw	r17,4(sp)
10009c20:	dc000015 	stw	r16,0(sp)
10009c24:	1887c83a 	sub	r3,r3,r2
10009c28:	2825883a 	mov	r18,r5
10009c2c:	3027883a 	mov	r19,r6
10009c30:	1800141e 	bne	r3,zero,10009c84 <__mdiff+0x84>
10009c34:	1085883a 	add	r2,r2,r2
10009c38:	1085883a 	add	r2,r2,r2
10009c3c:	2a000504 	addi	r8,r5,20
10009c40:	34000504 	addi	r16,r6,20
10009c44:	4087883a 	add	r3,r8,r2
10009c48:	8085883a 	add	r2,r16,r2
10009c4c:	00000106 	br	10009c54 <__mdiff+0x54>
10009c50:	40c0592e 	bgeu	r8,r3,10009db8 <__mdiff+0x1b8>
10009c54:	18ffff04 	addi	r3,r3,-4
10009c58:	10bfff04 	addi	r2,r2,-4
10009c5c:	19c00017 	ldw	r7,0(r3)
10009c60:	11400017 	ldw	r5,0(r2)
10009c64:	397ffa26 	beq	r7,r5,10009c50 <__alt_data_end+0xf8009c50>
10009c68:	3940592e 	bgeu	r7,r5,10009dd0 <__mdiff+0x1d0>
10009c6c:	9005883a 	mov	r2,r18
10009c70:	4023883a 	mov	r17,r8
10009c74:	9825883a 	mov	r18,r19
10009c78:	05000044 	movi	r20,1
10009c7c:	1027883a 	mov	r19,r2
10009c80:	00000406 	br	10009c94 <__mdiff+0x94>
10009c84:	18005616 	blt	r3,zero,10009de0 <__mdiff+0x1e0>
10009c88:	34400504 	addi	r17,r6,20
10009c8c:	2c000504 	addi	r16,r5,20
10009c90:	0029883a 	mov	r20,zero
10009c94:	91400117 	ldw	r5,4(r18)
10009c98:	000921c0 	call	1000921c <_Balloc>
10009c9c:	92400417 	ldw	r9,16(r18)
10009ca0:	9b000417 	ldw	r12,16(r19)
10009ca4:	12c00504 	addi	r11,r2,20
10009ca8:	4a51883a 	add	r8,r9,r9
10009cac:	6319883a 	add	r12,r12,r12
10009cb0:	4211883a 	add	r8,r8,r8
10009cb4:	6319883a 	add	r12,r12,r12
10009cb8:	15000315 	stw	r20,12(r2)
10009cbc:	8211883a 	add	r8,r16,r8
10009cc0:	8b19883a 	add	r12,r17,r12
10009cc4:	0007883a 	mov	r3,zero
10009cc8:	81400017 	ldw	r5,0(r16)
10009ccc:	89c00017 	ldw	r7,0(r17)
10009cd0:	59800104 	addi	r6,r11,4
10009cd4:	293fffcc 	andi	r4,r5,65535
10009cd8:	20c7883a 	add	r3,r4,r3
10009cdc:	393fffcc 	andi	r4,r7,65535
10009ce0:	1909c83a 	sub	r4,r3,r4
10009ce4:	280ad43a 	srli	r5,r5,16
10009ce8:	380ed43a 	srli	r7,r7,16
10009cec:	2007d43a 	srai	r3,r4,16
10009cf0:	213fffcc 	andi	r4,r4,65535
10009cf4:	29cbc83a 	sub	r5,r5,r7
10009cf8:	28c7883a 	add	r3,r5,r3
10009cfc:	180a943a 	slli	r5,r3,16
10009d00:	8c400104 	addi	r17,r17,4
10009d04:	84000104 	addi	r16,r16,4
10009d08:	2908b03a 	or	r4,r5,r4
10009d0c:	59000015 	stw	r4,0(r11)
10009d10:	1807d43a 	srai	r3,r3,16
10009d14:	3015883a 	mov	r10,r6
10009d18:	3017883a 	mov	r11,r6
10009d1c:	8b3fea36 	bltu	r17,r12,10009cc8 <__alt_data_end+0xf8009cc8>
10009d20:	8200162e 	bgeu	r16,r8,10009d7c <__mdiff+0x17c>
10009d24:	8017883a 	mov	r11,r16
10009d28:	59400017 	ldw	r5,0(r11)
10009d2c:	31800104 	addi	r6,r6,4
10009d30:	5ac00104 	addi	r11,r11,4
10009d34:	293fffcc 	andi	r4,r5,65535
10009d38:	20c7883a 	add	r3,r4,r3
10009d3c:	280ed43a 	srli	r7,r5,16
10009d40:	180bd43a 	srai	r5,r3,16
10009d44:	193fffcc 	andi	r4,r3,65535
10009d48:	3947883a 	add	r3,r7,r5
10009d4c:	180a943a 	slli	r5,r3,16
10009d50:	1807d43a 	srai	r3,r3,16
10009d54:	2908b03a 	or	r4,r5,r4
10009d58:	313fff15 	stw	r4,-4(r6)
10009d5c:	5a3ff236 	bltu	r11,r8,10009d28 <__alt_data_end+0xf8009d28>
10009d60:	0406303a 	nor	r3,zero,r16
10009d64:	1a07883a 	add	r3,r3,r8
10009d68:	1806d0ba 	srli	r3,r3,2
10009d6c:	18c00044 	addi	r3,r3,1
10009d70:	18c7883a 	add	r3,r3,r3
10009d74:	18c7883a 	add	r3,r3,r3
10009d78:	50d5883a 	add	r10,r10,r3
10009d7c:	50ffff04 	addi	r3,r10,-4
10009d80:	2000041e 	bne	r4,zero,10009d94 <__mdiff+0x194>
10009d84:	18ffff04 	addi	r3,r3,-4
10009d88:	19000017 	ldw	r4,0(r3)
10009d8c:	4a7fffc4 	addi	r9,r9,-1
10009d90:	203ffc26 	beq	r4,zero,10009d84 <__alt_data_end+0xf8009d84>
10009d94:	12400415 	stw	r9,16(r2)
10009d98:	dfc00517 	ldw	ra,20(sp)
10009d9c:	dd000417 	ldw	r20,16(sp)
10009da0:	dcc00317 	ldw	r19,12(sp)
10009da4:	dc800217 	ldw	r18,8(sp)
10009da8:	dc400117 	ldw	r17,4(sp)
10009dac:	dc000017 	ldw	r16,0(sp)
10009db0:	dec00604 	addi	sp,sp,24
10009db4:	f800283a 	ret
10009db8:	000b883a 	mov	r5,zero
10009dbc:	000921c0 	call	1000921c <_Balloc>
10009dc0:	00c00044 	movi	r3,1
10009dc4:	10c00415 	stw	r3,16(r2)
10009dc8:	10000515 	stw	zero,20(r2)
10009dcc:	003ff206 	br	10009d98 <__alt_data_end+0xf8009d98>
10009dd0:	8023883a 	mov	r17,r16
10009dd4:	0029883a 	mov	r20,zero
10009dd8:	4021883a 	mov	r16,r8
10009ddc:	003fad06 	br	10009c94 <__alt_data_end+0xf8009c94>
10009de0:	9005883a 	mov	r2,r18
10009de4:	94400504 	addi	r17,r18,20
10009de8:	9c000504 	addi	r16,r19,20
10009dec:	9825883a 	mov	r18,r19
10009df0:	05000044 	movi	r20,1
10009df4:	1027883a 	mov	r19,r2
10009df8:	003fa606 	br	10009c94 <__alt_data_end+0xf8009c94>

10009dfc <__ulp>:
10009dfc:	295ffc2c 	andhi	r5,r5,32752
10009e00:	00bf3034 	movhi	r2,64704
10009e04:	2887883a 	add	r3,r5,r2
10009e08:	00c0020e 	bge	zero,r3,10009e14 <__ulp+0x18>
10009e0c:	0005883a 	mov	r2,zero
10009e10:	f800283a 	ret
10009e14:	00c7c83a 	sub	r3,zero,r3
10009e18:	1807d53a 	srai	r3,r3,20
10009e1c:	008004c4 	movi	r2,19
10009e20:	10c00b0e 	bge	r2,r3,10009e50 <__ulp+0x54>
10009e24:	18bffb04 	addi	r2,r3,-20
10009e28:	01000784 	movi	r4,30
10009e2c:	0007883a 	mov	r3,zero
10009e30:	20800516 	blt	r4,r2,10009e48 <__ulp+0x4c>
10009e34:	010007c4 	movi	r4,31
10009e38:	2089c83a 	sub	r4,r4,r2
10009e3c:	00800044 	movi	r2,1
10009e40:	1104983a 	sll	r2,r2,r4
10009e44:	f800283a 	ret
10009e48:	00800044 	movi	r2,1
10009e4c:	f800283a 	ret
10009e50:	01400234 	movhi	r5,8
10009e54:	28c7d83a 	sra	r3,r5,r3
10009e58:	0005883a 	mov	r2,zero
10009e5c:	f800283a 	ret

10009e60 <__b2d>:
10009e60:	defffa04 	addi	sp,sp,-24
10009e64:	dc000015 	stw	r16,0(sp)
10009e68:	24000417 	ldw	r16,16(r4)
10009e6c:	dc400115 	stw	r17,4(sp)
10009e70:	24400504 	addi	r17,r4,20
10009e74:	8421883a 	add	r16,r16,r16
10009e78:	8421883a 	add	r16,r16,r16
10009e7c:	8c21883a 	add	r16,r17,r16
10009e80:	dc800215 	stw	r18,8(sp)
10009e84:	84bfff17 	ldw	r18,-4(r16)
10009e88:	dd000415 	stw	r20,16(sp)
10009e8c:	dcc00315 	stw	r19,12(sp)
10009e90:	9009883a 	mov	r4,r18
10009e94:	2829883a 	mov	r20,r5
10009e98:	dfc00515 	stw	ra,20(sp)
10009e9c:	00095380 	call	10009538 <__hi0bits>
10009ea0:	00c00804 	movi	r3,32
10009ea4:	1889c83a 	sub	r4,r3,r2
10009ea8:	a1000015 	stw	r4,0(r20)
10009eac:	01000284 	movi	r4,10
10009eb0:	84ffff04 	addi	r19,r16,-4
10009eb4:	20801216 	blt	r4,r2,10009f00 <__b2d+0xa0>
10009eb8:	018002c4 	movi	r6,11
10009ebc:	308dc83a 	sub	r6,r6,r2
10009ec0:	9186d83a 	srl	r3,r18,r6
10009ec4:	18cffc34 	orhi	r3,r3,16368
10009ec8:	8cc0212e 	bgeu	r17,r19,10009f50 <__b2d+0xf0>
10009ecc:	813ffe17 	ldw	r4,-8(r16)
10009ed0:	218cd83a 	srl	r6,r4,r6
10009ed4:	10800544 	addi	r2,r2,21
10009ed8:	9084983a 	sll	r2,r18,r2
10009edc:	1184b03a 	or	r2,r2,r6
10009ee0:	dfc00517 	ldw	ra,20(sp)
10009ee4:	dd000417 	ldw	r20,16(sp)
10009ee8:	dcc00317 	ldw	r19,12(sp)
10009eec:	dc800217 	ldw	r18,8(sp)
10009ef0:	dc400117 	ldw	r17,4(sp)
10009ef4:	dc000017 	ldw	r16,0(sp)
10009ef8:	dec00604 	addi	sp,sp,24
10009efc:	f800283a 	ret
10009f00:	8cc00f2e 	bgeu	r17,r19,10009f40 <__b2d+0xe0>
10009f04:	117ffd44 	addi	r5,r2,-11
10009f08:	80bffe17 	ldw	r2,-8(r16)
10009f0c:	28000e26 	beq	r5,zero,10009f48 <__b2d+0xe8>
10009f10:	1949c83a 	sub	r4,r3,r5
10009f14:	9164983a 	sll	r18,r18,r5
10009f18:	1106d83a 	srl	r3,r2,r4
10009f1c:	81bffe04 	addi	r6,r16,-8
10009f20:	948ffc34 	orhi	r18,r18,16368
10009f24:	90c6b03a 	or	r3,r18,r3
10009f28:	89800e2e 	bgeu	r17,r6,10009f64 <__b2d+0x104>
10009f2c:	81bffd17 	ldw	r6,-12(r16)
10009f30:	1144983a 	sll	r2,r2,r5
10009f34:	310ad83a 	srl	r5,r6,r4
10009f38:	2884b03a 	or	r2,r5,r2
10009f3c:	003fe806 	br	10009ee0 <__alt_data_end+0xf8009ee0>
10009f40:	10bffd44 	addi	r2,r2,-11
10009f44:	1000041e 	bne	r2,zero,10009f58 <__b2d+0xf8>
10009f48:	90cffc34 	orhi	r3,r18,16368
10009f4c:	003fe406 	br	10009ee0 <__alt_data_end+0xf8009ee0>
10009f50:	000d883a 	mov	r6,zero
10009f54:	003fdf06 	br	10009ed4 <__alt_data_end+0xf8009ed4>
10009f58:	90a4983a 	sll	r18,r18,r2
10009f5c:	0005883a 	mov	r2,zero
10009f60:	003ff906 	br	10009f48 <__alt_data_end+0xf8009f48>
10009f64:	1144983a 	sll	r2,r2,r5
10009f68:	003fdd06 	br	10009ee0 <__alt_data_end+0xf8009ee0>

10009f6c <__d2b>:
10009f6c:	defff804 	addi	sp,sp,-32
10009f70:	dc000215 	stw	r16,8(sp)
10009f74:	3021883a 	mov	r16,r6
10009f78:	dc400315 	stw	r17,12(sp)
10009f7c:	8022907a 	slli	r17,r16,1
10009f80:	dd000615 	stw	r20,24(sp)
10009f84:	2829883a 	mov	r20,r5
10009f88:	01400044 	movi	r5,1
10009f8c:	dcc00515 	stw	r19,20(sp)
10009f90:	dc800415 	stw	r18,16(sp)
10009f94:	dfc00715 	stw	ra,28(sp)
10009f98:	3825883a 	mov	r18,r7
10009f9c:	8822d57a 	srli	r17,r17,21
10009fa0:	000921c0 	call	1000921c <_Balloc>
10009fa4:	1027883a 	mov	r19,r2
10009fa8:	00800434 	movhi	r2,16
10009fac:	10bfffc4 	addi	r2,r2,-1
10009fb0:	808c703a 	and	r6,r16,r2
10009fb4:	88000126 	beq	r17,zero,10009fbc <__d2b+0x50>
10009fb8:	31800434 	orhi	r6,r6,16
10009fbc:	d9800015 	stw	r6,0(sp)
10009fc0:	a0002426 	beq	r20,zero,1000a054 <__d2b+0xe8>
10009fc4:	d9000104 	addi	r4,sp,4
10009fc8:	dd000115 	stw	r20,4(sp)
10009fcc:	00095a00 	call	100095a0 <__lo0bits>
10009fd0:	d8c00017 	ldw	r3,0(sp)
10009fd4:	10002f1e 	bne	r2,zero,1000a094 <__d2b+0x128>
10009fd8:	d9000117 	ldw	r4,4(sp)
10009fdc:	99000515 	stw	r4,20(r19)
10009fe0:	1821003a 	cmpeq	r16,r3,zero
10009fe4:	01000084 	movi	r4,2
10009fe8:	2421c83a 	sub	r16,r4,r16
10009fec:	98c00615 	stw	r3,24(r19)
10009ff0:	9c000415 	stw	r16,16(r19)
10009ff4:	88001f1e 	bne	r17,zero,1000a074 <__d2b+0x108>
10009ff8:	10bef384 	addi	r2,r2,-1074
10009ffc:	90800015 	stw	r2,0(r18)
1000a000:	00900034 	movhi	r2,16384
1000a004:	10bfffc4 	addi	r2,r2,-1
1000a008:	8085883a 	add	r2,r16,r2
1000a00c:	1085883a 	add	r2,r2,r2
1000a010:	1085883a 	add	r2,r2,r2
1000a014:	9885883a 	add	r2,r19,r2
1000a018:	11000517 	ldw	r4,20(r2)
1000a01c:	8020917a 	slli	r16,r16,5
1000a020:	00095380 	call	10009538 <__hi0bits>
1000a024:	d8c00817 	ldw	r3,32(sp)
1000a028:	8085c83a 	sub	r2,r16,r2
1000a02c:	18800015 	stw	r2,0(r3)
1000a030:	9805883a 	mov	r2,r19
1000a034:	dfc00717 	ldw	ra,28(sp)
1000a038:	dd000617 	ldw	r20,24(sp)
1000a03c:	dcc00517 	ldw	r19,20(sp)
1000a040:	dc800417 	ldw	r18,16(sp)
1000a044:	dc400317 	ldw	r17,12(sp)
1000a048:	dc000217 	ldw	r16,8(sp)
1000a04c:	dec00804 	addi	sp,sp,32
1000a050:	f800283a 	ret
1000a054:	d809883a 	mov	r4,sp
1000a058:	00095a00 	call	100095a0 <__lo0bits>
1000a05c:	d8c00017 	ldw	r3,0(sp)
1000a060:	04000044 	movi	r16,1
1000a064:	9c000415 	stw	r16,16(r19)
1000a068:	98c00515 	stw	r3,20(r19)
1000a06c:	10800804 	addi	r2,r2,32
1000a070:	883fe126 	beq	r17,zero,10009ff8 <__alt_data_end+0xf8009ff8>
1000a074:	00c00d44 	movi	r3,53
1000a078:	8c7ef344 	addi	r17,r17,-1075
1000a07c:	88a3883a 	add	r17,r17,r2
1000a080:	1885c83a 	sub	r2,r3,r2
1000a084:	d8c00817 	ldw	r3,32(sp)
1000a088:	94400015 	stw	r17,0(r18)
1000a08c:	18800015 	stw	r2,0(r3)
1000a090:	003fe706 	br	1000a030 <__alt_data_end+0xf800a030>
1000a094:	01000804 	movi	r4,32
1000a098:	2089c83a 	sub	r4,r4,r2
1000a09c:	1908983a 	sll	r4,r3,r4
1000a0a0:	d9400117 	ldw	r5,4(sp)
1000a0a4:	1886d83a 	srl	r3,r3,r2
1000a0a8:	2148b03a 	or	r4,r4,r5
1000a0ac:	99000515 	stw	r4,20(r19)
1000a0b0:	d8c00015 	stw	r3,0(sp)
1000a0b4:	003fca06 	br	10009fe0 <__alt_data_end+0xf8009fe0>

1000a0b8 <__ratio>:
1000a0b8:	defff904 	addi	sp,sp,-28
1000a0bc:	dc400315 	stw	r17,12(sp)
1000a0c0:	2823883a 	mov	r17,r5
1000a0c4:	d9400104 	addi	r5,sp,4
1000a0c8:	dfc00615 	stw	ra,24(sp)
1000a0cc:	dcc00515 	stw	r19,20(sp)
1000a0d0:	dc800415 	stw	r18,16(sp)
1000a0d4:	2027883a 	mov	r19,r4
1000a0d8:	dc000215 	stw	r16,8(sp)
1000a0dc:	0009e600 	call	10009e60 <__b2d>
1000a0e0:	d80b883a 	mov	r5,sp
1000a0e4:	8809883a 	mov	r4,r17
1000a0e8:	1025883a 	mov	r18,r2
1000a0ec:	1821883a 	mov	r16,r3
1000a0f0:	0009e600 	call	10009e60 <__b2d>
1000a0f4:	8a000417 	ldw	r8,16(r17)
1000a0f8:	99000417 	ldw	r4,16(r19)
1000a0fc:	d9400117 	ldw	r5,4(sp)
1000a100:	2209c83a 	sub	r4,r4,r8
1000a104:	2010917a 	slli	r8,r4,5
1000a108:	d9000017 	ldw	r4,0(sp)
1000a10c:	2909c83a 	sub	r4,r5,r4
1000a110:	4109883a 	add	r4,r8,r4
1000a114:	01000e0e 	bge	zero,r4,1000a150 <__ratio+0x98>
1000a118:	2008953a 	slli	r4,r4,20
1000a11c:	2421883a 	add	r16,r4,r16
1000a120:	100d883a 	mov	r6,r2
1000a124:	180f883a 	mov	r7,r3
1000a128:	9009883a 	mov	r4,r18
1000a12c:	800b883a 	mov	r5,r16
1000a130:	000dff00 	call	1000dff0 <__divdf3>
1000a134:	dfc00617 	ldw	ra,24(sp)
1000a138:	dcc00517 	ldw	r19,20(sp)
1000a13c:	dc800417 	ldw	r18,16(sp)
1000a140:	dc400317 	ldw	r17,12(sp)
1000a144:	dc000217 	ldw	r16,8(sp)
1000a148:	dec00704 	addi	sp,sp,28
1000a14c:	f800283a 	ret
1000a150:	2008953a 	slli	r4,r4,20
1000a154:	1907c83a 	sub	r3,r3,r4
1000a158:	003ff106 	br	1000a120 <__alt_data_end+0xf800a120>

1000a15c <_mprec_log10>:
1000a15c:	defffe04 	addi	sp,sp,-8
1000a160:	dc000015 	stw	r16,0(sp)
1000a164:	dfc00115 	stw	ra,4(sp)
1000a168:	008005c4 	movi	r2,23
1000a16c:	2021883a 	mov	r16,r4
1000a170:	11000d0e 	bge	r2,r4,1000a1a8 <_mprec_log10+0x4c>
1000a174:	0005883a 	mov	r2,zero
1000a178:	00cffc34 	movhi	r3,16368
1000a17c:	843fffc4 	addi	r16,r16,-1
1000a180:	000d883a 	mov	r6,zero
1000a184:	01d00934 	movhi	r7,16420
1000a188:	1009883a 	mov	r4,r2
1000a18c:	180b883a 	mov	r5,r3
1000a190:	000ec180 	call	1000ec18 <__muldf3>
1000a194:	803ff91e 	bne	r16,zero,1000a17c <__alt_data_end+0xf800a17c>
1000a198:	dfc00117 	ldw	ra,4(sp)
1000a19c:	dc000017 	ldw	r16,0(sp)
1000a1a0:	dec00204 	addi	sp,sp,8
1000a1a4:	f800283a 	ret
1000a1a8:	202090fa 	slli	r16,r4,3
1000a1ac:	00840074 	movhi	r2,4097
1000a1b0:	108c1004 	addi	r2,r2,12352
1000a1b4:	1421883a 	add	r16,r2,r16
1000a1b8:	80800017 	ldw	r2,0(r16)
1000a1bc:	80c00117 	ldw	r3,4(r16)
1000a1c0:	dfc00117 	ldw	ra,4(sp)
1000a1c4:	dc000017 	ldw	r16,0(sp)
1000a1c8:	dec00204 	addi	sp,sp,8
1000a1cc:	f800283a 	ret

1000a1d0 <__copybits>:
1000a1d0:	297fffc4 	addi	r5,r5,-1
1000a1d4:	280fd17a 	srai	r7,r5,5
1000a1d8:	30c00417 	ldw	r3,16(r6)
1000a1dc:	30800504 	addi	r2,r6,20
1000a1e0:	39c00044 	addi	r7,r7,1
1000a1e4:	18c7883a 	add	r3,r3,r3
1000a1e8:	39cf883a 	add	r7,r7,r7
1000a1ec:	18c7883a 	add	r3,r3,r3
1000a1f0:	39cf883a 	add	r7,r7,r7
1000a1f4:	10c7883a 	add	r3,r2,r3
1000a1f8:	21cf883a 	add	r7,r4,r7
1000a1fc:	10c00d2e 	bgeu	r2,r3,1000a234 <__copybits+0x64>
1000a200:	200b883a 	mov	r5,r4
1000a204:	12000017 	ldw	r8,0(r2)
1000a208:	29400104 	addi	r5,r5,4
1000a20c:	10800104 	addi	r2,r2,4
1000a210:	2a3fff15 	stw	r8,-4(r5)
1000a214:	10fffb36 	bltu	r2,r3,1000a204 <__alt_data_end+0xf800a204>
1000a218:	1985c83a 	sub	r2,r3,r6
1000a21c:	10bffac4 	addi	r2,r2,-21
1000a220:	1004d0ba 	srli	r2,r2,2
1000a224:	10800044 	addi	r2,r2,1
1000a228:	1085883a 	add	r2,r2,r2
1000a22c:	1085883a 	add	r2,r2,r2
1000a230:	2089883a 	add	r4,r4,r2
1000a234:	21c0032e 	bgeu	r4,r7,1000a244 <__copybits+0x74>
1000a238:	20000015 	stw	zero,0(r4)
1000a23c:	21000104 	addi	r4,r4,4
1000a240:	21fffd36 	bltu	r4,r7,1000a238 <__alt_data_end+0xf800a238>
1000a244:	f800283a 	ret

1000a248 <__any_on>:
1000a248:	20c00417 	ldw	r3,16(r4)
1000a24c:	2805d17a 	srai	r2,r5,5
1000a250:	21000504 	addi	r4,r4,20
1000a254:	18800d0e 	bge	r3,r2,1000a28c <__any_on+0x44>
1000a258:	18c7883a 	add	r3,r3,r3
1000a25c:	18c7883a 	add	r3,r3,r3
1000a260:	20c7883a 	add	r3,r4,r3
1000a264:	20c0192e 	bgeu	r4,r3,1000a2cc <__any_on+0x84>
1000a268:	18bfff17 	ldw	r2,-4(r3)
1000a26c:	18ffff04 	addi	r3,r3,-4
1000a270:	1000041e 	bne	r2,zero,1000a284 <__any_on+0x3c>
1000a274:	20c0142e 	bgeu	r4,r3,1000a2c8 <__any_on+0x80>
1000a278:	18ffff04 	addi	r3,r3,-4
1000a27c:	19400017 	ldw	r5,0(r3)
1000a280:	283ffc26 	beq	r5,zero,1000a274 <__alt_data_end+0xf800a274>
1000a284:	00800044 	movi	r2,1
1000a288:	f800283a 	ret
1000a28c:	10c00a0e 	bge	r2,r3,1000a2b8 <__any_on+0x70>
1000a290:	1085883a 	add	r2,r2,r2
1000a294:	1085883a 	add	r2,r2,r2
1000a298:	294007cc 	andi	r5,r5,31
1000a29c:	2087883a 	add	r3,r4,r2
1000a2a0:	283ff026 	beq	r5,zero,1000a264 <__alt_data_end+0xf800a264>
1000a2a4:	19800017 	ldw	r6,0(r3)
1000a2a8:	3144d83a 	srl	r2,r6,r5
1000a2ac:	114a983a 	sll	r5,r2,r5
1000a2b0:	317ff41e 	bne	r6,r5,1000a284 <__alt_data_end+0xf800a284>
1000a2b4:	003feb06 	br	1000a264 <__alt_data_end+0xf800a264>
1000a2b8:	1085883a 	add	r2,r2,r2
1000a2bc:	1085883a 	add	r2,r2,r2
1000a2c0:	2087883a 	add	r3,r4,r2
1000a2c4:	003fe706 	br	1000a264 <__alt_data_end+0xf800a264>
1000a2c8:	f800283a 	ret
1000a2cc:	0005883a 	mov	r2,zero
1000a2d0:	f800283a 	ret

1000a2d4 <_realloc_r>:
1000a2d4:	defff604 	addi	sp,sp,-40
1000a2d8:	dc800215 	stw	r18,8(sp)
1000a2dc:	dfc00915 	stw	ra,36(sp)
1000a2e0:	df000815 	stw	fp,32(sp)
1000a2e4:	ddc00715 	stw	r23,28(sp)
1000a2e8:	dd800615 	stw	r22,24(sp)
1000a2ec:	dd400515 	stw	r21,20(sp)
1000a2f0:	dd000415 	stw	r20,16(sp)
1000a2f4:	dcc00315 	stw	r19,12(sp)
1000a2f8:	dc400115 	stw	r17,4(sp)
1000a2fc:	dc000015 	stw	r16,0(sp)
1000a300:	3025883a 	mov	r18,r6
1000a304:	2800b726 	beq	r5,zero,1000a5e4 <_realloc_r+0x310>
1000a308:	282b883a 	mov	r21,r5
1000a30c:	2029883a 	mov	r20,r4
1000a310:	00105840 	call	10010584 <__malloc_lock>
1000a314:	a8bfff17 	ldw	r2,-4(r21)
1000a318:	043fff04 	movi	r16,-4
1000a31c:	90c002c4 	addi	r3,r18,11
1000a320:	01000584 	movi	r4,22
1000a324:	acfffe04 	addi	r19,r21,-8
1000a328:	1420703a 	and	r16,r2,r16
1000a32c:	20c0332e 	bgeu	r4,r3,1000a3fc <_realloc_r+0x128>
1000a330:	047ffe04 	movi	r17,-8
1000a334:	1c62703a 	and	r17,r3,r17
1000a338:	8807883a 	mov	r3,r17
1000a33c:	88005816 	blt	r17,zero,1000a4a0 <_realloc_r+0x1cc>
1000a340:	8c805736 	bltu	r17,r18,1000a4a0 <_realloc_r+0x1cc>
1000a344:	80c0300e 	bge	r16,r3,1000a408 <_realloc_r+0x134>
1000a348:	07040074 	movhi	fp,4097
1000a34c:	e70dbe04 	addi	fp,fp,14072
1000a350:	e1c00217 	ldw	r7,8(fp)
1000a354:	9c09883a 	add	r4,r19,r16
1000a358:	22000117 	ldw	r8,4(r4)
1000a35c:	21c06326 	beq	r4,r7,1000a4ec <_realloc_r+0x218>
1000a360:	017fff84 	movi	r5,-2
1000a364:	414a703a 	and	r5,r8,r5
1000a368:	214b883a 	add	r5,r4,r5
1000a36c:	29800117 	ldw	r6,4(r5)
1000a370:	3180004c 	andi	r6,r6,1
1000a374:	30003f26 	beq	r6,zero,1000a474 <_realloc_r+0x1a0>
1000a378:	1080004c 	andi	r2,r2,1
1000a37c:	10008326 	beq	r2,zero,1000a58c <_realloc_r+0x2b8>
1000a380:	900b883a 	mov	r5,r18
1000a384:	a009883a 	mov	r4,r20
1000a388:	00085600 	call	10008560 <_malloc_r>
1000a38c:	1025883a 	mov	r18,r2
1000a390:	10011e26 	beq	r2,zero,1000a80c <_realloc_r+0x538>
1000a394:	a93fff17 	ldw	r4,-4(r21)
1000a398:	10fffe04 	addi	r3,r2,-8
1000a39c:	00bfff84 	movi	r2,-2
1000a3a0:	2084703a 	and	r2,r4,r2
1000a3a4:	9885883a 	add	r2,r19,r2
1000a3a8:	1880ee26 	beq	r3,r2,1000a764 <_realloc_r+0x490>
1000a3ac:	81bfff04 	addi	r6,r16,-4
1000a3b0:	00800904 	movi	r2,36
1000a3b4:	1180b836 	bltu	r2,r6,1000a698 <_realloc_r+0x3c4>
1000a3b8:	00c004c4 	movi	r3,19
1000a3bc:	19809636 	bltu	r3,r6,1000a618 <_realloc_r+0x344>
1000a3c0:	9005883a 	mov	r2,r18
1000a3c4:	a807883a 	mov	r3,r21
1000a3c8:	19000017 	ldw	r4,0(r3)
1000a3cc:	11000015 	stw	r4,0(r2)
1000a3d0:	19000117 	ldw	r4,4(r3)
1000a3d4:	11000115 	stw	r4,4(r2)
1000a3d8:	18c00217 	ldw	r3,8(r3)
1000a3dc:	10c00215 	stw	r3,8(r2)
1000a3e0:	a80b883a 	mov	r5,r21
1000a3e4:	a009883a 	mov	r4,r20
1000a3e8:	00079680 	call	10007968 <_free_r>
1000a3ec:	a009883a 	mov	r4,r20
1000a3f0:	00105a80 	call	100105a8 <__malloc_unlock>
1000a3f4:	9005883a 	mov	r2,r18
1000a3f8:	00001206 	br	1000a444 <_realloc_r+0x170>
1000a3fc:	00c00404 	movi	r3,16
1000a400:	1823883a 	mov	r17,r3
1000a404:	003fce06 	br	1000a340 <__alt_data_end+0xf800a340>
1000a408:	a825883a 	mov	r18,r21
1000a40c:	8445c83a 	sub	r2,r16,r17
1000a410:	00c003c4 	movi	r3,15
1000a414:	18802636 	bltu	r3,r2,1000a4b0 <_realloc_r+0x1dc>
1000a418:	99800117 	ldw	r6,4(r19)
1000a41c:	9c07883a 	add	r3,r19,r16
1000a420:	3180004c 	andi	r6,r6,1
1000a424:	3420b03a 	or	r16,r6,r16
1000a428:	9c000115 	stw	r16,4(r19)
1000a42c:	18800117 	ldw	r2,4(r3)
1000a430:	10800054 	ori	r2,r2,1
1000a434:	18800115 	stw	r2,4(r3)
1000a438:	a009883a 	mov	r4,r20
1000a43c:	00105a80 	call	100105a8 <__malloc_unlock>
1000a440:	9005883a 	mov	r2,r18
1000a444:	dfc00917 	ldw	ra,36(sp)
1000a448:	df000817 	ldw	fp,32(sp)
1000a44c:	ddc00717 	ldw	r23,28(sp)
1000a450:	dd800617 	ldw	r22,24(sp)
1000a454:	dd400517 	ldw	r21,20(sp)
1000a458:	dd000417 	ldw	r20,16(sp)
1000a45c:	dcc00317 	ldw	r19,12(sp)
1000a460:	dc800217 	ldw	r18,8(sp)
1000a464:	dc400117 	ldw	r17,4(sp)
1000a468:	dc000017 	ldw	r16,0(sp)
1000a46c:	dec00a04 	addi	sp,sp,40
1000a470:	f800283a 	ret
1000a474:	017fff04 	movi	r5,-4
1000a478:	414a703a 	and	r5,r8,r5
1000a47c:	814d883a 	add	r6,r16,r5
1000a480:	30c01f16 	blt	r6,r3,1000a500 <_realloc_r+0x22c>
1000a484:	20800317 	ldw	r2,12(r4)
1000a488:	20c00217 	ldw	r3,8(r4)
1000a48c:	a825883a 	mov	r18,r21
1000a490:	3021883a 	mov	r16,r6
1000a494:	18800315 	stw	r2,12(r3)
1000a498:	10c00215 	stw	r3,8(r2)
1000a49c:	003fdb06 	br	1000a40c <__alt_data_end+0xf800a40c>
1000a4a0:	00800304 	movi	r2,12
1000a4a4:	a0800015 	stw	r2,0(r20)
1000a4a8:	0005883a 	mov	r2,zero
1000a4ac:	003fe506 	br	1000a444 <__alt_data_end+0xf800a444>
1000a4b0:	98c00117 	ldw	r3,4(r19)
1000a4b4:	9c4b883a 	add	r5,r19,r17
1000a4b8:	11000054 	ori	r4,r2,1
1000a4bc:	18c0004c 	andi	r3,r3,1
1000a4c0:	1c62b03a 	or	r17,r3,r17
1000a4c4:	9c400115 	stw	r17,4(r19)
1000a4c8:	29000115 	stw	r4,4(r5)
1000a4cc:	2885883a 	add	r2,r5,r2
1000a4d0:	10c00117 	ldw	r3,4(r2)
1000a4d4:	29400204 	addi	r5,r5,8
1000a4d8:	a009883a 	mov	r4,r20
1000a4dc:	18c00054 	ori	r3,r3,1
1000a4e0:	10c00115 	stw	r3,4(r2)
1000a4e4:	00079680 	call	10007968 <_free_r>
1000a4e8:	003fd306 	br	1000a438 <__alt_data_end+0xf800a438>
1000a4ec:	017fff04 	movi	r5,-4
1000a4f0:	414a703a 	and	r5,r8,r5
1000a4f4:	89800404 	addi	r6,r17,16
1000a4f8:	8151883a 	add	r8,r16,r5
1000a4fc:	4180590e 	bge	r8,r6,1000a664 <_realloc_r+0x390>
1000a500:	1080004c 	andi	r2,r2,1
1000a504:	103f9e1e 	bne	r2,zero,1000a380 <__alt_data_end+0xf800a380>
1000a508:	adbffe17 	ldw	r22,-8(r21)
1000a50c:	00bfff04 	movi	r2,-4
1000a510:	9dadc83a 	sub	r22,r19,r22
1000a514:	b1800117 	ldw	r6,4(r22)
1000a518:	3084703a 	and	r2,r6,r2
1000a51c:	20002026 	beq	r4,zero,1000a5a0 <_realloc_r+0x2cc>
1000a520:	80af883a 	add	r23,r16,r2
1000a524:	b96f883a 	add	r23,r23,r5
1000a528:	21c05f26 	beq	r4,r7,1000a6a8 <_realloc_r+0x3d4>
1000a52c:	b8c01c16 	blt	r23,r3,1000a5a0 <_realloc_r+0x2cc>
1000a530:	20800317 	ldw	r2,12(r4)
1000a534:	20c00217 	ldw	r3,8(r4)
1000a538:	81bfff04 	addi	r6,r16,-4
1000a53c:	01000904 	movi	r4,36
1000a540:	18800315 	stw	r2,12(r3)
1000a544:	10c00215 	stw	r3,8(r2)
1000a548:	b0c00217 	ldw	r3,8(r22)
1000a54c:	b0800317 	ldw	r2,12(r22)
1000a550:	b4800204 	addi	r18,r22,8
1000a554:	18800315 	stw	r2,12(r3)
1000a558:	10c00215 	stw	r3,8(r2)
1000a55c:	21801b36 	bltu	r4,r6,1000a5cc <_realloc_r+0x2f8>
1000a560:	008004c4 	movi	r2,19
1000a564:	1180352e 	bgeu	r2,r6,1000a63c <_realloc_r+0x368>
1000a568:	a8800017 	ldw	r2,0(r21)
1000a56c:	b0800215 	stw	r2,8(r22)
1000a570:	a8800117 	ldw	r2,4(r21)
1000a574:	b0800315 	stw	r2,12(r22)
1000a578:	008006c4 	movi	r2,27
1000a57c:	11807f36 	bltu	r2,r6,1000a77c <_realloc_r+0x4a8>
1000a580:	b0800404 	addi	r2,r22,16
1000a584:	ad400204 	addi	r21,r21,8
1000a588:	00002d06 	br	1000a640 <_realloc_r+0x36c>
1000a58c:	adbffe17 	ldw	r22,-8(r21)
1000a590:	00bfff04 	movi	r2,-4
1000a594:	9dadc83a 	sub	r22,r19,r22
1000a598:	b1000117 	ldw	r4,4(r22)
1000a59c:	2084703a 	and	r2,r4,r2
1000a5a0:	b03f7726 	beq	r22,zero,1000a380 <__alt_data_end+0xf800a380>
1000a5a4:	80af883a 	add	r23,r16,r2
1000a5a8:	b8ff7516 	blt	r23,r3,1000a380 <__alt_data_end+0xf800a380>
1000a5ac:	b0800317 	ldw	r2,12(r22)
1000a5b0:	b0c00217 	ldw	r3,8(r22)
1000a5b4:	81bfff04 	addi	r6,r16,-4
1000a5b8:	01000904 	movi	r4,36
1000a5bc:	18800315 	stw	r2,12(r3)
1000a5c0:	10c00215 	stw	r3,8(r2)
1000a5c4:	b4800204 	addi	r18,r22,8
1000a5c8:	21bfe52e 	bgeu	r4,r6,1000a560 <__alt_data_end+0xf800a560>
1000a5cc:	a80b883a 	mov	r5,r21
1000a5d0:	9009883a 	mov	r4,r18
1000a5d4:	0008f980 	call	10008f98 <memmove>
1000a5d8:	b821883a 	mov	r16,r23
1000a5dc:	b027883a 	mov	r19,r22
1000a5e0:	003f8a06 	br	1000a40c <__alt_data_end+0xf800a40c>
1000a5e4:	300b883a 	mov	r5,r6
1000a5e8:	dfc00917 	ldw	ra,36(sp)
1000a5ec:	df000817 	ldw	fp,32(sp)
1000a5f0:	ddc00717 	ldw	r23,28(sp)
1000a5f4:	dd800617 	ldw	r22,24(sp)
1000a5f8:	dd400517 	ldw	r21,20(sp)
1000a5fc:	dd000417 	ldw	r20,16(sp)
1000a600:	dcc00317 	ldw	r19,12(sp)
1000a604:	dc800217 	ldw	r18,8(sp)
1000a608:	dc400117 	ldw	r17,4(sp)
1000a60c:	dc000017 	ldw	r16,0(sp)
1000a610:	dec00a04 	addi	sp,sp,40
1000a614:	00085601 	jmpi	10008560 <_malloc_r>
1000a618:	a8c00017 	ldw	r3,0(r21)
1000a61c:	90c00015 	stw	r3,0(r18)
1000a620:	a8c00117 	ldw	r3,4(r21)
1000a624:	90c00115 	stw	r3,4(r18)
1000a628:	00c006c4 	movi	r3,27
1000a62c:	19804536 	bltu	r3,r6,1000a744 <_realloc_r+0x470>
1000a630:	90800204 	addi	r2,r18,8
1000a634:	a8c00204 	addi	r3,r21,8
1000a638:	003f6306 	br	1000a3c8 <__alt_data_end+0xf800a3c8>
1000a63c:	9005883a 	mov	r2,r18
1000a640:	a8c00017 	ldw	r3,0(r21)
1000a644:	b821883a 	mov	r16,r23
1000a648:	b027883a 	mov	r19,r22
1000a64c:	10c00015 	stw	r3,0(r2)
1000a650:	a8c00117 	ldw	r3,4(r21)
1000a654:	10c00115 	stw	r3,4(r2)
1000a658:	a8c00217 	ldw	r3,8(r21)
1000a65c:	10c00215 	stw	r3,8(r2)
1000a660:	003f6a06 	br	1000a40c <__alt_data_end+0xf800a40c>
1000a664:	9c67883a 	add	r19,r19,r17
1000a668:	4445c83a 	sub	r2,r8,r17
1000a66c:	e4c00215 	stw	r19,8(fp)
1000a670:	10800054 	ori	r2,r2,1
1000a674:	98800115 	stw	r2,4(r19)
1000a678:	a8bfff17 	ldw	r2,-4(r21)
1000a67c:	a009883a 	mov	r4,r20
1000a680:	1080004c 	andi	r2,r2,1
1000a684:	1462b03a 	or	r17,r2,r17
1000a688:	ac7fff15 	stw	r17,-4(r21)
1000a68c:	00105a80 	call	100105a8 <__malloc_unlock>
1000a690:	a805883a 	mov	r2,r21
1000a694:	003f6b06 	br	1000a444 <__alt_data_end+0xf800a444>
1000a698:	a80b883a 	mov	r5,r21
1000a69c:	9009883a 	mov	r4,r18
1000a6a0:	0008f980 	call	10008f98 <memmove>
1000a6a4:	003f4e06 	br	1000a3e0 <__alt_data_end+0xf800a3e0>
1000a6a8:	89000404 	addi	r4,r17,16
1000a6ac:	b93fbc16 	blt	r23,r4,1000a5a0 <__alt_data_end+0xf800a5a0>
1000a6b0:	b0800317 	ldw	r2,12(r22)
1000a6b4:	b0c00217 	ldw	r3,8(r22)
1000a6b8:	81bfff04 	addi	r6,r16,-4
1000a6bc:	01000904 	movi	r4,36
1000a6c0:	18800315 	stw	r2,12(r3)
1000a6c4:	10c00215 	stw	r3,8(r2)
1000a6c8:	b4800204 	addi	r18,r22,8
1000a6cc:	21804336 	bltu	r4,r6,1000a7dc <_realloc_r+0x508>
1000a6d0:	008004c4 	movi	r2,19
1000a6d4:	11803f2e 	bgeu	r2,r6,1000a7d4 <_realloc_r+0x500>
1000a6d8:	a8800017 	ldw	r2,0(r21)
1000a6dc:	b0800215 	stw	r2,8(r22)
1000a6e0:	a8800117 	ldw	r2,4(r21)
1000a6e4:	b0800315 	stw	r2,12(r22)
1000a6e8:	008006c4 	movi	r2,27
1000a6ec:	11803f36 	bltu	r2,r6,1000a7ec <_realloc_r+0x518>
1000a6f0:	b0800404 	addi	r2,r22,16
1000a6f4:	ad400204 	addi	r21,r21,8
1000a6f8:	a8c00017 	ldw	r3,0(r21)
1000a6fc:	10c00015 	stw	r3,0(r2)
1000a700:	a8c00117 	ldw	r3,4(r21)
1000a704:	10c00115 	stw	r3,4(r2)
1000a708:	a8c00217 	ldw	r3,8(r21)
1000a70c:	10c00215 	stw	r3,8(r2)
1000a710:	b447883a 	add	r3,r22,r17
1000a714:	bc45c83a 	sub	r2,r23,r17
1000a718:	e0c00215 	stw	r3,8(fp)
1000a71c:	10800054 	ori	r2,r2,1
1000a720:	18800115 	stw	r2,4(r3)
1000a724:	b0800117 	ldw	r2,4(r22)
1000a728:	a009883a 	mov	r4,r20
1000a72c:	1080004c 	andi	r2,r2,1
1000a730:	1462b03a 	or	r17,r2,r17
1000a734:	b4400115 	stw	r17,4(r22)
1000a738:	00105a80 	call	100105a8 <__malloc_unlock>
1000a73c:	9005883a 	mov	r2,r18
1000a740:	003f4006 	br	1000a444 <__alt_data_end+0xf800a444>
1000a744:	a8c00217 	ldw	r3,8(r21)
1000a748:	90c00215 	stw	r3,8(r18)
1000a74c:	a8c00317 	ldw	r3,12(r21)
1000a750:	90c00315 	stw	r3,12(r18)
1000a754:	30801126 	beq	r6,r2,1000a79c <_realloc_r+0x4c8>
1000a758:	90800404 	addi	r2,r18,16
1000a75c:	a8c00404 	addi	r3,r21,16
1000a760:	003f1906 	br	1000a3c8 <__alt_data_end+0xf800a3c8>
1000a764:	90ffff17 	ldw	r3,-4(r18)
1000a768:	00bfff04 	movi	r2,-4
1000a76c:	a825883a 	mov	r18,r21
1000a770:	1884703a 	and	r2,r3,r2
1000a774:	80a1883a 	add	r16,r16,r2
1000a778:	003f2406 	br	1000a40c <__alt_data_end+0xf800a40c>
1000a77c:	a8800217 	ldw	r2,8(r21)
1000a780:	b0800415 	stw	r2,16(r22)
1000a784:	a8800317 	ldw	r2,12(r21)
1000a788:	b0800515 	stw	r2,20(r22)
1000a78c:	31000a26 	beq	r6,r4,1000a7b8 <_realloc_r+0x4e4>
1000a790:	b0800604 	addi	r2,r22,24
1000a794:	ad400404 	addi	r21,r21,16
1000a798:	003fa906 	br	1000a640 <__alt_data_end+0xf800a640>
1000a79c:	a9000417 	ldw	r4,16(r21)
1000a7a0:	90800604 	addi	r2,r18,24
1000a7a4:	a8c00604 	addi	r3,r21,24
1000a7a8:	91000415 	stw	r4,16(r18)
1000a7ac:	a9000517 	ldw	r4,20(r21)
1000a7b0:	91000515 	stw	r4,20(r18)
1000a7b4:	003f0406 	br	1000a3c8 <__alt_data_end+0xf800a3c8>
1000a7b8:	a8c00417 	ldw	r3,16(r21)
1000a7bc:	ad400604 	addi	r21,r21,24
1000a7c0:	b0800804 	addi	r2,r22,32
1000a7c4:	b0c00615 	stw	r3,24(r22)
1000a7c8:	a8ffff17 	ldw	r3,-4(r21)
1000a7cc:	b0c00715 	stw	r3,28(r22)
1000a7d0:	003f9b06 	br	1000a640 <__alt_data_end+0xf800a640>
1000a7d4:	9005883a 	mov	r2,r18
1000a7d8:	003fc706 	br	1000a6f8 <__alt_data_end+0xf800a6f8>
1000a7dc:	a80b883a 	mov	r5,r21
1000a7e0:	9009883a 	mov	r4,r18
1000a7e4:	0008f980 	call	10008f98 <memmove>
1000a7e8:	003fc906 	br	1000a710 <__alt_data_end+0xf800a710>
1000a7ec:	a8800217 	ldw	r2,8(r21)
1000a7f0:	b0800415 	stw	r2,16(r22)
1000a7f4:	a8800317 	ldw	r2,12(r21)
1000a7f8:	b0800515 	stw	r2,20(r22)
1000a7fc:	31000726 	beq	r6,r4,1000a81c <_realloc_r+0x548>
1000a800:	b0800604 	addi	r2,r22,24
1000a804:	ad400404 	addi	r21,r21,16
1000a808:	003fbb06 	br	1000a6f8 <__alt_data_end+0xf800a6f8>
1000a80c:	a009883a 	mov	r4,r20
1000a810:	00105a80 	call	100105a8 <__malloc_unlock>
1000a814:	0005883a 	mov	r2,zero
1000a818:	003f0a06 	br	1000a444 <__alt_data_end+0xf800a444>
1000a81c:	a8c00417 	ldw	r3,16(r21)
1000a820:	ad400604 	addi	r21,r21,24
1000a824:	b0800804 	addi	r2,r22,32
1000a828:	b0c00615 	stw	r3,24(r22)
1000a82c:	a8ffff17 	ldw	r3,-4(r21)
1000a830:	b0c00715 	stw	r3,28(r22)
1000a834:	003fb006 	br	1000a6f8 <__alt_data_end+0xf800a6f8>

1000a838 <__fpclassifyd>:
1000a838:	00a00034 	movhi	r2,32768
1000a83c:	10bfffc4 	addi	r2,r2,-1
1000a840:	2884703a 	and	r2,r5,r2
1000a844:	10000726 	beq	r2,zero,1000a864 <__fpclassifyd+0x2c>
1000a848:	00fffc34 	movhi	r3,65520
1000a84c:	019ff834 	movhi	r6,32736
1000a850:	28c7883a 	add	r3,r5,r3
1000a854:	31bfffc4 	addi	r6,r6,-1
1000a858:	30c00536 	bltu	r6,r3,1000a870 <__fpclassifyd+0x38>
1000a85c:	00800104 	movi	r2,4
1000a860:	f800283a 	ret
1000a864:	2000021e 	bne	r4,zero,1000a870 <__fpclassifyd+0x38>
1000a868:	00800084 	movi	r2,2
1000a86c:	f800283a 	ret
1000a870:	00dffc34 	movhi	r3,32752
1000a874:	019ff834 	movhi	r6,32736
1000a878:	28cb883a 	add	r5,r5,r3
1000a87c:	31bfffc4 	addi	r6,r6,-1
1000a880:	317ff62e 	bgeu	r6,r5,1000a85c <__alt_data_end+0xf800a85c>
1000a884:	01400434 	movhi	r5,16
1000a888:	297fffc4 	addi	r5,r5,-1
1000a88c:	28800236 	bltu	r5,r2,1000a898 <__fpclassifyd+0x60>
1000a890:	008000c4 	movi	r2,3
1000a894:	f800283a 	ret
1000a898:	10c00226 	beq	r2,r3,1000a8a4 <__fpclassifyd+0x6c>
1000a89c:	0005883a 	mov	r2,zero
1000a8a0:	f800283a 	ret
1000a8a4:	2005003a 	cmpeq	r2,r4,zero
1000a8a8:	f800283a 	ret

1000a8ac <_sbrk_r>:
1000a8ac:	defffd04 	addi	sp,sp,-12
1000a8b0:	dc000015 	stw	r16,0(sp)
1000a8b4:	04040074 	movhi	r16,4097
1000a8b8:	dc400115 	stw	r17,4(sp)
1000a8bc:	841a3004 	addi	r16,r16,26816
1000a8c0:	2023883a 	mov	r17,r4
1000a8c4:	2809883a 	mov	r4,r5
1000a8c8:	dfc00215 	stw	ra,8(sp)
1000a8cc:	80000015 	stw	zero,0(r16)
1000a8d0:	00107900 	call	10010790 <sbrk>
1000a8d4:	00ffffc4 	movi	r3,-1
1000a8d8:	10c00526 	beq	r2,r3,1000a8f0 <_sbrk_r+0x44>
1000a8dc:	dfc00217 	ldw	ra,8(sp)
1000a8e0:	dc400117 	ldw	r17,4(sp)
1000a8e4:	dc000017 	ldw	r16,0(sp)
1000a8e8:	dec00304 	addi	sp,sp,12
1000a8ec:	f800283a 	ret
1000a8f0:	80c00017 	ldw	r3,0(r16)
1000a8f4:	183ff926 	beq	r3,zero,1000a8dc <__alt_data_end+0xf800a8dc>
1000a8f8:	88c00015 	stw	r3,0(r17)
1000a8fc:	003ff706 	br	1000a8dc <__alt_data_end+0xf800a8dc>

1000a900 <__sread>:
1000a900:	defffe04 	addi	sp,sp,-8
1000a904:	dc000015 	stw	r16,0(sp)
1000a908:	2821883a 	mov	r16,r5
1000a90c:	2940038f 	ldh	r5,14(r5)
1000a910:	dfc00115 	stw	ra,4(sp)
1000a914:	000c7bc0 	call	1000c7bc <_read_r>
1000a918:	10000716 	blt	r2,zero,1000a938 <__sread+0x38>
1000a91c:	80c01417 	ldw	r3,80(r16)
1000a920:	1887883a 	add	r3,r3,r2
1000a924:	80c01415 	stw	r3,80(r16)
1000a928:	dfc00117 	ldw	ra,4(sp)
1000a92c:	dc000017 	ldw	r16,0(sp)
1000a930:	dec00204 	addi	sp,sp,8
1000a934:	f800283a 	ret
1000a938:	80c0030b 	ldhu	r3,12(r16)
1000a93c:	18fbffcc 	andi	r3,r3,61439
1000a940:	80c0030d 	sth	r3,12(r16)
1000a944:	dfc00117 	ldw	ra,4(sp)
1000a948:	dc000017 	ldw	r16,0(sp)
1000a94c:	dec00204 	addi	sp,sp,8
1000a950:	f800283a 	ret

1000a954 <__seofread>:
1000a954:	0005883a 	mov	r2,zero
1000a958:	f800283a 	ret

1000a95c <__swrite>:
1000a95c:	2880030b 	ldhu	r2,12(r5)
1000a960:	defffb04 	addi	sp,sp,-20
1000a964:	dcc00315 	stw	r19,12(sp)
1000a968:	dc800215 	stw	r18,8(sp)
1000a96c:	dc400115 	stw	r17,4(sp)
1000a970:	dc000015 	stw	r16,0(sp)
1000a974:	dfc00415 	stw	ra,16(sp)
1000a978:	10c0400c 	andi	r3,r2,256
1000a97c:	2821883a 	mov	r16,r5
1000a980:	2023883a 	mov	r17,r4
1000a984:	3025883a 	mov	r18,r6
1000a988:	3827883a 	mov	r19,r7
1000a98c:	18000526 	beq	r3,zero,1000a9a4 <__swrite+0x48>
1000a990:	2940038f 	ldh	r5,14(r5)
1000a994:	01c00084 	movi	r7,2
1000a998:	000d883a 	mov	r6,zero
1000a99c:	000c75c0 	call	1000c75c <_lseek_r>
1000a9a0:	8080030b 	ldhu	r2,12(r16)
1000a9a4:	8140038f 	ldh	r5,14(r16)
1000a9a8:	10bbffcc 	andi	r2,r2,61439
1000a9ac:	980f883a 	mov	r7,r19
1000a9b0:	900d883a 	mov	r6,r18
1000a9b4:	8809883a 	mov	r4,r17
1000a9b8:	8080030d 	sth	r2,12(r16)
1000a9bc:	dfc00417 	ldw	ra,16(sp)
1000a9c0:	dcc00317 	ldw	r19,12(sp)
1000a9c4:	dc800217 	ldw	r18,8(sp)
1000a9c8:	dc400117 	ldw	r17,4(sp)
1000a9cc:	dc000017 	ldw	r16,0(sp)
1000a9d0:	dec00504 	addi	sp,sp,20
1000a9d4:	000c2101 	jmpi	1000c210 <_write_r>

1000a9d8 <__sseek>:
1000a9d8:	defffe04 	addi	sp,sp,-8
1000a9dc:	dc000015 	stw	r16,0(sp)
1000a9e0:	2821883a 	mov	r16,r5
1000a9e4:	2940038f 	ldh	r5,14(r5)
1000a9e8:	dfc00115 	stw	ra,4(sp)
1000a9ec:	000c75c0 	call	1000c75c <_lseek_r>
1000a9f0:	00ffffc4 	movi	r3,-1
1000a9f4:	10c00826 	beq	r2,r3,1000aa18 <__sseek+0x40>
1000a9f8:	80c0030b 	ldhu	r3,12(r16)
1000a9fc:	80801415 	stw	r2,80(r16)
1000aa00:	18c40014 	ori	r3,r3,4096
1000aa04:	80c0030d 	sth	r3,12(r16)
1000aa08:	dfc00117 	ldw	ra,4(sp)
1000aa0c:	dc000017 	ldw	r16,0(sp)
1000aa10:	dec00204 	addi	sp,sp,8
1000aa14:	f800283a 	ret
1000aa18:	80c0030b 	ldhu	r3,12(r16)
1000aa1c:	18fbffcc 	andi	r3,r3,61439
1000aa20:	80c0030d 	sth	r3,12(r16)
1000aa24:	dfc00117 	ldw	ra,4(sp)
1000aa28:	dc000017 	ldw	r16,0(sp)
1000aa2c:	dec00204 	addi	sp,sp,8
1000aa30:	f800283a 	ret

1000aa34 <__sclose>:
1000aa34:	2940038f 	ldh	r5,14(r5)
1000aa38:	000c2701 	jmpi	1000c270 <_close_r>

1000aa3c <strcmp>:
1000aa3c:	2144b03a 	or	r2,r4,r5
1000aa40:	108000cc 	andi	r2,r2,3
1000aa44:	1000171e 	bne	r2,zero,1000aaa4 <strcmp+0x68>
1000aa48:	20800017 	ldw	r2,0(r4)
1000aa4c:	28c00017 	ldw	r3,0(r5)
1000aa50:	10c0141e 	bne	r2,r3,1000aaa4 <strcmp+0x68>
1000aa54:	027fbff4 	movhi	r9,65279
1000aa58:	4a7fbfc4 	addi	r9,r9,-257
1000aa5c:	0086303a 	nor	r3,zero,r2
1000aa60:	02202074 	movhi	r8,32897
1000aa64:	1245883a 	add	r2,r2,r9
1000aa68:	42202004 	addi	r8,r8,-32640
1000aa6c:	10c4703a 	and	r2,r2,r3
1000aa70:	1204703a 	and	r2,r2,r8
1000aa74:	10000226 	beq	r2,zero,1000aa80 <strcmp+0x44>
1000aa78:	00002306 	br	1000ab08 <strcmp+0xcc>
1000aa7c:	1000221e 	bne	r2,zero,1000ab08 <strcmp+0xcc>
1000aa80:	21000104 	addi	r4,r4,4
1000aa84:	20c00017 	ldw	r3,0(r4)
1000aa88:	29400104 	addi	r5,r5,4
1000aa8c:	29800017 	ldw	r6,0(r5)
1000aa90:	1a4f883a 	add	r7,r3,r9
1000aa94:	00c4303a 	nor	r2,zero,r3
1000aa98:	3884703a 	and	r2,r7,r2
1000aa9c:	1204703a 	and	r2,r2,r8
1000aaa0:	19bff626 	beq	r3,r6,1000aa7c <__alt_data_end+0xf800aa7c>
1000aaa4:	20800003 	ldbu	r2,0(r4)
1000aaa8:	10c03fcc 	andi	r3,r2,255
1000aaac:	18c0201c 	xori	r3,r3,128
1000aab0:	18ffe004 	addi	r3,r3,-128
1000aab4:	18000c26 	beq	r3,zero,1000aae8 <strcmp+0xac>
1000aab8:	29800007 	ldb	r6,0(r5)
1000aabc:	19800326 	beq	r3,r6,1000aacc <strcmp+0x90>
1000aac0:	00001306 	br	1000ab10 <strcmp+0xd4>
1000aac4:	29800007 	ldb	r6,0(r5)
1000aac8:	11800b1e 	bne	r2,r6,1000aaf8 <strcmp+0xbc>
1000aacc:	21000044 	addi	r4,r4,1
1000aad0:	20c00003 	ldbu	r3,0(r4)
1000aad4:	29400044 	addi	r5,r5,1
1000aad8:	18803fcc 	andi	r2,r3,255
1000aadc:	1080201c 	xori	r2,r2,128
1000aae0:	10bfe004 	addi	r2,r2,-128
1000aae4:	103ff71e 	bne	r2,zero,1000aac4 <__alt_data_end+0xf800aac4>
1000aae8:	0007883a 	mov	r3,zero
1000aaec:	28800003 	ldbu	r2,0(r5)
1000aaf0:	1885c83a 	sub	r2,r3,r2
1000aaf4:	f800283a 	ret
1000aaf8:	28800003 	ldbu	r2,0(r5)
1000aafc:	18c03fcc 	andi	r3,r3,255
1000ab00:	1885c83a 	sub	r2,r3,r2
1000ab04:	f800283a 	ret
1000ab08:	0005883a 	mov	r2,zero
1000ab0c:	f800283a 	ret
1000ab10:	10c03fcc 	andi	r3,r2,255
1000ab14:	003ff506 	br	1000aaec <__alt_data_end+0xf800aaec>

1000ab18 <__sprint_r.part.0>:
1000ab18:	28801917 	ldw	r2,100(r5)
1000ab1c:	defff604 	addi	sp,sp,-40
1000ab20:	dd400515 	stw	r21,20(sp)
1000ab24:	dfc00915 	stw	ra,36(sp)
1000ab28:	df000815 	stw	fp,32(sp)
1000ab2c:	ddc00715 	stw	r23,28(sp)
1000ab30:	dd800615 	stw	r22,24(sp)
1000ab34:	dd000415 	stw	r20,16(sp)
1000ab38:	dcc00315 	stw	r19,12(sp)
1000ab3c:	dc800215 	stw	r18,8(sp)
1000ab40:	dc400115 	stw	r17,4(sp)
1000ab44:	dc000015 	stw	r16,0(sp)
1000ab48:	1088000c 	andi	r2,r2,8192
1000ab4c:	302b883a 	mov	r21,r6
1000ab50:	10002e26 	beq	r2,zero,1000ac0c <__sprint_r.part.0+0xf4>
1000ab54:	30800217 	ldw	r2,8(r6)
1000ab58:	35800017 	ldw	r22,0(r6)
1000ab5c:	10002926 	beq	r2,zero,1000ac04 <__sprint_r.part.0+0xec>
1000ab60:	2827883a 	mov	r19,r5
1000ab64:	2029883a 	mov	r20,r4
1000ab68:	b5c00104 	addi	r23,r22,4
1000ab6c:	04bfffc4 	movi	r18,-1
1000ab70:	bc400017 	ldw	r17,0(r23)
1000ab74:	b4000017 	ldw	r16,0(r22)
1000ab78:	0039883a 	mov	fp,zero
1000ab7c:	8822d0ba 	srli	r17,r17,2
1000ab80:	8800031e 	bne	r17,zero,1000ab90 <__sprint_r.part.0+0x78>
1000ab84:	00001806 	br	1000abe8 <__sprint_r.part.0+0xd0>
1000ab88:	84000104 	addi	r16,r16,4
1000ab8c:	8f001526 	beq	r17,fp,1000abe4 <__sprint_r.part.0+0xcc>
1000ab90:	81400017 	ldw	r5,0(r16)
1000ab94:	980d883a 	mov	r6,r19
1000ab98:	a009883a 	mov	r4,r20
1000ab9c:	000c6080 	call	1000c608 <_fputwc_r>
1000aba0:	e7000044 	addi	fp,fp,1
1000aba4:	14bff81e 	bne	r2,r18,1000ab88 <__alt_data_end+0xf800ab88>
1000aba8:	9005883a 	mov	r2,r18
1000abac:	a8000215 	stw	zero,8(r21)
1000abb0:	a8000115 	stw	zero,4(r21)
1000abb4:	dfc00917 	ldw	ra,36(sp)
1000abb8:	df000817 	ldw	fp,32(sp)
1000abbc:	ddc00717 	ldw	r23,28(sp)
1000abc0:	dd800617 	ldw	r22,24(sp)
1000abc4:	dd400517 	ldw	r21,20(sp)
1000abc8:	dd000417 	ldw	r20,16(sp)
1000abcc:	dcc00317 	ldw	r19,12(sp)
1000abd0:	dc800217 	ldw	r18,8(sp)
1000abd4:	dc400117 	ldw	r17,4(sp)
1000abd8:	dc000017 	ldw	r16,0(sp)
1000abdc:	dec00a04 	addi	sp,sp,40
1000abe0:	f800283a 	ret
1000abe4:	a8800217 	ldw	r2,8(r21)
1000abe8:	8c63883a 	add	r17,r17,r17
1000abec:	8c63883a 	add	r17,r17,r17
1000abf0:	1445c83a 	sub	r2,r2,r17
1000abf4:	a8800215 	stw	r2,8(r21)
1000abf8:	b5800204 	addi	r22,r22,8
1000abfc:	bdc00204 	addi	r23,r23,8
1000ac00:	103fdb1e 	bne	r2,zero,1000ab70 <__alt_data_end+0xf800ab70>
1000ac04:	0005883a 	mov	r2,zero
1000ac08:	003fe806 	br	1000abac <__alt_data_end+0xf800abac>
1000ac0c:	0007c780 	call	10007c78 <__sfvwrite_r>
1000ac10:	003fe606 	br	1000abac <__alt_data_end+0xf800abac>

1000ac14 <__sprint_r>:
1000ac14:	30c00217 	ldw	r3,8(r6)
1000ac18:	18000126 	beq	r3,zero,1000ac20 <__sprint_r+0xc>
1000ac1c:	000ab181 	jmpi	1000ab18 <__sprint_r.part.0>
1000ac20:	30000115 	stw	zero,4(r6)
1000ac24:	0005883a 	mov	r2,zero
1000ac28:	f800283a 	ret

1000ac2c <___vfiprintf_internal_r>:
1000ac2c:	deffca04 	addi	sp,sp,-216
1000ac30:	dd403115 	stw	r21,196(sp)
1000ac34:	dfc03515 	stw	ra,212(sp)
1000ac38:	df003415 	stw	fp,208(sp)
1000ac3c:	ddc03315 	stw	r23,204(sp)
1000ac40:	dd803215 	stw	r22,200(sp)
1000ac44:	dd003015 	stw	r20,192(sp)
1000ac48:	dcc02f15 	stw	r19,188(sp)
1000ac4c:	dc802e15 	stw	r18,184(sp)
1000ac50:	dc402d15 	stw	r17,180(sp)
1000ac54:	dc002c15 	stw	r16,176(sp)
1000ac58:	d9002115 	stw	r4,132(sp)
1000ac5c:	d9402015 	stw	r5,128(sp)
1000ac60:	d9c02215 	stw	r7,136(sp)
1000ac64:	302b883a 	mov	r21,r6
1000ac68:	20000226 	beq	r4,zero,1000ac74 <___vfiprintf_internal_r+0x48>
1000ac6c:	20800e17 	ldw	r2,56(r4)
1000ac70:	1000cf26 	beq	r2,zero,1000afb0 <___vfiprintf_internal_r+0x384>
1000ac74:	d8c02017 	ldw	r3,128(sp)
1000ac78:	1880030b 	ldhu	r2,12(r3)
1000ac7c:	10c8000c 	andi	r3,r2,8192
1000ac80:	1800071e 	bne	r3,zero,1000aca0 <___vfiprintf_internal_r+0x74>
1000ac84:	d9402017 	ldw	r5,128(sp)
1000ac88:	00f7ffc4 	movi	r3,-8193
1000ac8c:	10880014 	ori	r2,r2,8192
1000ac90:	29001917 	ldw	r4,100(r5)
1000ac94:	2880030d 	sth	r2,12(r5)
1000ac98:	20c6703a 	and	r3,r4,r3
1000ac9c:	28c01915 	stw	r3,100(r5)
1000aca0:	10c0020c 	andi	r3,r2,8
1000aca4:	1800a526 	beq	r3,zero,1000af3c <___vfiprintf_internal_r+0x310>
1000aca8:	d9002017 	ldw	r4,128(sp)
1000acac:	20c00417 	ldw	r3,16(r4)
1000acb0:	1800a226 	beq	r3,zero,1000af3c <___vfiprintf_internal_r+0x310>
1000acb4:	1080068c 	andi	r2,r2,26
1000acb8:	00c00284 	movi	r3,10
1000acbc:	10c0a826 	beq	r2,r3,1000af60 <___vfiprintf_internal_r+0x334>
1000acc0:	d9001a04 	addi	r4,sp,104
1000acc4:	d94019c4 	addi	r5,sp,103
1000acc8:	04840074 	movhi	r18,4097
1000accc:	2145c83a 	sub	r2,r4,r5
1000acd0:	948c4204 	addi	r18,r18,12552
1000acd4:	d9001e15 	stw	r4,120(sp)
1000acd8:	d9401f15 	stw	r5,124(sp)
1000acdc:	dec01a15 	stw	sp,104(sp)
1000ace0:	d8001c15 	stw	zero,112(sp)
1000ace4:	d8001b15 	stw	zero,108(sp)
1000ace8:	d811883a 	mov	r8,sp
1000acec:	d8002615 	stw	zero,152(sp)
1000acf0:	d8002415 	stw	zero,144(sp)
1000acf4:	d8802815 	stw	r2,160(sp)
1000acf8:	a82d883a 	mov	r22,r21
1000acfc:	b0800007 	ldb	r2,0(r22)
1000ad00:	10040d26 	beq	r2,zero,1000bd38 <___vfiprintf_internal_r+0x110c>
1000ad04:	00c00944 	movi	r3,37
1000ad08:	b029883a 	mov	r20,r22
1000ad0c:	10c0021e 	bne	r2,r3,1000ad18 <___vfiprintf_internal_r+0xec>
1000ad10:	00001606 	br	1000ad6c <___vfiprintf_internal_r+0x140>
1000ad14:	10c00326 	beq	r2,r3,1000ad24 <___vfiprintf_internal_r+0xf8>
1000ad18:	a5000044 	addi	r20,r20,1
1000ad1c:	a0800007 	ldb	r2,0(r20)
1000ad20:	103ffc1e 	bne	r2,zero,1000ad14 <__alt_data_end+0xf800ad14>
1000ad24:	a5a1c83a 	sub	r16,r20,r22
1000ad28:	80001026 	beq	r16,zero,1000ad6c <___vfiprintf_internal_r+0x140>
1000ad2c:	d8c01c17 	ldw	r3,112(sp)
1000ad30:	d8801b17 	ldw	r2,108(sp)
1000ad34:	45800015 	stw	r22,0(r8)
1000ad38:	80c7883a 	add	r3,r16,r3
1000ad3c:	10800044 	addi	r2,r2,1
1000ad40:	44000115 	stw	r16,4(r8)
1000ad44:	d8c01c15 	stw	r3,112(sp)
1000ad48:	d8801b15 	stw	r2,108(sp)
1000ad4c:	010001c4 	movi	r4,7
1000ad50:	2080750e 	bge	r4,r2,1000af28 <___vfiprintf_internal_r+0x2fc>
1000ad54:	1803951e 	bne	r3,zero,1000bbac <___vfiprintf_internal_r+0xf80>
1000ad58:	d8c02417 	ldw	r3,144(sp)
1000ad5c:	d8001b15 	stw	zero,108(sp)
1000ad60:	d811883a 	mov	r8,sp
1000ad64:	1c07883a 	add	r3,r3,r16
1000ad68:	d8c02415 	stw	r3,144(sp)
1000ad6c:	a0800007 	ldb	r2,0(r20)
1000ad70:	1002e026 	beq	r2,zero,1000b8f4 <___vfiprintf_internal_r+0xcc8>
1000ad74:	a5800044 	addi	r22,r20,1
1000ad78:	a0c00047 	ldb	r3,1(r20)
1000ad7c:	d8001d85 	stb	zero,118(sp)
1000ad80:	0027883a 	mov	r19,zero
1000ad84:	d8002305 	stb	zero,140(sp)
1000ad88:	043fffc4 	movi	r16,-1
1000ad8c:	d8002515 	stw	zero,148(sp)
1000ad90:	0023883a 	mov	r17,zero
1000ad94:	05001604 	movi	r20,88
1000ad98:	05400244 	movi	r21,9
1000ad9c:	402f883a 	mov	r23,r8
1000ada0:	b5800044 	addi	r22,r22,1
1000ada4:	18bff804 	addi	r2,r3,-32
1000ada8:	a0827736 	bltu	r20,r2,1000b788 <___vfiprintf_internal_r+0xb5c>
1000adac:	100490ba 	slli	r2,r2,2
1000adb0:	01040074 	movhi	r4,4097
1000adb4:	212b7104 	addi	r4,r4,-21052
1000adb8:	1105883a 	add	r2,r2,r4
1000adbc:	10800017 	ldw	r2,0(r2)
1000adc0:	1000683a 	jmp	r2
1000adc4:	1000b488 	cmpgei	zero,r2,722
1000adc8:	1000b788 	cmpgei	zero,r2,734
1000adcc:	1000b788 	cmpgei	zero,r2,734
1000add0:	1000b4a4 	muli	zero,r2,722
1000add4:	1000b788 	cmpgei	zero,r2,734
1000add8:	1000b788 	cmpgei	zero,r2,734
1000addc:	1000b788 	cmpgei	zero,r2,734
1000ade0:	1000b788 	cmpgei	zero,r2,734
1000ade4:	1000b788 	cmpgei	zero,r2,734
1000ade8:	1000b788 	cmpgei	zero,r2,734
1000adec:	1000b6ac 	andhi	zero,r2,730
1000adf0:	1000b6d0 	cmplti	zero,r2,731
1000adf4:	1000b788 	cmpgei	zero,r2,734
1000adf8:	1000afc8 	cmpgei	zero,r2,703
1000adfc:	1000b6e4 	muli	zero,r2,731
1000ae00:	1000b788 	cmpgei	zero,r2,734
1000ae04:	1000b4b0 	cmpltui	zero,r2,722
1000ae08:	1000b4bc 	xorhi	zero,r2,722
1000ae0c:	1000b4bc 	xorhi	zero,r2,722
1000ae10:	1000b4bc 	xorhi	zero,r2,722
1000ae14:	1000b4bc 	xorhi	zero,r2,722
1000ae18:	1000b4bc 	xorhi	zero,r2,722
1000ae1c:	1000b4bc 	xorhi	zero,r2,722
1000ae20:	1000b4bc 	xorhi	zero,r2,722
1000ae24:	1000b4bc 	xorhi	zero,r2,722
1000ae28:	1000b4bc 	xorhi	zero,r2,722
1000ae2c:	1000b788 	cmpgei	zero,r2,734
1000ae30:	1000b788 	cmpgei	zero,r2,734
1000ae34:	1000b788 	cmpgei	zero,r2,734
1000ae38:	1000b788 	cmpgei	zero,r2,734
1000ae3c:	1000b788 	cmpgei	zero,r2,734
1000ae40:	1000b788 	cmpgei	zero,r2,734
1000ae44:	1000b788 	cmpgei	zero,r2,734
1000ae48:	1000b788 	cmpgei	zero,r2,734
1000ae4c:	1000b788 	cmpgei	zero,r2,734
1000ae50:	1000b788 	cmpgei	zero,r2,734
1000ae54:	1000b4fc 	xorhi	zero,r2,723
1000ae58:	1000b788 	cmpgei	zero,r2,734
1000ae5c:	1000b788 	cmpgei	zero,r2,734
1000ae60:	1000b788 	cmpgei	zero,r2,734
1000ae64:	1000b788 	cmpgei	zero,r2,734
1000ae68:	1000b788 	cmpgei	zero,r2,734
1000ae6c:	1000b788 	cmpgei	zero,r2,734
1000ae70:	1000b788 	cmpgei	zero,r2,734
1000ae74:	1000b788 	cmpgei	zero,r2,734
1000ae78:	1000b788 	cmpgei	zero,r2,734
1000ae7c:	1000b788 	cmpgei	zero,r2,734
1000ae80:	1000b538 	rdprs	zero,r2,724
1000ae84:	1000b788 	cmpgei	zero,r2,734
1000ae88:	1000b788 	cmpgei	zero,r2,734
1000ae8c:	1000b788 	cmpgei	zero,r2,734
1000ae90:	1000b788 	cmpgei	zero,r2,734
1000ae94:	1000b788 	cmpgei	zero,r2,734
1000ae98:	1000b594 	ori	zero,r2,726
1000ae9c:	1000b788 	cmpgei	zero,r2,734
1000aea0:	1000b788 	cmpgei	zero,r2,734
1000aea4:	1000b608 	cmpgei	zero,r2,728
1000aea8:	1000b788 	cmpgei	zero,r2,734
1000aeac:	1000b788 	cmpgei	zero,r2,734
1000aeb0:	1000b788 	cmpgei	zero,r2,734
1000aeb4:	1000b788 	cmpgei	zero,r2,734
1000aeb8:	1000b788 	cmpgei	zero,r2,734
1000aebc:	1000b788 	cmpgei	zero,r2,734
1000aec0:	1000b788 	cmpgei	zero,r2,734
1000aec4:	1000b788 	cmpgei	zero,r2,734
1000aec8:	1000b788 	cmpgei	zero,r2,734
1000aecc:	1000b788 	cmpgei	zero,r2,734
1000aed0:	1000b3b0 	cmpltui	zero,r2,718
1000aed4:	1000b3e0 	cmpeqi	zero,r2,719
1000aed8:	1000b788 	cmpgei	zero,r2,734
1000aedc:	1000b788 	cmpgei	zero,r2,734
1000aee0:	1000b788 	cmpgei	zero,r2,734
1000aee4:	1000b730 	cmpltui	zero,r2,732
1000aee8:	1000b3e0 	cmpeqi	zero,r2,719
1000aeec:	1000b788 	cmpgei	zero,r2,734
1000aef0:	1000b788 	cmpgei	zero,r2,734
1000aef4:	1000b288 	cmpgei	zero,r2,714
1000aef8:	1000b788 	cmpgei	zero,r2,734
1000aefc:	1000b29c 	xori	zero,r2,714
1000af00:	1000b2d4 	ori	zero,r2,715
1000af04:	1000afd4 	ori	zero,r2,703
1000af08:	1000b27c 	xorhi	zero,r2,713
1000af0c:	1000b788 	cmpgei	zero,r2,734
1000af10:	1000b648 	cmpgei	zero,r2,729
1000af14:	1000b788 	cmpgei	zero,r2,734
1000af18:	1000b694 	ori	zero,r2,730
1000af1c:	1000b788 	cmpgei	zero,r2,734
1000af20:	1000b788 	cmpgei	zero,r2,734
1000af24:	1000b358 	cmpnei	zero,r2,717
1000af28:	42000204 	addi	r8,r8,8
1000af2c:	d8c02417 	ldw	r3,144(sp)
1000af30:	1c07883a 	add	r3,r3,r16
1000af34:	d8c02415 	stw	r3,144(sp)
1000af38:	003f8c06 	br	1000ad6c <__alt_data_end+0xf800ad6c>
1000af3c:	d9402017 	ldw	r5,128(sp)
1000af40:	d9002117 	ldw	r4,132(sp)
1000af44:	00057e80 	call	100057e8 <__swsetup_r>
1000af48:	1003c11e 	bne	r2,zero,1000be50 <___vfiprintf_internal_r+0x1224>
1000af4c:	d9402017 	ldw	r5,128(sp)
1000af50:	00c00284 	movi	r3,10
1000af54:	2880030b 	ldhu	r2,12(r5)
1000af58:	1080068c 	andi	r2,r2,26
1000af5c:	10ff581e 	bne	r2,r3,1000acc0 <__alt_data_end+0xf800acc0>
1000af60:	d8c02017 	ldw	r3,128(sp)
1000af64:	1880038f 	ldh	r2,14(r3)
1000af68:	103f5516 	blt	r2,zero,1000acc0 <__alt_data_end+0xf800acc0>
1000af6c:	d9c02217 	ldw	r7,136(sp)
1000af70:	d9002117 	ldw	r4,132(sp)
1000af74:	a80d883a 	mov	r6,r21
1000af78:	180b883a 	mov	r5,r3
1000af7c:	000c1540 	call	1000c154 <__sbprintf>
1000af80:	dfc03517 	ldw	ra,212(sp)
1000af84:	df003417 	ldw	fp,208(sp)
1000af88:	ddc03317 	ldw	r23,204(sp)
1000af8c:	dd803217 	ldw	r22,200(sp)
1000af90:	dd403117 	ldw	r21,196(sp)
1000af94:	dd003017 	ldw	r20,192(sp)
1000af98:	dcc02f17 	ldw	r19,188(sp)
1000af9c:	dc802e17 	ldw	r18,184(sp)
1000afa0:	dc402d17 	ldw	r17,180(sp)
1000afa4:	dc002c17 	ldw	r16,176(sp)
1000afa8:	dec03604 	addi	sp,sp,216
1000afac:	f800283a 	ret
1000afb0:	00077f40 	call	100077f4 <__sinit>
1000afb4:	003f2f06 	br	1000ac74 <__alt_data_end+0xf800ac74>
1000afb8:	d8c02517 	ldw	r3,148(sp)
1000afbc:	d8802215 	stw	r2,136(sp)
1000afc0:	00c7c83a 	sub	r3,zero,r3
1000afc4:	d8c02515 	stw	r3,148(sp)
1000afc8:	8c400114 	ori	r17,r17,4
1000afcc:	b0c00007 	ldb	r3,0(r22)
1000afd0:	003f7306 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000afd4:	00800c04 	movi	r2,48
1000afd8:	d9402217 	ldw	r5,136(sp)
1000afdc:	d8801d05 	stb	r2,116(sp)
1000afe0:	00801e04 	movi	r2,120
1000afe4:	d8801d45 	stb	r2,117(sp)
1000afe8:	d8001d85 	stb	zero,118(sp)
1000afec:	b811883a 	mov	r8,r23
1000aff0:	28c00104 	addi	r3,r5,4
1000aff4:	2cc00017 	ldw	r19,0(r5)
1000aff8:	0029883a 	mov	r20,zero
1000affc:	88800094 	ori	r2,r17,2
1000b000:	80032516 	blt	r16,zero,1000bc98 <___vfiprintf_internal_r+0x106c>
1000b004:	00bfdfc4 	movi	r2,-129
1000b008:	88a2703a 	and	r17,r17,r2
1000b00c:	d8c02215 	stw	r3,136(sp)
1000b010:	8c400094 	ori	r17,r17,2
1000b014:	98032a1e 	bne	r19,zero,1000bcc0 <___vfiprintf_internal_r+0x1094>
1000b018:	00840074 	movhi	r2,4097
1000b01c:	108be104 	addi	r2,r2,12164
1000b020:	d8802615 	stw	r2,152(sp)
1000b024:	002b883a 	mov	r21,zero
1000b028:	8001741e 	bne	r16,zero,1000b5fc <___vfiprintf_internal_r+0x9d0>
1000b02c:	0021883a 	mov	r16,zero
1000b030:	0029883a 	mov	r20,zero
1000b034:	ddc01a04 	addi	r23,sp,104
1000b038:	8027883a 	mov	r19,r16
1000b03c:	8500010e 	bge	r16,r20,1000b044 <___vfiprintf_internal_r+0x418>
1000b040:	a027883a 	mov	r19,r20
1000b044:	ad403fcc 	andi	r21,r21,255
1000b048:	ad40201c 	xori	r21,r21,128
1000b04c:	ad7fe004 	addi	r21,r21,-128
1000b050:	a8000126 	beq	r21,zero,1000b058 <___vfiprintf_internal_r+0x42c>
1000b054:	9cc00044 	addi	r19,r19,1
1000b058:	89c0008c 	andi	r7,r17,2
1000b05c:	38000126 	beq	r7,zero,1000b064 <___vfiprintf_internal_r+0x438>
1000b060:	9cc00084 	addi	r19,r19,2
1000b064:	88c0210c 	andi	r3,r17,132
1000b068:	1801dd1e 	bne	r3,zero,1000b7e0 <___vfiprintf_internal_r+0xbb4>
1000b06c:	d9402517 	ldw	r5,148(sp)
1000b070:	2cebc83a 	sub	r21,r5,r19
1000b074:	0541da0e 	bge	zero,r21,1000b7e0 <___vfiprintf_internal_r+0xbb4>
1000b078:	07000404 	movi	fp,16
1000b07c:	d8801c17 	ldw	r2,112(sp)
1000b080:	e543be0e 	bge	fp,r21,1000bf7c <___vfiprintf_internal_r+0x1350>
1000b084:	01440074 	movhi	r5,4097
1000b088:	294c4604 	addi	r5,r5,12568
1000b08c:	dc002715 	stw	r16,156(sp)
1000b090:	d9801b17 	ldw	r6,108(sp)
1000b094:	a821883a 	mov	r16,r21
1000b098:	d9402315 	stw	r5,140(sp)
1000b09c:	028001c4 	movi	r10,7
1000b0a0:	d9c02915 	stw	r7,164(sp)
1000b0a4:	182b883a 	mov	r21,r3
1000b0a8:	00000506 	br	1000b0c0 <___vfiprintf_internal_r+0x494>
1000b0ac:	31000084 	addi	r4,r6,2
1000b0b0:	42000204 	addi	r8,r8,8
1000b0b4:	180d883a 	mov	r6,r3
1000b0b8:	843ffc04 	addi	r16,r16,-16
1000b0bc:	e4000f0e 	bge	fp,r16,1000b0fc <___vfiprintf_internal_r+0x4d0>
1000b0c0:	01040074 	movhi	r4,4097
1000b0c4:	10800404 	addi	r2,r2,16
1000b0c8:	30c00044 	addi	r3,r6,1
1000b0cc:	210c4604 	addi	r4,r4,12568
1000b0d0:	41000015 	stw	r4,0(r8)
1000b0d4:	47000115 	stw	fp,4(r8)
1000b0d8:	d8801c15 	stw	r2,112(sp)
1000b0dc:	d8c01b15 	stw	r3,108(sp)
1000b0e0:	50fff20e 	bge	r10,r3,1000b0ac <__alt_data_end+0xf800b0ac>
1000b0e4:	1001b21e 	bne	r2,zero,1000b7b0 <___vfiprintf_internal_r+0xb84>
1000b0e8:	843ffc04 	addi	r16,r16,-16
1000b0ec:	000d883a 	mov	r6,zero
1000b0f0:	01000044 	movi	r4,1
1000b0f4:	d811883a 	mov	r8,sp
1000b0f8:	e43ff116 	blt	fp,r16,1000b0c0 <__alt_data_end+0xf800b0c0>
1000b0fc:	a807883a 	mov	r3,r21
1000b100:	d9c02917 	ldw	r7,164(sp)
1000b104:	802b883a 	mov	r21,r16
1000b108:	dc002717 	ldw	r16,156(sp)
1000b10c:	d9402317 	ldw	r5,140(sp)
1000b110:	a885883a 	add	r2,r21,r2
1000b114:	45400115 	stw	r21,4(r8)
1000b118:	41400015 	stw	r5,0(r8)
1000b11c:	d8801c15 	stw	r2,112(sp)
1000b120:	d9001b15 	stw	r4,108(sp)
1000b124:	014001c4 	movi	r5,7
1000b128:	29026216 	blt	r5,r4,1000bab4 <___vfiprintf_internal_r+0xe88>
1000b12c:	d9801d87 	ldb	r6,118(sp)
1000b130:	42000204 	addi	r8,r8,8
1000b134:	21400044 	addi	r5,r4,1
1000b138:	3001ae1e 	bne	r6,zero,1000b7f4 <___vfiprintf_internal_r+0xbc8>
1000b13c:	3801bb26 	beq	r7,zero,1000b82c <___vfiprintf_internal_r+0xc00>
1000b140:	d9001d04 	addi	r4,sp,116
1000b144:	10800084 	addi	r2,r2,2
1000b148:	41000015 	stw	r4,0(r8)
1000b14c:	01000084 	movi	r4,2
1000b150:	41000115 	stw	r4,4(r8)
1000b154:	d8801c15 	stw	r2,112(sp)
1000b158:	d9401b15 	stw	r5,108(sp)
1000b15c:	010001c4 	movi	r4,7
1000b160:	2142680e 	bge	r4,r5,1000bb04 <___vfiprintf_internal_r+0xed8>
1000b164:	1002b11e 	bne	r2,zero,1000bc2c <___vfiprintf_internal_r+0x1000>
1000b168:	01802004 	movi	r6,128
1000b16c:	01400044 	movi	r5,1
1000b170:	0009883a 	mov	r4,zero
1000b174:	d811883a 	mov	r8,sp
1000b178:	1981ae1e 	bne	r3,r6,1000b834 <___vfiprintf_internal_r+0xc08>
1000b17c:	d8c02517 	ldw	r3,148(sp)
1000b180:	1cf9c83a 	sub	fp,r3,r19
1000b184:	0701ab0e 	bge	zero,fp,1000b834 <___vfiprintf_internal_r+0xc08>
1000b188:	05400404 	movi	r21,16
1000b18c:	af03a90e 	bge	r21,fp,1000c034 <___vfiprintf_internal_r+0x1408>
1000b190:	01440074 	movhi	r5,4097
1000b194:	294c4204 	addi	r5,r5,12552
1000b198:	d9402315 	stw	r5,140(sp)
1000b19c:	01c001c4 	movi	r7,7
1000b1a0:	00000506 	br	1000b1b8 <___vfiprintf_internal_r+0x58c>
1000b1a4:	21800084 	addi	r6,r4,2
1000b1a8:	42000204 	addi	r8,r8,8
1000b1ac:	1809883a 	mov	r4,r3
1000b1b0:	e73ffc04 	addi	fp,fp,-16
1000b1b4:	af000d0e 	bge	r21,fp,1000b1ec <___vfiprintf_internal_r+0x5c0>
1000b1b8:	10800404 	addi	r2,r2,16
1000b1bc:	20c00044 	addi	r3,r4,1
1000b1c0:	44800015 	stw	r18,0(r8)
1000b1c4:	45400115 	stw	r21,4(r8)
1000b1c8:	d8801c15 	stw	r2,112(sp)
1000b1cc:	d8c01b15 	stw	r3,108(sp)
1000b1d0:	38fff40e 	bge	r7,r3,1000b1a4 <__alt_data_end+0xf800b1a4>
1000b1d4:	10022b1e 	bne	r2,zero,1000ba84 <___vfiprintf_internal_r+0xe58>
1000b1d8:	e73ffc04 	addi	fp,fp,-16
1000b1dc:	01800044 	movi	r6,1
1000b1e0:	0009883a 	mov	r4,zero
1000b1e4:	d811883a 	mov	r8,sp
1000b1e8:	af3ff316 	blt	r21,fp,1000b1b8 <__alt_data_end+0xf800b1b8>
1000b1ec:	d8c02317 	ldw	r3,140(sp)
1000b1f0:	1705883a 	add	r2,r2,fp
1000b1f4:	47000115 	stw	fp,4(r8)
1000b1f8:	40c00015 	stw	r3,0(r8)
1000b1fc:	d8801c15 	stw	r2,112(sp)
1000b200:	d9801b15 	stw	r6,108(sp)
1000b204:	00c001c4 	movi	r3,7
1000b208:	19829416 	blt	r3,r6,1000bc5c <___vfiprintf_internal_r+0x1030>
1000b20c:	8521c83a 	sub	r16,r16,r20
1000b210:	42000204 	addi	r8,r8,8
1000b214:	31400044 	addi	r5,r6,1
1000b218:	3009883a 	mov	r4,r6
1000b21c:	04018716 	blt	zero,r16,1000b83c <___vfiprintf_internal_r+0xc10>
1000b220:	a085883a 	add	r2,r20,r2
1000b224:	45c00015 	stw	r23,0(r8)
1000b228:	45000115 	stw	r20,4(r8)
1000b22c:	d8801c15 	stw	r2,112(sp)
1000b230:	d9401b15 	stw	r5,108(sp)
1000b234:	00c001c4 	movi	r3,7
1000b238:	1941c20e 	bge	r3,r5,1000b944 <___vfiprintf_internal_r+0xd18>
1000b23c:	1002531e 	bne	r2,zero,1000bb8c <___vfiprintf_internal_r+0xf60>
1000b240:	d8001b15 	stw	zero,108(sp)
1000b244:	8c40010c 	andi	r17,r17,4
1000b248:	88023226 	beq	r17,zero,1000bb14 <___vfiprintf_internal_r+0xee8>
1000b24c:	d9002517 	ldw	r4,148(sp)
1000b250:	24e3c83a 	sub	r17,r4,r19
1000b254:	04432916 	blt	zero,r17,1000befc <___vfiprintf_internal_r+0x12d0>
1000b258:	d8802517 	ldw	r2,148(sp)
1000b25c:	14c0010e 	bge	r2,r19,1000b264 <___vfiprintf_internal_r+0x638>
1000b260:	9805883a 	mov	r2,r19
1000b264:	d8c02417 	ldw	r3,144(sp)
1000b268:	1887883a 	add	r3,r3,r2
1000b26c:	d8c02415 	stw	r3,144(sp)
1000b270:	d8001b15 	stw	zero,108(sp)
1000b274:	d811883a 	mov	r8,sp
1000b278:	003ea006 	br	1000acfc <__alt_data_end+0xf800acfc>
1000b27c:	8c400814 	ori	r17,r17,32
1000b280:	b0c00007 	ldb	r3,0(r22)
1000b284:	003ec606 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000b288:	b0c00007 	ldb	r3,0(r22)
1000b28c:	00801b04 	movi	r2,108
1000b290:	18832026 	beq	r3,r2,1000bf14 <___vfiprintf_internal_r+0x12e8>
1000b294:	8c400414 	ori	r17,r17,16
1000b298:	003ec106 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000b29c:	9cc03fcc 	andi	r19,r19,255
1000b2a0:	b811883a 	mov	r8,r23
1000b2a4:	9803981e 	bne	r19,zero,1000c108 <___vfiprintf_internal_r+0x14dc>
1000b2a8:	8880080c 	andi	r2,r17,32
1000b2ac:	1002be26 	beq	r2,zero,1000bda8 <___vfiprintf_internal_r+0x117c>
1000b2b0:	d9002217 	ldw	r4,136(sp)
1000b2b4:	d9402417 	ldw	r5,144(sp)
1000b2b8:	20800017 	ldw	r2,0(r4)
1000b2bc:	2807d7fa 	srai	r3,r5,31
1000b2c0:	21000104 	addi	r4,r4,4
1000b2c4:	d9002215 	stw	r4,136(sp)
1000b2c8:	11400015 	stw	r5,0(r2)
1000b2cc:	10c00115 	stw	r3,4(r2)
1000b2d0:	003e8a06 	br	1000acfc <__alt_data_end+0xf800acfc>
1000b2d4:	9cc03fcc 	andi	r19,r19,255
1000b2d8:	b811883a 	mov	r8,r23
1000b2dc:	9803871e 	bne	r19,zero,1000c0fc <___vfiprintf_internal_r+0x14d0>
1000b2e0:	8880080c 	andi	r2,r17,32
1000b2e4:	10009a26 	beq	r2,zero,1000b550 <___vfiprintf_internal_r+0x924>
1000b2e8:	d9002217 	ldw	r4,136(sp)
1000b2ec:	d8001d85 	stb	zero,118(sp)
1000b2f0:	20800204 	addi	r2,r4,8
1000b2f4:	24c00017 	ldw	r19,0(r4)
1000b2f8:	25000117 	ldw	r20,4(r4)
1000b2fc:	8002a416 	blt	r16,zero,1000bd90 <___vfiprintf_internal_r+0x1164>
1000b300:	013fdfc4 	movi	r4,-129
1000b304:	9d06b03a 	or	r3,r19,r20
1000b308:	d8802215 	stw	r2,136(sp)
1000b30c:	8922703a 	and	r17,r17,r4
1000b310:	18009b26 	beq	r3,zero,1000b580 <___vfiprintf_internal_r+0x954>
1000b314:	002b883a 	mov	r21,zero
1000b318:	ddc01a04 	addi	r23,sp,104
1000b31c:	9806d0fa 	srli	r3,r19,3
1000b320:	a008977a 	slli	r4,r20,29
1000b324:	a028d0fa 	srli	r20,r20,3
1000b328:	9cc001cc 	andi	r19,r19,7
1000b32c:	98800c04 	addi	r2,r19,48
1000b330:	bdffffc4 	addi	r23,r23,-1
1000b334:	20e6b03a 	or	r19,r4,r3
1000b338:	b8800005 	stb	r2,0(r23)
1000b33c:	9d06b03a 	or	r3,r19,r20
1000b340:	183ff61e 	bne	r3,zero,1000b31c <__alt_data_end+0xf800b31c>
1000b344:	88c0004c 	andi	r3,r17,1
1000b348:	18021f1e 	bne	r3,zero,1000bbc8 <___vfiprintf_internal_r+0xf9c>
1000b34c:	d9401e17 	ldw	r5,120(sp)
1000b350:	2de9c83a 	sub	r20,r5,r23
1000b354:	003f3806 	br	1000b038 <__alt_data_end+0xf800b038>
1000b358:	9cc03fcc 	andi	r19,r19,255
1000b35c:	b811883a 	mov	r8,r23
1000b360:	98034f1e 	bne	r19,zero,1000c0a0 <___vfiprintf_internal_r+0x1474>
1000b364:	00840074 	movhi	r2,4097
1000b368:	108be104 	addi	r2,r2,12164
1000b36c:	d8802615 	stw	r2,152(sp)
1000b370:	8880080c 	andi	r2,r17,32
1000b374:	1000ac26 	beq	r2,zero,1000b628 <___vfiprintf_internal_r+0x9fc>
1000b378:	d9002217 	ldw	r4,136(sp)
1000b37c:	24c00017 	ldw	r19,0(r4)
1000b380:	25000117 	ldw	r20,4(r4)
1000b384:	21000204 	addi	r4,r4,8
1000b388:	d9002215 	stw	r4,136(sp)
1000b38c:	8880004c 	andi	r2,r17,1
1000b390:	1001e726 	beq	r2,zero,1000bb30 <___vfiprintf_internal_r+0xf04>
1000b394:	9d04b03a 	or	r2,r19,r20
1000b398:	10025c1e 	bne	r2,zero,1000bd0c <___vfiprintf_internal_r+0x10e0>
1000b39c:	d8001d85 	stb	zero,118(sp)
1000b3a0:	80024416 	blt	r16,zero,1000bcb4 <___vfiprintf_internal_r+0x1088>
1000b3a4:	00bfdfc4 	movi	r2,-129
1000b3a8:	88a2703a 	and	r17,r17,r2
1000b3ac:	003f1d06 	br	1000b024 <__alt_data_end+0xf800b024>
1000b3b0:	d8c02217 	ldw	r3,136(sp)
1000b3b4:	04c00044 	movi	r19,1
1000b3b8:	b811883a 	mov	r8,r23
1000b3bc:	18800017 	ldw	r2,0(r3)
1000b3c0:	18c00104 	addi	r3,r3,4
1000b3c4:	d8001d85 	stb	zero,118(sp)
1000b3c8:	d8801005 	stb	r2,64(sp)
1000b3cc:	d8c02215 	stw	r3,136(sp)
1000b3d0:	9829883a 	mov	r20,r19
1000b3d4:	ddc01004 	addi	r23,sp,64
1000b3d8:	0021883a 	mov	r16,zero
1000b3dc:	003f1e06 	br	1000b058 <__alt_data_end+0xf800b058>
1000b3e0:	9cc03fcc 	andi	r19,r19,255
1000b3e4:	b811883a 	mov	r8,r23
1000b3e8:	9803331e 	bne	r19,zero,1000c0b8 <___vfiprintf_internal_r+0x148c>
1000b3ec:	8880080c 	andi	r2,r17,32
1000b3f0:	10004826 	beq	r2,zero,1000b514 <___vfiprintf_internal_r+0x8e8>
1000b3f4:	d9002217 	ldw	r4,136(sp)
1000b3f8:	20800117 	ldw	r2,4(r4)
1000b3fc:	24c00017 	ldw	r19,0(r4)
1000b400:	21000204 	addi	r4,r4,8
1000b404:	d9002215 	stw	r4,136(sp)
1000b408:	1029883a 	mov	r20,r2
1000b40c:	10024c16 	blt	r2,zero,1000bd40 <___vfiprintf_internal_r+0x1114>
1000b410:	dd401d83 	ldbu	r21,118(sp)
1000b414:	80007116 	blt	r16,zero,1000b5dc <___vfiprintf_internal_r+0x9b0>
1000b418:	00ffdfc4 	movi	r3,-129
1000b41c:	9d04b03a 	or	r2,r19,r20
1000b420:	88e2703a 	and	r17,r17,r3
1000b424:	1000d126 	beq	r2,zero,1000b76c <___vfiprintf_internal_r+0xb40>
1000b428:	a0023526 	beq	r20,zero,1000bd00 <___vfiprintf_internal_r+0x10d4>
1000b42c:	ddc01a04 	addi	r23,sp,104
1000b430:	4039883a 	mov	fp,r8
1000b434:	9809883a 	mov	r4,r19
1000b438:	a00b883a 	mov	r5,r20
1000b43c:	01800284 	movi	r6,10
1000b440:	000f883a 	mov	r7,zero
1000b444:	000d1580 	call	1000d158 <__umoddi3>
1000b448:	10800c04 	addi	r2,r2,48
1000b44c:	bdffffc4 	addi	r23,r23,-1
1000b450:	9809883a 	mov	r4,r19
1000b454:	a00b883a 	mov	r5,r20
1000b458:	b8800005 	stb	r2,0(r23)
1000b45c:	01800284 	movi	r6,10
1000b460:	000f883a 	mov	r7,zero
1000b464:	000cb5c0 	call	1000cb5c <__udivdi3>
1000b468:	1027883a 	mov	r19,r2
1000b46c:	10c4b03a 	or	r2,r2,r3
1000b470:	1829883a 	mov	r20,r3
1000b474:	103fef1e 	bne	r2,zero,1000b434 <__alt_data_end+0xf800b434>
1000b478:	d9001e17 	ldw	r4,120(sp)
1000b47c:	e011883a 	mov	r8,fp
1000b480:	25e9c83a 	sub	r20,r4,r23
1000b484:	003eec06 	br	1000b038 <__alt_data_end+0xf800b038>
1000b488:	d8802307 	ldb	r2,140(sp)
1000b48c:	1002361e 	bne	r2,zero,1000bd68 <___vfiprintf_internal_r+0x113c>
1000b490:	00c00804 	movi	r3,32
1000b494:	d8c02305 	stb	r3,140(sp)
1000b498:	04c00044 	movi	r19,1
1000b49c:	b0c00007 	ldb	r3,0(r22)
1000b4a0:	003e3f06 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000b4a4:	8c400054 	ori	r17,r17,1
1000b4a8:	b0c00007 	ldb	r3,0(r22)
1000b4ac:	003e3c06 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000b4b0:	8c402014 	ori	r17,r17,128
1000b4b4:	b0c00007 	ldb	r3,0(r22)
1000b4b8:	003e3906 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000b4bc:	dc002715 	stw	r16,156(sp)
1000b4c0:	d8002515 	stw	zero,148(sp)
1000b4c4:	1f3ff404 	addi	fp,r3,-48
1000b4c8:	0009883a 	mov	r4,zero
1000b4cc:	b021883a 	mov	r16,r22
1000b4d0:	01400284 	movi	r5,10
1000b4d4:	000d71c0 	call	1000d71c <__mulsi3>
1000b4d8:	80c00007 	ldb	r3,0(r16)
1000b4dc:	e089883a 	add	r4,fp,r2
1000b4e0:	b5800044 	addi	r22,r22,1
1000b4e4:	1f3ff404 	addi	fp,r3,-48
1000b4e8:	b021883a 	mov	r16,r22
1000b4ec:	af3ff82e 	bgeu	r21,fp,1000b4d0 <__alt_data_end+0xf800b4d0>
1000b4f0:	d9002515 	stw	r4,148(sp)
1000b4f4:	dc002717 	ldw	r16,156(sp)
1000b4f8:	003e2a06 	br	1000ada4 <__alt_data_end+0xf800ada4>
1000b4fc:	9cc03fcc 	andi	r19,r19,255
1000b500:	b811883a 	mov	r8,r23
1000b504:	9802e91e 	bne	r19,zero,1000c0ac <___vfiprintf_internal_r+0x1480>
1000b508:	8c400414 	ori	r17,r17,16
1000b50c:	8880080c 	andi	r2,r17,32
1000b510:	103fb81e 	bne	r2,zero,1000b3f4 <__alt_data_end+0xf800b3f4>
1000b514:	8880040c 	andi	r2,r17,16
1000b518:	10022e26 	beq	r2,zero,1000bdd4 <___vfiprintf_internal_r+0x11a8>
1000b51c:	d9402217 	ldw	r5,136(sp)
1000b520:	2cc00017 	ldw	r19,0(r5)
1000b524:	29400104 	addi	r5,r5,4
1000b528:	d9402215 	stw	r5,136(sp)
1000b52c:	9829d7fa 	srai	r20,r19,31
1000b530:	a005883a 	mov	r2,r20
1000b534:	003fb506 	br	1000b40c <__alt_data_end+0xf800b40c>
1000b538:	9cc03fcc 	andi	r19,r19,255
1000b53c:	b811883a 	mov	r8,r23
1000b540:	9802fa1e 	bne	r19,zero,1000c12c <___vfiprintf_internal_r+0x1500>
1000b544:	8c400414 	ori	r17,r17,16
1000b548:	8880080c 	andi	r2,r17,32
1000b54c:	103f661e 	bne	r2,zero,1000b2e8 <__alt_data_end+0xf800b2e8>
1000b550:	8880040c 	andi	r2,r17,16
1000b554:	10020626 	beq	r2,zero,1000bd70 <___vfiprintf_internal_r+0x1144>
1000b558:	d9402217 	ldw	r5,136(sp)
1000b55c:	d8001d85 	stb	zero,118(sp)
1000b560:	0029883a 	mov	r20,zero
1000b564:	28800104 	addi	r2,r5,4
1000b568:	2cc00017 	ldw	r19,0(r5)
1000b56c:	80020816 	blt	r16,zero,1000bd90 <___vfiprintf_internal_r+0x1164>
1000b570:	00ffdfc4 	movi	r3,-129
1000b574:	d8802215 	stw	r2,136(sp)
1000b578:	88e2703a 	and	r17,r17,r3
1000b57c:	983f651e 	bne	r19,zero,1000b314 <__alt_data_end+0xf800b314>
1000b580:	002b883a 	mov	r21,zero
1000b584:	8002cf26 	beq	r16,zero,1000c0c4 <___vfiprintf_internal_r+0x1498>
1000b588:	0027883a 	mov	r19,zero
1000b58c:	0029883a 	mov	r20,zero
1000b590:	003f6106 	br	1000b318 <__alt_data_end+0xf800b318>
1000b594:	9cc03fcc 	andi	r19,r19,255
1000b598:	b811883a 	mov	r8,r23
1000b59c:	9802e01e 	bne	r19,zero,1000c120 <___vfiprintf_internal_r+0x14f4>
1000b5a0:	8c400414 	ori	r17,r17,16
1000b5a4:	8880080c 	andi	r2,r17,32
1000b5a8:	1000641e 	bne	r2,zero,1000b73c <___vfiprintf_internal_r+0xb10>
1000b5ac:	8880040c 	andi	r2,r17,16
1000b5b0:	1001c81e 	bne	r2,zero,1000bcd4 <___vfiprintf_internal_r+0x10a8>
1000b5b4:	8880100c 	andi	r2,r17,64
1000b5b8:	d8001d85 	stb	zero,118(sp)
1000b5bc:	1002281e 	bne	r2,zero,1000be60 <___vfiprintf_internal_r+0x1234>
1000b5c0:	d9002217 	ldw	r4,136(sp)
1000b5c4:	0029883a 	mov	r20,zero
1000b5c8:	20800104 	addi	r2,r4,4
1000b5cc:	24c00017 	ldw	r19,0(r4)
1000b5d0:	8001c60e 	bge	r16,zero,1000bcec <___vfiprintf_internal_r+0x10c0>
1000b5d4:	d8802215 	stw	r2,136(sp)
1000b5d8:	002b883a 	mov	r21,zero
1000b5dc:	9d04b03a 	or	r2,r19,r20
1000b5e0:	103f911e 	bne	r2,zero,1000b428 <__alt_data_end+0xf800b428>
1000b5e4:	00800044 	movi	r2,1
1000b5e8:	10803fcc 	andi	r2,r2,255
1000b5ec:	00c00044 	movi	r3,1
1000b5f0:	10c05f26 	beq	r2,r3,1000b770 <___vfiprintf_internal_r+0xb44>
1000b5f4:	00c00084 	movi	r3,2
1000b5f8:	10ffe31e 	bne	r2,r3,1000b588 <__alt_data_end+0xf800b588>
1000b5fc:	0027883a 	mov	r19,zero
1000b600:	0029883a 	mov	r20,zero
1000b604:	00015106 	br	1000bb4c <___vfiprintf_internal_r+0xf20>
1000b608:	9cc03fcc 	andi	r19,r19,255
1000b60c:	b811883a 	mov	r8,r23
1000b610:	9802c01e 	bne	r19,zero,1000c114 <___vfiprintf_internal_r+0x14e8>
1000b614:	01440074 	movhi	r5,4097
1000b618:	294bdc04 	addi	r5,r5,12144
1000b61c:	d9402615 	stw	r5,152(sp)
1000b620:	8880080c 	andi	r2,r17,32
1000b624:	103f541e 	bne	r2,zero,1000b378 <__alt_data_end+0xf800b378>
1000b628:	8880040c 	andi	r2,r17,16
1000b62c:	1001f226 	beq	r2,zero,1000bdf8 <___vfiprintf_internal_r+0x11cc>
1000b630:	d9402217 	ldw	r5,136(sp)
1000b634:	0029883a 	mov	r20,zero
1000b638:	2cc00017 	ldw	r19,0(r5)
1000b63c:	29400104 	addi	r5,r5,4
1000b640:	d9402215 	stw	r5,136(sp)
1000b644:	003f5106 	br	1000b38c <__alt_data_end+0xf800b38c>
1000b648:	d8c02217 	ldw	r3,136(sp)
1000b64c:	b811883a 	mov	r8,r23
1000b650:	d8001d85 	stb	zero,118(sp)
1000b654:	1dc00017 	ldw	r23,0(r3)
1000b658:	1f000104 	addi	fp,r3,4
1000b65c:	b8025926 	beq	r23,zero,1000bfc4 <___vfiprintf_internal_r+0x1398>
1000b660:	80023316 	blt	r16,zero,1000bf30 <___vfiprintf_internal_r+0x1304>
1000b664:	800d883a 	mov	r6,r16
1000b668:	000b883a 	mov	r5,zero
1000b66c:	b809883a 	mov	r4,r23
1000b670:	da002a15 	stw	r8,168(sp)
1000b674:	0008d6c0 	call	10008d6c <memchr>
1000b678:	da002a17 	ldw	r8,168(sp)
1000b67c:	10026826 	beq	r2,zero,1000c020 <___vfiprintf_internal_r+0x13f4>
1000b680:	15e9c83a 	sub	r20,r2,r23
1000b684:	dd401d83 	ldbu	r21,118(sp)
1000b688:	df002215 	stw	fp,136(sp)
1000b68c:	0021883a 	mov	r16,zero
1000b690:	003e6906 	br	1000b038 <__alt_data_end+0xf800b038>
1000b694:	9cc03fcc 	andi	r19,r19,255
1000b698:	b811883a 	mov	r8,r23
1000b69c:	983fc126 	beq	r19,zero,1000b5a4 <__alt_data_end+0xf800b5a4>
1000b6a0:	d8c02303 	ldbu	r3,140(sp)
1000b6a4:	d8c01d85 	stb	r3,118(sp)
1000b6a8:	003fbe06 	br	1000b5a4 <__alt_data_end+0xf800b5a4>
1000b6ac:	d9002217 	ldw	r4,136(sp)
1000b6b0:	d9402217 	ldw	r5,136(sp)
1000b6b4:	21000017 	ldw	r4,0(r4)
1000b6b8:	28800104 	addi	r2,r5,4
1000b6bc:	d9002515 	stw	r4,148(sp)
1000b6c0:	203e3d16 	blt	r4,zero,1000afb8 <__alt_data_end+0xf800afb8>
1000b6c4:	d8802215 	stw	r2,136(sp)
1000b6c8:	b0c00007 	ldb	r3,0(r22)
1000b6cc:	003db406 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000b6d0:	00c00ac4 	movi	r3,43
1000b6d4:	d8c02305 	stb	r3,140(sp)
1000b6d8:	04c00044 	movi	r19,1
1000b6dc:	b0c00007 	ldb	r3,0(r22)
1000b6e0:	003daf06 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000b6e4:	b0c00007 	ldb	r3,0(r22)
1000b6e8:	01000a84 	movi	r4,42
1000b6ec:	b4000044 	addi	r16,r22,1
1000b6f0:	19025e26 	beq	r3,r4,1000c06c <___vfiprintf_internal_r+0x1440>
1000b6f4:	1f3ff404 	addi	fp,r3,-48
1000b6f8:	0009883a 	mov	r4,zero
1000b6fc:	af025236 	bltu	r21,fp,1000c048 <___vfiprintf_internal_r+0x141c>
1000b700:	01400284 	movi	r5,10
1000b704:	000d71c0 	call	1000d71c <__mulsi3>
1000b708:	80c00007 	ldb	r3,0(r16)
1000b70c:	1709883a 	add	r4,r2,fp
1000b710:	85800044 	addi	r22,r16,1
1000b714:	1f3ff404 	addi	fp,r3,-48
1000b718:	b021883a 	mov	r16,r22
1000b71c:	af3ff82e 	bgeu	r21,fp,1000b700 <__alt_data_end+0xf800b700>
1000b720:	2021883a 	mov	r16,r4
1000b724:	203d9f0e 	bge	r4,zero,1000ada4 <__alt_data_end+0xf800ada4>
1000b728:	043fffc4 	movi	r16,-1
1000b72c:	003d9d06 	br	1000ada4 <__alt_data_end+0xf800ada4>
1000b730:	8c401014 	ori	r17,r17,64
1000b734:	b0c00007 	ldb	r3,0(r22)
1000b738:	003d9906 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000b73c:	d9002217 	ldw	r4,136(sp)
1000b740:	d8001d85 	stb	zero,118(sp)
1000b744:	20c00204 	addi	r3,r4,8
1000b748:	24c00017 	ldw	r19,0(r4)
1000b74c:	25000117 	ldw	r20,4(r4)
1000b750:	8001e716 	blt	r16,zero,1000bef0 <___vfiprintf_internal_r+0x12c4>
1000b754:	013fdfc4 	movi	r4,-129
1000b758:	9d04b03a 	or	r2,r19,r20
1000b75c:	d8c02215 	stw	r3,136(sp)
1000b760:	8922703a 	and	r17,r17,r4
1000b764:	002b883a 	mov	r21,zero
1000b768:	103f2f1e 	bne	r2,zero,1000b428 <__alt_data_end+0xf800b428>
1000b76c:	803e2f26 	beq	r16,zero,1000b02c <__alt_data_end+0xf800b02c>
1000b770:	0027883a 	mov	r19,zero
1000b774:	9cc00c04 	addi	r19,r19,48
1000b778:	dcc019c5 	stb	r19,103(sp)
1000b77c:	dd002817 	ldw	r20,160(sp)
1000b780:	ddc019c4 	addi	r23,sp,103
1000b784:	003e2c06 	br	1000b038 <__alt_data_end+0xf800b038>
1000b788:	9cc03fcc 	andi	r19,r19,255
1000b78c:	b811883a 	mov	r8,r23
1000b790:	9802571e 	bne	r19,zero,1000c0f0 <___vfiprintf_internal_r+0x14c4>
1000b794:	18005726 	beq	r3,zero,1000b8f4 <___vfiprintf_internal_r+0xcc8>
1000b798:	04c00044 	movi	r19,1
1000b79c:	d8c01005 	stb	r3,64(sp)
1000b7a0:	d8001d85 	stb	zero,118(sp)
1000b7a4:	9829883a 	mov	r20,r19
1000b7a8:	ddc01004 	addi	r23,sp,64
1000b7ac:	003f0a06 	br	1000b3d8 <__alt_data_end+0xf800b3d8>
1000b7b0:	d9402017 	ldw	r5,128(sp)
1000b7b4:	d9002117 	ldw	r4,132(sp)
1000b7b8:	d9801a04 	addi	r6,sp,104
1000b7bc:	da802a15 	stw	r10,168(sp)
1000b7c0:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000b7c4:	da802a17 	ldw	r10,168(sp)
1000b7c8:	1000501e 	bne	r2,zero,1000b90c <___vfiprintf_internal_r+0xce0>
1000b7cc:	d9801b17 	ldw	r6,108(sp)
1000b7d0:	d8801c17 	ldw	r2,112(sp)
1000b7d4:	d811883a 	mov	r8,sp
1000b7d8:	31000044 	addi	r4,r6,1
1000b7dc:	003e3606 	br	1000b0b8 <__alt_data_end+0xf800b0b8>
1000b7e0:	d9001b17 	ldw	r4,108(sp)
1000b7e4:	d8801c17 	ldw	r2,112(sp)
1000b7e8:	21400044 	addi	r5,r4,1
1000b7ec:	d9801d87 	ldb	r6,118(sp)
1000b7f0:	303e5226 	beq	r6,zero,1000b13c <__alt_data_end+0xf800b13c>
1000b7f4:	01800044 	movi	r6,1
1000b7f8:	d9001d84 	addi	r4,sp,118
1000b7fc:	1185883a 	add	r2,r2,r6
1000b800:	41000015 	stw	r4,0(r8)
1000b804:	41800115 	stw	r6,4(r8)
1000b808:	d8801c15 	stw	r2,112(sp)
1000b80c:	d9401b15 	stw	r5,108(sp)
1000b810:	010001c4 	movi	r4,7
1000b814:	2140b00e 	bge	r4,r5,1000bad8 <___vfiprintf_internal_r+0xeac>
1000b818:	1000f61e 	bne	r2,zero,1000bbf4 <___vfiprintf_internal_r+0xfc8>
1000b81c:	3800b31e 	bne	r7,zero,1000baec <___vfiprintf_internal_r+0xec0>
1000b820:	0009883a 	mov	r4,zero
1000b824:	300b883a 	mov	r5,r6
1000b828:	d811883a 	mov	r8,sp
1000b82c:	01802004 	movi	r6,128
1000b830:	19be5226 	beq	r3,r6,1000b17c <__alt_data_end+0xf800b17c>
1000b834:	8521c83a 	sub	r16,r16,r20
1000b838:	043e790e 	bge	zero,r16,1000b220 <__alt_data_end+0xf800b220>
1000b83c:	05400404 	movi	r21,16
1000b840:	ac01b00e 	bge	r21,r16,1000bf04 <___vfiprintf_internal_r+0x12d8>
1000b844:	01440074 	movhi	r5,4097
1000b848:	294c4204 	addi	r5,r5,12552
1000b84c:	d9402315 	stw	r5,140(sp)
1000b850:	070001c4 	movi	fp,7
1000b854:	00000506 	br	1000b86c <___vfiprintf_internal_r+0xc40>
1000b858:	21400084 	addi	r5,r4,2
1000b85c:	42000204 	addi	r8,r8,8
1000b860:	1809883a 	mov	r4,r3
1000b864:	843ffc04 	addi	r16,r16,-16
1000b868:	ac000d0e 	bge	r21,r16,1000b8a0 <___vfiprintf_internal_r+0xc74>
1000b86c:	10800404 	addi	r2,r2,16
1000b870:	20c00044 	addi	r3,r4,1
1000b874:	44800015 	stw	r18,0(r8)
1000b878:	45400115 	stw	r21,4(r8)
1000b87c:	d8801c15 	stw	r2,112(sp)
1000b880:	d8c01b15 	stw	r3,108(sp)
1000b884:	e0fff40e 	bge	fp,r3,1000b858 <__alt_data_end+0xf800b858>
1000b888:	1000101e 	bne	r2,zero,1000b8cc <___vfiprintf_internal_r+0xca0>
1000b88c:	843ffc04 	addi	r16,r16,-16
1000b890:	01400044 	movi	r5,1
1000b894:	0009883a 	mov	r4,zero
1000b898:	d811883a 	mov	r8,sp
1000b89c:	ac3ff316 	blt	r21,r16,1000b86c <__alt_data_end+0xf800b86c>
1000b8a0:	d8c02317 	ldw	r3,140(sp)
1000b8a4:	1405883a 	add	r2,r2,r16
1000b8a8:	44000115 	stw	r16,4(r8)
1000b8ac:	40c00015 	stw	r3,0(r8)
1000b8b0:	d8801c15 	stw	r2,112(sp)
1000b8b4:	d9401b15 	stw	r5,108(sp)
1000b8b8:	00c001c4 	movi	r3,7
1000b8bc:	19401916 	blt	r3,r5,1000b924 <___vfiprintf_internal_r+0xcf8>
1000b8c0:	42000204 	addi	r8,r8,8
1000b8c4:	29400044 	addi	r5,r5,1
1000b8c8:	003e5506 	br	1000b220 <__alt_data_end+0xf800b220>
1000b8cc:	d9402017 	ldw	r5,128(sp)
1000b8d0:	d9002117 	ldw	r4,132(sp)
1000b8d4:	d9801a04 	addi	r6,sp,104
1000b8d8:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000b8dc:	10000b1e 	bne	r2,zero,1000b90c <___vfiprintf_internal_r+0xce0>
1000b8e0:	d9001b17 	ldw	r4,108(sp)
1000b8e4:	d8801c17 	ldw	r2,112(sp)
1000b8e8:	d811883a 	mov	r8,sp
1000b8ec:	21400044 	addi	r5,r4,1
1000b8f0:	003fdc06 	br	1000b864 <__alt_data_end+0xf800b864>
1000b8f4:	d8801c17 	ldw	r2,112(sp)
1000b8f8:	10000426 	beq	r2,zero,1000b90c <___vfiprintf_internal_r+0xce0>
1000b8fc:	d9402017 	ldw	r5,128(sp)
1000b900:	d9002117 	ldw	r4,132(sp)
1000b904:	d9801a04 	addi	r6,sp,104
1000b908:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000b90c:	d9402017 	ldw	r5,128(sp)
1000b910:	2880030b 	ldhu	r2,12(r5)
1000b914:	1080100c 	andi	r2,r2,64
1000b918:	10014d1e 	bne	r2,zero,1000be50 <___vfiprintf_internal_r+0x1224>
1000b91c:	d8802417 	ldw	r2,144(sp)
1000b920:	003d9706 	br	1000af80 <__alt_data_end+0xf800af80>
1000b924:	1000d21e 	bne	r2,zero,1000bc70 <___vfiprintf_internal_r+0x1044>
1000b928:	00c00044 	movi	r3,1
1000b92c:	a005883a 	mov	r2,r20
1000b930:	ddc00015 	stw	r23,0(sp)
1000b934:	dd000115 	stw	r20,4(sp)
1000b938:	dd001c15 	stw	r20,112(sp)
1000b93c:	d8c01b15 	stw	r3,108(sp)
1000b940:	d811883a 	mov	r8,sp
1000b944:	42000204 	addi	r8,r8,8
1000b948:	8c40010c 	andi	r17,r17,4
1000b94c:	88004026 	beq	r17,zero,1000ba50 <___vfiprintf_internal_r+0xe24>
1000b950:	d9002517 	ldw	r4,148(sp)
1000b954:	24e3c83a 	sub	r17,r4,r19
1000b958:	04403d0e 	bge	zero,r17,1000ba50 <___vfiprintf_internal_r+0xe24>
1000b95c:	04000404 	movi	r16,16
1000b960:	8441a90e 	bge	r16,r17,1000c008 <___vfiprintf_internal_r+0x13dc>
1000b964:	00c40074 	movhi	r3,4097
1000b968:	18cc4604 	addi	r3,r3,12568
1000b96c:	d9001b17 	ldw	r4,108(sp)
1000b970:	d8c02315 	stw	r3,140(sp)
1000b974:	050001c4 	movi	r20,7
1000b978:	dd402117 	ldw	r21,132(sp)
1000b97c:	ddc02017 	ldw	r23,128(sp)
1000b980:	00000506 	br	1000b998 <___vfiprintf_internal_r+0xd6c>
1000b984:	21400084 	addi	r5,r4,2
1000b988:	42000204 	addi	r8,r8,8
1000b98c:	1809883a 	mov	r4,r3
1000b990:	8c7ffc04 	addi	r17,r17,-16
1000b994:	84400f0e 	bge	r16,r17,1000b9d4 <___vfiprintf_internal_r+0xda8>
1000b998:	01440074 	movhi	r5,4097
1000b99c:	10800404 	addi	r2,r2,16
1000b9a0:	20c00044 	addi	r3,r4,1
1000b9a4:	294c4604 	addi	r5,r5,12568
1000b9a8:	41400015 	stw	r5,0(r8)
1000b9ac:	44000115 	stw	r16,4(r8)
1000b9b0:	d8801c15 	stw	r2,112(sp)
1000b9b4:	d8c01b15 	stw	r3,108(sp)
1000b9b8:	a0fff20e 	bge	r20,r3,1000b984 <__alt_data_end+0xf800b984>
1000b9bc:	1000141e 	bne	r2,zero,1000ba10 <___vfiprintf_internal_r+0xde4>
1000b9c0:	8c7ffc04 	addi	r17,r17,-16
1000b9c4:	01400044 	movi	r5,1
1000b9c8:	0009883a 	mov	r4,zero
1000b9cc:	d811883a 	mov	r8,sp
1000b9d0:	847ff116 	blt	r16,r17,1000b998 <__alt_data_end+0xf800b998>
1000b9d4:	d8c02317 	ldw	r3,140(sp)
1000b9d8:	1445883a 	add	r2,r2,r17
1000b9dc:	44400115 	stw	r17,4(r8)
1000b9e0:	40c00015 	stw	r3,0(r8)
1000b9e4:	d8801c15 	stw	r2,112(sp)
1000b9e8:	d9401b15 	stw	r5,108(sp)
1000b9ec:	00c001c4 	movi	r3,7
1000b9f0:	1940170e 	bge	r3,r5,1000ba50 <___vfiprintf_internal_r+0xe24>
1000b9f4:	1000101e 	bne	r2,zero,1000ba38 <___vfiprintf_internal_r+0xe0c>
1000b9f8:	d8802517 	ldw	r2,148(sp)
1000b9fc:	14c11616 	blt	r2,r19,1000be58 <___vfiprintf_internal_r+0x122c>
1000ba00:	d9002417 	ldw	r4,144(sp)
1000ba04:	2089883a 	add	r4,r4,r2
1000ba08:	d9002415 	stw	r4,144(sp)
1000ba0c:	003e1806 	br	1000b270 <__alt_data_end+0xf800b270>
1000ba10:	d9801a04 	addi	r6,sp,104
1000ba14:	b80b883a 	mov	r5,r23
1000ba18:	a809883a 	mov	r4,r21
1000ba1c:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000ba20:	103fba1e 	bne	r2,zero,1000b90c <__alt_data_end+0xf800b90c>
1000ba24:	d9001b17 	ldw	r4,108(sp)
1000ba28:	d8801c17 	ldw	r2,112(sp)
1000ba2c:	d811883a 	mov	r8,sp
1000ba30:	21400044 	addi	r5,r4,1
1000ba34:	003fd606 	br	1000b990 <__alt_data_end+0xf800b990>
1000ba38:	d9402017 	ldw	r5,128(sp)
1000ba3c:	d9002117 	ldw	r4,132(sp)
1000ba40:	d9801a04 	addi	r6,sp,104
1000ba44:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000ba48:	103fb01e 	bne	r2,zero,1000b90c <__alt_data_end+0xf800b90c>
1000ba4c:	d8801c17 	ldw	r2,112(sp)
1000ba50:	d8c02517 	ldw	r3,148(sp)
1000ba54:	1cc0010e 	bge	r3,r19,1000ba5c <___vfiprintf_internal_r+0xe30>
1000ba58:	9807883a 	mov	r3,r19
1000ba5c:	d9002417 	ldw	r4,144(sp)
1000ba60:	20c9883a 	add	r4,r4,r3
1000ba64:	d9002415 	stw	r4,144(sp)
1000ba68:	103e0126 	beq	r2,zero,1000b270 <__alt_data_end+0xf800b270>
1000ba6c:	d9402017 	ldw	r5,128(sp)
1000ba70:	d9002117 	ldw	r4,132(sp)
1000ba74:	d9801a04 	addi	r6,sp,104
1000ba78:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000ba7c:	103dfc26 	beq	r2,zero,1000b270 <__alt_data_end+0xf800b270>
1000ba80:	003fa206 	br	1000b90c <__alt_data_end+0xf800b90c>
1000ba84:	d9402017 	ldw	r5,128(sp)
1000ba88:	d9002117 	ldw	r4,132(sp)
1000ba8c:	d9801a04 	addi	r6,sp,104
1000ba90:	d9c02b15 	stw	r7,172(sp)
1000ba94:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000ba98:	d9c02b17 	ldw	r7,172(sp)
1000ba9c:	103f9b1e 	bne	r2,zero,1000b90c <__alt_data_end+0xf800b90c>
1000baa0:	d9001b17 	ldw	r4,108(sp)
1000baa4:	d8801c17 	ldw	r2,112(sp)
1000baa8:	d811883a 	mov	r8,sp
1000baac:	21800044 	addi	r6,r4,1
1000bab0:	003dbf06 	br	1000b1b0 <__alt_data_end+0xf800b1b0>
1000bab4:	1000d81e 	bne	r2,zero,1000be18 <___vfiprintf_internal_r+0x11ec>
1000bab8:	d9001d87 	ldb	r4,118(sp)
1000babc:	20000a26 	beq	r4,zero,1000bae8 <___vfiprintf_internal_r+0xebc>
1000bac0:	00800044 	movi	r2,1
1000bac4:	d9001d84 	addi	r4,sp,118
1000bac8:	100b883a 	mov	r5,r2
1000bacc:	d9000015 	stw	r4,0(sp)
1000bad0:	d8800115 	stw	r2,4(sp)
1000bad4:	d811883a 	mov	r8,sp
1000bad8:	2809883a 	mov	r4,r5
1000badc:	42000204 	addi	r8,r8,8
1000bae0:	29400044 	addi	r5,r5,1
1000bae4:	003d9506 	br	1000b13c <__alt_data_end+0xf800b13c>
1000bae8:	3800fd26 	beq	r7,zero,1000bee0 <___vfiprintf_internal_r+0x12b4>
1000baec:	00800084 	movi	r2,2
1000baf0:	d9001d04 	addi	r4,sp,116
1000baf4:	d9000015 	stw	r4,0(sp)
1000baf8:	d8800115 	stw	r2,4(sp)
1000bafc:	01400044 	movi	r5,1
1000bb00:	d811883a 	mov	r8,sp
1000bb04:	2809883a 	mov	r4,r5
1000bb08:	42000204 	addi	r8,r8,8
1000bb0c:	29400044 	addi	r5,r5,1
1000bb10:	003f4606 	br	1000b82c <__alt_data_end+0xf800b82c>
1000bb14:	d8802517 	ldw	r2,148(sp)
1000bb18:	14c0010e 	bge	r2,r19,1000bb20 <___vfiprintf_internal_r+0xef4>
1000bb1c:	9805883a 	mov	r2,r19
1000bb20:	d9402417 	ldw	r5,144(sp)
1000bb24:	288b883a 	add	r5,r5,r2
1000bb28:	d9402415 	stw	r5,144(sp)
1000bb2c:	003dd006 	br	1000b270 <__alt_data_end+0xf800b270>
1000bb30:	d8001d85 	stb	zero,118(sp)
1000bb34:	80005d16 	blt	r16,zero,1000bcac <___vfiprintf_internal_r+0x1080>
1000bb38:	00ffdfc4 	movi	r3,-129
1000bb3c:	9d04b03a 	or	r2,r19,r20
1000bb40:	88e2703a 	and	r17,r17,r3
1000bb44:	103d3726 	beq	r2,zero,1000b024 <__alt_data_end+0xf800b024>
1000bb48:	002b883a 	mov	r21,zero
1000bb4c:	d9002617 	ldw	r4,152(sp)
1000bb50:	ddc01a04 	addi	r23,sp,104
1000bb54:	988003cc 	andi	r2,r19,15
1000bb58:	a006973a 	slli	r3,r20,28
1000bb5c:	2085883a 	add	r2,r4,r2
1000bb60:	9826d13a 	srli	r19,r19,4
1000bb64:	10800003 	ldbu	r2,0(r2)
1000bb68:	a028d13a 	srli	r20,r20,4
1000bb6c:	bdffffc4 	addi	r23,r23,-1
1000bb70:	1ce6b03a 	or	r19,r3,r19
1000bb74:	b8800005 	stb	r2,0(r23)
1000bb78:	9d04b03a 	or	r2,r19,r20
1000bb7c:	103ff51e 	bne	r2,zero,1000bb54 <__alt_data_end+0xf800bb54>
1000bb80:	d8801e17 	ldw	r2,120(sp)
1000bb84:	15e9c83a 	sub	r20,r2,r23
1000bb88:	003d2b06 	br	1000b038 <__alt_data_end+0xf800b038>
1000bb8c:	d9402017 	ldw	r5,128(sp)
1000bb90:	d9002117 	ldw	r4,132(sp)
1000bb94:	d9801a04 	addi	r6,sp,104
1000bb98:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000bb9c:	103f5b1e 	bne	r2,zero,1000b90c <__alt_data_end+0xf800b90c>
1000bba0:	d8801c17 	ldw	r2,112(sp)
1000bba4:	d811883a 	mov	r8,sp
1000bba8:	003f6706 	br	1000b948 <__alt_data_end+0xf800b948>
1000bbac:	d9402017 	ldw	r5,128(sp)
1000bbb0:	d9002117 	ldw	r4,132(sp)
1000bbb4:	d9801a04 	addi	r6,sp,104
1000bbb8:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000bbbc:	103f531e 	bne	r2,zero,1000b90c <__alt_data_end+0xf800b90c>
1000bbc0:	d811883a 	mov	r8,sp
1000bbc4:	003cd906 	br	1000af2c <__alt_data_end+0xf800af2c>
1000bbc8:	10803fcc 	andi	r2,r2,255
1000bbcc:	1080201c 	xori	r2,r2,128
1000bbd0:	10bfe004 	addi	r2,r2,-128
1000bbd4:	00c00c04 	movi	r3,48
1000bbd8:	10ffe926 	beq	r2,r3,1000bb80 <__alt_data_end+0xf800bb80>
1000bbdc:	b8ffffc5 	stb	r3,-1(r23)
1000bbe0:	d8c01e17 	ldw	r3,120(sp)
1000bbe4:	b8bfffc4 	addi	r2,r23,-1
1000bbe8:	102f883a 	mov	r23,r2
1000bbec:	18a9c83a 	sub	r20,r3,r2
1000bbf0:	003d1106 	br	1000b038 <__alt_data_end+0xf800b038>
1000bbf4:	d9402017 	ldw	r5,128(sp)
1000bbf8:	d9002117 	ldw	r4,132(sp)
1000bbfc:	d9801a04 	addi	r6,sp,104
1000bc00:	d8c02a15 	stw	r3,168(sp)
1000bc04:	d9c02b15 	stw	r7,172(sp)
1000bc08:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000bc0c:	d8c02a17 	ldw	r3,168(sp)
1000bc10:	d9c02b17 	ldw	r7,172(sp)
1000bc14:	103f3d1e 	bne	r2,zero,1000b90c <__alt_data_end+0xf800b90c>
1000bc18:	d9001b17 	ldw	r4,108(sp)
1000bc1c:	d8801c17 	ldw	r2,112(sp)
1000bc20:	d811883a 	mov	r8,sp
1000bc24:	21400044 	addi	r5,r4,1
1000bc28:	003d4406 	br	1000b13c <__alt_data_end+0xf800b13c>
1000bc2c:	d9402017 	ldw	r5,128(sp)
1000bc30:	d9002117 	ldw	r4,132(sp)
1000bc34:	d9801a04 	addi	r6,sp,104
1000bc38:	d8c02a15 	stw	r3,168(sp)
1000bc3c:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000bc40:	d8c02a17 	ldw	r3,168(sp)
1000bc44:	103f311e 	bne	r2,zero,1000b90c <__alt_data_end+0xf800b90c>
1000bc48:	d9001b17 	ldw	r4,108(sp)
1000bc4c:	d8801c17 	ldw	r2,112(sp)
1000bc50:	d811883a 	mov	r8,sp
1000bc54:	21400044 	addi	r5,r4,1
1000bc58:	003ef406 	br	1000b82c <__alt_data_end+0xf800b82c>
1000bc5c:	1000bd1e 	bne	r2,zero,1000bf54 <___vfiprintf_internal_r+0x1328>
1000bc60:	01400044 	movi	r5,1
1000bc64:	0009883a 	mov	r4,zero
1000bc68:	d811883a 	mov	r8,sp
1000bc6c:	003ef106 	br	1000b834 <__alt_data_end+0xf800b834>
1000bc70:	d9402017 	ldw	r5,128(sp)
1000bc74:	d9002117 	ldw	r4,132(sp)
1000bc78:	d9801a04 	addi	r6,sp,104
1000bc7c:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000bc80:	103f221e 	bne	r2,zero,1000b90c <__alt_data_end+0xf800b90c>
1000bc84:	d9401b17 	ldw	r5,108(sp)
1000bc88:	d8801c17 	ldw	r2,112(sp)
1000bc8c:	d811883a 	mov	r8,sp
1000bc90:	29400044 	addi	r5,r5,1
1000bc94:	003d6206 	br	1000b220 <__alt_data_end+0xf800b220>
1000bc98:	01440074 	movhi	r5,4097
1000bc9c:	294be104 	addi	r5,r5,12164
1000bca0:	d9402615 	stw	r5,152(sp)
1000bca4:	d8c02215 	stw	r3,136(sp)
1000bca8:	1023883a 	mov	r17,r2
1000bcac:	9d04b03a 	or	r2,r19,r20
1000bcb0:	103fa51e 	bne	r2,zero,1000bb48 <__alt_data_end+0xf800bb48>
1000bcb4:	002b883a 	mov	r21,zero
1000bcb8:	00800084 	movi	r2,2
1000bcbc:	003e4a06 	br	1000b5e8 <__alt_data_end+0xf800b5e8>
1000bcc0:	01440074 	movhi	r5,4097
1000bcc4:	294be104 	addi	r5,r5,12164
1000bcc8:	002b883a 	mov	r21,zero
1000bccc:	d9402615 	stw	r5,152(sp)
1000bcd0:	003f9e06 	br	1000bb4c <__alt_data_end+0xf800bb4c>
1000bcd4:	d9402217 	ldw	r5,136(sp)
1000bcd8:	d8001d85 	stb	zero,118(sp)
1000bcdc:	0029883a 	mov	r20,zero
1000bce0:	28800104 	addi	r2,r5,4
1000bce4:	2cc00017 	ldw	r19,0(r5)
1000bce8:	803e3a16 	blt	r16,zero,1000b5d4 <__alt_data_end+0xf800b5d4>
1000bcec:	00ffdfc4 	movi	r3,-129
1000bcf0:	d8802215 	stw	r2,136(sp)
1000bcf4:	88e2703a 	and	r17,r17,r3
1000bcf8:	002b883a 	mov	r21,zero
1000bcfc:	983e9b26 	beq	r19,zero,1000b76c <__alt_data_end+0xf800b76c>
1000bd00:	00800244 	movi	r2,9
1000bd04:	14fdc936 	bltu	r2,r19,1000b42c <__alt_data_end+0xf800b42c>
1000bd08:	003e9a06 	br	1000b774 <__alt_data_end+0xf800b774>
1000bd0c:	00800c04 	movi	r2,48
1000bd10:	d8c01d45 	stb	r3,117(sp)
1000bd14:	d8801d05 	stb	r2,116(sp)
1000bd18:	d8001d85 	stb	zero,118(sp)
1000bd1c:	88c00094 	ori	r3,r17,2
1000bd20:	80009c16 	blt	r16,zero,1000bf94 <___vfiprintf_internal_r+0x1368>
1000bd24:	00bfdfc4 	movi	r2,-129
1000bd28:	88a2703a 	and	r17,r17,r2
1000bd2c:	8c400094 	ori	r17,r17,2
1000bd30:	002b883a 	mov	r21,zero
1000bd34:	003f8506 	br	1000bb4c <__alt_data_end+0xf800bb4c>
1000bd38:	b029883a 	mov	r20,r22
1000bd3c:	003c0b06 	br	1000ad6c <__alt_data_end+0xf800ad6c>
1000bd40:	04e7c83a 	sub	r19,zero,r19
1000bd44:	05400b44 	movi	r21,45
1000bd48:	9804c03a 	cmpne	r2,r19,zero
1000bd4c:	0529c83a 	sub	r20,zero,r20
1000bd50:	dd401d85 	stb	r21,118(sp)
1000bd54:	a0a9c83a 	sub	r20,r20,r2
1000bd58:	80009716 	blt	r16,zero,1000bfb8 <___vfiprintf_internal_r+0x138c>
1000bd5c:	00bfdfc4 	movi	r2,-129
1000bd60:	88a2703a 	and	r17,r17,r2
1000bd64:	003db006 	br	1000b428 <__alt_data_end+0xf800b428>
1000bd68:	b0c00007 	ldb	r3,0(r22)
1000bd6c:	003c0c06 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000bd70:	8880100c 	andi	r2,r17,64
1000bd74:	d8001d85 	stb	zero,118(sp)
1000bd78:	1000461e 	bne	r2,zero,1000be94 <___vfiprintf_internal_r+0x1268>
1000bd7c:	d9002217 	ldw	r4,136(sp)
1000bd80:	0029883a 	mov	r20,zero
1000bd84:	20800104 	addi	r2,r4,4
1000bd88:	24c00017 	ldw	r19,0(r4)
1000bd8c:	803df80e 	bge	r16,zero,1000b570 <__alt_data_end+0xf800b570>
1000bd90:	9d06b03a 	or	r3,r19,r20
1000bd94:	d8802215 	stw	r2,136(sp)
1000bd98:	183d5e1e 	bne	r3,zero,1000b314 <__alt_data_end+0xf800b314>
1000bd9c:	002b883a 	mov	r21,zero
1000bda0:	0005883a 	mov	r2,zero
1000bda4:	003e1006 	br	1000b5e8 <__alt_data_end+0xf800b5e8>
1000bda8:	8880040c 	andi	r2,r17,16
1000bdac:	1000321e 	bne	r2,zero,1000be78 <___vfiprintf_internal_r+0x124c>
1000bdb0:	8c40100c 	andi	r17,r17,64
1000bdb4:	88008d26 	beq	r17,zero,1000bfec <___vfiprintf_internal_r+0x13c0>
1000bdb8:	d9402217 	ldw	r5,136(sp)
1000bdbc:	d8c02417 	ldw	r3,144(sp)
1000bdc0:	28800017 	ldw	r2,0(r5)
1000bdc4:	29400104 	addi	r5,r5,4
1000bdc8:	d9402215 	stw	r5,136(sp)
1000bdcc:	10c0000d 	sth	r3,0(r2)
1000bdd0:	003bca06 	br	1000acfc <__alt_data_end+0xf800acfc>
1000bdd4:	8880100c 	andi	r2,r17,64
1000bdd8:	10003a26 	beq	r2,zero,1000bec4 <___vfiprintf_internal_r+0x1298>
1000bddc:	d8802217 	ldw	r2,136(sp)
1000bde0:	14c0000f 	ldh	r19,0(r2)
1000bde4:	10800104 	addi	r2,r2,4
1000bde8:	d8802215 	stw	r2,136(sp)
1000bdec:	9829d7fa 	srai	r20,r19,31
1000bdf0:	a005883a 	mov	r2,r20
1000bdf4:	003d8506 	br	1000b40c <__alt_data_end+0xf800b40c>
1000bdf8:	8880100c 	andi	r2,r17,64
1000bdfc:	10002b26 	beq	r2,zero,1000beac <___vfiprintf_internal_r+0x1280>
1000be00:	d8802217 	ldw	r2,136(sp)
1000be04:	0029883a 	mov	r20,zero
1000be08:	14c0000b 	ldhu	r19,0(r2)
1000be0c:	10800104 	addi	r2,r2,4
1000be10:	d8802215 	stw	r2,136(sp)
1000be14:	003d5d06 	br	1000b38c <__alt_data_end+0xf800b38c>
1000be18:	d9402017 	ldw	r5,128(sp)
1000be1c:	d9002117 	ldw	r4,132(sp)
1000be20:	d9801a04 	addi	r6,sp,104
1000be24:	d8c02a15 	stw	r3,168(sp)
1000be28:	d9c02b15 	stw	r7,172(sp)
1000be2c:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000be30:	d8c02a17 	ldw	r3,168(sp)
1000be34:	d9c02b17 	ldw	r7,172(sp)
1000be38:	103eb41e 	bne	r2,zero,1000b90c <__alt_data_end+0xf800b90c>
1000be3c:	d9001b17 	ldw	r4,108(sp)
1000be40:	d8801c17 	ldw	r2,112(sp)
1000be44:	d811883a 	mov	r8,sp
1000be48:	21400044 	addi	r5,r4,1
1000be4c:	003e6706 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000be50:	00bfffc4 	movi	r2,-1
1000be54:	003c4a06 	br	1000af80 <__alt_data_end+0xf800af80>
1000be58:	9805883a 	mov	r2,r19
1000be5c:	003ee806 	br	1000ba00 <__alt_data_end+0xf800ba00>
1000be60:	d8c02217 	ldw	r3,136(sp)
1000be64:	0029883a 	mov	r20,zero
1000be68:	18800104 	addi	r2,r3,4
1000be6c:	1cc0000b 	ldhu	r19,0(r3)
1000be70:	803f9e0e 	bge	r16,zero,1000bcec <__alt_data_end+0xf800bcec>
1000be74:	003dd706 	br	1000b5d4 <__alt_data_end+0xf800b5d4>
1000be78:	d8c02217 	ldw	r3,136(sp)
1000be7c:	d9002417 	ldw	r4,144(sp)
1000be80:	18800017 	ldw	r2,0(r3)
1000be84:	18c00104 	addi	r3,r3,4
1000be88:	d8c02215 	stw	r3,136(sp)
1000be8c:	11000015 	stw	r4,0(r2)
1000be90:	003b9a06 	br	1000acfc <__alt_data_end+0xf800acfc>
1000be94:	d8c02217 	ldw	r3,136(sp)
1000be98:	0029883a 	mov	r20,zero
1000be9c:	18800104 	addi	r2,r3,4
1000bea0:	1cc0000b 	ldhu	r19,0(r3)
1000bea4:	803db20e 	bge	r16,zero,1000b570 <__alt_data_end+0xf800b570>
1000bea8:	003fb906 	br	1000bd90 <__alt_data_end+0xf800bd90>
1000beac:	d9002217 	ldw	r4,136(sp)
1000beb0:	0029883a 	mov	r20,zero
1000beb4:	24c00017 	ldw	r19,0(r4)
1000beb8:	21000104 	addi	r4,r4,4
1000bebc:	d9002215 	stw	r4,136(sp)
1000bec0:	003d3206 	br	1000b38c <__alt_data_end+0xf800b38c>
1000bec4:	d8c02217 	ldw	r3,136(sp)
1000bec8:	1cc00017 	ldw	r19,0(r3)
1000becc:	18c00104 	addi	r3,r3,4
1000bed0:	d8c02215 	stw	r3,136(sp)
1000bed4:	9829d7fa 	srai	r20,r19,31
1000bed8:	a005883a 	mov	r2,r20
1000bedc:	003d4b06 	br	1000b40c <__alt_data_end+0xf800b40c>
1000bee0:	0009883a 	mov	r4,zero
1000bee4:	01400044 	movi	r5,1
1000bee8:	d811883a 	mov	r8,sp
1000beec:	003e4f06 	br	1000b82c <__alt_data_end+0xf800b82c>
1000bef0:	d8c02215 	stw	r3,136(sp)
1000bef4:	002b883a 	mov	r21,zero
1000bef8:	003db806 	br	1000b5dc <__alt_data_end+0xf800b5dc>
1000befc:	d811883a 	mov	r8,sp
1000bf00:	003e9606 	br	1000b95c <__alt_data_end+0xf800b95c>
1000bf04:	01040074 	movhi	r4,4097
1000bf08:	210c4204 	addi	r4,r4,12552
1000bf0c:	d9002315 	stw	r4,140(sp)
1000bf10:	003e6306 	br	1000b8a0 <__alt_data_end+0xf800b8a0>
1000bf14:	b0c00043 	ldbu	r3,1(r22)
1000bf18:	8c400814 	ori	r17,r17,32
1000bf1c:	b5800044 	addi	r22,r22,1
1000bf20:	18c03fcc 	andi	r3,r3,255
1000bf24:	18c0201c 	xori	r3,r3,128
1000bf28:	18ffe004 	addi	r3,r3,-128
1000bf2c:	003b9c06 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000bf30:	b809883a 	mov	r4,r23
1000bf34:	da002a15 	stw	r8,168(sp)
1000bf38:	000339c0 	call	1000339c <strlen>
1000bf3c:	1029883a 	mov	r20,r2
1000bf40:	dd401d83 	ldbu	r21,118(sp)
1000bf44:	df002215 	stw	fp,136(sp)
1000bf48:	0021883a 	mov	r16,zero
1000bf4c:	da002a17 	ldw	r8,168(sp)
1000bf50:	003c3906 	br	1000b038 <__alt_data_end+0xf800b038>
1000bf54:	d9402017 	ldw	r5,128(sp)
1000bf58:	d9002117 	ldw	r4,132(sp)
1000bf5c:	d9801a04 	addi	r6,sp,104
1000bf60:	000ab180 	call	1000ab18 <__sprint_r.part.0>
1000bf64:	103e691e 	bne	r2,zero,1000b90c <__alt_data_end+0xf800b90c>
1000bf68:	d9001b17 	ldw	r4,108(sp)
1000bf6c:	d8801c17 	ldw	r2,112(sp)
1000bf70:	d811883a 	mov	r8,sp
1000bf74:	21400044 	addi	r5,r4,1
1000bf78:	003e2e06 	br	1000b834 <__alt_data_end+0xf800b834>
1000bf7c:	01040074 	movhi	r4,4097
1000bf80:	210c4604 	addi	r4,r4,12568
1000bf84:	d9002315 	stw	r4,140(sp)
1000bf88:	d9001b17 	ldw	r4,108(sp)
1000bf8c:	21000044 	addi	r4,r4,1
1000bf90:	003c5e06 	br	1000b10c <__alt_data_end+0xf800b10c>
1000bf94:	002b883a 	mov	r21,zero
1000bf98:	00800084 	movi	r2,2
1000bf9c:	10803fcc 	andi	r2,r2,255
1000bfa0:	01000044 	movi	r4,1
1000bfa4:	11002b26 	beq	r2,r4,1000c054 <___vfiprintf_internal_r+0x1428>
1000bfa8:	01000084 	movi	r4,2
1000bfac:	11002b1e 	bne	r2,r4,1000c05c <___vfiprintf_internal_r+0x1430>
1000bfb0:	1823883a 	mov	r17,r3
1000bfb4:	003ee506 	br	1000bb4c <__alt_data_end+0xf800bb4c>
1000bfb8:	8807883a 	mov	r3,r17
1000bfbc:	00800044 	movi	r2,1
1000bfc0:	003ff606 	br	1000bf9c <__alt_data_end+0xf800bf9c>
1000bfc4:	00800184 	movi	r2,6
1000bfc8:	1400012e 	bgeu	r2,r16,1000bfd0 <___vfiprintf_internal_r+0x13a4>
1000bfcc:	1021883a 	mov	r16,r2
1000bfd0:	8029883a 	mov	r20,r16
1000bfd4:	8027883a 	mov	r19,r16
1000bfd8:	80002216 	blt	r16,zero,1000c064 <___vfiprintf_internal_r+0x1438>
1000bfdc:	05c40074 	movhi	r23,4097
1000bfe0:	df002215 	stw	fp,136(sp)
1000bfe4:	bdcbe604 	addi	r23,r23,12184
1000bfe8:	003cfb06 	br	1000b3d8 <__alt_data_end+0xf800b3d8>
1000bfec:	d9002217 	ldw	r4,136(sp)
1000bff0:	d9402417 	ldw	r5,144(sp)
1000bff4:	20800017 	ldw	r2,0(r4)
1000bff8:	21000104 	addi	r4,r4,4
1000bffc:	d9002215 	stw	r4,136(sp)
1000c000:	11400015 	stw	r5,0(r2)
1000c004:	003b3d06 	br	1000acfc <__alt_data_end+0xf800acfc>
1000c008:	01440074 	movhi	r5,4097
1000c00c:	294c4604 	addi	r5,r5,12568
1000c010:	d9402315 	stw	r5,140(sp)
1000c014:	d9401b17 	ldw	r5,108(sp)
1000c018:	29400044 	addi	r5,r5,1
1000c01c:	003e6d06 	br	1000b9d4 <__alt_data_end+0xf800b9d4>
1000c020:	8029883a 	mov	r20,r16
1000c024:	dd401d83 	ldbu	r21,118(sp)
1000c028:	df002215 	stw	fp,136(sp)
1000c02c:	0021883a 	mov	r16,zero
1000c030:	003c0106 	br	1000b038 <__alt_data_end+0xf800b038>
1000c034:	00c40074 	movhi	r3,4097
1000c038:	18cc4204 	addi	r3,r3,12552
1000c03c:	d8c02315 	stw	r3,140(sp)
1000c040:	280d883a 	mov	r6,r5
1000c044:	003c6906 	br	1000b1ec <__alt_data_end+0xf800b1ec>
1000c048:	802d883a 	mov	r22,r16
1000c04c:	0021883a 	mov	r16,zero
1000c050:	003b5406 	br	1000ada4 <__alt_data_end+0xf800ada4>
1000c054:	1823883a 	mov	r17,r3
1000c058:	003cf306 	br	1000b428 <__alt_data_end+0xf800b428>
1000c05c:	1823883a 	mov	r17,r3
1000c060:	003cad06 	br	1000b318 <__alt_data_end+0xf800b318>
1000c064:	0027883a 	mov	r19,zero
1000c068:	003fdc06 	br	1000bfdc <__alt_data_end+0xf800bfdc>
1000c06c:	d9402217 	ldw	r5,136(sp)
1000c070:	8005883a 	mov	r2,r16
1000c074:	b0c00043 	ldbu	r3,1(r22)
1000c078:	2c000017 	ldw	r16,0(r5)
1000c07c:	29000104 	addi	r4,r5,4
1000c080:	d9002215 	stw	r4,136(sp)
1000c084:	102d883a 	mov	r22,r2
1000c088:	803fa50e 	bge	r16,zero,1000bf20 <__alt_data_end+0xf800bf20>
1000c08c:	18c03fcc 	andi	r3,r3,255
1000c090:	18c0201c 	xori	r3,r3,128
1000c094:	043fffc4 	movi	r16,-1
1000c098:	18ffe004 	addi	r3,r3,-128
1000c09c:	003b4006 	br	1000ada0 <__alt_data_end+0xf800ada0>
1000c0a0:	d9402303 	ldbu	r5,140(sp)
1000c0a4:	d9401d85 	stb	r5,118(sp)
1000c0a8:	003cae06 	br	1000b364 <__alt_data_end+0xf800b364>
1000c0ac:	d8c02303 	ldbu	r3,140(sp)
1000c0b0:	d8c01d85 	stb	r3,118(sp)
1000c0b4:	003d1406 	br	1000b508 <__alt_data_end+0xf800b508>
1000c0b8:	d8c02303 	ldbu	r3,140(sp)
1000c0bc:	d8c01d85 	stb	r3,118(sp)
1000c0c0:	003cca06 	br	1000b3ec <__alt_data_end+0xf800b3ec>
1000c0c4:	8880004c 	andi	r2,r17,1
1000c0c8:	002b883a 	mov	r21,zero
1000c0cc:	10000526 	beq	r2,zero,1000c0e4 <___vfiprintf_internal_r+0x14b8>
1000c0d0:	00800c04 	movi	r2,48
1000c0d4:	d88019c5 	stb	r2,103(sp)
1000c0d8:	dd002817 	ldw	r20,160(sp)
1000c0dc:	ddc019c4 	addi	r23,sp,103
1000c0e0:	003bd506 	br	1000b038 <__alt_data_end+0xf800b038>
1000c0e4:	0029883a 	mov	r20,zero
1000c0e8:	ddc01a04 	addi	r23,sp,104
1000c0ec:	003bd206 	br	1000b038 <__alt_data_end+0xf800b038>
1000c0f0:	d9002303 	ldbu	r4,140(sp)
1000c0f4:	d9001d85 	stb	r4,118(sp)
1000c0f8:	003da606 	br	1000b794 <__alt_data_end+0xf800b794>
1000c0fc:	d8c02303 	ldbu	r3,140(sp)
1000c100:	d8c01d85 	stb	r3,118(sp)
1000c104:	003c7606 	br	1000b2e0 <__alt_data_end+0xf800b2e0>
1000c108:	d8c02303 	ldbu	r3,140(sp)
1000c10c:	d8c01d85 	stb	r3,118(sp)
1000c110:	003c6506 	br	1000b2a8 <__alt_data_end+0xf800b2a8>
1000c114:	d9002303 	ldbu	r4,140(sp)
1000c118:	d9001d85 	stb	r4,118(sp)
1000c11c:	003d3d06 	br	1000b614 <__alt_data_end+0xf800b614>
1000c120:	d8c02303 	ldbu	r3,140(sp)
1000c124:	d8c01d85 	stb	r3,118(sp)
1000c128:	003d1d06 	br	1000b5a0 <__alt_data_end+0xf800b5a0>
1000c12c:	d8c02303 	ldbu	r3,140(sp)
1000c130:	d8c01d85 	stb	r3,118(sp)
1000c134:	003d0306 	br	1000b544 <__alt_data_end+0xf800b544>

1000c138 <__vfiprintf_internal>:
1000c138:	00840074 	movhi	r2,4097
1000c13c:	10934c04 	addi	r2,r2,19760
1000c140:	300f883a 	mov	r7,r6
1000c144:	280d883a 	mov	r6,r5
1000c148:	200b883a 	mov	r5,r4
1000c14c:	11000017 	ldw	r4,0(r2)
1000c150:	000ac2c1 	jmpi	1000ac2c <___vfiprintf_internal_r>

1000c154 <__sbprintf>:
1000c154:	2880030b 	ldhu	r2,12(r5)
1000c158:	2ac01917 	ldw	r11,100(r5)
1000c15c:	2a80038b 	ldhu	r10,14(r5)
1000c160:	2a400717 	ldw	r9,28(r5)
1000c164:	2a000917 	ldw	r8,36(r5)
1000c168:	defee204 	addi	sp,sp,-1144
1000c16c:	00c10004 	movi	r3,1024
1000c170:	dc011a15 	stw	r16,1128(sp)
1000c174:	10bfff4c 	andi	r2,r2,65533
1000c178:	2821883a 	mov	r16,r5
1000c17c:	d8cb883a 	add	r5,sp,r3
1000c180:	dc811c15 	stw	r18,1136(sp)
1000c184:	dc411b15 	stw	r17,1132(sp)
1000c188:	dfc11d15 	stw	ra,1140(sp)
1000c18c:	2025883a 	mov	r18,r4
1000c190:	d881030d 	sth	r2,1036(sp)
1000c194:	dac11915 	stw	r11,1124(sp)
1000c198:	da81038d 	sth	r10,1038(sp)
1000c19c:	da410715 	stw	r9,1052(sp)
1000c1a0:	da010915 	stw	r8,1060(sp)
1000c1a4:	dec10015 	stw	sp,1024(sp)
1000c1a8:	dec10415 	stw	sp,1040(sp)
1000c1ac:	d8c10215 	stw	r3,1032(sp)
1000c1b0:	d8c10515 	stw	r3,1044(sp)
1000c1b4:	d8010615 	stw	zero,1048(sp)
1000c1b8:	000ac2c0 	call	1000ac2c <___vfiprintf_internal_r>
1000c1bc:	1023883a 	mov	r17,r2
1000c1c0:	10000416 	blt	r2,zero,1000c1d4 <__sbprintf+0x80>
1000c1c4:	d9410004 	addi	r5,sp,1024
1000c1c8:	9009883a 	mov	r4,r18
1000c1cc:	00074080 	call	10007408 <_fflush_r>
1000c1d0:	10000d1e 	bne	r2,zero,1000c208 <__sbprintf+0xb4>
1000c1d4:	d881030b 	ldhu	r2,1036(sp)
1000c1d8:	1080100c 	andi	r2,r2,64
1000c1dc:	10000326 	beq	r2,zero,1000c1ec <__sbprintf+0x98>
1000c1e0:	8080030b 	ldhu	r2,12(r16)
1000c1e4:	10801014 	ori	r2,r2,64
1000c1e8:	8080030d 	sth	r2,12(r16)
1000c1ec:	8805883a 	mov	r2,r17
1000c1f0:	dfc11d17 	ldw	ra,1140(sp)
1000c1f4:	dc811c17 	ldw	r18,1136(sp)
1000c1f8:	dc411b17 	ldw	r17,1132(sp)
1000c1fc:	dc011a17 	ldw	r16,1128(sp)
1000c200:	dec11e04 	addi	sp,sp,1144
1000c204:	f800283a 	ret
1000c208:	047fffc4 	movi	r17,-1
1000c20c:	003ff106 	br	1000c1d4 <__alt_data_end+0xf800c1d4>

1000c210 <_write_r>:
1000c210:	defffd04 	addi	sp,sp,-12
1000c214:	2805883a 	mov	r2,r5
1000c218:	dc000015 	stw	r16,0(sp)
1000c21c:	04040074 	movhi	r16,4097
1000c220:	dc400115 	stw	r17,4(sp)
1000c224:	300b883a 	mov	r5,r6
1000c228:	841a3004 	addi	r16,r16,26816
1000c22c:	2023883a 	mov	r17,r4
1000c230:	380d883a 	mov	r6,r7
1000c234:	1009883a 	mov	r4,r2
1000c238:	dfc00215 	stw	ra,8(sp)
1000c23c:	80000015 	stw	zero,0(r16)
1000c240:	00108ac0 	call	100108ac <write>
1000c244:	00ffffc4 	movi	r3,-1
1000c248:	10c00526 	beq	r2,r3,1000c260 <_write_r+0x50>
1000c24c:	dfc00217 	ldw	ra,8(sp)
1000c250:	dc400117 	ldw	r17,4(sp)
1000c254:	dc000017 	ldw	r16,0(sp)
1000c258:	dec00304 	addi	sp,sp,12
1000c25c:	f800283a 	ret
1000c260:	80c00017 	ldw	r3,0(r16)
1000c264:	183ff926 	beq	r3,zero,1000c24c <__alt_data_end+0xf800c24c>
1000c268:	88c00015 	stw	r3,0(r17)
1000c26c:	003ff706 	br	1000c24c <__alt_data_end+0xf800c24c>

1000c270 <_close_r>:
1000c270:	defffd04 	addi	sp,sp,-12
1000c274:	dc000015 	stw	r16,0(sp)
1000c278:	04040074 	movhi	r16,4097
1000c27c:	dc400115 	stw	r17,4(sp)
1000c280:	841a3004 	addi	r16,r16,26816
1000c284:	2023883a 	mov	r17,r4
1000c288:	2809883a 	mov	r4,r5
1000c28c:	dfc00215 	stw	ra,8(sp)
1000c290:	80000015 	stw	zero,0(r16)
1000c294:	00100240 	call	10010024 <close>
1000c298:	00ffffc4 	movi	r3,-1
1000c29c:	10c00526 	beq	r2,r3,1000c2b4 <_close_r+0x44>
1000c2a0:	dfc00217 	ldw	ra,8(sp)
1000c2a4:	dc400117 	ldw	r17,4(sp)
1000c2a8:	dc000017 	ldw	r16,0(sp)
1000c2ac:	dec00304 	addi	sp,sp,12
1000c2b0:	f800283a 	ret
1000c2b4:	80c00017 	ldw	r3,0(r16)
1000c2b8:	183ff926 	beq	r3,zero,1000c2a0 <__alt_data_end+0xf800c2a0>
1000c2bc:	88c00015 	stw	r3,0(r17)
1000c2c0:	003ff706 	br	1000c2a0 <__alt_data_end+0xf800c2a0>

1000c2c4 <_calloc_r>:
1000c2c4:	defffe04 	addi	sp,sp,-8
1000c2c8:	2805883a 	mov	r2,r5
1000c2cc:	dc000015 	stw	r16,0(sp)
1000c2d0:	300b883a 	mov	r5,r6
1000c2d4:	2021883a 	mov	r16,r4
1000c2d8:	1009883a 	mov	r4,r2
1000c2dc:	dfc00115 	stw	ra,4(sp)
1000c2e0:	000d71c0 	call	1000d71c <__mulsi3>
1000c2e4:	100b883a 	mov	r5,r2
1000c2e8:	8009883a 	mov	r4,r16
1000c2ec:	00085600 	call	10008560 <_malloc_r>
1000c2f0:	10002926 	beq	r2,zero,1000c398 <_calloc_r+0xd4>
1000c2f4:	11bfff17 	ldw	r6,-4(r2)
1000c2f8:	1021883a 	mov	r16,r2
1000c2fc:	00bfff04 	movi	r2,-4
1000c300:	308c703a 	and	r6,r6,r2
1000c304:	00c00904 	movi	r3,36
1000c308:	308d883a 	add	r6,r6,r2
1000c30c:	19801636 	bltu	r3,r6,1000c368 <_calloc_r+0xa4>
1000c310:	008004c4 	movi	r2,19
1000c314:	11800b2e 	bgeu	r2,r6,1000c344 <_calloc_r+0x80>
1000c318:	80000015 	stw	zero,0(r16)
1000c31c:	80000115 	stw	zero,4(r16)
1000c320:	008006c4 	movi	r2,27
1000c324:	11801a2e 	bgeu	r2,r6,1000c390 <_calloc_r+0xcc>
1000c328:	80000215 	stw	zero,8(r16)
1000c32c:	80000315 	stw	zero,12(r16)
1000c330:	30c0151e 	bne	r6,r3,1000c388 <_calloc_r+0xc4>
1000c334:	80000415 	stw	zero,16(r16)
1000c338:	80800604 	addi	r2,r16,24
1000c33c:	80000515 	stw	zero,20(r16)
1000c340:	00000106 	br	1000c348 <_calloc_r+0x84>
1000c344:	8005883a 	mov	r2,r16
1000c348:	10000015 	stw	zero,0(r2)
1000c34c:	10000115 	stw	zero,4(r2)
1000c350:	10000215 	stw	zero,8(r2)
1000c354:	8005883a 	mov	r2,r16
1000c358:	dfc00117 	ldw	ra,4(sp)
1000c35c:	dc000017 	ldw	r16,0(sp)
1000c360:	dec00204 	addi	sp,sp,8
1000c364:	f800283a 	ret
1000c368:	000b883a 	mov	r5,zero
1000c36c:	8009883a 	mov	r4,r16
1000c370:	00090f40 	call	100090f4 <memset>
1000c374:	8005883a 	mov	r2,r16
1000c378:	dfc00117 	ldw	ra,4(sp)
1000c37c:	dc000017 	ldw	r16,0(sp)
1000c380:	dec00204 	addi	sp,sp,8
1000c384:	f800283a 	ret
1000c388:	80800404 	addi	r2,r16,16
1000c38c:	003fee06 	br	1000c348 <__alt_data_end+0xf800c348>
1000c390:	80800204 	addi	r2,r16,8
1000c394:	003fec06 	br	1000c348 <__alt_data_end+0xf800c348>
1000c398:	0005883a 	mov	r2,zero
1000c39c:	003fee06 	br	1000c358 <__alt_data_end+0xf800c358>

1000c3a0 <_fclose_r>:
1000c3a0:	28003926 	beq	r5,zero,1000c488 <_fclose_r+0xe8>
1000c3a4:	defffc04 	addi	sp,sp,-16
1000c3a8:	dc400115 	stw	r17,4(sp)
1000c3ac:	dc000015 	stw	r16,0(sp)
1000c3b0:	dfc00315 	stw	ra,12(sp)
1000c3b4:	dc800215 	stw	r18,8(sp)
1000c3b8:	2023883a 	mov	r17,r4
1000c3bc:	2821883a 	mov	r16,r5
1000c3c0:	20000226 	beq	r4,zero,1000c3cc <_fclose_r+0x2c>
1000c3c4:	20800e17 	ldw	r2,56(r4)
1000c3c8:	10002726 	beq	r2,zero,1000c468 <_fclose_r+0xc8>
1000c3cc:	8080030f 	ldh	r2,12(r16)
1000c3d0:	1000071e 	bne	r2,zero,1000c3f0 <_fclose_r+0x50>
1000c3d4:	0005883a 	mov	r2,zero
1000c3d8:	dfc00317 	ldw	ra,12(sp)
1000c3dc:	dc800217 	ldw	r18,8(sp)
1000c3e0:	dc400117 	ldw	r17,4(sp)
1000c3e4:	dc000017 	ldw	r16,0(sp)
1000c3e8:	dec00404 	addi	sp,sp,16
1000c3ec:	f800283a 	ret
1000c3f0:	800b883a 	mov	r5,r16
1000c3f4:	8809883a 	mov	r4,r17
1000c3f8:	00071ec0 	call	100071ec <__sflush_r>
1000c3fc:	1025883a 	mov	r18,r2
1000c400:	80800b17 	ldw	r2,44(r16)
1000c404:	10000426 	beq	r2,zero,1000c418 <_fclose_r+0x78>
1000c408:	81400717 	ldw	r5,28(r16)
1000c40c:	8809883a 	mov	r4,r17
1000c410:	103ee83a 	callr	r2
1000c414:	10001616 	blt	r2,zero,1000c470 <_fclose_r+0xd0>
1000c418:	8080030b 	ldhu	r2,12(r16)
1000c41c:	1080200c 	andi	r2,r2,128
1000c420:	1000151e 	bne	r2,zero,1000c478 <_fclose_r+0xd8>
1000c424:	81400c17 	ldw	r5,48(r16)
1000c428:	28000526 	beq	r5,zero,1000c440 <_fclose_r+0xa0>
1000c42c:	80801004 	addi	r2,r16,64
1000c430:	28800226 	beq	r5,r2,1000c43c <_fclose_r+0x9c>
1000c434:	8809883a 	mov	r4,r17
1000c438:	00079680 	call	10007968 <_free_r>
1000c43c:	80000c15 	stw	zero,48(r16)
1000c440:	81401117 	ldw	r5,68(r16)
1000c444:	28000326 	beq	r5,zero,1000c454 <_fclose_r+0xb4>
1000c448:	8809883a 	mov	r4,r17
1000c44c:	00079680 	call	10007968 <_free_r>
1000c450:	80001115 	stw	zero,68(r16)
1000c454:	00078040 	call	10007804 <__sfp_lock_acquire>
1000c458:	8000030d 	sth	zero,12(r16)
1000c45c:	00078080 	call	10007808 <__sfp_lock_release>
1000c460:	9005883a 	mov	r2,r18
1000c464:	003fdc06 	br	1000c3d8 <__alt_data_end+0xf800c3d8>
1000c468:	00077f40 	call	100077f4 <__sinit>
1000c46c:	003fd706 	br	1000c3cc <__alt_data_end+0xf800c3cc>
1000c470:	04bfffc4 	movi	r18,-1
1000c474:	003fe806 	br	1000c418 <__alt_data_end+0xf800c418>
1000c478:	81400417 	ldw	r5,16(r16)
1000c47c:	8809883a 	mov	r4,r17
1000c480:	00079680 	call	10007968 <_free_r>
1000c484:	003fe706 	br	1000c424 <__alt_data_end+0xf800c424>
1000c488:	0005883a 	mov	r2,zero
1000c48c:	f800283a 	ret

1000c490 <fclose>:
1000c490:	00840074 	movhi	r2,4097
1000c494:	10934c04 	addi	r2,r2,19760
1000c498:	200b883a 	mov	r5,r4
1000c49c:	11000017 	ldw	r4,0(r2)
1000c4a0:	000c3a01 	jmpi	1000c3a0 <_fclose_r>

1000c4a4 <__fputwc>:
1000c4a4:	defff804 	addi	sp,sp,-32
1000c4a8:	dcc00415 	stw	r19,16(sp)
1000c4ac:	dc800315 	stw	r18,12(sp)
1000c4b0:	dc000115 	stw	r16,4(sp)
1000c4b4:	dfc00715 	stw	ra,28(sp)
1000c4b8:	dd400615 	stw	r21,24(sp)
1000c4bc:	dd000515 	stw	r20,20(sp)
1000c4c0:	dc400215 	stw	r17,8(sp)
1000c4c4:	2027883a 	mov	r19,r4
1000c4c8:	2825883a 	mov	r18,r5
1000c4cc:	3021883a 	mov	r16,r6
1000c4d0:	00083500 	call	10008350 <__locale_mb_cur_max>
1000c4d4:	00c00044 	movi	r3,1
1000c4d8:	10c03e26 	beq	r2,r3,1000c5d4 <__fputwc+0x130>
1000c4dc:	81c01704 	addi	r7,r16,92
1000c4e0:	900d883a 	mov	r6,r18
1000c4e4:	d80b883a 	mov	r5,sp
1000c4e8:	9809883a 	mov	r4,r19
1000c4ec:	000c9740 	call	1000c974 <_wcrtomb_r>
1000c4f0:	1029883a 	mov	r20,r2
1000c4f4:	00bfffc4 	movi	r2,-1
1000c4f8:	a0802026 	beq	r20,r2,1000c57c <__fputwc+0xd8>
1000c4fc:	d9400003 	ldbu	r5,0(sp)
1000c500:	a0001c26 	beq	r20,zero,1000c574 <__fputwc+0xd0>
1000c504:	0023883a 	mov	r17,zero
1000c508:	05400284 	movi	r21,10
1000c50c:	00000906 	br	1000c534 <__fputwc+0x90>
1000c510:	80800017 	ldw	r2,0(r16)
1000c514:	11400005 	stb	r5,0(r2)
1000c518:	80c00017 	ldw	r3,0(r16)
1000c51c:	18c00044 	addi	r3,r3,1
1000c520:	80c00015 	stw	r3,0(r16)
1000c524:	8c400044 	addi	r17,r17,1
1000c528:	dc45883a 	add	r2,sp,r17
1000c52c:	8d00112e 	bgeu	r17,r20,1000c574 <__fputwc+0xd0>
1000c530:	11400003 	ldbu	r5,0(r2)
1000c534:	80c00217 	ldw	r3,8(r16)
1000c538:	18ffffc4 	addi	r3,r3,-1
1000c53c:	80c00215 	stw	r3,8(r16)
1000c540:	183ff30e 	bge	r3,zero,1000c510 <__alt_data_end+0xf800c510>
1000c544:	80800617 	ldw	r2,24(r16)
1000c548:	18801916 	blt	r3,r2,1000c5b0 <__fputwc+0x10c>
1000c54c:	80800017 	ldw	r2,0(r16)
1000c550:	11400005 	stb	r5,0(r2)
1000c554:	80800017 	ldw	r2,0(r16)
1000c558:	10c00003 	ldbu	r3,0(r2)
1000c55c:	10800044 	addi	r2,r2,1
1000c560:	1d402326 	beq	r3,r21,1000c5f0 <__fputwc+0x14c>
1000c564:	80800015 	stw	r2,0(r16)
1000c568:	8c400044 	addi	r17,r17,1
1000c56c:	dc45883a 	add	r2,sp,r17
1000c570:	8d3fef36 	bltu	r17,r20,1000c530 <__alt_data_end+0xf800c530>
1000c574:	9005883a 	mov	r2,r18
1000c578:	00000406 	br	1000c58c <__fputwc+0xe8>
1000c57c:	80c0030b 	ldhu	r3,12(r16)
1000c580:	a005883a 	mov	r2,r20
1000c584:	18c01014 	ori	r3,r3,64
1000c588:	80c0030d 	sth	r3,12(r16)
1000c58c:	dfc00717 	ldw	ra,28(sp)
1000c590:	dd400617 	ldw	r21,24(sp)
1000c594:	dd000517 	ldw	r20,20(sp)
1000c598:	dcc00417 	ldw	r19,16(sp)
1000c59c:	dc800317 	ldw	r18,12(sp)
1000c5a0:	dc400217 	ldw	r17,8(sp)
1000c5a4:	dc000117 	ldw	r16,4(sp)
1000c5a8:	dec00804 	addi	sp,sp,32
1000c5ac:	f800283a 	ret
1000c5b0:	800d883a 	mov	r6,r16
1000c5b4:	29403fcc 	andi	r5,r5,255
1000c5b8:	9809883a 	mov	r4,r19
1000c5bc:	000c81c0 	call	1000c81c <__swbuf_r>
1000c5c0:	10bfffe0 	cmpeqi	r2,r2,-1
1000c5c4:	10803fcc 	andi	r2,r2,255
1000c5c8:	103fd626 	beq	r2,zero,1000c524 <__alt_data_end+0xf800c524>
1000c5cc:	00bfffc4 	movi	r2,-1
1000c5d0:	003fee06 	br	1000c58c <__alt_data_end+0xf800c58c>
1000c5d4:	90ffffc4 	addi	r3,r18,-1
1000c5d8:	01003f84 	movi	r4,254
1000c5dc:	20ffbf36 	bltu	r4,r3,1000c4dc <__alt_data_end+0xf800c4dc>
1000c5e0:	900b883a 	mov	r5,r18
1000c5e4:	dc800005 	stb	r18,0(sp)
1000c5e8:	1029883a 	mov	r20,r2
1000c5ec:	003fc506 	br	1000c504 <__alt_data_end+0xf800c504>
1000c5f0:	800d883a 	mov	r6,r16
1000c5f4:	a80b883a 	mov	r5,r21
1000c5f8:	9809883a 	mov	r4,r19
1000c5fc:	000c81c0 	call	1000c81c <__swbuf_r>
1000c600:	10bfffe0 	cmpeqi	r2,r2,-1
1000c604:	003fef06 	br	1000c5c4 <__alt_data_end+0xf800c5c4>

1000c608 <_fputwc_r>:
1000c608:	3080030b 	ldhu	r2,12(r6)
1000c60c:	10c8000c 	andi	r3,r2,8192
1000c610:	1800051e 	bne	r3,zero,1000c628 <_fputwc_r+0x20>
1000c614:	30c01917 	ldw	r3,100(r6)
1000c618:	10880014 	ori	r2,r2,8192
1000c61c:	3080030d 	sth	r2,12(r6)
1000c620:	18880014 	ori	r2,r3,8192
1000c624:	30801915 	stw	r2,100(r6)
1000c628:	000c4a41 	jmpi	1000c4a4 <__fputwc>

1000c62c <fputwc>:
1000c62c:	00840074 	movhi	r2,4097
1000c630:	defffc04 	addi	sp,sp,-16
1000c634:	10934c04 	addi	r2,r2,19760
1000c638:	dc000115 	stw	r16,4(sp)
1000c63c:	14000017 	ldw	r16,0(r2)
1000c640:	dc400215 	stw	r17,8(sp)
1000c644:	dfc00315 	stw	ra,12(sp)
1000c648:	2023883a 	mov	r17,r4
1000c64c:	80000226 	beq	r16,zero,1000c658 <fputwc+0x2c>
1000c650:	80800e17 	ldw	r2,56(r16)
1000c654:	10001026 	beq	r2,zero,1000c698 <fputwc+0x6c>
1000c658:	2880030b 	ldhu	r2,12(r5)
1000c65c:	10c8000c 	andi	r3,r2,8192
1000c660:	1800051e 	bne	r3,zero,1000c678 <fputwc+0x4c>
1000c664:	28c01917 	ldw	r3,100(r5)
1000c668:	10880014 	ori	r2,r2,8192
1000c66c:	2880030d 	sth	r2,12(r5)
1000c670:	18880014 	ori	r2,r3,8192
1000c674:	28801915 	stw	r2,100(r5)
1000c678:	280d883a 	mov	r6,r5
1000c67c:	8009883a 	mov	r4,r16
1000c680:	880b883a 	mov	r5,r17
1000c684:	dfc00317 	ldw	ra,12(sp)
1000c688:	dc400217 	ldw	r17,8(sp)
1000c68c:	dc000117 	ldw	r16,4(sp)
1000c690:	dec00404 	addi	sp,sp,16
1000c694:	000c4a41 	jmpi	1000c4a4 <__fputwc>
1000c698:	8009883a 	mov	r4,r16
1000c69c:	d9400015 	stw	r5,0(sp)
1000c6a0:	00077f40 	call	100077f4 <__sinit>
1000c6a4:	d9400017 	ldw	r5,0(sp)
1000c6a8:	003feb06 	br	1000c658 <__alt_data_end+0xf800c658>

1000c6ac <_fstat_r>:
1000c6ac:	defffd04 	addi	sp,sp,-12
1000c6b0:	2805883a 	mov	r2,r5
1000c6b4:	dc000015 	stw	r16,0(sp)
1000c6b8:	04040074 	movhi	r16,4097
1000c6bc:	dc400115 	stw	r17,4(sp)
1000c6c0:	841a3004 	addi	r16,r16,26816
1000c6c4:	2023883a 	mov	r17,r4
1000c6c8:	300b883a 	mov	r5,r6
1000c6cc:	1009883a 	mov	r4,r2
1000c6d0:	dfc00215 	stw	ra,8(sp)
1000c6d4:	80000015 	stw	zero,0(r16)
1000c6d8:	00101640 	call	10010164 <fstat>
1000c6dc:	00ffffc4 	movi	r3,-1
1000c6e0:	10c00526 	beq	r2,r3,1000c6f8 <_fstat_r+0x4c>
1000c6e4:	dfc00217 	ldw	ra,8(sp)
1000c6e8:	dc400117 	ldw	r17,4(sp)
1000c6ec:	dc000017 	ldw	r16,0(sp)
1000c6f0:	dec00304 	addi	sp,sp,12
1000c6f4:	f800283a 	ret
1000c6f8:	80c00017 	ldw	r3,0(r16)
1000c6fc:	183ff926 	beq	r3,zero,1000c6e4 <__alt_data_end+0xf800c6e4>
1000c700:	88c00015 	stw	r3,0(r17)
1000c704:	003ff706 	br	1000c6e4 <__alt_data_end+0xf800c6e4>

1000c708 <_isatty_r>:
1000c708:	defffd04 	addi	sp,sp,-12
1000c70c:	dc000015 	stw	r16,0(sp)
1000c710:	04040074 	movhi	r16,4097
1000c714:	dc400115 	stw	r17,4(sp)
1000c718:	841a3004 	addi	r16,r16,26816
1000c71c:	2023883a 	mov	r17,r4
1000c720:	2809883a 	mov	r4,r5
1000c724:	dfc00215 	stw	ra,8(sp)
1000c728:	80000015 	stw	zero,0(r16)
1000c72c:	00102580 	call	10010258 <isatty>
1000c730:	00ffffc4 	movi	r3,-1
1000c734:	10c00526 	beq	r2,r3,1000c74c <_isatty_r+0x44>
1000c738:	dfc00217 	ldw	ra,8(sp)
1000c73c:	dc400117 	ldw	r17,4(sp)
1000c740:	dc000017 	ldw	r16,0(sp)
1000c744:	dec00304 	addi	sp,sp,12
1000c748:	f800283a 	ret
1000c74c:	80c00017 	ldw	r3,0(r16)
1000c750:	183ff926 	beq	r3,zero,1000c738 <__alt_data_end+0xf800c738>
1000c754:	88c00015 	stw	r3,0(r17)
1000c758:	003ff706 	br	1000c738 <__alt_data_end+0xf800c738>

1000c75c <_lseek_r>:
1000c75c:	defffd04 	addi	sp,sp,-12
1000c760:	2805883a 	mov	r2,r5
1000c764:	dc000015 	stw	r16,0(sp)
1000c768:	04040074 	movhi	r16,4097
1000c76c:	dc400115 	stw	r17,4(sp)
1000c770:	300b883a 	mov	r5,r6
1000c774:	841a3004 	addi	r16,r16,26816
1000c778:	2023883a 	mov	r17,r4
1000c77c:	380d883a 	mov	r6,r7
1000c780:	1009883a 	mov	r4,r2
1000c784:	dfc00215 	stw	ra,8(sp)
1000c788:	80000015 	stw	zero,0(r16)
1000c78c:	001042c0 	call	1001042c <lseek>
1000c790:	00ffffc4 	movi	r3,-1
1000c794:	10c00526 	beq	r2,r3,1000c7ac <_lseek_r+0x50>
1000c798:	dfc00217 	ldw	ra,8(sp)
1000c79c:	dc400117 	ldw	r17,4(sp)
1000c7a0:	dc000017 	ldw	r16,0(sp)
1000c7a4:	dec00304 	addi	sp,sp,12
1000c7a8:	f800283a 	ret
1000c7ac:	80c00017 	ldw	r3,0(r16)
1000c7b0:	183ff926 	beq	r3,zero,1000c798 <__alt_data_end+0xf800c798>
1000c7b4:	88c00015 	stw	r3,0(r17)
1000c7b8:	003ff706 	br	1000c798 <__alt_data_end+0xf800c798>

1000c7bc <_read_r>:
1000c7bc:	defffd04 	addi	sp,sp,-12
1000c7c0:	2805883a 	mov	r2,r5
1000c7c4:	dc000015 	stw	r16,0(sp)
1000c7c8:	04040074 	movhi	r16,4097
1000c7cc:	dc400115 	stw	r17,4(sp)
1000c7d0:	300b883a 	mov	r5,r6
1000c7d4:	841a3004 	addi	r16,r16,26816
1000c7d8:	2023883a 	mov	r17,r4
1000c7dc:	380d883a 	mov	r6,r7
1000c7e0:	1009883a 	mov	r4,r2
1000c7e4:	dfc00215 	stw	ra,8(sp)
1000c7e8:	80000015 	stw	zero,0(r16)
1000c7ec:	00106080 	call	10010608 <read>
1000c7f0:	00ffffc4 	movi	r3,-1
1000c7f4:	10c00526 	beq	r2,r3,1000c80c <_read_r+0x50>
1000c7f8:	dfc00217 	ldw	ra,8(sp)
1000c7fc:	dc400117 	ldw	r17,4(sp)
1000c800:	dc000017 	ldw	r16,0(sp)
1000c804:	dec00304 	addi	sp,sp,12
1000c808:	f800283a 	ret
1000c80c:	80c00017 	ldw	r3,0(r16)
1000c810:	183ff926 	beq	r3,zero,1000c7f8 <__alt_data_end+0xf800c7f8>
1000c814:	88c00015 	stw	r3,0(r17)
1000c818:	003ff706 	br	1000c7f8 <__alt_data_end+0xf800c7f8>

1000c81c <__swbuf_r>:
1000c81c:	defffb04 	addi	sp,sp,-20
1000c820:	dcc00315 	stw	r19,12(sp)
1000c824:	dc800215 	stw	r18,8(sp)
1000c828:	dc000015 	stw	r16,0(sp)
1000c82c:	dfc00415 	stw	ra,16(sp)
1000c830:	dc400115 	stw	r17,4(sp)
1000c834:	2025883a 	mov	r18,r4
1000c838:	2827883a 	mov	r19,r5
1000c83c:	3021883a 	mov	r16,r6
1000c840:	20000226 	beq	r4,zero,1000c84c <__swbuf_r+0x30>
1000c844:	20800e17 	ldw	r2,56(r4)
1000c848:	10004226 	beq	r2,zero,1000c954 <__swbuf_r+0x138>
1000c84c:	80800617 	ldw	r2,24(r16)
1000c850:	8100030b 	ldhu	r4,12(r16)
1000c854:	80800215 	stw	r2,8(r16)
1000c858:	2080020c 	andi	r2,r4,8
1000c85c:	10003626 	beq	r2,zero,1000c938 <__swbuf_r+0x11c>
1000c860:	80c00417 	ldw	r3,16(r16)
1000c864:	18003426 	beq	r3,zero,1000c938 <__swbuf_r+0x11c>
1000c868:	2088000c 	andi	r2,r4,8192
1000c86c:	9c403fcc 	andi	r17,r19,255
1000c870:	10001a26 	beq	r2,zero,1000c8dc <__swbuf_r+0xc0>
1000c874:	80800017 	ldw	r2,0(r16)
1000c878:	81000517 	ldw	r4,20(r16)
1000c87c:	10c7c83a 	sub	r3,r2,r3
1000c880:	1900200e 	bge	r3,r4,1000c904 <__swbuf_r+0xe8>
1000c884:	18c00044 	addi	r3,r3,1
1000c888:	81000217 	ldw	r4,8(r16)
1000c88c:	11400044 	addi	r5,r2,1
1000c890:	81400015 	stw	r5,0(r16)
1000c894:	213fffc4 	addi	r4,r4,-1
1000c898:	81000215 	stw	r4,8(r16)
1000c89c:	14c00005 	stb	r19,0(r2)
1000c8a0:	80800517 	ldw	r2,20(r16)
1000c8a4:	10c01e26 	beq	r2,r3,1000c920 <__swbuf_r+0x104>
1000c8a8:	8080030b 	ldhu	r2,12(r16)
1000c8ac:	1080004c 	andi	r2,r2,1
1000c8b0:	10000226 	beq	r2,zero,1000c8bc <__swbuf_r+0xa0>
1000c8b4:	00800284 	movi	r2,10
1000c8b8:	88801926 	beq	r17,r2,1000c920 <__swbuf_r+0x104>
1000c8bc:	8805883a 	mov	r2,r17
1000c8c0:	dfc00417 	ldw	ra,16(sp)
1000c8c4:	dcc00317 	ldw	r19,12(sp)
1000c8c8:	dc800217 	ldw	r18,8(sp)
1000c8cc:	dc400117 	ldw	r17,4(sp)
1000c8d0:	dc000017 	ldw	r16,0(sp)
1000c8d4:	dec00504 	addi	sp,sp,20
1000c8d8:	f800283a 	ret
1000c8dc:	81401917 	ldw	r5,100(r16)
1000c8e0:	00b7ffc4 	movi	r2,-8193
1000c8e4:	21080014 	ori	r4,r4,8192
1000c8e8:	2884703a 	and	r2,r5,r2
1000c8ec:	80801915 	stw	r2,100(r16)
1000c8f0:	80800017 	ldw	r2,0(r16)
1000c8f4:	8100030d 	sth	r4,12(r16)
1000c8f8:	81000517 	ldw	r4,20(r16)
1000c8fc:	10c7c83a 	sub	r3,r2,r3
1000c900:	193fe016 	blt	r3,r4,1000c884 <__alt_data_end+0xf800c884>
1000c904:	800b883a 	mov	r5,r16
1000c908:	9009883a 	mov	r4,r18
1000c90c:	00074080 	call	10007408 <_fflush_r>
1000c910:	1000071e 	bne	r2,zero,1000c930 <__swbuf_r+0x114>
1000c914:	80800017 	ldw	r2,0(r16)
1000c918:	00c00044 	movi	r3,1
1000c91c:	003fda06 	br	1000c888 <__alt_data_end+0xf800c888>
1000c920:	800b883a 	mov	r5,r16
1000c924:	9009883a 	mov	r4,r18
1000c928:	00074080 	call	10007408 <_fflush_r>
1000c92c:	103fe326 	beq	r2,zero,1000c8bc <__alt_data_end+0xf800c8bc>
1000c930:	00bfffc4 	movi	r2,-1
1000c934:	003fe206 	br	1000c8c0 <__alt_data_end+0xf800c8c0>
1000c938:	800b883a 	mov	r5,r16
1000c93c:	9009883a 	mov	r4,r18
1000c940:	00057e80 	call	100057e8 <__swsetup_r>
1000c944:	103ffa1e 	bne	r2,zero,1000c930 <__alt_data_end+0xf800c930>
1000c948:	8100030b 	ldhu	r4,12(r16)
1000c94c:	80c00417 	ldw	r3,16(r16)
1000c950:	003fc506 	br	1000c868 <__alt_data_end+0xf800c868>
1000c954:	00077f40 	call	100077f4 <__sinit>
1000c958:	003fbc06 	br	1000c84c <__alt_data_end+0xf800c84c>

1000c95c <__swbuf>:
1000c95c:	00840074 	movhi	r2,4097
1000c960:	10934c04 	addi	r2,r2,19760
1000c964:	280d883a 	mov	r6,r5
1000c968:	200b883a 	mov	r5,r4
1000c96c:	11000017 	ldw	r4,0(r2)
1000c970:	000c81c1 	jmpi	1000c81c <__swbuf_r>

1000c974 <_wcrtomb_r>:
1000c974:	defff604 	addi	sp,sp,-40
1000c978:	00840074 	movhi	r2,4097
1000c97c:	dc800815 	stw	r18,32(sp)
1000c980:	dc400715 	stw	r17,28(sp)
1000c984:	dc000615 	stw	r16,24(sp)
1000c988:	10935004 	addi	r2,r2,19776
1000c98c:	dfc00915 	stw	ra,36(sp)
1000c990:	2021883a 	mov	r16,r4
1000c994:	3823883a 	mov	r17,r7
1000c998:	14800017 	ldw	r18,0(r2)
1000c99c:	28001426 	beq	r5,zero,1000c9f0 <_wcrtomb_r+0x7c>
1000c9a0:	d9400415 	stw	r5,16(sp)
1000c9a4:	d9800515 	stw	r6,20(sp)
1000c9a8:	00083440 	call	10008344 <__locale_charset>
1000c9ac:	d9800517 	ldw	r6,20(sp)
1000c9b0:	d9400417 	ldw	r5,16(sp)
1000c9b4:	100f883a 	mov	r7,r2
1000c9b8:	dc400015 	stw	r17,0(sp)
1000c9bc:	8009883a 	mov	r4,r16
1000c9c0:	903ee83a 	callr	r18
1000c9c4:	00ffffc4 	movi	r3,-1
1000c9c8:	10c0031e 	bne	r2,r3,1000c9d8 <_wcrtomb_r+0x64>
1000c9cc:	88000015 	stw	zero,0(r17)
1000c9d0:	00c02284 	movi	r3,138
1000c9d4:	80c00015 	stw	r3,0(r16)
1000c9d8:	dfc00917 	ldw	ra,36(sp)
1000c9dc:	dc800817 	ldw	r18,32(sp)
1000c9e0:	dc400717 	ldw	r17,28(sp)
1000c9e4:	dc000617 	ldw	r16,24(sp)
1000c9e8:	dec00a04 	addi	sp,sp,40
1000c9ec:	f800283a 	ret
1000c9f0:	00083440 	call	10008344 <__locale_charset>
1000c9f4:	100f883a 	mov	r7,r2
1000c9f8:	dc400015 	stw	r17,0(sp)
1000c9fc:	000d883a 	mov	r6,zero
1000ca00:	d9400104 	addi	r5,sp,4
1000ca04:	8009883a 	mov	r4,r16
1000ca08:	903ee83a 	callr	r18
1000ca0c:	003fed06 	br	1000c9c4 <__alt_data_end+0xf800c9c4>

1000ca10 <wcrtomb>:
1000ca10:	defff604 	addi	sp,sp,-40
1000ca14:	00840074 	movhi	r2,4097
1000ca18:	dc800615 	stw	r18,24(sp)
1000ca1c:	dc400515 	stw	r17,20(sp)
1000ca20:	10934c04 	addi	r2,r2,19760
1000ca24:	dfc00915 	stw	ra,36(sp)
1000ca28:	dd000815 	stw	r20,32(sp)
1000ca2c:	dcc00715 	stw	r19,28(sp)
1000ca30:	dc000415 	stw	r16,16(sp)
1000ca34:	3025883a 	mov	r18,r6
1000ca38:	14400017 	ldw	r17,0(r2)
1000ca3c:	20001926 	beq	r4,zero,1000caa4 <wcrtomb+0x94>
1000ca40:	00840074 	movhi	r2,4097
1000ca44:	10935004 	addi	r2,r2,19776
1000ca48:	15000017 	ldw	r20,0(r2)
1000ca4c:	2021883a 	mov	r16,r4
1000ca50:	2827883a 	mov	r19,r5
1000ca54:	00083440 	call	10008344 <__locale_charset>
1000ca58:	100f883a 	mov	r7,r2
1000ca5c:	dc800015 	stw	r18,0(sp)
1000ca60:	980d883a 	mov	r6,r19
1000ca64:	800b883a 	mov	r5,r16
1000ca68:	8809883a 	mov	r4,r17
1000ca6c:	a03ee83a 	callr	r20
1000ca70:	00ffffc4 	movi	r3,-1
1000ca74:	10c0031e 	bne	r2,r3,1000ca84 <wcrtomb+0x74>
1000ca78:	90000015 	stw	zero,0(r18)
1000ca7c:	00c02284 	movi	r3,138
1000ca80:	88c00015 	stw	r3,0(r17)
1000ca84:	dfc00917 	ldw	ra,36(sp)
1000ca88:	dd000817 	ldw	r20,32(sp)
1000ca8c:	dcc00717 	ldw	r19,28(sp)
1000ca90:	dc800617 	ldw	r18,24(sp)
1000ca94:	dc400517 	ldw	r17,20(sp)
1000ca98:	dc000417 	ldw	r16,16(sp)
1000ca9c:	dec00a04 	addi	sp,sp,40
1000caa0:	f800283a 	ret
1000caa4:	00840074 	movhi	r2,4097
1000caa8:	10935004 	addi	r2,r2,19776
1000caac:	14000017 	ldw	r16,0(r2)
1000cab0:	00083440 	call	10008344 <__locale_charset>
1000cab4:	100f883a 	mov	r7,r2
1000cab8:	dc800015 	stw	r18,0(sp)
1000cabc:	000d883a 	mov	r6,zero
1000cac0:	d9400104 	addi	r5,sp,4
1000cac4:	8809883a 	mov	r4,r17
1000cac8:	803ee83a 	callr	r16
1000cacc:	003fe806 	br	1000ca70 <__alt_data_end+0xf800ca70>

1000cad0 <__ascii_wctomb>:
1000cad0:	28000526 	beq	r5,zero,1000cae8 <__ascii_wctomb+0x18>
1000cad4:	00803fc4 	movi	r2,255
1000cad8:	11800536 	bltu	r2,r6,1000caf0 <__ascii_wctomb+0x20>
1000cadc:	29800005 	stb	r6,0(r5)
1000cae0:	00800044 	movi	r2,1
1000cae4:	f800283a 	ret
1000cae8:	0005883a 	mov	r2,zero
1000caec:	f800283a 	ret
1000caf0:	00802284 	movi	r2,138
1000caf4:	20800015 	stw	r2,0(r4)
1000caf8:	00bfffc4 	movi	r2,-1
1000cafc:	f800283a 	ret

1000cb00 <_wctomb_r>:
1000cb00:	00840074 	movhi	r2,4097
1000cb04:	defff904 	addi	sp,sp,-28
1000cb08:	10935004 	addi	r2,r2,19776
1000cb0c:	dfc00615 	stw	ra,24(sp)
1000cb10:	dc400515 	stw	r17,20(sp)
1000cb14:	dc000415 	stw	r16,16(sp)
1000cb18:	3823883a 	mov	r17,r7
1000cb1c:	14000017 	ldw	r16,0(r2)
1000cb20:	d9000115 	stw	r4,4(sp)
1000cb24:	d9400215 	stw	r5,8(sp)
1000cb28:	d9800315 	stw	r6,12(sp)
1000cb2c:	00083440 	call	10008344 <__locale_charset>
1000cb30:	d9800317 	ldw	r6,12(sp)
1000cb34:	d9400217 	ldw	r5,8(sp)
1000cb38:	d9000117 	ldw	r4,4(sp)
1000cb3c:	100f883a 	mov	r7,r2
1000cb40:	dc400015 	stw	r17,0(sp)
1000cb44:	803ee83a 	callr	r16
1000cb48:	dfc00617 	ldw	ra,24(sp)
1000cb4c:	dc400517 	ldw	r17,20(sp)
1000cb50:	dc000417 	ldw	r16,16(sp)
1000cb54:	dec00704 	addi	sp,sp,28
1000cb58:	f800283a 	ret

1000cb5c <__udivdi3>:
1000cb5c:	defff404 	addi	sp,sp,-48
1000cb60:	dcc00515 	stw	r19,20(sp)
1000cb64:	dc000215 	stw	r16,8(sp)
1000cb68:	dfc00b15 	stw	ra,44(sp)
1000cb6c:	df000a15 	stw	fp,40(sp)
1000cb70:	ddc00915 	stw	r23,36(sp)
1000cb74:	dd800815 	stw	r22,32(sp)
1000cb78:	dd400715 	stw	r21,28(sp)
1000cb7c:	dd000615 	stw	r20,24(sp)
1000cb80:	dc800415 	stw	r18,16(sp)
1000cb84:	dc400315 	stw	r17,12(sp)
1000cb88:	2027883a 	mov	r19,r4
1000cb8c:	2821883a 	mov	r16,r5
1000cb90:	3800461e 	bne	r7,zero,1000ccac <__udivdi3+0x150>
1000cb94:	3023883a 	mov	r17,r6
1000cb98:	2025883a 	mov	r18,r4
1000cb9c:	2980572e 	bgeu	r5,r6,1000ccfc <__udivdi3+0x1a0>
1000cba0:	00bfffd4 	movui	r2,65535
1000cba4:	282d883a 	mov	r22,r5
1000cba8:	1180b236 	bltu	r2,r6,1000ce74 <__udivdi3+0x318>
1000cbac:	00803fc4 	movi	r2,255
1000cbb0:	1185803a 	cmpltu	r2,r2,r6
1000cbb4:	100490fa 	slli	r2,r2,3
1000cbb8:	3086d83a 	srl	r3,r6,r2
1000cbbc:	01040074 	movhi	r4,4097
1000cbc0:	210c4a04 	addi	r4,r4,12584
1000cbc4:	20c7883a 	add	r3,r4,r3
1000cbc8:	18c00003 	ldbu	r3,0(r3)
1000cbcc:	1885883a 	add	r2,r3,r2
1000cbd0:	00c00804 	movi	r3,32
1000cbd4:	1887c83a 	sub	r3,r3,r2
1000cbd8:	18000526 	beq	r3,zero,1000cbf0 <__udivdi3+0x94>
1000cbdc:	80e0983a 	sll	r16,r16,r3
1000cbe0:	9884d83a 	srl	r2,r19,r2
1000cbe4:	30e2983a 	sll	r17,r6,r3
1000cbe8:	98e4983a 	sll	r18,r19,r3
1000cbec:	142cb03a 	or	r22,r2,r16
1000cbf0:	882ad43a 	srli	r21,r17,16
1000cbf4:	b009883a 	mov	r4,r22
1000cbf8:	8d3fffcc 	andi	r20,r17,65535
1000cbfc:	a80b883a 	mov	r5,r21
1000cc00:	00032040 	call	10003204 <__umodsi3>
1000cc04:	b009883a 	mov	r4,r22
1000cc08:	a80b883a 	mov	r5,r21
1000cc0c:	1027883a 	mov	r19,r2
1000cc10:	00031a00 	call	100031a0 <__udivsi3>
1000cc14:	100b883a 	mov	r5,r2
1000cc18:	a009883a 	mov	r4,r20
1000cc1c:	102d883a 	mov	r22,r2
1000cc20:	000d71c0 	call	1000d71c <__mulsi3>
1000cc24:	9826943a 	slli	r19,r19,16
1000cc28:	9006d43a 	srli	r3,r18,16
1000cc2c:	1cc6b03a 	or	r3,r3,r19
1000cc30:	1880052e 	bgeu	r3,r2,1000cc48 <__udivdi3+0xec>
1000cc34:	1c47883a 	add	r3,r3,r17
1000cc38:	b13fffc4 	addi	r4,r22,-1
1000cc3c:	1c400136 	bltu	r3,r17,1000cc44 <__udivdi3+0xe8>
1000cc40:	18814236 	bltu	r3,r2,1000d14c <__udivdi3+0x5f0>
1000cc44:	202d883a 	mov	r22,r4
1000cc48:	18a1c83a 	sub	r16,r3,r2
1000cc4c:	8009883a 	mov	r4,r16
1000cc50:	a80b883a 	mov	r5,r21
1000cc54:	00032040 	call	10003204 <__umodsi3>
1000cc58:	1027883a 	mov	r19,r2
1000cc5c:	8009883a 	mov	r4,r16
1000cc60:	a80b883a 	mov	r5,r21
1000cc64:	9826943a 	slli	r19,r19,16
1000cc68:	00031a00 	call	100031a0 <__udivsi3>
1000cc6c:	100b883a 	mov	r5,r2
1000cc70:	a009883a 	mov	r4,r20
1000cc74:	94bfffcc 	andi	r18,r18,65535
1000cc78:	1021883a 	mov	r16,r2
1000cc7c:	94e4b03a 	or	r18,r18,r19
1000cc80:	000d71c0 	call	1000d71c <__mulsi3>
1000cc84:	9080052e 	bgeu	r18,r2,1000cc9c <__udivdi3+0x140>
1000cc88:	8ca5883a 	add	r18,r17,r18
1000cc8c:	80ffffc4 	addi	r3,r16,-1
1000cc90:	94410c36 	bltu	r18,r17,1000d0c4 <__udivdi3+0x568>
1000cc94:	90810b2e 	bgeu	r18,r2,1000d0c4 <__udivdi3+0x568>
1000cc98:	843fff84 	addi	r16,r16,-2
1000cc9c:	b004943a 	slli	r2,r22,16
1000cca0:	0007883a 	mov	r3,zero
1000cca4:	1404b03a 	or	r2,r2,r16
1000cca8:	00005e06 	br	1000ce24 <__udivdi3+0x2c8>
1000ccac:	29c05b36 	bltu	r5,r7,1000ce1c <__udivdi3+0x2c0>
1000ccb0:	00bfffd4 	movui	r2,65535
1000ccb4:	11c0672e 	bgeu	r2,r7,1000ce54 <__udivdi3+0x2f8>
1000ccb8:	00804034 	movhi	r2,256
1000ccbc:	10bfffc4 	addi	r2,r2,-1
1000ccc0:	11c10a36 	bltu	r2,r7,1000d0ec <__udivdi3+0x590>
1000ccc4:	00800404 	movi	r2,16
1000ccc8:	3886d83a 	srl	r3,r7,r2
1000cccc:	01040074 	movhi	r4,4097
1000ccd0:	210c4a04 	addi	r4,r4,12584
1000ccd4:	20c7883a 	add	r3,r4,r3
1000ccd8:	18c00003 	ldbu	r3,0(r3)
1000ccdc:	05c00804 	movi	r23,32
1000cce0:	1885883a 	add	r2,r3,r2
1000cce4:	b8afc83a 	sub	r23,r23,r2
1000cce8:	b800671e 	bne	r23,zero,1000ce88 <__udivdi3+0x32c>
1000ccec:	3c010536 	bltu	r7,r16,1000d104 <__udivdi3+0x5a8>
1000ccf0:	9985403a 	cmpgeu	r2,r19,r6
1000ccf4:	0007883a 	mov	r3,zero
1000ccf8:	00004a06 	br	1000ce24 <__udivdi3+0x2c8>
1000ccfc:	3000041e 	bne	r6,zero,1000cd10 <__udivdi3+0x1b4>
1000cd00:	000b883a 	mov	r5,zero
1000cd04:	01000044 	movi	r4,1
1000cd08:	00031a00 	call	100031a0 <__udivsi3>
1000cd0c:	1023883a 	mov	r17,r2
1000cd10:	00bfffd4 	movui	r2,65535
1000cd14:	1440532e 	bgeu	r2,r17,1000ce64 <__udivdi3+0x308>
1000cd18:	00804034 	movhi	r2,256
1000cd1c:	10bfffc4 	addi	r2,r2,-1
1000cd20:	1440f436 	bltu	r2,r17,1000d0f4 <__udivdi3+0x598>
1000cd24:	00800404 	movi	r2,16
1000cd28:	8886d83a 	srl	r3,r17,r2
1000cd2c:	01040074 	movhi	r4,4097
1000cd30:	210c4a04 	addi	r4,r4,12584
1000cd34:	20c7883a 	add	r3,r4,r3
1000cd38:	18c00003 	ldbu	r3,0(r3)
1000cd3c:	1885883a 	add	r2,r3,r2
1000cd40:	00c00804 	movi	r3,32
1000cd44:	1887c83a 	sub	r3,r3,r2
1000cd48:	1800a51e 	bne	r3,zero,1000cfe0 <__udivdi3+0x484>
1000cd4c:	882ad43a 	srli	r21,r17,16
1000cd50:	8461c83a 	sub	r16,r16,r17
1000cd54:	8d3fffcc 	andi	r20,r17,65535
1000cd58:	00c00044 	movi	r3,1
1000cd5c:	a80b883a 	mov	r5,r21
1000cd60:	8009883a 	mov	r4,r16
1000cd64:	d8c00115 	stw	r3,4(sp)
1000cd68:	00032040 	call	10003204 <__umodsi3>
1000cd6c:	a80b883a 	mov	r5,r21
1000cd70:	8009883a 	mov	r4,r16
1000cd74:	1027883a 	mov	r19,r2
1000cd78:	00031a00 	call	100031a0 <__udivsi3>
1000cd7c:	a00b883a 	mov	r5,r20
1000cd80:	1009883a 	mov	r4,r2
1000cd84:	102d883a 	mov	r22,r2
1000cd88:	000d71c0 	call	1000d71c <__mulsi3>
1000cd8c:	9826943a 	slli	r19,r19,16
1000cd90:	900ed43a 	srli	r7,r18,16
1000cd94:	d8c00117 	ldw	r3,4(sp)
1000cd98:	3cceb03a 	or	r7,r7,r19
1000cd9c:	3880052e 	bgeu	r7,r2,1000cdb4 <__udivdi3+0x258>
1000cda0:	3c4f883a 	add	r7,r7,r17
1000cda4:	b13fffc4 	addi	r4,r22,-1
1000cda8:	3c400136 	bltu	r7,r17,1000cdb0 <__udivdi3+0x254>
1000cdac:	3880e436 	bltu	r7,r2,1000d140 <__udivdi3+0x5e4>
1000cdb0:	202d883a 	mov	r22,r4
1000cdb4:	38a1c83a 	sub	r16,r7,r2
1000cdb8:	8009883a 	mov	r4,r16
1000cdbc:	a80b883a 	mov	r5,r21
1000cdc0:	d8c00115 	stw	r3,4(sp)
1000cdc4:	00032040 	call	10003204 <__umodsi3>
1000cdc8:	1027883a 	mov	r19,r2
1000cdcc:	8009883a 	mov	r4,r16
1000cdd0:	a80b883a 	mov	r5,r21
1000cdd4:	9826943a 	slli	r19,r19,16
1000cdd8:	00031a00 	call	100031a0 <__udivsi3>
1000cddc:	a00b883a 	mov	r5,r20
1000cde0:	1009883a 	mov	r4,r2
1000cde4:	94bfffcc 	andi	r18,r18,65535
1000cde8:	1021883a 	mov	r16,r2
1000cdec:	94e4b03a 	or	r18,r18,r19
1000cdf0:	000d71c0 	call	1000d71c <__mulsi3>
1000cdf4:	d8c00117 	ldw	r3,4(sp)
1000cdf8:	9080052e 	bgeu	r18,r2,1000ce10 <__udivdi3+0x2b4>
1000cdfc:	8ca5883a 	add	r18,r17,r18
1000ce00:	813fffc4 	addi	r4,r16,-1
1000ce04:	9440ad36 	bltu	r18,r17,1000d0bc <__udivdi3+0x560>
1000ce08:	9080ac2e 	bgeu	r18,r2,1000d0bc <__udivdi3+0x560>
1000ce0c:	843fff84 	addi	r16,r16,-2
1000ce10:	b004943a 	slli	r2,r22,16
1000ce14:	1404b03a 	or	r2,r2,r16
1000ce18:	00000206 	br	1000ce24 <__udivdi3+0x2c8>
1000ce1c:	0007883a 	mov	r3,zero
1000ce20:	0005883a 	mov	r2,zero
1000ce24:	dfc00b17 	ldw	ra,44(sp)
1000ce28:	df000a17 	ldw	fp,40(sp)
1000ce2c:	ddc00917 	ldw	r23,36(sp)
1000ce30:	dd800817 	ldw	r22,32(sp)
1000ce34:	dd400717 	ldw	r21,28(sp)
1000ce38:	dd000617 	ldw	r20,24(sp)
1000ce3c:	dcc00517 	ldw	r19,20(sp)
1000ce40:	dc800417 	ldw	r18,16(sp)
1000ce44:	dc400317 	ldw	r17,12(sp)
1000ce48:	dc000217 	ldw	r16,8(sp)
1000ce4c:	dec00c04 	addi	sp,sp,48
1000ce50:	f800283a 	ret
1000ce54:	00803fc4 	movi	r2,255
1000ce58:	11c5803a 	cmpltu	r2,r2,r7
1000ce5c:	100490fa 	slli	r2,r2,3
1000ce60:	003f9906 	br	1000ccc8 <__alt_data_end+0xf800ccc8>
1000ce64:	00803fc4 	movi	r2,255
1000ce68:	1445803a 	cmpltu	r2,r2,r17
1000ce6c:	100490fa 	slli	r2,r2,3
1000ce70:	003fad06 	br	1000cd28 <__alt_data_end+0xf800cd28>
1000ce74:	00804034 	movhi	r2,256
1000ce78:	10bfffc4 	addi	r2,r2,-1
1000ce7c:	11809f36 	bltu	r2,r6,1000d0fc <__udivdi3+0x5a0>
1000ce80:	00800404 	movi	r2,16
1000ce84:	003f4c06 	br	1000cbb8 <__alt_data_end+0xf800cbb8>
1000ce88:	3dce983a 	sll	r7,r7,r23
1000ce8c:	30b8d83a 	srl	fp,r6,r2
1000ce90:	80a2d83a 	srl	r17,r16,r2
1000ce94:	35cc983a 	sll	r6,r6,r23
1000ce98:	3f38b03a 	or	fp,r7,fp
1000ce9c:	e024d43a 	srli	r18,fp,16
1000cea0:	9884d83a 	srl	r2,r19,r2
1000cea4:	85e0983a 	sll	r16,r16,r23
1000cea8:	8809883a 	mov	r4,r17
1000ceac:	900b883a 	mov	r5,r18
1000ceb0:	d9800015 	stw	r6,0(sp)
1000ceb4:	1420b03a 	or	r16,r2,r16
1000ceb8:	00032040 	call	10003204 <__umodsi3>
1000cebc:	900b883a 	mov	r5,r18
1000cec0:	8809883a 	mov	r4,r17
1000cec4:	1029883a 	mov	r20,r2
1000cec8:	e5bfffcc 	andi	r22,fp,65535
1000cecc:	00031a00 	call	100031a0 <__udivsi3>
1000ced0:	100b883a 	mov	r5,r2
1000ced4:	b009883a 	mov	r4,r22
1000ced8:	102b883a 	mov	r21,r2
1000cedc:	000d71c0 	call	1000d71c <__mulsi3>
1000cee0:	a028943a 	slli	r20,r20,16
1000cee4:	8006d43a 	srli	r3,r16,16
1000cee8:	1d06b03a 	or	r3,r3,r20
1000ceec:	1880042e 	bgeu	r3,r2,1000cf00 <__udivdi3+0x3a4>
1000cef0:	1f07883a 	add	r3,r3,fp
1000cef4:	a93fffc4 	addi	r4,r21,-1
1000cef8:	1f00892e 	bgeu	r3,fp,1000d120 <__udivdi3+0x5c4>
1000cefc:	202b883a 	mov	r21,r4
1000cf00:	18a3c83a 	sub	r17,r3,r2
1000cf04:	8809883a 	mov	r4,r17
1000cf08:	900b883a 	mov	r5,r18
1000cf0c:	00032040 	call	10003204 <__umodsi3>
1000cf10:	1029883a 	mov	r20,r2
1000cf14:	8809883a 	mov	r4,r17
1000cf18:	900b883a 	mov	r5,r18
1000cf1c:	a028943a 	slli	r20,r20,16
1000cf20:	00031a00 	call	100031a0 <__udivsi3>
1000cf24:	100b883a 	mov	r5,r2
1000cf28:	b009883a 	mov	r4,r22
1000cf2c:	843fffcc 	andi	r16,r16,65535
1000cf30:	1023883a 	mov	r17,r2
1000cf34:	8520b03a 	or	r16,r16,r20
1000cf38:	000d71c0 	call	1000d71c <__mulsi3>
1000cf3c:	8080042e 	bgeu	r16,r2,1000cf50 <__udivdi3+0x3f4>
1000cf40:	8721883a 	add	r16,r16,fp
1000cf44:	88ffffc4 	addi	r3,r17,-1
1000cf48:	8700712e 	bgeu	r16,fp,1000d110 <__udivdi3+0x5b4>
1000cf4c:	1823883a 	mov	r17,r3
1000cf50:	a80e943a 	slli	r7,r21,16
1000cf54:	d8c00017 	ldw	r3,0(sp)
1000cf58:	80a1c83a 	sub	r16,r16,r2
1000cf5c:	3c64b03a 	or	r18,r7,r17
1000cf60:	1d3fffcc 	andi	r20,r3,65535
1000cf64:	9022d43a 	srli	r17,r18,16
1000cf68:	95bfffcc 	andi	r22,r18,65535
1000cf6c:	a00b883a 	mov	r5,r20
1000cf70:	b009883a 	mov	r4,r22
1000cf74:	182ad43a 	srli	r21,r3,16
1000cf78:	000d71c0 	call	1000d71c <__mulsi3>
1000cf7c:	a00b883a 	mov	r5,r20
1000cf80:	8809883a 	mov	r4,r17
1000cf84:	1039883a 	mov	fp,r2
1000cf88:	000d71c0 	call	1000d71c <__mulsi3>
1000cf8c:	8809883a 	mov	r4,r17
1000cf90:	a80b883a 	mov	r5,r21
1000cf94:	1029883a 	mov	r20,r2
1000cf98:	000d71c0 	call	1000d71c <__mulsi3>
1000cf9c:	a80b883a 	mov	r5,r21
1000cfa0:	b009883a 	mov	r4,r22
1000cfa4:	1023883a 	mov	r17,r2
1000cfa8:	000d71c0 	call	1000d71c <__mulsi3>
1000cfac:	e006d43a 	srli	r3,fp,16
1000cfb0:	1505883a 	add	r2,r2,r20
1000cfb4:	1887883a 	add	r3,r3,r2
1000cfb8:	1d00022e 	bgeu	r3,r20,1000cfc4 <__udivdi3+0x468>
1000cfbc:	00800074 	movhi	r2,1
1000cfc0:	88a3883a 	add	r17,r17,r2
1000cfc4:	1804d43a 	srli	r2,r3,16
1000cfc8:	1463883a 	add	r17,r2,r17
1000cfcc:	84404436 	bltu	r16,r17,1000d0e0 <__udivdi3+0x584>
1000cfd0:	84403e26 	beq	r16,r17,1000d0cc <__udivdi3+0x570>
1000cfd4:	9005883a 	mov	r2,r18
1000cfd8:	0007883a 	mov	r3,zero
1000cfdc:	003f9106 	br	1000ce24 <__alt_data_end+0xf800ce24>
1000cfe0:	88e2983a 	sll	r17,r17,r3
1000cfe4:	80aed83a 	srl	r23,r16,r2
1000cfe8:	80e0983a 	sll	r16,r16,r3
1000cfec:	882ad43a 	srli	r21,r17,16
1000cff0:	9884d83a 	srl	r2,r19,r2
1000cff4:	b809883a 	mov	r4,r23
1000cff8:	a80b883a 	mov	r5,r21
1000cffc:	98e4983a 	sll	r18,r19,r3
1000d000:	142cb03a 	or	r22,r2,r16
1000d004:	00032040 	call	10003204 <__umodsi3>
1000d008:	b809883a 	mov	r4,r23
1000d00c:	a80b883a 	mov	r5,r21
1000d010:	1027883a 	mov	r19,r2
1000d014:	8d3fffcc 	andi	r20,r17,65535
1000d018:	00031a00 	call	100031a0 <__udivsi3>
1000d01c:	a009883a 	mov	r4,r20
1000d020:	100b883a 	mov	r5,r2
1000d024:	102f883a 	mov	r23,r2
1000d028:	000d71c0 	call	1000d71c <__mulsi3>
1000d02c:	9826943a 	slli	r19,r19,16
1000d030:	b008d43a 	srli	r4,r22,16
1000d034:	24c8b03a 	or	r4,r4,r19
1000d038:	2080062e 	bgeu	r4,r2,1000d054 <__udivdi3+0x4f8>
1000d03c:	2449883a 	add	r4,r4,r17
1000d040:	b8ffffc4 	addi	r3,r23,-1
1000d044:	24403c36 	bltu	r4,r17,1000d138 <__udivdi3+0x5dc>
1000d048:	20803b2e 	bgeu	r4,r2,1000d138 <__udivdi3+0x5dc>
1000d04c:	bdffff84 	addi	r23,r23,-2
1000d050:	2449883a 	add	r4,r4,r17
1000d054:	20a1c83a 	sub	r16,r4,r2
1000d058:	a80b883a 	mov	r5,r21
1000d05c:	8009883a 	mov	r4,r16
1000d060:	00032040 	call	10003204 <__umodsi3>
1000d064:	a80b883a 	mov	r5,r21
1000d068:	8009883a 	mov	r4,r16
1000d06c:	1027883a 	mov	r19,r2
1000d070:	00031a00 	call	100031a0 <__udivsi3>
1000d074:	a009883a 	mov	r4,r20
1000d078:	100b883a 	mov	r5,r2
1000d07c:	9826943a 	slli	r19,r19,16
1000d080:	1039883a 	mov	fp,r2
1000d084:	000d71c0 	call	1000d71c <__mulsi3>
1000d088:	b13fffcc 	andi	r4,r22,65535
1000d08c:	24c8b03a 	or	r4,r4,r19
1000d090:	2080062e 	bgeu	r4,r2,1000d0ac <__udivdi3+0x550>
1000d094:	2449883a 	add	r4,r4,r17
1000d098:	e0ffffc4 	addi	r3,fp,-1
1000d09c:	24402436 	bltu	r4,r17,1000d130 <__udivdi3+0x5d4>
1000d0a0:	2080232e 	bgeu	r4,r2,1000d130 <__udivdi3+0x5d4>
1000d0a4:	e73fff84 	addi	fp,fp,-2
1000d0a8:	2449883a 	add	r4,r4,r17
1000d0ac:	b82e943a 	slli	r23,r23,16
1000d0b0:	20a1c83a 	sub	r16,r4,r2
1000d0b4:	bf06b03a 	or	r3,r23,fp
1000d0b8:	003f2806 	br	1000cd5c <__alt_data_end+0xf800cd5c>
1000d0bc:	2021883a 	mov	r16,r4
1000d0c0:	003f5306 	br	1000ce10 <__alt_data_end+0xf800ce10>
1000d0c4:	1821883a 	mov	r16,r3
1000d0c8:	003ef406 	br	1000cc9c <__alt_data_end+0xf800cc9c>
1000d0cc:	1806943a 	slli	r3,r3,16
1000d0d0:	9de6983a 	sll	r19,r19,r23
1000d0d4:	e73fffcc 	andi	fp,fp,65535
1000d0d8:	1f07883a 	add	r3,r3,fp
1000d0dc:	98ffbd2e 	bgeu	r19,r3,1000cfd4 <__alt_data_end+0xf800cfd4>
1000d0e0:	90bfffc4 	addi	r2,r18,-1
1000d0e4:	0007883a 	mov	r3,zero
1000d0e8:	003f4e06 	br	1000ce24 <__alt_data_end+0xf800ce24>
1000d0ec:	00800604 	movi	r2,24
1000d0f0:	003ef506 	br	1000ccc8 <__alt_data_end+0xf800ccc8>
1000d0f4:	00800604 	movi	r2,24
1000d0f8:	003f0b06 	br	1000cd28 <__alt_data_end+0xf800cd28>
1000d0fc:	00800604 	movi	r2,24
1000d100:	003ead06 	br	1000cbb8 <__alt_data_end+0xf800cbb8>
1000d104:	0007883a 	mov	r3,zero
1000d108:	00800044 	movi	r2,1
1000d10c:	003f4506 	br	1000ce24 <__alt_data_end+0xf800ce24>
1000d110:	80bf8e2e 	bgeu	r16,r2,1000cf4c <__alt_data_end+0xf800cf4c>
1000d114:	8c7fff84 	addi	r17,r17,-2
1000d118:	8721883a 	add	r16,r16,fp
1000d11c:	003f8c06 	br	1000cf50 <__alt_data_end+0xf800cf50>
1000d120:	18bf762e 	bgeu	r3,r2,1000cefc <__alt_data_end+0xf800cefc>
1000d124:	ad7fff84 	addi	r21,r21,-2
1000d128:	1f07883a 	add	r3,r3,fp
1000d12c:	003f7406 	br	1000cf00 <__alt_data_end+0xf800cf00>
1000d130:	1839883a 	mov	fp,r3
1000d134:	003fdd06 	br	1000d0ac <__alt_data_end+0xf800d0ac>
1000d138:	182f883a 	mov	r23,r3
1000d13c:	003fc506 	br	1000d054 <__alt_data_end+0xf800d054>
1000d140:	b5bfff84 	addi	r22,r22,-2
1000d144:	3c4f883a 	add	r7,r7,r17
1000d148:	003f1a06 	br	1000cdb4 <__alt_data_end+0xf800cdb4>
1000d14c:	b5bfff84 	addi	r22,r22,-2
1000d150:	1c47883a 	add	r3,r3,r17
1000d154:	003ebc06 	br	1000cc48 <__alt_data_end+0xf800cc48>

1000d158 <__umoddi3>:
1000d158:	defff304 	addi	sp,sp,-52
1000d15c:	df000b15 	stw	fp,44(sp)
1000d160:	dc400415 	stw	r17,16(sp)
1000d164:	dc000315 	stw	r16,12(sp)
1000d168:	dfc00c15 	stw	ra,48(sp)
1000d16c:	ddc00a15 	stw	r23,40(sp)
1000d170:	dd800915 	stw	r22,36(sp)
1000d174:	dd400815 	stw	r21,32(sp)
1000d178:	dd000715 	stw	r20,28(sp)
1000d17c:	dcc00615 	stw	r19,24(sp)
1000d180:	dc800515 	stw	r18,20(sp)
1000d184:	2021883a 	mov	r16,r4
1000d188:	2823883a 	mov	r17,r5
1000d18c:	2839883a 	mov	fp,r5
1000d190:	3800401e 	bne	r7,zero,1000d294 <__umoddi3+0x13c>
1000d194:	3027883a 	mov	r19,r6
1000d198:	2029883a 	mov	r20,r4
1000d19c:	2980552e 	bgeu	r5,r6,1000d2f4 <__umoddi3+0x19c>
1000d1a0:	00bfffd4 	movui	r2,65535
1000d1a4:	1180a236 	bltu	r2,r6,1000d430 <__umoddi3+0x2d8>
1000d1a8:	01003fc4 	movi	r4,255
1000d1ac:	2189803a 	cmpltu	r4,r4,r6
1000d1b0:	200890fa 	slli	r4,r4,3
1000d1b4:	3104d83a 	srl	r2,r6,r4
1000d1b8:	00c40074 	movhi	r3,4097
1000d1bc:	18cc4a04 	addi	r3,r3,12584
1000d1c0:	1885883a 	add	r2,r3,r2
1000d1c4:	10c00003 	ldbu	r3,0(r2)
1000d1c8:	00800804 	movi	r2,32
1000d1cc:	1909883a 	add	r4,r3,r4
1000d1d0:	1125c83a 	sub	r18,r2,r4
1000d1d4:	90000526 	beq	r18,zero,1000d1ec <__umoddi3+0x94>
1000d1d8:	8ca2983a 	sll	r17,r17,r18
1000d1dc:	8108d83a 	srl	r4,r16,r4
1000d1e0:	34a6983a 	sll	r19,r6,r18
1000d1e4:	84a8983a 	sll	r20,r16,r18
1000d1e8:	2478b03a 	or	fp,r4,r17
1000d1ec:	982cd43a 	srli	r22,r19,16
1000d1f0:	e009883a 	mov	r4,fp
1000d1f4:	9dffffcc 	andi	r23,r19,65535
1000d1f8:	b00b883a 	mov	r5,r22
1000d1fc:	00032040 	call	10003204 <__umodsi3>
1000d200:	b00b883a 	mov	r5,r22
1000d204:	e009883a 	mov	r4,fp
1000d208:	102b883a 	mov	r21,r2
1000d20c:	00031a00 	call	100031a0 <__udivsi3>
1000d210:	100b883a 	mov	r5,r2
1000d214:	b809883a 	mov	r4,r23
1000d218:	000d71c0 	call	1000d71c <__mulsi3>
1000d21c:	a82a943a 	slli	r21,r21,16
1000d220:	a006d43a 	srli	r3,r20,16
1000d224:	1d46b03a 	or	r3,r3,r21
1000d228:	1880032e 	bgeu	r3,r2,1000d238 <__umoddi3+0xe0>
1000d22c:	1cc7883a 	add	r3,r3,r19
1000d230:	1cc00136 	bltu	r3,r19,1000d238 <__umoddi3+0xe0>
1000d234:	18813136 	bltu	r3,r2,1000d6fc <__umoddi3+0x5a4>
1000d238:	18a1c83a 	sub	r16,r3,r2
1000d23c:	b00b883a 	mov	r5,r22
1000d240:	8009883a 	mov	r4,r16
1000d244:	00032040 	call	10003204 <__umodsi3>
1000d248:	b00b883a 	mov	r5,r22
1000d24c:	8009883a 	mov	r4,r16
1000d250:	1023883a 	mov	r17,r2
1000d254:	00031a00 	call	100031a0 <__udivsi3>
1000d258:	100b883a 	mov	r5,r2
1000d25c:	b809883a 	mov	r4,r23
1000d260:	8822943a 	slli	r17,r17,16
1000d264:	000d71c0 	call	1000d71c <__mulsi3>
1000d268:	a0ffffcc 	andi	r3,r20,65535
1000d26c:	1c46b03a 	or	r3,r3,r17
1000d270:	1880042e 	bgeu	r3,r2,1000d284 <__umoddi3+0x12c>
1000d274:	1cc7883a 	add	r3,r3,r19
1000d278:	1cc00236 	bltu	r3,r19,1000d284 <__umoddi3+0x12c>
1000d27c:	1880012e 	bgeu	r3,r2,1000d284 <__umoddi3+0x12c>
1000d280:	1cc7883a 	add	r3,r3,r19
1000d284:	1885c83a 	sub	r2,r3,r2
1000d288:	1484d83a 	srl	r2,r2,r18
1000d28c:	0007883a 	mov	r3,zero
1000d290:	00005306 	br	1000d3e0 <__umoddi3+0x288>
1000d294:	29c05036 	bltu	r5,r7,1000d3d8 <__umoddi3+0x280>
1000d298:	00bfffd4 	movui	r2,65535
1000d29c:	11c05c2e 	bgeu	r2,r7,1000d410 <__umoddi3+0x2b8>
1000d2a0:	00804034 	movhi	r2,256
1000d2a4:	10bfffc4 	addi	r2,r2,-1
1000d2a8:	11c10636 	bltu	r2,r7,1000d6c4 <__umoddi3+0x56c>
1000d2ac:	01000404 	movi	r4,16
1000d2b0:	3904d83a 	srl	r2,r7,r4
1000d2b4:	00c40074 	movhi	r3,4097
1000d2b8:	18cc4a04 	addi	r3,r3,12584
1000d2bc:	1885883a 	add	r2,r3,r2
1000d2c0:	14c00003 	ldbu	r19,0(r2)
1000d2c4:	00c00804 	movi	r3,32
1000d2c8:	9927883a 	add	r19,r19,r4
1000d2cc:	1ce9c83a 	sub	r20,r3,r19
1000d2d0:	a0005c1e 	bne	r20,zero,1000d444 <__umoddi3+0x2ec>
1000d2d4:	3c400136 	bltu	r7,r17,1000d2dc <__umoddi3+0x184>
1000d2d8:	81810a36 	bltu	r16,r6,1000d704 <__umoddi3+0x5ac>
1000d2dc:	8185c83a 	sub	r2,r16,r6
1000d2e0:	89e3c83a 	sub	r17,r17,r7
1000d2e4:	8089803a 	cmpltu	r4,r16,r2
1000d2e8:	8939c83a 	sub	fp,r17,r4
1000d2ec:	e007883a 	mov	r3,fp
1000d2f0:	00003b06 	br	1000d3e0 <__umoddi3+0x288>
1000d2f4:	3000041e 	bne	r6,zero,1000d308 <__umoddi3+0x1b0>
1000d2f8:	000b883a 	mov	r5,zero
1000d2fc:	01000044 	movi	r4,1
1000d300:	00031a00 	call	100031a0 <__udivsi3>
1000d304:	1027883a 	mov	r19,r2
1000d308:	00bfffd4 	movui	r2,65535
1000d30c:	14c0442e 	bgeu	r2,r19,1000d420 <__umoddi3+0x2c8>
1000d310:	00804034 	movhi	r2,256
1000d314:	10bfffc4 	addi	r2,r2,-1
1000d318:	14c0ec36 	bltu	r2,r19,1000d6cc <__umoddi3+0x574>
1000d31c:	00800404 	movi	r2,16
1000d320:	9886d83a 	srl	r3,r19,r2
1000d324:	01040074 	movhi	r4,4097
1000d328:	210c4a04 	addi	r4,r4,12584
1000d32c:	20c7883a 	add	r3,r4,r3
1000d330:	18c00003 	ldbu	r3,0(r3)
1000d334:	1887883a 	add	r3,r3,r2
1000d338:	00800804 	movi	r2,32
1000d33c:	10e5c83a 	sub	r18,r2,r3
1000d340:	9000ab1e 	bne	r18,zero,1000d5f0 <__umoddi3+0x498>
1000d344:	982cd43a 	srli	r22,r19,16
1000d348:	8ce3c83a 	sub	r17,r17,r19
1000d34c:	9dffffcc 	andi	r23,r19,65535
1000d350:	b00b883a 	mov	r5,r22
1000d354:	8809883a 	mov	r4,r17
1000d358:	00032040 	call	10003204 <__umodsi3>
1000d35c:	b00b883a 	mov	r5,r22
1000d360:	8809883a 	mov	r4,r17
1000d364:	102b883a 	mov	r21,r2
1000d368:	00031a00 	call	100031a0 <__udivsi3>
1000d36c:	b80b883a 	mov	r5,r23
1000d370:	1009883a 	mov	r4,r2
1000d374:	000d71c0 	call	1000d71c <__mulsi3>
1000d378:	a82a943a 	slli	r21,r21,16
1000d37c:	a006d43a 	srli	r3,r20,16
1000d380:	1d46b03a 	or	r3,r3,r21
1000d384:	1880042e 	bgeu	r3,r2,1000d398 <__umoddi3+0x240>
1000d388:	1cc7883a 	add	r3,r3,r19
1000d38c:	1cc00236 	bltu	r3,r19,1000d398 <__umoddi3+0x240>
1000d390:	1880012e 	bgeu	r3,r2,1000d398 <__umoddi3+0x240>
1000d394:	1cc7883a 	add	r3,r3,r19
1000d398:	18a1c83a 	sub	r16,r3,r2
1000d39c:	b00b883a 	mov	r5,r22
1000d3a0:	8009883a 	mov	r4,r16
1000d3a4:	00032040 	call	10003204 <__umodsi3>
1000d3a8:	1023883a 	mov	r17,r2
1000d3ac:	b00b883a 	mov	r5,r22
1000d3b0:	8009883a 	mov	r4,r16
1000d3b4:	00031a00 	call	100031a0 <__udivsi3>
1000d3b8:	8822943a 	slli	r17,r17,16
1000d3bc:	b80b883a 	mov	r5,r23
1000d3c0:	1009883a 	mov	r4,r2
1000d3c4:	000d71c0 	call	1000d71c <__mulsi3>
1000d3c8:	a53fffcc 	andi	r20,r20,65535
1000d3cc:	a446b03a 	or	r3,r20,r17
1000d3d0:	18bfac2e 	bgeu	r3,r2,1000d284 <__alt_data_end+0xf800d284>
1000d3d4:	003fa706 	br	1000d274 <__alt_data_end+0xf800d274>
1000d3d8:	2005883a 	mov	r2,r4
1000d3dc:	2807883a 	mov	r3,r5
1000d3e0:	dfc00c17 	ldw	ra,48(sp)
1000d3e4:	df000b17 	ldw	fp,44(sp)
1000d3e8:	ddc00a17 	ldw	r23,40(sp)
1000d3ec:	dd800917 	ldw	r22,36(sp)
1000d3f0:	dd400817 	ldw	r21,32(sp)
1000d3f4:	dd000717 	ldw	r20,28(sp)
1000d3f8:	dcc00617 	ldw	r19,24(sp)
1000d3fc:	dc800517 	ldw	r18,20(sp)
1000d400:	dc400417 	ldw	r17,16(sp)
1000d404:	dc000317 	ldw	r16,12(sp)
1000d408:	dec00d04 	addi	sp,sp,52
1000d40c:	f800283a 	ret
1000d410:	04c03fc4 	movi	r19,255
1000d414:	99c9803a 	cmpltu	r4,r19,r7
1000d418:	200890fa 	slli	r4,r4,3
1000d41c:	003fa406 	br	1000d2b0 <__alt_data_end+0xf800d2b0>
1000d420:	00803fc4 	movi	r2,255
1000d424:	14c5803a 	cmpltu	r2,r2,r19
1000d428:	100490fa 	slli	r2,r2,3
1000d42c:	003fbc06 	br	1000d320 <__alt_data_end+0xf800d320>
1000d430:	00804034 	movhi	r2,256
1000d434:	10bfffc4 	addi	r2,r2,-1
1000d438:	1180a636 	bltu	r2,r6,1000d6d4 <__umoddi3+0x57c>
1000d43c:	01000404 	movi	r4,16
1000d440:	003f5c06 	br	1000d1b4 <__alt_data_end+0xf800d1b4>
1000d444:	3d0e983a 	sll	r7,r7,r20
1000d448:	34ead83a 	srl	r21,r6,r19
1000d44c:	8cc6d83a 	srl	r3,r17,r19
1000d450:	8d10983a 	sll	r8,r17,r20
1000d454:	3d6ab03a 	or	r21,r7,r21
1000d458:	a82cd43a 	srli	r22,r21,16
1000d45c:	84e2d83a 	srl	r17,r16,r19
1000d460:	1809883a 	mov	r4,r3
1000d464:	b00b883a 	mov	r5,r22
1000d468:	8a22b03a 	or	r17,r17,r8
1000d46c:	3524983a 	sll	r18,r6,r20
1000d470:	dc400015 	stw	r17,0(sp)
1000d474:	d8c00115 	stw	r3,4(sp)
1000d478:	00032040 	call	10003204 <__umodsi3>
1000d47c:	d8c00117 	ldw	r3,4(sp)
1000d480:	b00b883a 	mov	r5,r22
1000d484:	1039883a 	mov	fp,r2
1000d488:	1809883a 	mov	r4,r3
1000d48c:	00031a00 	call	100031a0 <__udivsi3>
1000d490:	adffffcc 	andi	r23,r21,65535
1000d494:	100b883a 	mov	r5,r2
1000d498:	b809883a 	mov	r4,r23
1000d49c:	1023883a 	mov	r17,r2
1000d4a0:	000d71c0 	call	1000d71c <__mulsi3>
1000d4a4:	d9400017 	ldw	r5,0(sp)
1000d4a8:	e008943a 	slli	r4,fp,16
1000d4ac:	8520983a 	sll	r16,r16,r20
1000d4b0:	2806d43a 	srli	r3,r5,16
1000d4b4:	1906b03a 	or	r3,r3,r4
1000d4b8:	1880042e 	bgeu	r3,r2,1000d4cc <__umoddi3+0x374>
1000d4bc:	1d47883a 	add	r3,r3,r21
1000d4c0:	893fffc4 	addi	r4,r17,-1
1000d4c4:	1d40892e 	bgeu	r3,r21,1000d6ec <__umoddi3+0x594>
1000d4c8:	2023883a 	mov	r17,r4
1000d4cc:	18b9c83a 	sub	fp,r3,r2
1000d4d0:	b00b883a 	mov	r5,r22
1000d4d4:	e009883a 	mov	r4,fp
1000d4d8:	00032040 	call	10003204 <__umodsi3>
1000d4dc:	b00b883a 	mov	r5,r22
1000d4e0:	e009883a 	mov	r4,fp
1000d4e4:	d8800215 	stw	r2,8(sp)
1000d4e8:	00031a00 	call	100031a0 <__udivsi3>
1000d4ec:	100b883a 	mov	r5,r2
1000d4f0:	b809883a 	mov	r4,r23
1000d4f4:	102d883a 	mov	r22,r2
1000d4f8:	000d71c0 	call	1000d71c <__mulsi3>
1000d4fc:	d9800217 	ldw	r6,8(sp)
1000d500:	d8c00017 	ldw	r3,0(sp)
1000d504:	300c943a 	slli	r6,r6,16
1000d508:	1a3fffcc 	andi	r8,r3,65535
1000d50c:	4190b03a 	or	r8,r8,r6
1000d510:	4080042e 	bgeu	r8,r2,1000d524 <__umoddi3+0x3cc>
1000d514:	4551883a 	add	r8,r8,r21
1000d518:	b0ffffc4 	addi	r3,r22,-1
1000d51c:	45406f2e 	bgeu	r8,r21,1000d6dc <__umoddi3+0x584>
1000d520:	182d883a 	mov	r22,r3
1000d524:	880e943a 	slli	r7,r17,16
1000d528:	9006d43a 	srli	r3,r18,16
1000d52c:	91bfffcc 	andi	r6,r18,65535
1000d530:	3dacb03a 	or	r22,r7,r22
1000d534:	b02ed43a 	srli	r23,r22,16
1000d538:	b5bfffcc 	andi	r22,r22,65535
1000d53c:	300b883a 	mov	r5,r6
1000d540:	b009883a 	mov	r4,r22
1000d544:	40a3c83a 	sub	r17,r8,r2
1000d548:	d8c00115 	stw	r3,4(sp)
1000d54c:	d9800215 	stw	r6,8(sp)
1000d550:	000d71c0 	call	1000d71c <__mulsi3>
1000d554:	d9800217 	ldw	r6,8(sp)
1000d558:	b809883a 	mov	r4,r23
1000d55c:	1039883a 	mov	fp,r2
1000d560:	300b883a 	mov	r5,r6
1000d564:	000d71c0 	call	1000d71c <__mulsi3>
1000d568:	d8c00117 	ldw	r3,4(sp)
1000d56c:	b809883a 	mov	r4,r23
1000d570:	d8800215 	stw	r2,8(sp)
1000d574:	180b883a 	mov	r5,r3
1000d578:	000d71c0 	call	1000d71c <__mulsi3>
1000d57c:	d8c00117 	ldw	r3,4(sp)
1000d580:	b009883a 	mov	r4,r22
1000d584:	102f883a 	mov	r23,r2
1000d588:	180b883a 	mov	r5,r3
1000d58c:	000d71c0 	call	1000d71c <__mulsi3>
1000d590:	d9800217 	ldw	r6,8(sp)
1000d594:	e006d43a 	srli	r3,fp,16
1000d598:	1185883a 	add	r2,r2,r6
1000d59c:	1885883a 	add	r2,r3,r2
1000d5a0:	1180022e 	bgeu	r2,r6,1000d5ac <__umoddi3+0x454>
1000d5a4:	00c00074 	movhi	r3,1
1000d5a8:	b8ef883a 	add	r23,r23,r3
1000d5ac:	1006d43a 	srli	r3,r2,16
1000d5b0:	1004943a 	slli	r2,r2,16
1000d5b4:	e73fffcc 	andi	fp,fp,65535
1000d5b8:	1dc7883a 	add	r3,r3,r23
1000d5bc:	1739883a 	add	fp,r2,fp
1000d5c0:	88c03a36 	bltu	r17,r3,1000d6ac <__umoddi3+0x554>
1000d5c4:	88c05126 	beq	r17,r3,1000d70c <__umoddi3+0x5b4>
1000d5c8:	88c9c83a 	sub	r4,r17,r3
1000d5cc:	e00f883a 	mov	r7,fp
1000d5d0:	81cfc83a 	sub	r7,r16,r7
1000d5d4:	81c7803a 	cmpltu	r3,r16,r7
1000d5d8:	20c7c83a 	sub	r3,r4,r3
1000d5dc:	1cc4983a 	sll	r2,r3,r19
1000d5e0:	3d0ed83a 	srl	r7,r7,r20
1000d5e4:	1d06d83a 	srl	r3,r3,r20
1000d5e8:	11c4b03a 	or	r2,r2,r7
1000d5ec:	003f7c06 	br	1000d3e0 <__alt_data_end+0xf800d3e0>
1000d5f0:	9ca6983a 	sll	r19,r19,r18
1000d5f4:	88f8d83a 	srl	fp,r17,r3
1000d5f8:	80c4d83a 	srl	r2,r16,r3
1000d5fc:	982cd43a 	srli	r22,r19,16
1000d600:	8ca2983a 	sll	r17,r17,r18
1000d604:	e009883a 	mov	r4,fp
1000d608:	b00b883a 	mov	r5,r22
1000d60c:	146ab03a 	or	r21,r2,r17
1000d610:	00032040 	call	10003204 <__umodsi3>
1000d614:	b00b883a 	mov	r5,r22
1000d618:	e009883a 	mov	r4,fp
1000d61c:	1029883a 	mov	r20,r2
1000d620:	9dffffcc 	andi	r23,r19,65535
1000d624:	00031a00 	call	100031a0 <__udivsi3>
1000d628:	b809883a 	mov	r4,r23
1000d62c:	100b883a 	mov	r5,r2
1000d630:	000d71c0 	call	1000d71c <__mulsi3>
1000d634:	a008943a 	slli	r4,r20,16
1000d638:	a806d43a 	srli	r3,r21,16
1000d63c:	84a8983a 	sll	r20,r16,r18
1000d640:	1906b03a 	or	r3,r3,r4
1000d644:	1880042e 	bgeu	r3,r2,1000d658 <__umoddi3+0x500>
1000d648:	1cc7883a 	add	r3,r3,r19
1000d64c:	1cc00236 	bltu	r3,r19,1000d658 <__umoddi3+0x500>
1000d650:	1880012e 	bgeu	r3,r2,1000d658 <__umoddi3+0x500>
1000d654:	1cc7883a 	add	r3,r3,r19
1000d658:	18a3c83a 	sub	r17,r3,r2
1000d65c:	b00b883a 	mov	r5,r22
1000d660:	8809883a 	mov	r4,r17
1000d664:	00032040 	call	10003204 <__umodsi3>
1000d668:	b00b883a 	mov	r5,r22
1000d66c:	8809883a 	mov	r4,r17
1000d670:	1021883a 	mov	r16,r2
1000d674:	00031a00 	call	100031a0 <__udivsi3>
1000d678:	100b883a 	mov	r5,r2
1000d67c:	b809883a 	mov	r4,r23
1000d680:	8020943a 	slli	r16,r16,16
1000d684:	000d71c0 	call	1000d71c <__mulsi3>
1000d688:	a8ffffcc 	andi	r3,r21,65535
1000d68c:	1c06b03a 	or	r3,r3,r16
1000d690:	1880042e 	bgeu	r3,r2,1000d6a4 <__umoddi3+0x54c>
1000d694:	1cc7883a 	add	r3,r3,r19
1000d698:	1cc00236 	bltu	r3,r19,1000d6a4 <__umoddi3+0x54c>
1000d69c:	1880012e 	bgeu	r3,r2,1000d6a4 <__umoddi3+0x54c>
1000d6a0:	1cc7883a 	add	r3,r3,r19
1000d6a4:	18a3c83a 	sub	r17,r3,r2
1000d6a8:	003f2906 	br	1000d350 <__alt_data_end+0xf800d350>
1000d6ac:	e48fc83a 	sub	r7,fp,r18
1000d6b0:	1d49c83a 	sub	r4,r3,r21
1000d6b4:	e1f9803a 	cmpltu	fp,fp,r7
1000d6b8:	2739c83a 	sub	fp,r4,fp
1000d6bc:	8f09c83a 	sub	r4,r17,fp
1000d6c0:	003fc306 	br	1000d5d0 <__alt_data_end+0xf800d5d0>
1000d6c4:	01000604 	movi	r4,24
1000d6c8:	003ef906 	br	1000d2b0 <__alt_data_end+0xf800d2b0>
1000d6cc:	00800604 	movi	r2,24
1000d6d0:	003f1306 	br	1000d320 <__alt_data_end+0xf800d320>
1000d6d4:	01000604 	movi	r4,24
1000d6d8:	003eb606 	br	1000d1b4 <__alt_data_end+0xf800d1b4>
1000d6dc:	40bf902e 	bgeu	r8,r2,1000d520 <__alt_data_end+0xf800d520>
1000d6e0:	b5bfff84 	addi	r22,r22,-2
1000d6e4:	4551883a 	add	r8,r8,r21
1000d6e8:	003f8e06 	br	1000d524 <__alt_data_end+0xf800d524>
1000d6ec:	18bf762e 	bgeu	r3,r2,1000d4c8 <__alt_data_end+0xf800d4c8>
1000d6f0:	8c7fff84 	addi	r17,r17,-2
1000d6f4:	1d47883a 	add	r3,r3,r21
1000d6f8:	003f7406 	br	1000d4cc <__alt_data_end+0xf800d4cc>
1000d6fc:	1cc7883a 	add	r3,r3,r19
1000d700:	003ecd06 	br	1000d238 <__alt_data_end+0xf800d238>
1000d704:	8005883a 	mov	r2,r16
1000d708:	003ef806 	br	1000d2ec <__alt_data_end+0xf800d2ec>
1000d70c:	873fe736 	bltu	r16,fp,1000d6ac <__alt_data_end+0xf800d6ac>
1000d710:	e00f883a 	mov	r7,fp
1000d714:	0009883a 	mov	r4,zero
1000d718:	003fad06 	br	1000d5d0 <__alt_data_end+0xf800d5d0>

1000d71c <__mulsi3>:
1000d71c:	0005883a 	mov	r2,zero
1000d720:	20000726 	beq	r4,zero,1000d740 <__mulsi3+0x24>
1000d724:	20c0004c 	andi	r3,r4,1
1000d728:	2008d07a 	srli	r4,r4,1
1000d72c:	18000126 	beq	r3,zero,1000d734 <__mulsi3+0x18>
1000d730:	1145883a 	add	r2,r2,r5
1000d734:	294b883a 	add	r5,r5,r5
1000d738:	203ffa1e 	bne	r4,zero,1000d724 <__alt_data_end+0xf800d724>
1000d73c:	f800283a 	ret
1000d740:	f800283a 	ret

1000d744 <__adddf3>:
1000d744:	02c00434 	movhi	r11,16
1000d748:	5affffc4 	addi	r11,r11,-1
1000d74c:	2806d7fa 	srli	r3,r5,31
1000d750:	2ad4703a 	and	r10,r5,r11
1000d754:	3ad2703a 	and	r9,r7,r11
1000d758:	3804d53a 	srli	r2,r7,20
1000d75c:	3018d77a 	srli	r12,r6,29
1000d760:	280ad53a 	srli	r5,r5,20
1000d764:	501490fa 	slli	r10,r10,3
1000d768:	2010d77a 	srli	r8,r4,29
1000d76c:	481290fa 	slli	r9,r9,3
1000d770:	380ed7fa 	srli	r7,r7,31
1000d774:	defffb04 	addi	sp,sp,-20
1000d778:	dc800215 	stw	r18,8(sp)
1000d77c:	dc400115 	stw	r17,4(sp)
1000d780:	dc000015 	stw	r16,0(sp)
1000d784:	dfc00415 	stw	ra,16(sp)
1000d788:	dcc00315 	stw	r19,12(sp)
1000d78c:	1c803fcc 	andi	r18,r3,255
1000d790:	2c01ffcc 	andi	r16,r5,2047
1000d794:	5210b03a 	or	r8,r10,r8
1000d798:	202290fa 	slli	r17,r4,3
1000d79c:	1081ffcc 	andi	r2,r2,2047
1000d7a0:	4b12b03a 	or	r9,r9,r12
1000d7a4:	300c90fa 	slli	r6,r6,3
1000d7a8:	91c07526 	beq	r18,r7,1000d980 <__adddf3+0x23c>
1000d7ac:	8087c83a 	sub	r3,r16,r2
1000d7b0:	00c0ab0e 	bge	zero,r3,1000da60 <__adddf3+0x31c>
1000d7b4:	10002a1e 	bne	r2,zero,1000d860 <__adddf3+0x11c>
1000d7b8:	4984b03a 	or	r2,r9,r6
1000d7bc:	1000961e 	bne	r2,zero,1000da18 <__adddf3+0x2d4>
1000d7c0:	888001cc 	andi	r2,r17,7
1000d7c4:	10000726 	beq	r2,zero,1000d7e4 <__adddf3+0xa0>
1000d7c8:	888003cc 	andi	r2,r17,15
1000d7cc:	00c00104 	movi	r3,4
1000d7d0:	10c00426 	beq	r2,r3,1000d7e4 <__adddf3+0xa0>
1000d7d4:	88c7883a 	add	r3,r17,r3
1000d7d8:	1c63803a 	cmpltu	r17,r3,r17
1000d7dc:	4451883a 	add	r8,r8,r17
1000d7e0:	1823883a 	mov	r17,r3
1000d7e4:	4080202c 	andhi	r2,r8,128
1000d7e8:	10005926 	beq	r2,zero,1000d950 <__adddf3+0x20c>
1000d7ec:	84000044 	addi	r16,r16,1
1000d7f0:	0081ffc4 	movi	r2,2047
1000d7f4:	8080ba26 	beq	r16,r2,1000dae0 <__adddf3+0x39c>
1000d7f8:	00bfe034 	movhi	r2,65408
1000d7fc:	10bfffc4 	addi	r2,r2,-1
1000d800:	4090703a 	and	r8,r8,r2
1000d804:	4004977a 	slli	r2,r8,29
1000d808:	4010927a 	slli	r8,r8,9
1000d80c:	8822d0fa 	srli	r17,r17,3
1000d810:	8401ffcc 	andi	r16,r16,2047
1000d814:	4010d33a 	srli	r8,r8,12
1000d818:	9007883a 	mov	r3,r18
1000d81c:	1444b03a 	or	r2,r2,r17
1000d820:	8401ffcc 	andi	r16,r16,2047
1000d824:	8020953a 	slli	r16,r16,20
1000d828:	18c03fcc 	andi	r3,r3,255
1000d82c:	01000434 	movhi	r4,16
1000d830:	213fffc4 	addi	r4,r4,-1
1000d834:	180697fa 	slli	r3,r3,31
1000d838:	4110703a 	and	r8,r8,r4
1000d83c:	4410b03a 	or	r8,r8,r16
1000d840:	40c6b03a 	or	r3,r8,r3
1000d844:	dfc00417 	ldw	ra,16(sp)
1000d848:	dcc00317 	ldw	r19,12(sp)
1000d84c:	dc800217 	ldw	r18,8(sp)
1000d850:	dc400117 	ldw	r17,4(sp)
1000d854:	dc000017 	ldw	r16,0(sp)
1000d858:	dec00504 	addi	sp,sp,20
1000d85c:	f800283a 	ret
1000d860:	0081ffc4 	movi	r2,2047
1000d864:	80bfd626 	beq	r16,r2,1000d7c0 <__alt_data_end+0xf800d7c0>
1000d868:	4a402034 	orhi	r9,r9,128
1000d86c:	00800e04 	movi	r2,56
1000d870:	10c09f16 	blt	r2,r3,1000daf0 <__adddf3+0x3ac>
1000d874:	008007c4 	movi	r2,31
1000d878:	10c0c216 	blt	r2,r3,1000db84 <__adddf3+0x440>
1000d87c:	00800804 	movi	r2,32
1000d880:	10c5c83a 	sub	r2,r2,r3
1000d884:	488a983a 	sll	r5,r9,r2
1000d888:	30c8d83a 	srl	r4,r6,r3
1000d88c:	3084983a 	sll	r2,r6,r2
1000d890:	48c6d83a 	srl	r3,r9,r3
1000d894:	290cb03a 	or	r6,r5,r4
1000d898:	1004c03a 	cmpne	r2,r2,zero
1000d89c:	308cb03a 	or	r6,r6,r2
1000d8a0:	898dc83a 	sub	r6,r17,r6
1000d8a4:	89a3803a 	cmpltu	r17,r17,r6
1000d8a8:	40d1c83a 	sub	r8,r8,r3
1000d8ac:	4451c83a 	sub	r8,r8,r17
1000d8b0:	3023883a 	mov	r17,r6
1000d8b4:	4080202c 	andhi	r2,r8,128
1000d8b8:	10002326 	beq	r2,zero,1000d948 <__adddf3+0x204>
1000d8bc:	04c02034 	movhi	r19,128
1000d8c0:	9cffffc4 	addi	r19,r19,-1
1000d8c4:	44e6703a 	and	r19,r8,r19
1000d8c8:	98007626 	beq	r19,zero,1000daa4 <__adddf3+0x360>
1000d8cc:	9809883a 	mov	r4,r19
1000d8d0:	000ff840 	call	1000ff84 <__clzsi2>
1000d8d4:	10fffe04 	addi	r3,r2,-8
1000d8d8:	010007c4 	movi	r4,31
1000d8dc:	20c07716 	blt	r4,r3,1000dabc <__adddf3+0x378>
1000d8e0:	00800804 	movi	r2,32
1000d8e4:	10c5c83a 	sub	r2,r2,r3
1000d8e8:	8884d83a 	srl	r2,r17,r2
1000d8ec:	98d0983a 	sll	r8,r19,r3
1000d8f0:	88e2983a 	sll	r17,r17,r3
1000d8f4:	1204b03a 	or	r2,r2,r8
1000d8f8:	1c007416 	blt	r3,r16,1000dacc <__adddf3+0x388>
1000d8fc:	1c21c83a 	sub	r16,r3,r16
1000d900:	82000044 	addi	r8,r16,1
1000d904:	00c007c4 	movi	r3,31
1000d908:	1a009116 	blt	r3,r8,1000db50 <__adddf3+0x40c>
1000d90c:	00c00804 	movi	r3,32
1000d910:	1a07c83a 	sub	r3,r3,r8
1000d914:	8a08d83a 	srl	r4,r17,r8
1000d918:	88e2983a 	sll	r17,r17,r3
1000d91c:	10c6983a 	sll	r3,r2,r3
1000d920:	1210d83a 	srl	r8,r2,r8
1000d924:	8804c03a 	cmpne	r2,r17,zero
1000d928:	1906b03a 	or	r3,r3,r4
1000d92c:	18a2b03a 	or	r17,r3,r2
1000d930:	0021883a 	mov	r16,zero
1000d934:	003fa206 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000d938:	1890b03a 	or	r8,r3,r2
1000d93c:	40017d26 	beq	r8,zero,1000df34 <__adddf3+0x7f0>
1000d940:	1011883a 	mov	r8,r2
1000d944:	1823883a 	mov	r17,r3
1000d948:	888001cc 	andi	r2,r17,7
1000d94c:	103f9e1e 	bne	r2,zero,1000d7c8 <__alt_data_end+0xf800d7c8>
1000d950:	4004977a 	slli	r2,r8,29
1000d954:	8822d0fa 	srli	r17,r17,3
1000d958:	4010d0fa 	srli	r8,r8,3
1000d95c:	9007883a 	mov	r3,r18
1000d960:	1444b03a 	or	r2,r2,r17
1000d964:	0101ffc4 	movi	r4,2047
1000d968:	81002426 	beq	r16,r4,1000d9fc <__adddf3+0x2b8>
1000d96c:	8120703a 	and	r16,r16,r4
1000d970:	01000434 	movhi	r4,16
1000d974:	213fffc4 	addi	r4,r4,-1
1000d978:	4110703a 	and	r8,r8,r4
1000d97c:	003fa806 	br	1000d820 <__alt_data_end+0xf800d820>
1000d980:	8089c83a 	sub	r4,r16,r2
1000d984:	01005e0e 	bge	zero,r4,1000db00 <__adddf3+0x3bc>
1000d988:	10002b26 	beq	r2,zero,1000da38 <__adddf3+0x2f4>
1000d98c:	0081ffc4 	movi	r2,2047
1000d990:	80bf8b26 	beq	r16,r2,1000d7c0 <__alt_data_end+0xf800d7c0>
1000d994:	4a402034 	orhi	r9,r9,128
1000d998:	00800e04 	movi	r2,56
1000d99c:	1100a40e 	bge	r2,r4,1000dc30 <__adddf3+0x4ec>
1000d9a0:	498cb03a 	or	r6,r9,r6
1000d9a4:	300ac03a 	cmpne	r5,r6,zero
1000d9a8:	0013883a 	mov	r9,zero
1000d9ac:	2c4b883a 	add	r5,r5,r17
1000d9b0:	2c63803a 	cmpltu	r17,r5,r17
1000d9b4:	4a11883a 	add	r8,r9,r8
1000d9b8:	8a11883a 	add	r8,r17,r8
1000d9bc:	2823883a 	mov	r17,r5
1000d9c0:	4080202c 	andhi	r2,r8,128
1000d9c4:	103fe026 	beq	r2,zero,1000d948 <__alt_data_end+0xf800d948>
1000d9c8:	84000044 	addi	r16,r16,1
1000d9cc:	0081ffc4 	movi	r2,2047
1000d9d0:	8080d226 	beq	r16,r2,1000dd1c <__adddf3+0x5d8>
1000d9d4:	00bfe034 	movhi	r2,65408
1000d9d8:	10bfffc4 	addi	r2,r2,-1
1000d9dc:	4090703a 	and	r8,r8,r2
1000d9e0:	880ad07a 	srli	r5,r17,1
1000d9e4:	400897fa 	slli	r4,r8,31
1000d9e8:	88c0004c 	andi	r3,r17,1
1000d9ec:	28e2b03a 	or	r17,r5,r3
1000d9f0:	4010d07a 	srli	r8,r8,1
1000d9f4:	2462b03a 	or	r17,r4,r17
1000d9f8:	003f7106 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000d9fc:	4088b03a 	or	r4,r8,r2
1000da00:	20014526 	beq	r4,zero,1000df18 <__adddf3+0x7d4>
1000da04:	01000434 	movhi	r4,16
1000da08:	42000234 	orhi	r8,r8,8
1000da0c:	213fffc4 	addi	r4,r4,-1
1000da10:	4110703a 	and	r8,r8,r4
1000da14:	003f8206 	br	1000d820 <__alt_data_end+0xf800d820>
1000da18:	18ffffc4 	addi	r3,r3,-1
1000da1c:	1800491e 	bne	r3,zero,1000db44 <__adddf3+0x400>
1000da20:	898bc83a 	sub	r5,r17,r6
1000da24:	8963803a 	cmpltu	r17,r17,r5
1000da28:	4251c83a 	sub	r8,r8,r9
1000da2c:	4451c83a 	sub	r8,r8,r17
1000da30:	2823883a 	mov	r17,r5
1000da34:	003f9f06 	br	1000d8b4 <__alt_data_end+0xf800d8b4>
1000da38:	4984b03a 	or	r2,r9,r6
1000da3c:	103f6026 	beq	r2,zero,1000d7c0 <__alt_data_end+0xf800d7c0>
1000da40:	213fffc4 	addi	r4,r4,-1
1000da44:	2000931e 	bne	r4,zero,1000dc94 <__adddf3+0x550>
1000da48:	898d883a 	add	r6,r17,r6
1000da4c:	3463803a 	cmpltu	r17,r6,r17
1000da50:	4251883a 	add	r8,r8,r9
1000da54:	8a11883a 	add	r8,r17,r8
1000da58:	3023883a 	mov	r17,r6
1000da5c:	003fd806 	br	1000d9c0 <__alt_data_end+0xf800d9c0>
1000da60:	1800541e 	bne	r3,zero,1000dbb4 <__adddf3+0x470>
1000da64:	80800044 	addi	r2,r16,1
1000da68:	1081ffcc 	andi	r2,r2,2047
1000da6c:	00c00044 	movi	r3,1
1000da70:	1880a00e 	bge	r3,r2,1000dcf4 <__adddf3+0x5b0>
1000da74:	8989c83a 	sub	r4,r17,r6
1000da78:	8905803a 	cmpltu	r2,r17,r4
1000da7c:	4267c83a 	sub	r19,r8,r9
1000da80:	98a7c83a 	sub	r19,r19,r2
1000da84:	9880202c 	andhi	r2,r19,128
1000da88:	10006326 	beq	r2,zero,1000dc18 <__adddf3+0x4d4>
1000da8c:	3463c83a 	sub	r17,r6,r17
1000da90:	4a07c83a 	sub	r3,r9,r8
1000da94:	344d803a 	cmpltu	r6,r6,r17
1000da98:	19a7c83a 	sub	r19,r3,r6
1000da9c:	3825883a 	mov	r18,r7
1000daa0:	983f8a1e 	bne	r19,zero,1000d8cc <__alt_data_end+0xf800d8cc>
1000daa4:	8809883a 	mov	r4,r17
1000daa8:	000ff840 	call	1000ff84 <__clzsi2>
1000daac:	10800804 	addi	r2,r2,32
1000dab0:	10fffe04 	addi	r3,r2,-8
1000dab4:	010007c4 	movi	r4,31
1000dab8:	20ff890e 	bge	r4,r3,1000d8e0 <__alt_data_end+0xf800d8e0>
1000dabc:	10bff604 	addi	r2,r2,-40
1000dac0:	8884983a 	sll	r2,r17,r2
1000dac4:	0023883a 	mov	r17,zero
1000dac8:	1c3f8c0e 	bge	r3,r16,1000d8fc <__alt_data_end+0xf800d8fc>
1000dacc:	023fe034 	movhi	r8,65408
1000dad0:	423fffc4 	addi	r8,r8,-1
1000dad4:	80e1c83a 	sub	r16,r16,r3
1000dad8:	1210703a 	and	r8,r2,r8
1000dadc:	003f3806 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000dae0:	9007883a 	mov	r3,r18
1000dae4:	0011883a 	mov	r8,zero
1000dae8:	0005883a 	mov	r2,zero
1000daec:	003f4c06 	br	1000d820 <__alt_data_end+0xf800d820>
1000daf0:	498cb03a 	or	r6,r9,r6
1000daf4:	300cc03a 	cmpne	r6,r6,zero
1000daf8:	0007883a 	mov	r3,zero
1000dafc:	003f6806 	br	1000d8a0 <__alt_data_end+0xf800d8a0>
1000db00:	20009c1e 	bne	r4,zero,1000dd74 <__adddf3+0x630>
1000db04:	80800044 	addi	r2,r16,1
1000db08:	1141ffcc 	andi	r5,r2,2047
1000db0c:	01000044 	movi	r4,1
1000db10:	2140670e 	bge	r4,r5,1000dcb0 <__adddf3+0x56c>
1000db14:	0101ffc4 	movi	r4,2047
1000db18:	11007f26 	beq	r2,r4,1000dd18 <__adddf3+0x5d4>
1000db1c:	898d883a 	add	r6,r17,r6
1000db20:	4247883a 	add	r3,r8,r9
1000db24:	3451803a 	cmpltu	r8,r6,r17
1000db28:	40d1883a 	add	r8,r8,r3
1000db2c:	402297fa 	slli	r17,r8,31
1000db30:	300cd07a 	srli	r6,r6,1
1000db34:	4010d07a 	srli	r8,r8,1
1000db38:	1021883a 	mov	r16,r2
1000db3c:	89a2b03a 	or	r17,r17,r6
1000db40:	003f1f06 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000db44:	0081ffc4 	movi	r2,2047
1000db48:	80bf481e 	bne	r16,r2,1000d86c <__alt_data_end+0xf800d86c>
1000db4c:	003f1c06 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000db50:	843ff844 	addi	r16,r16,-31
1000db54:	01000804 	movi	r4,32
1000db58:	1406d83a 	srl	r3,r2,r16
1000db5c:	41005026 	beq	r8,r4,1000dca0 <__adddf3+0x55c>
1000db60:	01001004 	movi	r4,64
1000db64:	2211c83a 	sub	r8,r4,r8
1000db68:	1204983a 	sll	r2,r2,r8
1000db6c:	88a2b03a 	or	r17,r17,r2
1000db70:	8822c03a 	cmpne	r17,r17,zero
1000db74:	1c62b03a 	or	r17,r3,r17
1000db78:	0011883a 	mov	r8,zero
1000db7c:	0021883a 	mov	r16,zero
1000db80:	003f7106 	br	1000d948 <__alt_data_end+0xf800d948>
1000db84:	193ff804 	addi	r4,r3,-32
1000db88:	00800804 	movi	r2,32
1000db8c:	4908d83a 	srl	r4,r9,r4
1000db90:	18804526 	beq	r3,r2,1000dca8 <__adddf3+0x564>
1000db94:	00801004 	movi	r2,64
1000db98:	10c5c83a 	sub	r2,r2,r3
1000db9c:	4886983a 	sll	r3,r9,r2
1000dba0:	198cb03a 	or	r6,r3,r6
1000dba4:	300cc03a 	cmpne	r6,r6,zero
1000dba8:	218cb03a 	or	r6,r4,r6
1000dbac:	0007883a 	mov	r3,zero
1000dbb0:	003f3b06 	br	1000d8a0 <__alt_data_end+0xf800d8a0>
1000dbb4:	80002a26 	beq	r16,zero,1000dc60 <__adddf3+0x51c>
1000dbb8:	0101ffc4 	movi	r4,2047
1000dbbc:	11006826 	beq	r2,r4,1000dd60 <__adddf3+0x61c>
1000dbc0:	00c7c83a 	sub	r3,zero,r3
1000dbc4:	42002034 	orhi	r8,r8,128
1000dbc8:	01000e04 	movi	r4,56
1000dbcc:	20c07c16 	blt	r4,r3,1000ddc0 <__adddf3+0x67c>
1000dbd0:	010007c4 	movi	r4,31
1000dbd4:	20c0da16 	blt	r4,r3,1000df40 <__adddf3+0x7fc>
1000dbd8:	01000804 	movi	r4,32
1000dbdc:	20c9c83a 	sub	r4,r4,r3
1000dbe0:	4114983a 	sll	r10,r8,r4
1000dbe4:	88cad83a 	srl	r5,r17,r3
1000dbe8:	8908983a 	sll	r4,r17,r4
1000dbec:	40c6d83a 	srl	r3,r8,r3
1000dbf0:	5162b03a 	or	r17,r10,r5
1000dbf4:	2008c03a 	cmpne	r4,r4,zero
1000dbf8:	8922b03a 	or	r17,r17,r4
1000dbfc:	3463c83a 	sub	r17,r6,r17
1000dc00:	48c7c83a 	sub	r3,r9,r3
1000dc04:	344d803a 	cmpltu	r6,r6,r17
1000dc08:	1991c83a 	sub	r8,r3,r6
1000dc0c:	1021883a 	mov	r16,r2
1000dc10:	3825883a 	mov	r18,r7
1000dc14:	003f2706 	br	1000d8b4 <__alt_data_end+0xf800d8b4>
1000dc18:	24d0b03a 	or	r8,r4,r19
1000dc1c:	40001b1e 	bne	r8,zero,1000dc8c <__adddf3+0x548>
1000dc20:	0005883a 	mov	r2,zero
1000dc24:	0007883a 	mov	r3,zero
1000dc28:	0021883a 	mov	r16,zero
1000dc2c:	003f4d06 	br	1000d964 <__alt_data_end+0xf800d964>
1000dc30:	008007c4 	movi	r2,31
1000dc34:	11003c16 	blt	r2,r4,1000dd28 <__adddf3+0x5e4>
1000dc38:	00800804 	movi	r2,32
1000dc3c:	1105c83a 	sub	r2,r2,r4
1000dc40:	488e983a 	sll	r7,r9,r2
1000dc44:	310ad83a 	srl	r5,r6,r4
1000dc48:	3084983a 	sll	r2,r6,r2
1000dc4c:	4912d83a 	srl	r9,r9,r4
1000dc50:	394ab03a 	or	r5,r7,r5
1000dc54:	1004c03a 	cmpne	r2,r2,zero
1000dc58:	288ab03a 	or	r5,r5,r2
1000dc5c:	003f5306 	br	1000d9ac <__alt_data_end+0xf800d9ac>
1000dc60:	4448b03a 	or	r4,r8,r17
1000dc64:	20003e26 	beq	r4,zero,1000dd60 <__adddf3+0x61c>
1000dc68:	00c6303a 	nor	r3,zero,r3
1000dc6c:	18003a1e 	bne	r3,zero,1000dd58 <__adddf3+0x614>
1000dc70:	3463c83a 	sub	r17,r6,r17
1000dc74:	4a07c83a 	sub	r3,r9,r8
1000dc78:	344d803a 	cmpltu	r6,r6,r17
1000dc7c:	1991c83a 	sub	r8,r3,r6
1000dc80:	1021883a 	mov	r16,r2
1000dc84:	3825883a 	mov	r18,r7
1000dc88:	003f0a06 	br	1000d8b4 <__alt_data_end+0xf800d8b4>
1000dc8c:	2023883a 	mov	r17,r4
1000dc90:	003f0d06 	br	1000d8c8 <__alt_data_end+0xf800d8c8>
1000dc94:	0081ffc4 	movi	r2,2047
1000dc98:	80bf3f1e 	bne	r16,r2,1000d998 <__alt_data_end+0xf800d998>
1000dc9c:	003ec806 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000dca0:	0005883a 	mov	r2,zero
1000dca4:	003fb106 	br	1000db6c <__alt_data_end+0xf800db6c>
1000dca8:	0007883a 	mov	r3,zero
1000dcac:	003fbc06 	br	1000dba0 <__alt_data_end+0xf800dba0>
1000dcb0:	4444b03a 	or	r2,r8,r17
1000dcb4:	8000871e 	bne	r16,zero,1000ded4 <__adddf3+0x790>
1000dcb8:	1000ba26 	beq	r2,zero,1000dfa4 <__adddf3+0x860>
1000dcbc:	4984b03a 	or	r2,r9,r6
1000dcc0:	103ebf26 	beq	r2,zero,1000d7c0 <__alt_data_end+0xf800d7c0>
1000dcc4:	8985883a 	add	r2,r17,r6
1000dcc8:	4247883a 	add	r3,r8,r9
1000dccc:	1451803a 	cmpltu	r8,r2,r17
1000dcd0:	40d1883a 	add	r8,r8,r3
1000dcd4:	40c0202c 	andhi	r3,r8,128
1000dcd8:	1023883a 	mov	r17,r2
1000dcdc:	183f1a26 	beq	r3,zero,1000d948 <__alt_data_end+0xf800d948>
1000dce0:	00bfe034 	movhi	r2,65408
1000dce4:	10bfffc4 	addi	r2,r2,-1
1000dce8:	2021883a 	mov	r16,r4
1000dcec:	4090703a 	and	r8,r8,r2
1000dcf0:	003eb306 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000dcf4:	4444b03a 	or	r2,r8,r17
1000dcf8:	8000291e 	bne	r16,zero,1000dda0 <__adddf3+0x65c>
1000dcfc:	10004b1e 	bne	r2,zero,1000de2c <__adddf3+0x6e8>
1000dd00:	4990b03a 	or	r8,r9,r6
1000dd04:	40008b26 	beq	r8,zero,1000df34 <__adddf3+0x7f0>
1000dd08:	4811883a 	mov	r8,r9
1000dd0c:	3023883a 	mov	r17,r6
1000dd10:	3825883a 	mov	r18,r7
1000dd14:	003eaa06 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000dd18:	1021883a 	mov	r16,r2
1000dd1c:	0011883a 	mov	r8,zero
1000dd20:	0005883a 	mov	r2,zero
1000dd24:	003f0f06 	br	1000d964 <__alt_data_end+0xf800d964>
1000dd28:	217ff804 	addi	r5,r4,-32
1000dd2c:	00800804 	movi	r2,32
1000dd30:	494ad83a 	srl	r5,r9,r5
1000dd34:	20807d26 	beq	r4,r2,1000df2c <__adddf3+0x7e8>
1000dd38:	00801004 	movi	r2,64
1000dd3c:	1109c83a 	sub	r4,r2,r4
1000dd40:	4912983a 	sll	r9,r9,r4
1000dd44:	498cb03a 	or	r6,r9,r6
1000dd48:	300cc03a 	cmpne	r6,r6,zero
1000dd4c:	298ab03a 	or	r5,r5,r6
1000dd50:	0013883a 	mov	r9,zero
1000dd54:	003f1506 	br	1000d9ac <__alt_data_end+0xf800d9ac>
1000dd58:	0101ffc4 	movi	r4,2047
1000dd5c:	113f9a1e 	bne	r2,r4,1000dbc8 <__alt_data_end+0xf800dbc8>
1000dd60:	4811883a 	mov	r8,r9
1000dd64:	3023883a 	mov	r17,r6
1000dd68:	1021883a 	mov	r16,r2
1000dd6c:	3825883a 	mov	r18,r7
1000dd70:	003e9306 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000dd74:	8000161e 	bne	r16,zero,1000ddd0 <__adddf3+0x68c>
1000dd78:	444ab03a 	or	r5,r8,r17
1000dd7c:	28005126 	beq	r5,zero,1000dec4 <__adddf3+0x780>
1000dd80:	0108303a 	nor	r4,zero,r4
1000dd84:	20004d1e 	bne	r4,zero,1000debc <__adddf3+0x778>
1000dd88:	89a3883a 	add	r17,r17,r6
1000dd8c:	4253883a 	add	r9,r8,r9
1000dd90:	898d803a 	cmpltu	r6,r17,r6
1000dd94:	3251883a 	add	r8,r6,r9
1000dd98:	1021883a 	mov	r16,r2
1000dd9c:	003f0806 	br	1000d9c0 <__alt_data_end+0xf800d9c0>
1000dda0:	1000301e 	bne	r2,zero,1000de64 <__adddf3+0x720>
1000dda4:	4984b03a 	or	r2,r9,r6
1000dda8:	10007126 	beq	r2,zero,1000df70 <__adddf3+0x82c>
1000ddac:	4811883a 	mov	r8,r9
1000ddb0:	3023883a 	mov	r17,r6
1000ddb4:	3825883a 	mov	r18,r7
1000ddb8:	0401ffc4 	movi	r16,2047
1000ddbc:	003e8006 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000ddc0:	4462b03a 	or	r17,r8,r17
1000ddc4:	8822c03a 	cmpne	r17,r17,zero
1000ddc8:	0007883a 	mov	r3,zero
1000ddcc:	003f8b06 	br	1000dbfc <__alt_data_end+0xf800dbfc>
1000ddd0:	0141ffc4 	movi	r5,2047
1000ddd4:	11403b26 	beq	r2,r5,1000dec4 <__adddf3+0x780>
1000ddd8:	0109c83a 	sub	r4,zero,r4
1000dddc:	42002034 	orhi	r8,r8,128
1000dde0:	01400e04 	movi	r5,56
1000dde4:	29006716 	blt	r5,r4,1000df84 <__adddf3+0x840>
1000dde8:	014007c4 	movi	r5,31
1000ddec:	29007016 	blt	r5,r4,1000dfb0 <__adddf3+0x86c>
1000ddf0:	01400804 	movi	r5,32
1000ddf4:	290bc83a 	sub	r5,r5,r4
1000ddf8:	4154983a 	sll	r10,r8,r5
1000ddfc:	890ed83a 	srl	r7,r17,r4
1000de00:	894a983a 	sll	r5,r17,r5
1000de04:	4108d83a 	srl	r4,r8,r4
1000de08:	51e2b03a 	or	r17,r10,r7
1000de0c:	280ac03a 	cmpne	r5,r5,zero
1000de10:	8962b03a 	or	r17,r17,r5
1000de14:	89a3883a 	add	r17,r17,r6
1000de18:	2253883a 	add	r9,r4,r9
1000de1c:	898d803a 	cmpltu	r6,r17,r6
1000de20:	3251883a 	add	r8,r6,r9
1000de24:	1021883a 	mov	r16,r2
1000de28:	003ee506 	br	1000d9c0 <__alt_data_end+0xf800d9c0>
1000de2c:	4984b03a 	or	r2,r9,r6
1000de30:	103e6326 	beq	r2,zero,1000d7c0 <__alt_data_end+0xf800d7c0>
1000de34:	8987c83a 	sub	r3,r17,r6
1000de38:	88c9803a 	cmpltu	r4,r17,r3
1000de3c:	4245c83a 	sub	r2,r8,r9
1000de40:	1105c83a 	sub	r2,r2,r4
1000de44:	1100202c 	andhi	r4,r2,128
1000de48:	203ebb26 	beq	r4,zero,1000d938 <__alt_data_end+0xf800d938>
1000de4c:	3463c83a 	sub	r17,r6,r17
1000de50:	4a07c83a 	sub	r3,r9,r8
1000de54:	344d803a 	cmpltu	r6,r6,r17
1000de58:	1991c83a 	sub	r8,r3,r6
1000de5c:	3825883a 	mov	r18,r7
1000de60:	003e5706 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000de64:	4984b03a 	or	r2,r9,r6
1000de68:	10002e26 	beq	r2,zero,1000df24 <__adddf3+0x7e0>
1000de6c:	4004d0fa 	srli	r2,r8,3
1000de70:	8822d0fa 	srli	r17,r17,3
1000de74:	4010977a 	slli	r8,r8,29
1000de78:	10c0022c 	andhi	r3,r2,8
1000de7c:	4462b03a 	or	r17,r8,r17
1000de80:	18000826 	beq	r3,zero,1000dea4 <__adddf3+0x760>
1000de84:	4808d0fa 	srli	r4,r9,3
1000de88:	20c0022c 	andhi	r3,r4,8
1000de8c:	1800051e 	bne	r3,zero,1000dea4 <__adddf3+0x760>
1000de90:	300cd0fa 	srli	r6,r6,3
1000de94:	4806977a 	slli	r3,r9,29
1000de98:	2005883a 	mov	r2,r4
1000de9c:	3825883a 	mov	r18,r7
1000dea0:	19a2b03a 	or	r17,r3,r6
1000dea4:	8810d77a 	srli	r8,r17,29
1000dea8:	100490fa 	slli	r2,r2,3
1000deac:	882290fa 	slli	r17,r17,3
1000deb0:	0401ffc4 	movi	r16,2047
1000deb4:	4090b03a 	or	r8,r8,r2
1000deb8:	003e4106 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000debc:	0141ffc4 	movi	r5,2047
1000dec0:	117fc71e 	bne	r2,r5,1000dde0 <__alt_data_end+0xf800dde0>
1000dec4:	4811883a 	mov	r8,r9
1000dec8:	3023883a 	mov	r17,r6
1000decc:	1021883a 	mov	r16,r2
1000ded0:	003e3b06 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000ded4:	10002f26 	beq	r2,zero,1000df94 <__adddf3+0x850>
1000ded8:	4984b03a 	or	r2,r9,r6
1000dedc:	10001126 	beq	r2,zero,1000df24 <__adddf3+0x7e0>
1000dee0:	4004d0fa 	srli	r2,r8,3
1000dee4:	8822d0fa 	srli	r17,r17,3
1000dee8:	4010977a 	slli	r8,r8,29
1000deec:	10c0022c 	andhi	r3,r2,8
1000def0:	4462b03a 	or	r17,r8,r17
1000def4:	183feb26 	beq	r3,zero,1000dea4 <__alt_data_end+0xf800dea4>
1000def8:	4808d0fa 	srli	r4,r9,3
1000defc:	20c0022c 	andhi	r3,r4,8
1000df00:	183fe81e 	bne	r3,zero,1000dea4 <__alt_data_end+0xf800dea4>
1000df04:	300cd0fa 	srli	r6,r6,3
1000df08:	4806977a 	slli	r3,r9,29
1000df0c:	2005883a 	mov	r2,r4
1000df10:	19a2b03a 	or	r17,r3,r6
1000df14:	003fe306 	br	1000dea4 <__alt_data_end+0xf800dea4>
1000df18:	0011883a 	mov	r8,zero
1000df1c:	0005883a 	mov	r2,zero
1000df20:	003e3f06 	br	1000d820 <__alt_data_end+0xf800d820>
1000df24:	0401ffc4 	movi	r16,2047
1000df28:	003e2506 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000df2c:	0013883a 	mov	r9,zero
1000df30:	003f8406 	br	1000dd44 <__alt_data_end+0xf800dd44>
1000df34:	0005883a 	mov	r2,zero
1000df38:	0007883a 	mov	r3,zero
1000df3c:	003e8906 	br	1000d964 <__alt_data_end+0xf800d964>
1000df40:	197ff804 	addi	r5,r3,-32
1000df44:	01000804 	movi	r4,32
1000df48:	414ad83a 	srl	r5,r8,r5
1000df4c:	19002426 	beq	r3,r4,1000dfe0 <__adddf3+0x89c>
1000df50:	01001004 	movi	r4,64
1000df54:	20c7c83a 	sub	r3,r4,r3
1000df58:	40c6983a 	sll	r3,r8,r3
1000df5c:	1c46b03a 	or	r3,r3,r17
1000df60:	1806c03a 	cmpne	r3,r3,zero
1000df64:	28e2b03a 	or	r17,r5,r3
1000df68:	0007883a 	mov	r3,zero
1000df6c:	003f2306 	br	1000dbfc <__alt_data_end+0xf800dbfc>
1000df70:	0007883a 	mov	r3,zero
1000df74:	5811883a 	mov	r8,r11
1000df78:	00bfffc4 	movi	r2,-1
1000df7c:	0401ffc4 	movi	r16,2047
1000df80:	003e7806 	br	1000d964 <__alt_data_end+0xf800d964>
1000df84:	4462b03a 	or	r17,r8,r17
1000df88:	8822c03a 	cmpne	r17,r17,zero
1000df8c:	0009883a 	mov	r4,zero
1000df90:	003fa006 	br	1000de14 <__alt_data_end+0xf800de14>
1000df94:	4811883a 	mov	r8,r9
1000df98:	3023883a 	mov	r17,r6
1000df9c:	0401ffc4 	movi	r16,2047
1000dfa0:	003e0706 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000dfa4:	4811883a 	mov	r8,r9
1000dfa8:	3023883a 	mov	r17,r6
1000dfac:	003e0406 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000dfb0:	21fff804 	addi	r7,r4,-32
1000dfb4:	01400804 	movi	r5,32
1000dfb8:	41ced83a 	srl	r7,r8,r7
1000dfbc:	21400a26 	beq	r4,r5,1000dfe8 <__adddf3+0x8a4>
1000dfc0:	01401004 	movi	r5,64
1000dfc4:	2909c83a 	sub	r4,r5,r4
1000dfc8:	4108983a 	sll	r4,r8,r4
1000dfcc:	2448b03a 	or	r4,r4,r17
1000dfd0:	2008c03a 	cmpne	r4,r4,zero
1000dfd4:	3922b03a 	or	r17,r7,r4
1000dfd8:	0009883a 	mov	r4,zero
1000dfdc:	003f8d06 	br	1000de14 <__alt_data_end+0xf800de14>
1000dfe0:	0007883a 	mov	r3,zero
1000dfe4:	003fdd06 	br	1000df5c <__alt_data_end+0xf800df5c>
1000dfe8:	0009883a 	mov	r4,zero
1000dfec:	003ff706 	br	1000dfcc <__alt_data_end+0xf800dfcc>

1000dff0 <__divdf3>:
1000dff0:	defff004 	addi	sp,sp,-64
1000dff4:	dc800815 	stw	r18,32(sp)
1000dff8:	2824d53a 	srli	r18,r5,20
1000dffc:	dd800c15 	stw	r22,48(sp)
1000e000:	282cd7fa 	srli	r22,r5,31
1000e004:	dc000615 	stw	r16,24(sp)
1000e008:	04000434 	movhi	r16,16
1000e00c:	843fffc4 	addi	r16,r16,-1
1000e010:	dfc00f15 	stw	ra,60(sp)
1000e014:	df000e15 	stw	fp,56(sp)
1000e018:	ddc00d15 	stw	r23,52(sp)
1000e01c:	dd400b15 	stw	r21,44(sp)
1000e020:	dd000a15 	stw	r20,40(sp)
1000e024:	dcc00915 	stw	r19,36(sp)
1000e028:	dc400715 	stw	r17,28(sp)
1000e02c:	9481ffcc 	andi	r18,r18,2047
1000e030:	2c20703a 	and	r16,r5,r16
1000e034:	b2003fcc 	andi	r8,r22,255
1000e038:	90006126 	beq	r18,zero,1000e1c0 <__divdf3+0x1d0>
1000e03c:	0081ffc4 	movi	r2,2047
1000e040:	202b883a 	mov	r21,r4
1000e044:	90803726 	beq	r18,r2,1000e124 <__divdf3+0x134>
1000e048:	80800434 	orhi	r2,r16,16
1000e04c:	100490fa 	slli	r2,r2,3
1000e050:	2020d77a 	srli	r16,r4,29
1000e054:	202a90fa 	slli	r21,r4,3
1000e058:	94bf0044 	addi	r18,r18,-1023
1000e05c:	80a0b03a 	or	r16,r16,r2
1000e060:	0013883a 	mov	r9,zero
1000e064:	000b883a 	mov	r5,zero
1000e068:	3806d53a 	srli	r3,r7,20
1000e06c:	382ed7fa 	srli	r23,r7,31
1000e070:	04400434 	movhi	r17,16
1000e074:	8c7fffc4 	addi	r17,r17,-1
1000e078:	18c1ffcc 	andi	r3,r3,2047
1000e07c:	3029883a 	mov	r20,r6
1000e080:	3c62703a 	and	r17,r7,r17
1000e084:	bf003fcc 	andi	fp,r23,255
1000e088:	18006e26 	beq	r3,zero,1000e244 <__divdf3+0x254>
1000e08c:	0081ffc4 	movi	r2,2047
1000e090:	18806626 	beq	r3,r2,1000e22c <__divdf3+0x23c>
1000e094:	88800434 	orhi	r2,r17,16
1000e098:	100490fa 	slli	r2,r2,3
1000e09c:	3022d77a 	srli	r17,r6,29
1000e0a0:	302890fa 	slli	r20,r6,3
1000e0a4:	18ff0044 	addi	r3,r3,-1023
1000e0a8:	88a2b03a 	or	r17,r17,r2
1000e0ac:	000f883a 	mov	r7,zero
1000e0b0:	b5e6f03a 	xor	r19,r22,r23
1000e0b4:	3a4cb03a 	or	r6,r7,r9
1000e0b8:	008003c4 	movi	r2,15
1000e0bc:	9809883a 	mov	r4,r19
1000e0c0:	90c7c83a 	sub	r3,r18,r3
1000e0c4:	9cc03fcc 	andi	r19,r19,255
1000e0c8:	11809636 	bltu	r2,r6,1000e324 <__divdf3+0x334>
1000e0cc:	300c90ba 	slli	r6,r6,2
1000e0d0:	00840074 	movhi	r2,4097
1000e0d4:	10b83904 	addi	r2,r2,-7964
1000e0d8:	308d883a 	add	r6,r6,r2
1000e0dc:	30800017 	ldw	r2,0(r6)
1000e0e0:	1000683a 	jmp	r2
1000e0e4:	1000e324 	muli	zero,r2,908
1000e0e8:	1000e15c 	xori	zero,r2,901
1000e0ec:	1000e314 	ori	zero,r2,908
1000e0f0:	1000e150 	cmplti	zero,r2,901
1000e0f4:	1000e314 	ori	zero,r2,908
1000e0f8:	1000e2e8 	cmpgeui	zero,r2,907
1000e0fc:	1000e314 	ori	zero,r2,908
1000e100:	1000e150 	cmplti	zero,r2,901
1000e104:	1000e15c 	xori	zero,r2,901
1000e108:	1000e15c 	xori	zero,r2,901
1000e10c:	1000e2e8 	cmpgeui	zero,r2,907
1000e110:	1000e150 	cmplti	zero,r2,901
1000e114:	1000e140 	call	11000e14 <_gp+0xfe410c>
1000e118:	1000e140 	call	11000e14 <_gp+0xfe410c>
1000e11c:	1000e140 	call	11000e14 <_gp+0xfe410c>
1000e120:	1000e6ac 	andhi	zero,r2,922
1000e124:	2404b03a 	or	r2,r4,r16
1000e128:	10006c1e 	bne	r2,zero,1000e2dc <__divdf3+0x2ec>
1000e12c:	02400204 	movi	r9,8
1000e130:	0021883a 	mov	r16,zero
1000e134:	002b883a 	mov	r21,zero
1000e138:	01400084 	movi	r5,2
1000e13c:	003fca06 	br	1000e068 <__alt_data_end+0xf800e068>
1000e140:	8023883a 	mov	r17,r16
1000e144:	a829883a 	mov	r20,r21
1000e148:	4039883a 	mov	fp,r8
1000e14c:	280f883a 	mov	r7,r5
1000e150:	00800084 	movi	r2,2
1000e154:	3881601e 	bne	r7,r2,1000e6d8 <__divdf3+0x6e8>
1000e158:	e027883a 	mov	r19,fp
1000e15c:	9900004c 	andi	r4,r19,1
1000e160:	0081ffc4 	movi	r2,2047
1000e164:	0021883a 	mov	r16,zero
1000e168:	002b883a 	mov	r21,zero
1000e16c:	1004953a 	slli	r2,r2,20
1000e170:	20c03fcc 	andi	r3,r4,255
1000e174:	01400434 	movhi	r5,16
1000e178:	297fffc4 	addi	r5,r5,-1
1000e17c:	180697fa 	slli	r3,r3,31
1000e180:	8160703a 	and	r16,r16,r5
1000e184:	80a0b03a 	or	r16,r16,r2
1000e188:	80c6b03a 	or	r3,r16,r3
1000e18c:	a805883a 	mov	r2,r21
1000e190:	dfc00f17 	ldw	ra,60(sp)
1000e194:	df000e17 	ldw	fp,56(sp)
1000e198:	ddc00d17 	ldw	r23,52(sp)
1000e19c:	dd800c17 	ldw	r22,48(sp)
1000e1a0:	dd400b17 	ldw	r21,44(sp)
1000e1a4:	dd000a17 	ldw	r20,40(sp)
1000e1a8:	dcc00917 	ldw	r19,36(sp)
1000e1ac:	dc800817 	ldw	r18,32(sp)
1000e1b0:	dc400717 	ldw	r17,28(sp)
1000e1b4:	dc000617 	ldw	r16,24(sp)
1000e1b8:	dec01004 	addi	sp,sp,64
1000e1bc:	f800283a 	ret
1000e1c0:	2404b03a 	or	r2,r4,r16
1000e1c4:	2023883a 	mov	r17,r4
1000e1c8:	10003f26 	beq	r2,zero,1000e2c8 <__divdf3+0x2d8>
1000e1cc:	80015e26 	beq	r16,zero,1000e748 <__divdf3+0x758>
1000e1d0:	8009883a 	mov	r4,r16
1000e1d4:	d9800215 	stw	r6,8(sp)
1000e1d8:	d9c00515 	stw	r7,20(sp)
1000e1dc:	da000415 	stw	r8,16(sp)
1000e1e0:	000ff840 	call	1000ff84 <__clzsi2>
1000e1e4:	d9800217 	ldw	r6,8(sp)
1000e1e8:	d9c00517 	ldw	r7,20(sp)
1000e1ec:	da000417 	ldw	r8,16(sp)
1000e1f0:	113ffd44 	addi	r4,r2,-11
1000e1f4:	00c00704 	movi	r3,28
1000e1f8:	19014f16 	blt	r3,r4,1000e738 <__divdf3+0x748>
1000e1fc:	00c00744 	movi	r3,29
1000e200:	157ffe04 	addi	r21,r2,-8
1000e204:	1907c83a 	sub	r3,r3,r4
1000e208:	8560983a 	sll	r16,r16,r21
1000e20c:	88c6d83a 	srl	r3,r17,r3
1000e210:	8d6a983a 	sll	r21,r17,r21
1000e214:	1c20b03a 	or	r16,r3,r16
1000e218:	1080fcc4 	addi	r2,r2,1011
1000e21c:	00a5c83a 	sub	r18,zero,r2
1000e220:	0013883a 	mov	r9,zero
1000e224:	000b883a 	mov	r5,zero
1000e228:	003f8f06 	br	1000e068 <__alt_data_end+0xf800e068>
1000e22c:	3444b03a 	or	r2,r6,r17
1000e230:	1000231e 	bne	r2,zero,1000e2c0 <__divdf3+0x2d0>
1000e234:	0023883a 	mov	r17,zero
1000e238:	0029883a 	mov	r20,zero
1000e23c:	01c00084 	movi	r7,2
1000e240:	003f9b06 	br	1000e0b0 <__alt_data_end+0xf800e0b0>
1000e244:	3444b03a 	or	r2,r6,r17
1000e248:	10001926 	beq	r2,zero,1000e2b0 <__divdf3+0x2c0>
1000e24c:	88014b26 	beq	r17,zero,1000e77c <__divdf3+0x78c>
1000e250:	8809883a 	mov	r4,r17
1000e254:	d9400115 	stw	r5,4(sp)
1000e258:	d9800215 	stw	r6,8(sp)
1000e25c:	da000415 	stw	r8,16(sp)
1000e260:	da400315 	stw	r9,12(sp)
1000e264:	000ff840 	call	1000ff84 <__clzsi2>
1000e268:	d9400117 	ldw	r5,4(sp)
1000e26c:	d9800217 	ldw	r6,8(sp)
1000e270:	da000417 	ldw	r8,16(sp)
1000e274:	da400317 	ldw	r9,12(sp)
1000e278:	113ffd44 	addi	r4,r2,-11
1000e27c:	00c00704 	movi	r3,28
1000e280:	19013a16 	blt	r3,r4,1000e76c <__divdf3+0x77c>
1000e284:	00c00744 	movi	r3,29
1000e288:	153ffe04 	addi	r20,r2,-8
1000e28c:	1907c83a 	sub	r3,r3,r4
1000e290:	8d22983a 	sll	r17,r17,r20
1000e294:	30c6d83a 	srl	r3,r6,r3
1000e298:	3528983a 	sll	r20,r6,r20
1000e29c:	1c62b03a 	or	r17,r3,r17
1000e2a0:	1080fcc4 	addi	r2,r2,1011
1000e2a4:	0087c83a 	sub	r3,zero,r2
1000e2a8:	000f883a 	mov	r7,zero
1000e2ac:	003f8006 	br	1000e0b0 <__alt_data_end+0xf800e0b0>
1000e2b0:	0023883a 	mov	r17,zero
1000e2b4:	0029883a 	mov	r20,zero
1000e2b8:	01c00044 	movi	r7,1
1000e2bc:	003f7c06 	br	1000e0b0 <__alt_data_end+0xf800e0b0>
1000e2c0:	01c000c4 	movi	r7,3
1000e2c4:	003f7a06 	br	1000e0b0 <__alt_data_end+0xf800e0b0>
1000e2c8:	02400104 	movi	r9,4
1000e2cc:	0021883a 	mov	r16,zero
1000e2d0:	002b883a 	mov	r21,zero
1000e2d4:	01400044 	movi	r5,1
1000e2d8:	003f6306 	br	1000e068 <__alt_data_end+0xf800e068>
1000e2dc:	02400304 	movi	r9,12
1000e2e0:	014000c4 	movi	r5,3
1000e2e4:	003f6006 	br	1000e068 <__alt_data_end+0xf800e068>
1000e2e8:	04000434 	movhi	r16,16
1000e2ec:	0009883a 	mov	r4,zero
1000e2f0:	843fffc4 	addi	r16,r16,-1
1000e2f4:	057fffc4 	movi	r21,-1
1000e2f8:	0081ffc4 	movi	r2,2047
1000e2fc:	003f9b06 	br	1000e16c <__alt_data_end+0xf800e16c>
1000e300:	00c00044 	movi	r3,1
1000e304:	1887c83a 	sub	r3,r3,r2
1000e308:	01000e04 	movi	r4,56
1000e30c:	20c1530e 	bge	r4,r3,1000e85c <__divdf3+0x86c>
1000e310:	9900004c 	andi	r4,r19,1
1000e314:	0005883a 	mov	r2,zero
1000e318:	0021883a 	mov	r16,zero
1000e31c:	002b883a 	mov	r21,zero
1000e320:	003f9206 	br	1000e16c <__alt_data_end+0xf800e16c>
1000e324:	8c012e36 	bltu	r17,r16,1000e7e0 <__divdf3+0x7f0>
1000e328:	84412c26 	beq	r16,r17,1000e7dc <__divdf3+0x7ec>
1000e32c:	a82f883a 	mov	r23,r21
1000e330:	18ffffc4 	addi	r3,r3,-1
1000e334:	002b883a 	mov	r21,zero
1000e338:	a004d63a 	srli	r2,r20,24
1000e33c:	8822923a 	slli	r17,r17,8
1000e340:	a028923a 	slli	r20,r20,8
1000e344:	8009883a 	mov	r4,r16
1000e348:	88acb03a 	or	r22,r17,r2
1000e34c:	dd000015 	stw	r20,0(sp)
1000e350:	b028d43a 	srli	r20,r22,16
1000e354:	d8c00215 	stw	r3,8(sp)
1000e358:	b4bfffcc 	andi	r18,r22,65535
1000e35c:	a00b883a 	mov	r5,r20
1000e360:	00031a00 	call	100031a0 <__udivsi3>
1000e364:	100b883a 	mov	r5,r2
1000e368:	9009883a 	mov	r4,r18
1000e36c:	1023883a 	mov	r17,r2
1000e370:	000d71c0 	call	1000d71c <__mulsi3>
1000e374:	8009883a 	mov	r4,r16
1000e378:	a00b883a 	mov	r5,r20
1000e37c:	1039883a 	mov	fp,r2
1000e380:	00032040 	call	10003204 <__umodsi3>
1000e384:	1004943a 	slli	r2,r2,16
1000e388:	b808d43a 	srli	r4,r23,16
1000e38c:	d8c00217 	ldw	r3,8(sp)
1000e390:	2084b03a 	or	r2,r4,r2
1000e394:	1700062e 	bgeu	r2,fp,1000e3b0 <__divdf3+0x3c0>
1000e398:	1585883a 	add	r2,r2,r22
1000e39c:	893fffc4 	addi	r4,r17,-1
1000e3a0:	15811d36 	bltu	r2,r22,1000e818 <__divdf3+0x828>
1000e3a4:	17011c2e 	bgeu	r2,fp,1000e818 <__divdf3+0x828>
1000e3a8:	8c7fff84 	addi	r17,r17,-2
1000e3ac:	1585883a 	add	r2,r2,r22
1000e3b0:	1739c83a 	sub	fp,r2,fp
1000e3b4:	a00b883a 	mov	r5,r20
1000e3b8:	e009883a 	mov	r4,fp
1000e3bc:	d8c00215 	stw	r3,8(sp)
1000e3c0:	00031a00 	call	100031a0 <__udivsi3>
1000e3c4:	100b883a 	mov	r5,r2
1000e3c8:	9009883a 	mov	r4,r18
1000e3cc:	1021883a 	mov	r16,r2
1000e3d0:	000d71c0 	call	1000d71c <__mulsi3>
1000e3d4:	a00b883a 	mov	r5,r20
1000e3d8:	e009883a 	mov	r4,fp
1000e3dc:	d8800415 	stw	r2,16(sp)
1000e3e0:	00032040 	call	10003204 <__umodsi3>
1000e3e4:	1004943a 	slli	r2,r2,16
1000e3e8:	da000417 	ldw	r8,16(sp)
1000e3ec:	bdffffcc 	andi	r23,r23,65535
1000e3f0:	b884b03a 	or	r2,r23,r2
1000e3f4:	d8c00217 	ldw	r3,8(sp)
1000e3f8:	1200062e 	bgeu	r2,r8,1000e414 <__divdf3+0x424>
1000e3fc:	1585883a 	add	r2,r2,r22
1000e400:	813fffc4 	addi	r4,r16,-1
1000e404:	15810236 	bltu	r2,r22,1000e810 <__divdf3+0x820>
1000e408:	1201012e 	bgeu	r2,r8,1000e810 <__divdf3+0x820>
1000e40c:	843fff84 	addi	r16,r16,-2
1000e410:	1585883a 	add	r2,r2,r22
1000e414:	8822943a 	slli	r17,r17,16
1000e418:	d9800017 	ldw	r6,0(sp)
1000e41c:	1211c83a 	sub	r8,r2,r8
1000e420:	8c22b03a 	or	r17,r17,r16
1000e424:	373fffcc 	andi	fp,r6,65535
1000e428:	8abfffcc 	andi	r10,r17,65535
1000e42c:	8820d43a 	srli	r16,r17,16
1000e430:	5009883a 	mov	r4,r10
1000e434:	e00b883a 	mov	r5,fp
1000e438:	302ed43a 	srli	r23,r6,16
1000e43c:	d8c00215 	stw	r3,8(sp)
1000e440:	da000415 	stw	r8,16(sp)
1000e444:	da800115 	stw	r10,4(sp)
1000e448:	000d71c0 	call	1000d71c <__mulsi3>
1000e44c:	800b883a 	mov	r5,r16
1000e450:	e009883a 	mov	r4,fp
1000e454:	d8800515 	stw	r2,20(sp)
1000e458:	000d71c0 	call	1000d71c <__mulsi3>
1000e45c:	8009883a 	mov	r4,r16
1000e460:	b80b883a 	mov	r5,r23
1000e464:	d8800315 	stw	r2,12(sp)
1000e468:	000d71c0 	call	1000d71c <__mulsi3>
1000e46c:	da800117 	ldw	r10,4(sp)
1000e470:	b80b883a 	mov	r5,r23
1000e474:	1021883a 	mov	r16,r2
1000e478:	5009883a 	mov	r4,r10
1000e47c:	000d71c0 	call	1000d71c <__mulsi3>
1000e480:	d9c00517 	ldw	r7,20(sp)
1000e484:	da400317 	ldw	r9,12(sp)
1000e488:	d8c00217 	ldw	r3,8(sp)
1000e48c:	3808d43a 	srli	r4,r7,16
1000e490:	1245883a 	add	r2,r2,r9
1000e494:	da000417 	ldw	r8,16(sp)
1000e498:	2085883a 	add	r2,r4,r2
1000e49c:	1240022e 	bgeu	r2,r9,1000e4a8 <__divdf3+0x4b8>
1000e4a0:	01000074 	movhi	r4,1
1000e4a4:	8121883a 	add	r16,r16,r4
1000e4a8:	1008d43a 	srli	r4,r2,16
1000e4ac:	1004943a 	slli	r2,r2,16
1000e4b0:	39ffffcc 	andi	r7,r7,65535
1000e4b4:	2409883a 	add	r4,r4,r16
1000e4b8:	11c5883a 	add	r2,r2,r7
1000e4bc:	4100bb36 	bltu	r8,r4,1000e7ac <__divdf3+0x7bc>
1000e4c0:	4100d726 	beq	r8,r4,1000e820 <__divdf3+0x830>
1000e4c4:	4109c83a 	sub	r4,r8,r4
1000e4c8:	a8a1c83a 	sub	r16,r21,r2
1000e4cc:	ac2b803a 	cmpltu	r21,r21,r16
1000e4d0:	256bc83a 	sub	r21,r4,r21
1000e4d4:	b540d926 	beq	r22,r21,1000e83c <__divdf3+0x84c>
1000e4d8:	a00b883a 	mov	r5,r20
1000e4dc:	a809883a 	mov	r4,r21
1000e4e0:	d8c00215 	stw	r3,8(sp)
1000e4e4:	00031a00 	call	100031a0 <__udivsi3>
1000e4e8:	100b883a 	mov	r5,r2
1000e4ec:	9009883a 	mov	r4,r18
1000e4f0:	d8800515 	stw	r2,20(sp)
1000e4f4:	000d71c0 	call	1000d71c <__mulsi3>
1000e4f8:	a809883a 	mov	r4,r21
1000e4fc:	a00b883a 	mov	r5,r20
1000e500:	d8800415 	stw	r2,16(sp)
1000e504:	00032040 	call	10003204 <__umodsi3>
1000e508:	1004943a 	slli	r2,r2,16
1000e50c:	8008d43a 	srli	r4,r16,16
1000e510:	da000417 	ldw	r8,16(sp)
1000e514:	d8c00217 	ldw	r3,8(sp)
1000e518:	2084b03a 	or	r2,r4,r2
1000e51c:	d9c00517 	ldw	r7,20(sp)
1000e520:	1200062e 	bgeu	r2,r8,1000e53c <__divdf3+0x54c>
1000e524:	1585883a 	add	r2,r2,r22
1000e528:	393fffc4 	addi	r4,r7,-1
1000e52c:	1580c536 	bltu	r2,r22,1000e844 <__divdf3+0x854>
1000e530:	1200c42e 	bgeu	r2,r8,1000e844 <__divdf3+0x854>
1000e534:	39ffff84 	addi	r7,r7,-2
1000e538:	1585883a 	add	r2,r2,r22
1000e53c:	122bc83a 	sub	r21,r2,r8
1000e540:	a00b883a 	mov	r5,r20
1000e544:	a809883a 	mov	r4,r21
1000e548:	d8c00215 	stw	r3,8(sp)
1000e54c:	d9c00515 	stw	r7,20(sp)
1000e550:	00031a00 	call	100031a0 <__udivsi3>
1000e554:	9009883a 	mov	r4,r18
1000e558:	100b883a 	mov	r5,r2
1000e55c:	d8800415 	stw	r2,16(sp)
1000e560:	000d71c0 	call	1000d71c <__mulsi3>
1000e564:	a809883a 	mov	r4,r21
1000e568:	a00b883a 	mov	r5,r20
1000e56c:	1025883a 	mov	r18,r2
1000e570:	00032040 	call	10003204 <__umodsi3>
1000e574:	1004943a 	slli	r2,r2,16
1000e578:	813fffcc 	andi	r4,r16,65535
1000e57c:	d8c00217 	ldw	r3,8(sp)
1000e580:	20a0b03a 	or	r16,r4,r2
1000e584:	d9c00517 	ldw	r7,20(sp)
1000e588:	da000417 	ldw	r8,16(sp)
1000e58c:	8480062e 	bgeu	r16,r18,1000e5a8 <__divdf3+0x5b8>
1000e590:	85a1883a 	add	r16,r16,r22
1000e594:	40bfffc4 	addi	r2,r8,-1
1000e598:	8580ac36 	bltu	r16,r22,1000e84c <__divdf3+0x85c>
1000e59c:	8480ab2e 	bgeu	r16,r18,1000e84c <__divdf3+0x85c>
1000e5a0:	423fff84 	addi	r8,r8,-2
1000e5a4:	85a1883a 	add	r16,r16,r22
1000e5a8:	3804943a 	slli	r2,r7,16
1000e5ac:	84a1c83a 	sub	r16,r16,r18
1000e5b0:	e009883a 	mov	r4,fp
1000e5b4:	1228b03a 	or	r20,r2,r8
1000e5b8:	a1ffffcc 	andi	r7,r20,65535
1000e5bc:	a024d43a 	srli	r18,r20,16
1000e5c0:	380b883a 	mov	r5,r7
1000e5c4:	d8c00215 	stw	r3,8(sp)
1000e5c8:	d9c00515 	stw	r7,20(sp)
1000e5cc:	000d71c0 	call	1000d71c <__mulsi3>
1000e5d0:	900b883a 	mov	r5,r18
1000e5d4:	e009883a 	mov	r4,fp
1000e5d8:	102b883a 	mov	r21,r2
1000e5dc:	000d71c0 	call	1000d71c <__mulsi3>
1000e5e0:	900b883a 	mov	r5,r18
1000e5e4:	b809883a 	mov	r4,r23
1000e5e8:	1039883a 	mov	fp,r2
1000e5ec:	000d71c0 	call	1000d71c <__mulsi3>
1000e5f0:	d9c00517 	ldw	r7,20(sp)
1000e5f4:	b80b883a 	mov	r5,r23
1000e5f8:	1025883a 	mov	r18,r2
1000e5fc:	3809883a 	mov	r4,r7
1000e600:	000d71c0 	call	1000d71c <__mulsi3>
1000e604:	a808d43a 	srli	r4,r21,16
1000e608:	1705883a 	add	r2,r2,fp
1000e60c:	d8c00217 	ldw	r3,8(sp)
1000e610:	2085883a 	add	r2,r4,r2
1000e614:	1700022e 	bgeu	r2,fp,1000e620 <__divdf3+0x630>
1000e618:	01000074 	movhi	r4,1
1000e61c:	9125883a 	add	r18,r18,r4
1000e620:	1008d43a 	srli	r4,r2,16
1000e624:	1004943a 	slli	r2,r2,16
1000e628:	ad7fffcc 	andi	r21,r21,65535
1000e62c:	2489883a 	add	r4,r4,r18
1000e630:	1545883a 	add	r2,r2,r21
1000e634:	81003836 	bltu	r16,r4,1000e718 <__divdf3+0x728>
1000e638:	81003626 	beq	r16,r4,1000e714 <__divdf3+0x724>
1000e63c:	a5000054 	ori	r20,r20,1
1000e640:	1880ffc4 	addi	r2,r3,1023
1000e644:	00bf2e0e 	bge	zero,r2,1000e300 <__alt_data_end+0xf800e300>
1000e648:	a10001cc 	andi	r4,r20,7
1000e64c:	20000726 	beq	r4,zero,1000e66c <__divdf3+0x67c>
1000e650:	a10003cc 	andi	r4,r20,15
1000e654:	01400104 	movi	r5,4
1000e658:	21400426 	beq	r4,r5,1000e66c <__divdf3+0x67c>
1000e65c:	a149883a 	add	r4,r20,r5
1000e660:	2529803a 	cmpltu	r20,r4,r20
1000e664:	8d23883a 	add	r17,r17,r20
1000e668:	2029883a 	mov	r20,r4
1000e66c:	8900402c 	andhi	r4,r17,256
1000e670:	20000426 	beq	r4,zero,1000e684 <__divdf3+0x694>
1000e674:	18810004 	addi	r2,r3,1024
1000e678:	00ffc034 	movhi	r3,65280
1000e67c:	18ffffc4 	addi	r3,r3,-1
1000e680:	88e2703a 	and	r17,r17,r3
1000e684:	00c1ff84 	movi	r3,2046
1000e688:	18beb416 	blt	r3,r2,1000e15c <__alt_data_end+0xf800e15c>
1000e68c:	a028d0fa 	srli	r20,r20,3
1000e690:	882a977a 	slli	r21,r17,29
1000e694:	8820927a 	slli	r16,r17,9
1000e698:	1081ffcc 	andi	r2,r2,2047
1000e69c:	ad2ab03a 	or	r21,r21,r20
1000e6a0:	8020d33a 	srli	r16,r16,12
1000e6a4:	9900004c 	andi	r4,r19,1
1000e6a8:	003eb006 	br	1000e16c <__alt_data_end+0xf800e16c>
1000e6ac:	8080022c 	andhi	r2,r16,8
1000e6b0:	10001226 	beq	r2,zero,1000e6fc <__divdf3+0x70c>
1000e6b4:	8880022c 	andhi	r2,r17,8
1000e6b8:	1000101e 	bne	r2,zero,1000e6fc <__divdf3+0x70c>
1000e6bc:	00800434 	movhi	r2,16
1000e6c0:	8c000234 	orhi	r16,r17,8
1000e6c4:	10bfffc4 	addi	r2,r2,-1
1000e6c8:	b809883a 	mov	r4,r23
1000e6cc:	80a0703a 	and	r16,r16,r2
1000e6d0:	a02b883a 	mov	r21,r20
1000e6d4:	003f0806 	br	1000e2f8 <__alt_data_end+0xf800e2f8>
1000e6d8:	008000c4 	movi	r2,3
1000e6dc:	3880b126 	beq	r7,r2,1000e9a4 <__divdf3+0x9b4>
1000e6e0:	00800044 	movi	r2,1
1000e6e4:	38805b1e 	bne	r7,r2,1000e854 <__divdf3+0x864>
1000e6e8:	e009883a 	mov	r4,fp
1000e6ec:	0005883a 	mov	r2,zero
1000e6f0:	0021883a 	mov	r16,zero
1000e6f4:	002b883a 	mov	r21,zero
1000e6f8:	003e9c06 	br	1000e16c <__alt_data_end+0xf800e16c>
1000e6fc:	00800434 	movhi	r2,16
1000e700:	84000234 	orhi	r16,r16,8
1000e704:	10bfffc4 	addi	r2,r2,-1
1000e708:	b009883a 	mov	r4,r22
1000e70c:	80a0703a 	and	r16,r16,r2
1000e710:	003ef906 	br	1000e2f8 <__alt_data_end+0xf800e2f8>
1000e714:	103fca26 	beq	r2,zero,1000e640 <__alt_data_end+0xf800e640>
1000e718:	b421883a 	add	r16,r22,r16
1000e71c:	a17fffc4 	addi	r5,r20,-1
1000e720:	8580422e 	bgeu	r16,r22,1000e82c <__divdf3+0x83c>
1000e724:	2829883a 	mov	r20,r5
1000e728:	813fc41e 	bne	r16,r4,1000e63c <__alt_data_end+0xf800e63c>
1000e72c:	d9800017 	ldw	r6,0(sp)
1000e730:	30bfc21e 	bne	r6,r2,1000e63c <__alt_data_end+0xf800e63c>
1000e734:	003fc206 	br	1000e640 <__alt_data_end+0xf800e640>
1000e738:	143ff604 	addi	r16,r2,-40
1000e73c:	8c20983a 	sll	r16,r17,r16
1000e740:	002b883a 	mov	r21,zero
1000e744:	003eb406 	br	1000e218 <__alt_data_end+0xf800e218>
1000e748:	d9800215 	stw	r6,8(sp)
1000e74c:	d9c00515 	stw	r7,20(sp)
1000e750:	da000415 	stw	r8,16(sp)
1000e754:	000ff840 	call	1000ff84 <__clzsi2>
1000e758:	10800804 	addi	r2,r2,32
1000e75c:	da000417 	ldw	r8,16(sp)
1000e760:	d9c00517 	ldw	r7,20(sp)
1000e764:	d9800217 	ldw	r6,8(sp)
1000e768:	003ea106 	br	1000e1f0 <__alt_data_end+0xf800e1f0>
1000e76c:	147ff604 	addi	r17,r2,-40
1000e770:	3462983a 	sll	r17,r6,r17
1000e774:	0029883a 	mov	r20,zero
1000e778:	003ec906 	br	1000e2a0 <__alt_data_end+0xf800e2a0>
1000e77c:	3009883a 	mov	r4,r6
1000e780:	d9400115 	stw	r5,4(sp)
1000e784:	d9800215 	stw	r6,8(sp)
1000e788:	da000415 	stw	r8,16(sp)
1000e78c:	da400315 	stw	r9,12(sp)
1000e790:	000ff840 	call	1000ff84 <__clzsi2>
1000e794:	10800804 	addi	r2,r2,32
1000e798:	da400317 	ldw	r9,12(sp)
1000e79c:	da000417 	ldw	r8,16(sp)
1000e7a0:	d9800217 	ldw	r6,8(sp)
1000e7a4:	d9400117 	ldw	r5,4(sp)
1000e7a8:	003eb306 	br	1000e278 <__alt_data_end+0xf800e278>
1000e7ac:	d9800017 	ldw	r6,0(sp)
1000e7b0:	a9ab883a 	add	r21,r21,r6
1000e7b4:	a98b803a 	cmpltu	r5,r21,r6
1000e7b8:	2d8b883a 	add	r5,r5,r22
1000e7bc:	2a11883a 	add	r8,r5,r8
1000e7c0:	897fffc4 	addi	r5,r17,-1
1000e7c4:	b2000c2e 	bgeu	r22,r8,1000e7f8 <__divdf3+0x808>
1000e7c8:	41003f36 	bltu	r8,r4,1000e8c8 <__divdf3+0x8d8>
1000e7cc:	22006c26 	beq	r4,r8,1000e980 <__divdf3+0x990>
1000e7d0:	4109c83a 	sub	r4,r8,r4
1000e7d4:	2823883a 	mov	r17,r5
1000e7d8:	003f3b06 	br	1000e4c8 <__alt_data_end+0xf800e4c8>
1000e7dc:	ad3ed336 	bltu	r21,r20,1000e32c <__alt_data_end+0xf800e32c>
1000e7e0:	a804d07a 	srli	r2,r21,1
1000e7e4:	802e97fa 	slli	r23,r16,31
1000e7e8:	a82a97fa 	slli	r21,r21,31
1000e7ec:	8020d07a 	srli	r16,r16,1
1000e7f0:	b8aeb03a 	or	r23,r23,r2
1000e7f4:	003ed006 	br	1000e338 <__alt_data_end+0xf800e338>
1000e7f8:	b23ff51e 	bne	r22,r8,1000e7d0 <__alt_data_end+0xf800e7d0>
1000e7fc:	d9800017 	ldw	r6,0(sp)
1000e800:	a9bff12e 	bgeu	r21,r6,1000e7c8 <__alt_data_end+0xf800e7c8>
1000e804:	b109c83a 	sub	r4,r22,r4
1000e808:	2823883a 	mov	r17,r5
1000e80c:	003f2e06 	br	1000e4c8 <__alt_data_end+0xf800e4c8>
1000e810:	2021883a 	mov	r16,r4
1000e814:	003eff06 	br	1000e414 <__alt_data_end+0xf800e414>
1000e818:	2023883a 	mov	r17,r4
1000e81c:	003ee406 	br	1000e3b0 <__alt_data_end+0xf800e3b0>
1000e820:	a8bfe236 	bltu	r21,r2,1000e7ac <__alt_data_end+0xf800e7ac>
1000e824:	0009883a 	mov	r4,zero
1000e828:	003f2706 	br	1000e4c8 <__alt_data_end+0xf800e4c8>
1000e82c:	81002d36 	bltu	r16,r4,1000e8e4 <__divdf3+0x8f4>
1000e830:	24005626 	beq	r4,r16,1000e98c <__divdf3+0x99c>
1000e834:	2829883a 	mov	r20,r5
1000e838:	003f8006 	br	1000e63c <__alt_data_end+0xf800e63c>
1000e83c:	053fffc4 	movi	r20,-1
1000e840:	003f7f06 	br	1000e640 <__alt_data_end+0xf800e640>
1000e844:	200f883a 	mov	r7,r4
1000e848:	003f3c06 	br	1000e53c <__alt_data_end+0xf800e53c>
1000e84c:	1011883a 	mov	r8,r2
1000e850:	003f5506 	br	1000e5a8 <__alt_data_end+0xf800e5a8>
1000e854:	e027883a 	mov	r19,fp
1000e858:	003f7906 	br	1000e640 <__alt_data_end+0xf800e640>
1000e85c:	010007c4 	movi	r4,31
1000e860:	20c02816 	blt	r4,r3,1000e904 <__divdf3+0x914>
1000e864:	00800804 	movi	r2,32
1000e868:	10c5c83a 	sub	r2,r2,r3
1000e86c:	888a983a 	sll	r5,r17,r2
1000e870:	a0c8d83a 	srl	r4,r20,r3
1000e874:	a084983a 	sll	r2,r20,r2
1000e878:	88e2d83a 	srl	r17,r17,r3
1000e87c:	2906b03a 	or	r3,r5,r4
1000e880:	1004c03a 	cmpne	r2,r2,zero
1000e884:	1886b03a 	or	r3,r3,r2
1000e888:	188001cc 	andi	r2,r3,7
1000e88c:	10000726 	beq	r2,zero,1000e8ac <__divdf3+0x8bc>
1000e890:	188003cc 	andi	r2,r3,15
1000e894:	01000104 	movi	r4,4
1000e898:	11000426 	beq	r2,r4,1000e8ac <__divdf3+0x8bc>
1000e89c:	1805883a 	mov	r2,r3
1000e8a0:	10c00104 	addi	r3,r2,4
1000e8a4:	1885803a 	cmpltu	r2,r3,r2
1000e8a8:	88a3883a 	add	r17,r17,r2
1000e8ac:	8880202c 	andhi	r2,r17,128
1000e8b0:	10002926 	beq	r2,zero,1000e958 <__divdf3+0x968>
1000e8b4:	9900004c 	andi	r4,r19,1
1000e8b8:	00800044 	movi	r2,1
1000e8bc:	0021883a 	mov	r16,zero
1000e8c0:	002b883a 	mov	r21,zero
1000e8c4:	003e2906 	br	1000e16c <__alt_data_end+0xf800e16c>
1000e8c8:	d9800017 	ldw	r6,0(sp)
1000e8cc:	8c7fff84 	addi	r17,r17,-2
1000e8d0:	a9ab883a 	add	r21,r21,r6
1000e8d4:	a98b803a 	cmpltu	r5,r21,r6
1000e8d8:	2d8b883a 	add	r5,r5,r22
1000e8dc:	2a11883a 	add	r8,r5,r8
1000e8e0:	003ef806 	br	1000e4c4 <__alt_data_end+0xf800e4c4>
1000e8e4:	d9800017 	ldw	r6,0(sp)
1000e8e8:	318f883a 	add	r7,r6,r6
1000e8ec:	398b803a 	cmpltu	r5,r7,r6
1000e8f0:	2d8d883a 	add	r6,r5,r22
1000e8f4:	81a1883a 	add	r16,r16,r6
1000e8f8:	a17fff84 	addi	r5,r20,-2
1000e8fc:	d9c00015 	stw	r7,0(sp)
1000e900:	003f8806 	br	1000e724 <__alt_data_end+0xf800e724>
1000e904:	013ff844 	movi	r4,-31
1000e908:	2085c83a 	sub	r2,r4,r2
1000e90c:	8888d83a 	srl	r4,r17,r2
1000e910:	00800804 	movi	r2,32
1000e914:	18802126 	beq	r3,r2,1000e99c <__divdf3+0x9ac>
1000e918:	04001004 	movi	r16,64
1000e91c:	80c7c83a 	sub	r3,r16,r3
1000e920:	88e0983a 	sll	r16,r17,r3
1000e924:	8504b03a 	or	r2,r16,r20
1000e928:	1004c03a 	cmpne	r2,r2,zero
1000e92c:	2084b03a 	or	r2,r4,r2
1000e930:	144001cc 	andi	r17,r2,7
1000e934:	88000d1e 	bne	r17,zero,1000e96c <__divdf3+0x97c>
1000e938:	0021883a 	mov	r16,zero
1000e93c:	102ad0fa 	srli	r21,r2,3
1000e940:	9900004c 	andi	r4,r19,1
1000e944:	0005883a 	mov	r2,zero
1000e948:	ac6ab03a 	or	r21,r21,r17
1000e94c:	003e0706 	br	1000e16c <__alt_data_end+0xf800e16c>
1000e950:	1007883a 	mov	r3,r2
1000e954:	0023883a 	mov	r17,zero
1000e958:	8820927a 	slli	r16,r17,9
1000e95c:	1805883a 	mov	r2,r3
1000e960:	8822977a 	slli	r17,r17,29
1000e964:	8020d33a 	srli	r16,r16,12
1000e968:	003ff406 	br	1000e93c <__alt_data_end+0xf800e93c>
1000e96c:	10c003cc 	andi	r3,r2,15
1000e970:	01000104 	movi	r4,4
1000e974:	193ff626 	beq	r3,r4,1000e950 <__alt_data_end+0xf800e950>
1000e978:	0023883a 	mov	r17,zero
1000e97c:	003fc806 	br	1000e8a0 <__alt_data_end+0xf800e8a0>
1000e980:	a8bfd136 	bltu	r21,r2,1000e8c8 <__alt_data_end+0xf800e8c8>
1000e984:	2823883a 	mov	r17,r5
1000e988:	003fa606 	br	1000e824 <__alt_data_end+0xf800e824>
1000e98c:	d9800017 	ldw	r6,0(sp)
1000e990:	30bfd436 	bltu	r6,r2,1000e8e4 <__alt_data_end+0xf800e8e4>
1000e994:	2829883a 	mov	r20,r5
1000e998:	003f6406 	br	1000e72c <__alt_data_end+0xf800e72c>
1000e99c:	0021883a 	mov	r16,zero
1000e9a0:	003fe006 	br	1000e924 <__alt_data_end+0xf800e924>
1000e9a4:	00800434 	movhi	r2,16
1000e9a8:	8c000234 	orhi	r16,r17,8
1000e9ac:	10bfffc4 	addi	r2,r2,-1
1000e9b0:	e009883a 	mov	r4,fp
1000e9b4:	80a0703a 	and	r16,r16,r2
1000e9b8:	a02b883a 	mov	r21,r20
1000e9bc:	003e4e06 	br	1000e2f8 <__alt_data_end+0xf800e2f8>

1000e9c0 <__eqdf2>:
1000e9c0:	2804d53a 	srli	r2,r5,20
1000e9c4:	3806d53a 	srli	r3,r7,20
1000e9c8:	02000434 	movhi	r8,16
1000e9cc:	423fffc4 	addi	r8,r8,-1
1000e9d0:	1081ffcc 	andi	r2,r2,2047
1000e9d4:	0281ffc4 	movi	r10,2047
1000e9d8:	2a12703a 	and	r9,r5,r8
1000e9dc:	18c1ffcc 	andi	r3,r3,2047
1000e9e0:	3a10703a 	and	r8,r7,r8
1000e9e4:	280ad7fa 	srli	r5,r5,31
1000e9e8:	380ed7fa 	srli	r7,r7,31
1000e9ec:	12801026 	beq	r2,r10,1000ea30 <__eqdf2+0x70>
1000e9f0:	0281ffc4 	movi	r10,2047
1000e9f4:	1a800a26 	beq	r3,r10,1000ea20 <__eqdf2+0x60>
1000e9f8:	10c00226 	beq	r2,r3,1000ea04 <__eqdf2+0x44>
1000e9fc:	00800044 	movi	r2,1
1000ea00:	f800283a 	ret
1000ea04:	4a3ffd1e 	bne	r9,r8,1000e9fc <__alt_data_end+0xf800e9fc>
1000ea08:	21bffc1e 	bne	r4,r6,1000e9fc <__alt_data_end+0xf800e9fc>
1000ea0c:	29c00c26 	beq	r5,r7,1000ea40 <__eqdf2+0x80>
1000ea10:	103ffa1e 	bne	r2,zero,1000e9fc <__alt_data_end+0xf800e9fc>
1000ea14:	2244b03a 	or	r2,r4,r9
1000ea18:	1004c03a 	cmpne	r2,r2,zero
1000ea1c:	f800283a 	ret
1000ea20:	3214b03a 	or	r10,r6,r8
1000ea24:	503ff426 	beq	r10,zero,1000e9f8 <__alt_data_end+0xf800e9f8>
1000ea28:	00800044 	movi	r2,1
1000ea2c:	f800283a 	ret
1000ea30:	2254b03a 	or	r10,r4,r9
1000ea34:	503fee26 	beq	r10,zero,1000e9f0 <__alt_data_end+0xf800e9f0>
1000ea38:	00800044 	movi	r2,1
1000ea3c:	f800283a 	ret
1000ea40:	0005883a 	mov	r2,zero
1000ea44:	f800283a 	ret

1000ea48 <__gedf2>:
1000ea48:	2804d53a 	srli	r2,r5,20
1000ea4c:	3806d53a 	srli	r3,r7,20
1000ea50:	02000434 	movhi	r8,16
1000ea54:	423fffc4 	addi	r8,r8,-1
1000ea58:	1081ffcc 	andi	r2,r2,2047
1000ea5c:	0241ffc4 	movi	r9,2047
1000ea60:	2a14703a 	and	r10,r5,r8
1000ea64:	18c1ffcc 	andi	r3,r3,2047
1000ea68:	3a10703a 	and	r8,r7,r8
1000ea6c:	280ad7fa 	srli	r5,r5,31
1000ea70:	380ed7fa 	srli	r7,r7,31
1000ea74:	12401d26 	beq	r2,r9,1000eaec <__gedf2+0xa4>
1000ea78:	0241ffc4 	movi	r9,2047
1000ea7c:	1a401226 	beq	r3,r9,1000eac8 <__gedf2+0x80>
1000ea80:	1000081e 	bne	r2,zero,1000eaa4 <__gedf2+0x5c>
1000ea84:	2296b03a 	or	r11,r4,r10
1000ea88:	5813003a 	cmpeq	r9,r11,zero
1000ea8c:	1800091e 	bne	r3,zero,1000eab4 <__gedf2+0x6c>
1000ea90:	3218b03a 	or	r12,r6,r8
1000ea94:	6000071e 	bne	r12,zero,1000eab4 <__gedf2+0x6c>
1000ea98:	0005883a 	mov	r2,zero
1000ea9c:	5800101e 	bne	r11,zero,1000eae0 <__gedf2+0x98>
1000eaa0:	f800283a 	ret
1000eaa4:	18000c1e 	bne	r3,zero,1000ead8 <__gedf2+0x90>
1000eaa8:	3212b03a 	or	r9,r6,r8
1000eaac:	48000c26 	beq	r9,zero,1000eae0 <__gedf2+0x98>
1000eab0:	0013883a 	mov	r9,zero
1000eab4:	39c03fcc 	andi	r7,r7,255
1000eab8:	48000826 	beq	r9,zero,1000eadc <__gedf2+0x94>
1000eabc:	38000926 	beq	r7,zero,1000eae4 <__gedf2+0x9c>
1000eac0:	00800044 	movi	r2,1
1000eac4:	f800283a 	ret
1000eac8:	3212b03a 	or	r9,r6,r8
1000eacc:	483fec26 	beq	r9,zero,1000ea80 <__alt_data_end+0xf800ea80>
1000ead0:	00bfff84 	movi	r2,-2
1000ead4:	f800283a 	ret
1000ead8:	39c03fcc 	andi	r7,r7,255
1000eadc:	29c00626 	beq	r5,r7,1000eaf8 <__gedf2+0xb0>
1000eae0:	283ff726 	beq	r5,zero,1000eac0 <__alt_data_end+0xf800eac0>
1000eae4:	00bfffc4 	movi	r2,-1
1000eae8:	f800283a 	ret
1000eaec:	2292b03a 	or	r9,r4,r10
1000eaf0:	483fe126 	beq	r9,zero,1000ea78 <__alt_data_end+0xf800ea78>
1000eaf4:	003ff606 	br	1000ead0 <__alt_data_end+0xf800ead0>
1000eaf8:	18bff916 	blt	r3,r2,1000eae0 <__alt_data_end+0xf800eae0>
1000eafc:	10c00316 	blt	r2,r3,1000eb0c <__gedf2+0xc4>
1000eb00:	42bff736 	bltu	r8,r10,1000eae0 <__alt_data_end+0xf800eae0>
1000eb04:	52000326 	beq	r10,r8,1000eb14 <__gedf2+0xcc>
1000eb08:	5200042e 	bgeu	r10,r8,1000eb1c <__gedf2+0xd4>
1000eb0c:	283fec1e 	bne	r5,zero,1000eac0 <__alt_data_end+0xf800eac0>
1000eb10:	003ff406 	br	1000eae4 <__alt_data_end+0xf800eae4>
1000eb14:	313ff236 	bltu	r6,r4,1000eae0 <__alt_data_end+0xf800eae0>
1000eb18:	21bffc36 	bltu	r4,r6,1000eb0c <__alt_data_end+0xf800eb0c>
1000eb1c:	0005883a 	mov	r2,zero
1000eb20:	f800283a 	ret

1000eb24 <__ledf2>:
1000eb24:	2804d53a 	srli	r2,r5,20
1000eb28:	3810d53a 	srli	r8,r7,20
1000eb2c:	00c00434 	movhi	r3,16
1000eb30:	18ffffc4 	addi	r3,r3,-1
1000eb34:	1081ffcc 	andi	r2,r2,2047
1000eb38:	0241ffc4 	movi	r9,2047
1000eb3c:	28d4703a 	and	r10,r5,r3
1000eb40:	4201ffcc 	andi	r8,r8,2047
1000eb44:	38c6703a 	and	r3,r7,r3
1000eb48:	280ad7fa 	srli	r5,r5,31
1000eb4c:	380ed7fa 	srli	r7,r7,31
1000eb50:	12401f26 	beq	r2,r9,1000ebd0 <__ledf2+0xac>
1000eb54:	0241ffc4 	movi	r9,2047
1000eb58:	42401426 	beq	r8,r9,1000ebac <__ledf2+0x88>
1000eb5c:	1000091e 	bne	r2,zero,1000eb84 <__ledf2+0x60>
1000eb60:	2296b03a 	or	r11,r4,r10
1000eb64:	5813003a 	cmpeq	r9,r11,zero
1000eb68:	29403fcc 	andi	r5,r5,255
1000eb6c:	40000a1e 	bne	r8,zero,1000eb98 <__ledf2+0x74>
1000eb70:	30d8b03a 	or	r12,r6,r3
1000eb74:	6000081e 	bne	r12,zero,1000eb98 <__ledf2+0x74>
1000eb78:	0005883a 	mov	r2,zero
1000eb7c:	5800111e 	bne	r11,zero,1000ebc4 <__ledf2+0xa0>
1000eb80:	f800283a 	ret
1000eb84:	29403fcc 	andi	r5,r5,255
1000eb88:	40000c1e 	bne	r8,zero,1000ebbc <__ledf2+0x98>
1000eb8c:	30d2b03a 	or	r9,r6,r3
1000eb90:	48000c26 	beq	r9,zero,1000ebc4 <__ledf2+0xa0>
1000eb94:	0013883a 	mov	r9,zero
1000eb98:	39c03fcc 	andi	r7,r7,255
1000eb9c:	48000826 	beq	r9,zero,1000ebc0 <__ledf2+0x9c>
1000eba0:	38001126 	beq	r7,zero,1000ebe8 <__ledf2+0xc4>
1000eba4:	00800044 	movi	r2,1
1000eba8:	f800283a 	ret
1000ebac:	30d2b03a 	or	r9,r6,r3
1000ebb0:	483fea26 	beq	r9,zero,1000eb5c <__alt_data_end+0xf800eb5c>
1000ebb4:	00800084 	movi	r2,2
1000ebb8:	f800283a 	ret
1000ebbc:	39c03fcc 	andi	r7,r7,255
1000ebc0:	39400726 	beq	r7,r5,1000ebe0 <__ledf2+0xbc>
1000ebc4:	2800081e 	bne	r5,zero,1000ebe8 <__ledf2+0xc4>
1000ebc8:	00800044 	movi	r2,1
1000ebcc:	f800283a 	ret
1000ebd0:	2292b03a 	or	r9,r4,r10
1000ebd4:	483fdf26 	beq	r9,zero,1000eb54 <__alt_data_end+0xf800eb54>
1000ebd8:	00800084 	movi	r2,2
1000ebdc:	f800283a 	ret
1000ebe0:	4080030e 	bge	r8,r2,1000ebf0 <__ledf2+0xcc>
1000ebe4:	383fef26 	beq	r7,zero,1000eba4 <__alt_data_end+0xf800eba4>
1000ebe8:	00bfffc4 	movi	r2,-1
1000ebec:	f800283a 	ret
1000ebf0:	123feb16 	blt	r2,r8,1000eba0 <__alt_data_end+0xf800eba0>
1000ebf4:	1abff336 	bltu	r3,r10,1000ebc4 <__alt_data_end+0xf800ebc4>
1000ebf8:	50c00326 	beq	r10,r3,1000ec08 <__ledf2+0xe4>
1000ebfc:	50c0042e 	bgeu	r10,r3,1000ec10 <__ledf2+0xec>
1000ec00:	283fe81e 	bne	r5,zero,1000eba4 <__alt_data_end+0xf800eba4>
1000ec04:	003ff806 	br	1000ebe8 <__alt_data_end+0xf800ebe8>
1000ec08:	313fee36 	bltu	r6,r4,1000ebc4 <__alt_data_end+0xf800ebc4>
1000ec0c:	21bffc36 	bltu	r4,r6,1000ec00 <__alt_data_end+0xf800ec00>
1000ec10:	0005883a 	mov	r2,zero
1000ec14:	f800283a 	ret

1000ec18 <__muldf3>:
1000ec18:	deffee04 	addi	sp,sp,-72
1000ec1c:	dd000c15 	stw	r20,48(sp)
1000ec20:	2828d53a 	srli	r20,r5,20
1000ec24:	ddc00f15 	stw	r23,60(sp)
1000ec28:	282ed7fa 	srli	r23,r5,31
1000ec2c:	dc000815 	stw	r16,32(sp)
1000ec30:	04000434 	movhi	r16,16
1000ec34:	dcc00b15 	stw	r19,44(sp)
1000ec38:	843fffc4 	addi	r16,r16,-1
1000ec3c:	dfc01115 	stw	ra,68(sp)
1000ec40:	df001015 	stw	fp,64(sp)
1000ec44:	dd800e15 	stw	r22,56(sp)
1000ec48:	dd400d15 	stw	r21,52(sp)
1000ec4c:	dc800a15 	stw	r18,40(sp)
1000ec50:	dc400915 	stw	r17,36(sp)
1000ec54:	a501ffcc 	andi	r20,r20,2047
1000ec58:	2c20703a 	and	r16,r5,r16
1000ec5c:	b827883a 	mov	r19,r23
1000ec60:	ba403fcc 	andi	r9,r23,255
1000ec64:	a0006026 	beq	r20,zero,1000ede8 <__muldf3+0x1d0>
1000ec68:	0081ffc4 	movi	r2,2047
1000ec6c:	202d883a 	mov	r22,r4
1000ec70:	a0803626 	beq	r20,r2,1000ed4c <__muldf3+0x134>
1000ec74:	84000434 	orhi	r16,r16,16
1000ec78:	200ad77a 	srli	r5,r4,29
1000ec7c:	800490fa 	slli	r2,r16,3
1000ec80:	202c90fa 	slli	r22,r4,3
1000ec84:	a53f0044 	addi	r20,r20,-1023
1000ec88:	28a0b03a 	or	r16,r5,r2
1000ec8c:	002b883a 	mov	r21,zero
1000ec90:	000b883a 	mov	r5,zero
1000ec94:	3804d53a 	srli	r2,r7,20
1000ec98:	3838d7fa 	srli	fp,r7,31
1000ec9c:	04400434 	movhi	r17,16
1000eca0:	8c7fffc4 	addi	r17,r17,-1
1000eca4:	1081ffcc 	andi	r2,r2,2047
1000eca8:	3025883a 	mov	r18,r6
1000ecac:	3c62703a 	and	r17,r7,r17
1000ecb0:	e2803fcc 	andi	r10,fp,255
1000ecb4:	10006d26 	beq	r2,zero,1000ee6c <__muldf3+0x254>
1000ecb8:	00c1ffc4 	movi	r3,2047
1000ecbc:	10c06526 	beq	r2,r3,1000ee54 <__muldf3+0x23c>
1000ecc0:	8c400434 	orhi	r17,r17,16
1000ecc4:	300ed77a 	srli	r7,r6,29
1000ecc8:	880690fa 	slli	r3,r17,3
1000eccc:	302490fa 	slli	r18,r6,3
1000ecd0:	10bf0044 	addi	r2,r2,-1023
1000ecd4:	38e2b03a 	or	r17,r7,r3
1000ecd8:	000f883a 	mov	r7,zero
1000ecdc:	a087883a 	add	r3,r20,r2
1000ece0:	010003c4 	movi	r4,15
1000ece4:	3d44b03a 	or	r2,r7,r21
1000ece8:	e5ccf03a 	xor	r6,fp,r23
1000ecec:	1a000044 	addi	r8,r3,1
1000ecf0:	20809b36 	bltu	r4,r2,1000ef60 <__muldf3+0x348>
1000ecf4:	100490ba 	slli	r2,r2,2
1000ecf8:	01040074 	movhi	r4,4097
1000ecfc:	213b4304 	addi	r4,r4,-4852
1000ed00:	1105883a 	add	r2,r2,r4
1000ed04:	10800017 	ldw	r2,0(r2)
1000ed08:	1000683a 	jmp	r2
1000ed0c:	1000ef60 	cmpeqi	zero,r2,957
1000ed10:	1000ed6c 	andhi	zero,r2,949
1000ed14:	1000ed6c 	andhi	zero,r2,949
1000ed18:	1000ed68 	cmpgeui	zero,r2,949
1000ed1c:	1000ef3c 	xorhi	zero,r2,956
1000ed20:	1000ef3c 	xorhi	zero,r2,956
1000ed24:	1000ef24 	muli	zero,r2,956
1000ed28:	1000ed68 	cmpgeui	zero,r2,949
1000ed2c:	1000ef3c 	xorhi	zero,r2,956
1000ed30:	1000ef24 	muli	zero,r2,956
1000ed34:	1000ef3c 	xorhi	zero,r2,956
1000ed38:	1000ed68 	cmpgeui	zero,r2,949
1000ed3c:	1000ef4c 	andi	zero,r2,957
1000ed40:	1000ef4c 	andi	zero,r2,957
1000ed44:	1000ef4c 	andi	zero,r2,957
1000ed48:	1000f2ac 	andhi	zero,r2,970
1000ed4c:	2404b03a 	or	r2,r4,r16
1000ed50:	1000711e 	bne	r2,zero,1000ef18 <__muldf3+0x300>
1000ed54:	05400204 	movi	r21,8
1000ed58:	0021883a 	mov	r16,zero
1000ed5c:	002d883a 	mov	r22,zero
1000ed60:	01400084 	movi	r5,2
1000ed64:	003fcb06 	br	1000ec94 <__alt_data_end+0xf800ec94>
1000ed68:	500d883a 	mov	r6,r10
1000ed6c:	00800084 	movi	r2,2
1000ed70:	38805926 	beq	r7,r2,1000eed8 <__muldf3+0x2c0>
1000ed74:	008000c4 	movi	r2,3
1000ed78:	3881bb26 	beq	r7,r2,1000f468 <__muldf3+0x850>
1000ed7c:	00800044 	movi	r2,1
1000ed80:	3881961e 	bne	r7,r2,1000f3dc <__muldf3+0x7c4>
1000ed84:	3027883a 	mov	r19,r6
1000ed88:	0005883a 	mov	r2,zero
1000ed8c:	0021883a 	mov	r16,zero
1000ed90:	002d883a 	mov	r22,zero
1000ed94:	1004953a 	slli	r2,r2,20
1000ed98:	98c03fcc 	andi	r3,r19,255
1000ed9c:	04400434 	movhi	r17,16
1000eda0:	8c7fffc4 	addi	r17,r17,-1
1000eda4:	180697fa 	slli	r3,r3,31
1000eda8:	8460703a 	and	r16,r16,r17
1000edac:	80a0b03a 	or	r16,r16,r2
1000edb0:	80c6b03a 	or	r3,r16,r3
1000edb4:	b005883a 	mov	r2,r22
1000edb8:	dfc01117 	ldw	ra,68(sp)
1000edbc:	df001017 	ldw	fp,64(sp)
1000edc0:	ddc00f17 	ldw	r23,60(sp)
1000edc4:	dd800e17 	ldw	r22,56(sp)
1000edc8:	dd400d17 	ldw	r21,52(sp)
1000edcc:	dd000c17 	ldw	r20,48(sp)
1000edd0:	dcc00b17 	ldw	r19,44(sp)
1000edd4:	dc800a17 	ldw	r18,40(sp)
1000edd8:	dc400917 	ldw	r17,36(sp)
1000eddc:	dc000817 	ldw	r16,32(sp)
1000ede0:	dec01204 	addi	sp,sp,72
1000ede4:	f800283a 	ret
1000ede8:	2404b03a 	or	r2,r4,r16
1000edec:	202b883a 	mov	r21,r4
1000edf0:	10004426 	beq	r2,zero,1000ef04 <__muldf3+0x2ec>
1000edf4:	80015126 	beq	r16,zero,1000f33c <__muldf3+0x724>
1000edf8:	8009883a 	mov	r4,r16
1000edfc:	d9800715 	stw	r6,28(sp)
1000ee00:	d9c00215 	stw	r7,8(sp)
1000ee04:	da400415 	stw	r9,16(sp)
1000ee08:	000ff840 	call	1000ff84 <__clzsi2>
1000ee0c:	d9800717 	ldw	r6,28(sp)
1000ee10:	d9c00217 	ldw	r7,8(sp)
1000ee14:	da400417 	ldw	r9,16(sp)
1000ee18:	113ffd44 	addi	r4,r2,-11
1000ee1c:	00c00704 	movi	r3,28
1000ee20:	19014216 	blt	r3,r4,1000f32c <__muldf3+0x714>
1000ee24:	00c00744 	movi	r3,29
1000ee28:	15bffe04 	addi	r22,r2,-8
1000ee2c:	1907c83a 	sub	r3,r3,r4
1000ee30:	85a0983a 	sll	r16,r16,r22
1000ee34:	a8c6d83a 	srl	r3,r21,r3
1000ee38:	adac983a 	sll	r22,r21,r22
1000ee3c:	1c20b03a 	or	r16,r3,r16
1000ee40:	1080fcc4 	addi	r2,r2,1011
1000ee44:	00a9c83a 	sub	r20,zero,r2
1000ee48:	002b883a 	mov	r21,zero
1000ee4c:	000b883a 	mov	r5,zero
1000ee50:	003f9006 	br	1000ec94 <__alt_data_end+0xf800ec94>
1000ee54:	3446b03a 	or	r3,r6,r17
1000ee58:	1800281e 	bne	r3,zero,1000eefc <__muldf3+0x2e4>
1000ee5c:	0023883a 	mov	r17,zero
1000ee60:	0025883a 	mov	r18,zero
1000ee64:	01c00084 	movi	r7,2
1000ee68:	003f9c06 	br	1000ecdc <__alt_data_end+0xf800ecdc>
1000ee6c:	3446b03a 	or	r3,r6,r17
1000ee70:	18001e26 	beq	r3,zero,1000eeec <__muldf3+0x2d4>
1000ee74:	88012126 	beq	r17,zero,1000f2fc <__muldf3+0x6e4>
1000ee78:	8809883a 	mov	r4,r17
1000ee7c:	d9400215 	stw	r5,8(sp)
1000ee80:	d9800715 	stw	r6,28(sp)
1000ee84:	da400415 	stw	r9,16(sp)
1000ee88:	da800315 	stw	r10,12(sp)
1000ee8c:	000ff840 	call	1000ff84 <__clzsi2>
1000ee90:	d9400217 	ldw	r5,8(sp)
1000ee94:	d9800717 	ldw	r6,28(sp)
1000ee98:	da400417 	ldw	r9,16(sp)
1000ee9c:	da800317 	ldw	r10,12(sp)
1000eea0:	113ffd44 	addi	r4,r2,-11
1000eea4:	00c00704 	movi	r3,28
1000eea8:	19011016 	blt	r3,r4,1000f2ec <__muldf3+0x6d4>
1000eeac:	00c00744 	movi	r3,29
1000eeb0:	14bffe04 	addi	r18,r2,-8
1000eeb4:	1907c83a 	sub	r3,r3,r4
1000eeb8:	8ca2983a 	sll	r17,r17,r18
1000eebc:	30c6d83a 	srl	r3,r6,r3
1000eec0:	34a4983a 	sll	r18,r6,r18
1000eec4:	1c62b03a 	or	r17,r3,r17
1000eec8:	1080fcc4 	addi	r2,r2,1011
1000eecc:	0085c83a 	sub	r2,zero,r2
1000eed0:	000f883a 	mov	r7,zero
1000eed4:	003f8106 	br	1000ecdc <__alt_data_end+0xf800ecdc>
1000eed8:	3027883a 	mov	r19,r6
1000eedc:	0081ffc4 	movi	r2,2047
1000eee0:	0021883a 	mov	r16,zero
1000eee4:	002d883a 	mov	r22,zero
1000eee8:	003faa06 	br	1000ed94 <__alt_data_end+0xf800ed94>
1000eeec:	0023883a 	mov	r17,zero
1000eef0:	0025883a 	mov	r18,zero
1000eef4:	01c00044 	movi	r7,1
1000eef8:	003f7806 	br	1000ecdc <__alt_data_end+0xf800ecdc>
1000eefc:	01c000c4 	movi	r7,3
1000ef00:	003f7606 	br	1000ecdc <__alt_data_end+0xf800ecdc>
1000ef04:	05400104 	movi	r21,4
1000ef08:	0021883a 	mov	r16,zero
1000ef0c:	002d883a 	mov	r22,zero
1000ef10:	01400044 	movi	r5,1
1000ef14:	003f5f06 	br	1000ec94 <__alt_data_end+0xf800ec94>
1000ef18:	05400304 	movi	r21,12
1000ef1c:	014000c4 	movi	r5,3
1000ef20:	003f5c06 	br	1000ec94 <__alt_data_end+0xf800ec94>
1000ef24:	04000434 	movhi	r16,16
1000ef28:	0027883a 	mov	r19,zero
1000ef2c:	843fffc4 	addi	r16,r16,-1
1000ef30:	05bfffc4 	movi	r22,-1
1000ef34:	0081ffc4 	movi	r2,2047
1000ef38:	003f9606 	br	1000ed94 <__alt_data_end+0xf800ed94>
1000ef3c:	8023883a 	mov	r17,r16
1000ef40:	b025883a 	mov	r18,r22
1000ef44:	280f883a 	mov	r7,r5
1000ef48:	003f8806 	br	1000ed6c <__alt_data_end+0xf800ed6c>
1000ef4c:	8023883a 	mov	r17,r16
1000ef50:	b025883a 	mov	r18,r22
1000ef54:	480d883a 	mov	r6,r9
1000ef58:	280f883a 	mov	r7,r5
1000ef5c:	003f8306 	br	1000ed6c <__alt_data_end+0xf800ed6c>
1000ef60:	b026d43a 	srli	r19,r22,16
1000ef64:	902ed43a 	srli	r23,r18,16
1000ef68:	b5bfffcc 	andi	r22,r22,65535
1000ef6c:	94bfffcc 	andi	r18,r18,65535
1000ef70:	b00b883a 	mov	r5,r22
1000ef74:	9009883a 	mov	r4,r18
1000ef78:	d8c00515 	stw	r3,20(sp)
1000ef7c:	d9800715 	stw	r6,28(sp)
1000ef80:	da000615 	stw	r8,24(sp)
1000ef84:	000d71c0 	call	1000d71c <__mulsi3>
1000ef88:	980b883a 	mov	r5,r19
1000ef8c:	9009883a 	mov	r4,r18
1000ef90:	1029883a 	mov	r20,r2
1000ef94:	000d71c0 	call	1000d71c <__mulsi3>
1000ef98:	b80b883a 	mov	r5,r23
1000ef9c:	9809883a 	mov	r4,r19
1000efa0:	102b883a 	mov	r21,r2
1000efa4:	000d71c0 	call	1000d71c <__mulsi3>
1000efa8:	b809883a 	mov	r4,r23
1000efac:	b00b883a 	mov	r5,r22
1000efb0:	1039883a 	mov	fp,r2
1000efb4:	000d71c0 	call	1000d71c <__mulsi3>
1000efb8:	a008d43a 	srli	r4,r20,16
1000efbc:	1545883a 	add	r2,r2,r21
1000efc0:	d8c00517 	ldw	r3,20(sp)
1000efc4:	2085883a 	add	r2,r4,r2
1000efc8:	d9800717 	ldw	r6,28(sp)
1000efcc:	da000617 	ldw	r8,24(sp)
1000efd0:	1540022e 	bgeu	r2,r21,1000efdc <__muldf3+0x3c4>
1000efd4:	01000074 	movhi	r4,1
1000efd8:	e139883a 	add	fp,fp,r4
1000efdc:	100e943a 	slli	r7,r2,16
1000efe0:	1004d43a 	srli	r2,r2,16
1000efe4:	882ad43a 	srli	r21,r17,16
1000efe8:	a53fffcc 	andi	r20,r20,65535
1000efec:	8c7fffcc 	andi	r17,r17,65535
1000eff0:	3d29883a 	add	r20,r7,r20
1000eff4:	b00b883a 	mov	r5,r22
1000eff8:	8809883a 	mov	r4,r17
1000effc:	d8c00515 	stw	r3,20(sp)
1000f000:	d9800715 	stw	r6,28(sp)
1000f004:	da000615 	stw	r8,24(sp)
1000f008:	dd000115 	stw	r20,4(sp)
1000f00c:	d8800015 	stw	r2,0(sp)
1000f010:	000d71c0 	call	1000d71c <__mulsi3>
1000f014:	980b883a 	mov	r5,r19
1000f018:	8809883a 	mov	r4,r17
1000f01c:	d8800215 	stw	r2,8(sp)
1000f020:	000d71c0 	call	1000d71c <__mulsi3>
1000f024:	9809883a 	mov	r4,r19
1000f028:	a80b883a 	mov	r5,r21
1000f02c:	1029883a 	mov	r20,r2
1000f030:	000d71c0 	call	1000d71c <__mulsi3>
1000f034:	b00b883a 	mov	r5,r22
1000f038:	a809883a 	mov	r4,r21
1000f03c:	d8800415 	stw	r2,16(sp)
1000f040:	000d71c0 	call	1000d71c <__mulsi3>
1000f044:	d9c00217 	ldw	r7,8(sp)
1000f048:	1505883a 	add	r2,r2,r20
1000f04c:	d8c00517 	ldw	r3,20(sp)
1000f050:	3826d43a 	srli	r19,r7,16
1000f054:	d9800717 	ldw	r6,28(sp)
1000f058:	da000617 	ldw	r8,24(sp)
1000f05c:	9885883a 	add	r2,r19,r2
1000f060:	da400417 	ldw	r9,16(sp)
1000f064:	1500022e 	bgeu	r2,r20,1000f070 <__muldf3+0x458>
1000f068:	01000074 	movhi	r4,1
1000f06c:	4913883a 	add	r9,r9,r4
1000f070:	1028d43a 	srli	r20,r2,16
1000f074:	1004943a 	slli	r2,r2,16
1000f078:	802cd43a 	srli	r22,r16,16
1000f07c:	843fffcc 	andi	r16,r16,65535
1000f080:	3cffffcc 	andi	r19,r7,65535
1000f084:	9009883a 	mov	r4,r18
1000f088:	800b883a 	mov	r5,r16
1000f08c:	a269883a 	add	r20,r20,r9
1000f090:	d8c00515 	stw	r3,20(sp)
1000f094:	d9800715 	stw	r6,28(sp)
1000f098:	da000615 	stw	r8,24(sp)
1000f09c:	14e7883a 	add	r19,r2,r19
1000f0a0:	000d71c0 	call	1000d71c <__mulsi3>
1000f0a4:	9009883a 	mov	r4,r18
1000f0a8:	b00b883a 	mov	r5,r22
1000f0ac:	d8800315 	stw	r2,12(sp)
1000f0b0:	000d71c0 	call	1000d71c <__mulsi3>
1000f0b4:	b809883a 	mov	r4,r23
1000f0b8:	b00b883a 	mov	r5,r22
1000f0bc:	d8800215 	stw	r2,8(sp)
1000f0c0:	000d71c0 	call	1000d71c <__mulsi3>
1000f0c4:	b80b883a 	mov	r5,r23
1000f0c8:	8009883a 	mov	r4,r16
1000f0cc:	d8800415 	stw	r2,16(sp)
1000f0d0:	000d71c0 	call	1000d71c <__mulsi3>
1000f0d4:	da800317 	ldw	r10,12(sp)
1000f0d8:	d9c00217 	ldw	r7,8(sp)
1000f0dc:	d9000017 	ldw	r4,0(sp)
1000f0e0:	502ed43a 	srli	r23,r10,16
1000f0e4:	11c5883a 	add	r2,r2,r7
1000f0e8:	24e5883a 	add	r18,r4,r19
1000f0ec:	b885883a 	add	r2,r23,r2
1000f0f0:	d8c00517 	ldw	r3,20(sp)
1000f0f4:	d9800717 	ldw	r6,28(sp)
1000f0f8:	da000617 	ldw	r8,24(sp)
1000f0fc:	da400417 	ldw	r9,16(sp)
1000f100:	11c0022e 	bgeu	r2,r7,1000f10c <__muldf3+0x4f4>
1000f104:	01000074 	movhi	r4,1
1000f108:	4913883a 	add	r9,r9,r4
1000f10c:	100ed43a 	srli	r7,r2,16
1000f110:	1004943a 	slli	r2,r2,16
1000f114:	55ffffcc 	andi	r23,r10,65535
1000f118:	3a53883a 	add	r9,r7,r9
1000f11c:	8809883a 	mov	r4,r17
1000f120:	800b883a 	mov	r5,r16
1000f124:	d8c00515 	stw	r3,20(sp)
1000f128:	d9800715 	stw	r6,28(sp)
1000f12c:	da000615 	stw	r8,24(sp)
1000f130:	da400415 	stw	r9,16(sp)
1000f134:	15ef883a 	add	r23,r2,r23
1000f138:	000d71c0 	call	1000d71c <__mulsi3>
1000f13c:	8809883a 	mov	r4,r17
1000f140:	b00b883a 	mov	r5,r22
1000f144:	d8800215 	stw	r2,8(sp)
1000f148:	000d71c0 	call	1000d71c <__mulsi3>
1000f14c:	b00b883a 	mov	r5,r22
1000f150:	a809883a 	mov	r4,r21
1000f154:	d8800315 	stw	r2,12(sp)
1000f158:	000d71c0 	call	1000d71c <__mulsi3>
1000f15c:	8009883a 	mov	r4,r16
1000f160:	a80b883a 	mov	r5,r21
1000f164:	1023883a 	mov	r17,r2
1000f168:	000d71c0 	call	1000d71c <__mulsi3>
1000f16c:	d9c00217 	ldw	r7,8(sp)
1000f170:	da800317 	ldw	r10,12(sp)
1000f174:	d8c00517 	ldw	r3,20(sp)
1000f178:	3808d43a 	srli	r4,r7,16
1000f17c:	1285883a 	add	r2,r2,r10
1000f180:	d9800717 	ldw	r6,28(sp)
1000f184:	2085883a 	add	r2,r4,r2
1000f188:	da000617 	ldw	r8,24(sp)
1000f18c:	da400417 	ldw	r9,16(sp)
1000f190:	1280022e 	bgeu	r2,r10,1000f19c <__muldf3+0x584>
1000f194:	01000074 	movhi	r4,1
1000f198:	8923883a 	add	r17,r17,r4
1000f19c:	1008943a 	slli	r4,r2,16
1000f1a0:	39ffffcc 	andi	r7,r7,65535
1000f1a4:	e4b9883a 	add	fp,fp,r18
1000f1a8:	21cf883a 	add	r7,r4,r7
1000f1ac:	e4e7803a 	cmpltu	r19,fp,r19
1000f1b0:	3d0f883a 	add	r7,r7,r20
1000f1b4:	bf39883a 	add	fp,r23,fp
1000f1b8:	99c9883a 	add	r4,r19,r7
1000f1bc:	e5ef803a 	cmpltu	r23,fp,r23
1000f1c0:	490b883a 	add	r5,r9,r4
1000f1c4:	1004d43a 	srli	r2,r2,16
1000f1c8:	b965883a 	add	r18,r23,r5
1000f1cc:	24c9803a 	cmpltu	r4,r4,r19
1000f1d0:	3d29803a 	cmpltu	r20,r7,r20
1000f1d4:	a128b03a 	or	r20,r20,r4
1000f1d8:	95ef803a 	cmpltu	r23,r18,r23
1000f1dc:	2a53803a 	cmpltu	r9,r5,r9
1000f1e0:	a0a9883a 	add	r20,r20,r2
1000f1e4:	4deeb03a 	or	r23,r9,r23
1000f1e8:	a5ef883a 	add	r23,r20,r23
1000f1ec:	bc63883a 	add	r17,r23,r17
1000f1f0:	e004927a 	slli	r2,fp,9
1000f1f4:	d9000117 	ldw	r4,4(sp)
1000f1f8:	882e927a 	slli	r23,r17,9
1000f1fc:	9022d5fa 	srli	r17,r18,23
1000f200:	e038d5fa 	srli	fp,fp,23
1000f204:	1104b03a 	or	r2,r2,r4
1000f208:	9024927a 	slli	r18,r18,9
1000f20c:	1004c03a 	cmpne	r2,r2,zero
1000f210:	bc62b03a 	or	r17,r23,r17
1000f214:	1738b03a 	or	fp,r2,fp
1000f218:	8880402c 	andhi	r2,r17,256
1000f21c:	e4a4b03a 	or	r18,fp,r18
1000f220:	10000726 	beq	r2,zero,1000f240 <__muldf3+0x628>
1000f224:	9006d07a 	srli	r3,r18,1
1000f228:	880497fa 	slli	r2,r17,31
1000f22c:	9480004c 	andi	r18,r18,1
1000f230:	8822d07a 	srli	r17,r17,1
1000f234:	1ca4b03a 	or	r18,r3,r18
1000f238:	14a4b03a 	or	r18,r2,r18
1000f23c:	4007883a 	mov	r3,r8
1000f240:	1880ffc4 	addi	r2,r3,1023
1000f244:	0080460e 	bge	zero,r2,1000f360 <__muldf3+0x748>
1000f248:	910001cc 	andi	r4,r18,7
1000f24c:	20000726 	beq	r4,zero,1000f26c <__muldf3+0x654>
1000f250:	910003cc 	andi	r4,r18,15
1000f254:	01400104 	movi	r5,4
1000f258:	21400426 	beq	r4,r5,1000f26c <__muldf3+0x654>
1000f25c:	9149883a 	add	r4,r18,r5
1000f260:	24a5803a 	cmpltu	r18,r4,r18
1000f264:	8ca3883a 	add	r17,r17,r18
1000f268:	2025883a 	mov	r18,r4
1000f26c:	8900402c 	andhi	r4,r17,256
1000f270:	20000426 	beq	r4,zero,1000f284 <__muldf3+0x66c>
1000f274:	18810004 	addi	r2,r3,1024
1000f278:	00ffc034 	movhi	r3,65280
1000f27c:	18ffffc4 	addi	r3,r3,-1
1000f280:	88e2703a 	and	r17,r17,r3
1000f284:	00c1ff84 	movi	r3,2046
1000f288:	18bf1316 	blt	r3,r2,1000eed8 <__alt_data_end+0xf800eed8>
1000f28c:	882c977a 	slli	r22,r17,29
1000f290:	9024d0fa 	srli	r18,r18,3
1000f294:	8822927a 	slli	r17,r17,9
1000f298:	1081ffcc 	andi	r2,r2,2047
1000f29c:	b4acb03a 	or	r22,r22,r18
1000f2a0:	8820d33a 	srli	r16,r17,12
1000f2a4:	3027883a 	mov	r19,r6
1000f2a8:	003eba06 	br	1000ed94 <__alt_data_end+0xf800ed94>
1000f2ac:	8080022c 	andhi	r2,r16,8
1000f2b0:	10000926 	beq	r2,zero,1000f2d8 <__muldf3+0x6c0>
1000f2b4:	8880022c 	andhi	r2,r17,8
1000f2b8:	1000071e 	bne	r2,zero,1000f2d8 <__muldf3+0x6c0>
1000f2bc:	00800434 	movhi	r2,16
1000f2c0:	8c000234 	orhi	r16,r17,8
1000f2c4:	10bfffc4 	addi	r2,r2,-1
1000f2c8:	e027883a 	mov	r19,fp
1000f2cc:	80a0703a 	and	r16,r16,r2
1000f2d0:	902d883a 	mov	r22,r18
1000f2d4:	003f1706 	br	1000ef34 <__alt_data_end+0xf800ef34>
1000f2d8:	00800434 	movhi	r2,16
1000f2dc:	84000234 	orhi	r16,r16,8
1000f2e0:	10bfffc4 	addi	r2,r2,-1
1000f2e4:	80a0703a 	and	r16,r16,r2
1000f2e8:	003f1206 	br	1000ef34 <__alt_data_end+0xf800ef34>
1000f2ec:	147ff604 	addi	r17,r2,-40
1000f2f0:	3462983a 	sll	r17,r6,r17
1000f2f4:	0025883a 	mov	r18,zero
1000f2f8:	003ef306 	br	1000eec8 <__alt_data_end+0xf800eec8>
1000f2fc:	3009883a 	mov	r4,r6
1000f300:	d9400215 	stw	r5,8(sp)
1000f304:	d9800715 	stw	r6,28(sp)
1000f308:	da400415 	stw	r9,16(sp)
1000f30c:	da800315 	stw	r10,12(sp)
1000f310:	000ff840 	call	1000ff84 <__clzsi2>
1000f314:	10800804 	addi	r2,r2,32
1000f318:	da800317 	ldw	r10,12(sp)
1000f31c:	da400417 	ldw	r9,16(sp)
1000f320:	d9800717 	ldw	r6,28(sp)
1000f324:	d9400217 	ldw	r5,8(sp)
1000f328:	003edd06 	br	1000eea0 <__alt_data_end+0xf800eea0>
1000f32c:	143ff604 	addi	r16,r2,-40
1000f330:	ac20983a 	sll	r16,r21,r16
1000f334:	002d883a 	mov	r22,zero
1000f338:	003ec106 	br	1000ee40 <__alt_data_end+0xf800ee40>
1000f33c:	d9800715 	stw	r6,28(sp)
1000f340:	d9c00215 	stw	r7,8(sp)
1000f344:	da400415 	stw	r9,16(sp)
1000f348:	000ff840 	call	1000ff84 <__clzsi2>
1000f34c:	10800804 	addi	r2,r2,32
1000f350:	da400417 	ldw	r9,16(sp)
1000f354:	d9c00217 	ldw	r7,8(sp)
1000f358:	d9800717 	ldw	r6,28(sp)
1000f35c:	003eae06 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f360:	00c00044 	movi	r3,1
1000f364:	1887c83a 	sub	r3,r3,r2
1000f368:	01000e04 	movi	r4,56
1000f36c:	20fe8516 	blt	r4,r3,1000ed84 <__alt_data_end+0xf800ed84>
1000f370:	010007c4 	movi	r4,31
1000f374:	20c01b16 	blt	r4,r3,1000f3e4 <__muldf3+0x7cc>
1000f378:	00800804 	movi	r2,32
1000f37c:	10c5c83a 	sub	r2,r2,r3
1000f380:	888a983a 	sll	r5,r17,r2
1000f384:	90c8d83a 	srl	r4,r18,r3
1000f388:	9084983a 	sll	r2,r18,r2
1000f38c:	88e2d83a 	srl	r17,r17,r3
1000f390:	2906b03a 	or	r3,r5,r4
1000f394:	1004c03a 	cmpne	r2,r2,zero
1000f398:	1886b03a 	or	r3,r3,r2
1000f39c:	188001cc 	andi	r2,r3,7
1000f3a0:	10000726 	beq	r2,zero,1000f3c0 <__muldf3+0x7a8>
1000f3a4:	188003cc 	andi	r2,r3,15
1000f3a8:	01000104 	movi	r4,4
1000f3ac:	11000426 	beq	r2,r4,1000f3c0 <__muldf3+0x7a8>
1000f3b0:	1805883a 	mov	r2,r3
1000f3b4:	10c00104 	addi	r3,r2,4
1000f3b8:	1885803a 	cmpltu	r2,r3,r2
1000f3bc:	88a3883a 	add	r17,r17,r2
1000f3c0:	8880202c 	andhi	r2,r17,128
1000f3c4:	10001c26 	beq	r2,zero,1000f438 <__muldf3+0x820>
1000f3c8:	3027883a 	mov	r19,r6
1000f3cc:	00800044 	movi	r2,1
1000f3d0:	0021883a 	mov	r16,zero
1000f3d4:	002d883a 	mov	r22,zero
1000f3d8:	003e6e06 	br	1000ed94 <__alt_data_end+0xf800ed94>
1000f3dc:	4007883a 	mov	r3,r8
1000f3e0:	003f9706 	br	1000f240 <__alt_data_end+0xf800f240>
1000f3e4:	017ff844 	movi	r5,-31
1000f3e8:	2885c83a 	sub	r2,r5,r2
1000f3ec:	888ad83a 	srl	r5,r17,r2
1000f3f0:	00800804 	movi	r2,32
1000f3f4:	18801a26 	beq	r3,r2,1000f460 <__muldf3+0x848>
1000f3f8:	01001004 	movi	r4,64
1000f3fc:	20c7c83a 	sub	r3,r4,r3
1000f400:	88e2983a 	sll	r17,r17,r3
1000f404:	8ca4b03a 	or	r18,r17,r18
1000f408:	9004c03a 	cmpne	r2,r18,zero
1000f40c:	2884b03a 	or	r2,r5,r2
1000f410:	144001cc 	andi	r17,r2,7
1000f414:	88000d1e 	bne	r17,zero,1000f44c <__muldf3+0x834>
1000f418:	0021883a 	mov	r16,zero
1000f41c:	102cd0fa 	srli	r22,r2,3
1000f420:	3027883a 	mov	r19,r6
1000f424:	0005883a 	mov	r2,zero
1000f428:	b46cb03a 	or	r22,r22,r17
1000f42c:	003e5906 	br	1000ed94 <__alt_data_end+0xf800ed94>
1000f430:	1007883a 	mov	r3,r2
1000f434:	0023883a 	mov	r17,zero
1000f438:	8820927a 	slli	r16,r17,9
1000f43c:	1805883a 	mov	r2,r3
1000f440:	8822977a 	slli	r17,r17,29
1000f444:	8020d33a 	srli	r16,r16,12
1000f448:	003ff406 	br	1000f41c <__alt_data_end+0xf800f41c>
1000f44c:	10c003cc 	andi	r3,r2,15
1000f450:	01000104 	movi	r4,4
1000f454:	193ff626 	beq	r3,r4,1000f430 <__alt_data_end+0xf800f430>
1000f458:	0023883a 	mov	r17,zero
1000f45c:	003fd506 	br	1000f3b4 <__alt_data_end+0xf800f3b4>
1000f460:	0023883a 	mov	r17,zero
1000f464:	003fe706 	br	1000f404 <__alt_data_end+0xf800f404>
1000f468:	00800434 	movhi	r2,16
1000f46c:	8c000234 	orhi	r16,r17,8
1000f470:	10bfffc4 	addi	r2,r2,-1
1000f474:	3027883a 	mov	r19,r6
1000f478:	80a0703a 	and	r16,r16,r2
1000f47c:	902d883a 	mov	r22,r18
1000f480:	003eac06 	br	1000ef34 <__alt_data_end+0xf800ef34>

1000f484 <__subdf3>:
1000f484:	02000434 	movhi	r8,16
1000f488:	423fffc4 	addi	r8,r8,-1
1000f48c:	defffb04 	addi	sp,sp,-20
1000f490:	2a14703a 	and	r10,r5,r8
1000f494:	3812d53a 	srli	r9,r7,20
1000f498:	3a10703a 	and	r8,r7,r8
1000f49c:	2006d77a 	srli	r3,r4,29
1000f4a0:	3004d77a 	srli	r2,r6,29
1000f4a4:	dc000015 	stw	r16,0(sp)
1000f4a8:	501490fa 	slli	r10,r10,3
1000f4ac:	2820d53a 	srli	r16,r5,20
1000f4b0:	401090fa 	slli	r8,r8,3
1000f4b4:	dc800215 	stw	r18,8(sp)
1000f4b8:	dc400115 	stw	r17,4(sp)
1000f4bc:	dfc00415 	stw	ra,16(sp)
1000f4c0:	202290fa 	slli	r17,r4,3
1000f4c4:	dcc00315 	stw	r19,12(sp)
1000f4c8:	4a41ffcc 	andi	r9,r9,2047
1000f4cc:	0101ffc4 	movi	r4,2047
1000f4d0:	2824d7fa 	srli	r18,r5,31
1000f4d4:	8401ffcc 	andi	r16,r16,2047
1000f4d8:	50c6b03a 	or	r3,r10,r3
1000f4dc:	380ed7fa 	srli	r7,r7,31
1000f4e0:	408ab03a 	or	r5,r8,r2
1000f4e4:	300c90fa 	slli	r6,r6,3
1000f4e8:	49009626 	beq	r9,r4,1000f744 <__subdf3+0x2c0>
1000f4ec:	39c0005c 	xori	r7,r7,1
1000f4f0:	8245c83a 	sub	r2,r16,r9
1000f4f4:	3c807426 	beq	r7,r18,1000f6c8 <__subdf3+0x244>
1000f4f8:	0080af0e 	bge	zero,r2,1000f7b8 <__subdf3+0x334>
1000f4fc:	48002a1e 	bne	r9,zero,1000f5a8 <__subdf3+0x124>
1000f500:	2988b03a 	or	r4,r5,r6
1000f504:	20009a1e 	bne	r4,zero,1000f770 <__subdf3+0x2ec>
1000f508:	888001cc 	andi	r2,r17,7
1000f50c:	10000726 	beq	r2,zero,1000f52c <__subdf3+0xa8>
1000f510:	888003cc 	andi	r2,r17,15
1000f514:	01000104 	movi	r4,4
1000f518:	11000426 	beq	r2,r4,1000f52c <__subdf3+0xa8>
1000f51c:	890b883a 	add	r5,r17,r4
1000f520:	2c63803a 	cmpltu	r17,r5,r17
1000f524:	1c47883a 	add	r3,r3,r17
1000f528:	2823883a 	mov	r17,r5
1000f52c:	1880202c 	andhi	r2,r3,128
1000f530:	10005926 	beq	r2,zero,1000f698 <__subdf3+0x214>
1000f534:	84000044 	addi	r16,r16,1
1000f538:	0081ffc4 	movi	r2,2047
1000f53c:	8080be26 	beq	r16,r2,1000f838 <__subdf3+0x3b4>
1000f540:	017fe034 	movhi	r5,65408
1000f544:	297fffc4 	addi	r5,r5,-1
1000f548:	1946703a 	and	r3,r3,r5
1000f54c:	1804977a 	slli	r2,r3,29
1000f550:	1806927a 	slli	r3,r3,9
1000f554:	8822d0fa 	srli	r17,r17,3
1000f558:	8401ffcc 	andi	r16,r16,2047
1000f55c:	180ad33a 	srli	r5,r3,12
1000f560:	9100004c 	andi	r4,r18,1
1000f564:	1444b03a 	or	r2,r2,r17
1000f568:	80c1ffcc 	andi	r3,r16,2047
1000f56c:	1820953a 	slli	r16,r3,20
1000f570:	20c03fcc 	andi	r3,r4,255
1000f574:	180897fa 	slli	r4,r3,31
1000f578:	00c00434 	movhi	r3,16
1000f57c:	18ffffc4 	addi	r3,r3,-1
1000f580:	28c6703a 	and	r3,r5,r3
1000f584:	1c06b03a 	or	r3,r3,r16
1000f588:	1906b03a 	or	r3,r3,r4
1000f58c:	dfc00417 	ldw	ra,16(sp)
1000f590:	dcc00317 	ldw	r19,12(sp)
1000f594:	dc800217 	ldw	r18,8(sp)
1000f598:	dc400117 	ldw	r17,4(sp)
1000f59c:	dc000017 	ldw	r16,0(sp)
1000f5a0:	dec00504 	addi	sp,sp,20
1000f5a4:	f800283a 	ret
1000f5a8:	0101ffc4 	movi	r4,2047
1000f5ac:	813fd626 	beq	r16,r4,1000f508 <__alt_data_end+0xf800f508>
1000f5b0:	29402034 	orhi	r5,r5,128
1000f5b4:	01000e04 	movi	r4,56
1000f5b8:	2080a316 	blt	r4,r2,1000f848 <__subdf3+0x3c4>
1000f5bc:	010007c4 	movi	r4,31
1000f5c0:	2080c616 	blt	r4,r2,1000f8dc <__subdf3+0x458>
1000f5c4:	01000804 	movi	r4,32
1000f5c8:	2089c83a 	sub	r4,r4,r2
1000f5cc:	2910983a 	sll	r8,r5,r4
1000f5d0:	308ed83a 	srl	r7,r6,r2
1000f5d4:	3108983a 	sll	r4,r6,r4
1000f5d8:	2884d83a 	srl	r2,r5,r2
1000f5dc:	41ccb03a 	or	r6,r8,r7
1000f5e0:	2008c03a 	cmpne	r4,r4,zero
1000f5e4:	310cb03a 	or	r6,r6,r4
1000f5e8:	898dc83a 	sub	r6,r17,r6
1000f5ec:	89a3803a 	cmpltu	r17,r17,r6
1000f5f0:	1887c83a 	sub	r3,r3,r2
1000f5f4:	1c47c83a 	sub	r3,r3,r17
1000f5f8:	3023883a 	mov	r17,r6
1000f5fc:	1880202c 	andhi	r2,r3,128
1000f600:	10002326 	beq	r2,zero,1000f690 <__subdf3+0x20c>
1000f604:	04c02034 	movhi	r19,128
1000f608:	9cffffc4 	addi	r19,r19,-1
1000f60c:	1ce6703a 	and	r19,r3,r19
1000f610:	98007a26 	beq	r19,zero,1000f7fc <__subdf3+0x378>
1000f614:	9809883a 	mov	r4,r19
1000f618:	000ff840 	call	1000ff84 <__clzsi2>
1000f61c:	113ffe04 	addi	r4,r2,-8
1000f620:	00c007c4 	movi	r3,31
1000f624:	19007b16 	blt	r3,r4,1000f814 <__subdf3+0x390>
1000f628:	00800804 	movi	r2,32
1000f62c:	1105c83a 	sub	r2,r2,r4
1000f630:	8884d83a 	srl	r2,r17,r2
1000f634:	9906983a 	sll	r3,r19,r4
1000f638:	8922983a 	sll	r17,r17,r4
1000f63c:	10c4b03a 	or	r2,r2,r3
1000f640:	24007816 	blt	r4,r16,1000f824 <__subdf3+0x3a0>
1000f644:	2421c83a 	sub	r16,r4,r16
1000f648:	80c00044 	addi	r3,r16,1
1000f64c:	010007c4 	movi	r4,31
1000f650:	20c09516 	blt	r4,r3,1000f8a8 <__subdf3+0x424>
1000f654:	01400804 	movi	r5,32
1000f658:	28cbc83a 	sub	r5,r5,r3
1000f65c:	88c8d83a 	srl	r4,r17,r3
1000f660:	8962983a 	sll	r17,r17,r5
1000f664:	114a983a 	sll	r5,r2,r5
1000f668:	10c6d83a 	srl	r3,r2,r3
1000f66c:	8804c03a 	cmpne	r2,r17,zero
1000f670:	290ab03a 	or	r5,r5,r4
1000f674:	28a2b03a 	or	r17,r5,r2
1000f678:	0021883a 	mov	r16,zero
1000f67c:	003fa206 	br	1000f508 <__alt_data_end+0xf800f508>
1000f680:	2090b03a 	or	r8,r4,r2
1000f684:	40018e26 	beq	r8,zero,1000fcc0 <__subdf3+0x83c>
1000f688:	1007883a 	mov	r3,r2
1000f68c:	2023883a 	mov	r17,r4
1000f690:	888001cc 	andi	r2,r17,7
1000f694:	103f9e1e 	bne	r2,zero,1000f510 <__alt_data_end+0xf800f510>
1000f698:	1804977a 	slli	r2,r3,29
1000f69c:	8822d0fa 	srli	r17,r17,3
1000f6a0:	1810d0fa 	srli	r8,r3,3
1000f6a4:	9100004c 	andi	r4,r18,1
1000f6a8:	1444b03a 	or	r2,r2,r17
1000f6ac:	00c1ffc4 	movi	r3,2047
1000f6b0:	80c02826 	beq	r16,r3,1000f754 <__subdf3+0x2d0>
1000f6b4:	01400434 	movhi	r5,16
1000f6b8:	297fffc4 	addi	r5,r5,-1
1000f6bc:	80e0703a 	and	r16,r16,r3
1000f6c0:	414a703a 	and	r5,r8,r5
1000f6c4:	003fa806 	br	1000f568 <__alt_data_end+0xf800f568>
1000f6c8:	0080630e 	bge	zero,r2,1000f858 <__subdf3+0x3d4>
1000f6cc:	48003026 	beq	r9,zero,1000f790 <__subdf3+0x30c>
1000f6d0:	0101ffc4 	movi	r4,2047
1000f6d4:	813f8c26 	beq	r16,r4,1000f508 <__alt_data_end+0xf800f508>
1000f6d8:	29402034 	orhi	r5,r5,128
1000f6dc:	01000e04 	movi	r4,56
1000f6e0:	2080a90e 	bge	r4,r2,1000f988 <__subdf3+0x504>
1000f6e4:	298cb03a 	or	r6,r5,r6
1000f6e8:	3012c03a 	cmpne	r9,r6,zero
1000f6ec:	0005883a 	mov	r2,zero
1000f6f0:	4c53883a 	add	r9,r9,r17
1000f6f4:	4c63803a 	cmpltu	r17,r9,r17
1000f6f8:	10c7883a 	add	r3,r2,r3
1000f6fc:	88c7883a 	add	r3,r17,r3
1000f700:	4823883a 	mov	r17,r9
1000f704:	1880202c 	andhi	r2,r3,128
1000f708:	1000d026 	beq	r2,zero,1000fa4c <__subdf3+0x5c8>
1000f70c:	84000044 	addi	r16,r16,1
1000f710:	0081ffc4 	movi	r2,2047
1000f714:	8080fe26 	beq	r16,r2,1000fb10 <__subdf3+0x68c>
1000f718:	00bfe034 	movhi	r2,65408
1000f71c:	10bfffc4 	addi	r2,r2,-1
1000f720:	1886703a 	and	r3,r3,r2
1000f724:	880ad07a 	srli	r5,r17,1
1000f728:	180497fa 	slli	r2,r3,31
1000f72c:	8900004c 	andi	r4,r17,1
1000f730:	2922b03a 	or	r17,r5,r4
1000f734:	1806d07a 	srli	r3,r3,1
1000f738:	1462b03a 	or	r17,r2,r17
1000f73c:	3825883a 	mov	r18,r7
1000f740:	003f7106 	br	1000f508 <__alt_data_end+0xf800f508>
1000f744:	2984b03a 	or	r2,r5,r6
1000f748:	103f6826 	beq	r2,zero,1000f4ec <__alt_data_end+0xf800f4ec>
1000f74c:	39c03fcc 	andi	r7,r7,255
1000f750:	003f6706 	br	1000f4f0 <__alt_data_end+0xf800f4f0>
1000f754:	4086b03a 	or	r3,r8,r2
1000f758:	18015226 	beq	r3,zero,1000fca4 <__subdf3+0x820>
1000f75c:	00c00434 	movhi	r3,16
1000f760:	41400234 	orhi	r5,r8,8
1000f764:	18ffffc4 	addi	r3,r3,-1
1000f768:	28ca703a 	and	r5,r5,r3
1000f76c:	003f7e06 	br	1000f568 <__alt_data_end+0xf800f568>
1000f770:	10bfffc4 	addi	r2,r2,-1
1000f774:	1000491e 	bne	r2,zero,1000f89c <__subdf3+0x418>
1000f778:	898fc83a 	sub	r7,r17,r6
1000f77c:	89e3803a 	cmpltu	r17,r17,r7
1000f780:	1947c83a 	sub	r3,r3,r5
1000f784:	1c47c83a 	sub	r3,r3,r17
1000f788:	3823883a 	mov	r17,r7
1000f78c:	003f9b06 	br	1000f5fc <__alt_data_end+0xf800f5fc>
1000f790:	2988b03a 	or	r4,r5,r6
1000f794:	203f5c26 	beq	r4,zero,1000f508 <__alt_data_end+0xf800f508>
1000f798:	10bfffc4 	addi	r2,r2,-1
1000f79c:	1000931e 	bne	r2,zero,1000f9ec <__subdf3+0x568>
1000f7a0:	898d883a 	add	r6,r17,r6
1000f7a4:	3463803a 	cmpltu	r17,r6,r17
1000f7a8:	1947883a 	add	r3,r3,r5
1000f7ac:	88c7883a 	add	r3,r17,r3
1000f7b0:	3023883a 	mov	r17,r6
1000f7b4:	003fd306 	br	1000f704 <__alt_data_end+0xf800f704>
1000f7b8:	1000541e 	bne	r2,zero,1000f90c <__subdf3+0x488>
1000f7bc:	80800044 	addi	r2,r16,1
1000f7c0:	1081ffcc 	andi	r2,r2,2047
1000f7c4:	01000044 	movi	r4,1
1000f7c8:	2080a20e 	bge	r4,r2,1000fa54 <__subdf3+0x5d0>
1000f7cc:	8989c83a 	sub	r4,r17,r6
1000f7d0:	8905803a 	cmpltu	r2,r17,r4
1000f7d4:	1967c83a 	sub	r19,r3,r5
1000f7d8:	98a7c83a 	sub	r19,r19,r2
1000f7dc:	9880202c 	andhi	r2,r19,128
1000f7e0:	10006326 	beq	r2,zero,1000f970 <__subdf3+0x4ec>
1000f7e4:	3463c83a 	sub	r17,r6,r17
1000f7e8:	28c7c83a 	sub	r3,r5,r3
1000f7ec:	344d803a 	cmpltu	r6,r6,r17
1000f7f0:	19a7c83a 	sub	r19,r3,r6
1000f7f4:	3825883a 	mov	r18,r7
1000f7f8:	983f861e 	bne	r19,zero,1000f614 <__alt_data_end+0xf800f614>
1000f7fc:	8809883a 	mov	r4,r17
1000f800:	000ff840 	call	1000ff84 <__clzsi2>
1000f804:	10800804 	addi	r2,r2,32
1000f808:	113ffe04 	addi	r4,r2,-8
1000f80c:	00c007c4 	movi	r3,31
1000f810:	193f850e 	bge	r3,r4,1000f628 <__alt_data_end+0xf800f628>
1000f814:	10bff604 	addi	r2,r2,-40
1000f818:	8884983a 	sll	r2,r17,r2
1000f81c:	0023883a 	mov	r17,zero
1000f820:	243f880e 	bge	r4,r16,1000f644 <__alt_data_end+0xf800f644>
1000f824:	00ffe034 	movhi	r3,65408
1000f828:	18ffffc4 	addi	r3,r3,-1
1000f82c:	8121c83a 	sub	r16,r16,r4
1000f830:	10c6703a 	and	r3,r2,r3
1000f834:	003f3406 	br	1000f508 <__alt_data_end+0xf800f508>
1000f838:	9100004c 	andi	r4,r18,1
1000f83c:	000b883a 	mov	r5,zero
1000f840:	0005883a 	mov	r2,zero
1000f844:	003f4806 	br	1000f568 <__alt_data_end+0xf800f568>
1000f848:	298cb03a 	or	r6,r5,r6
1000f84c:	300cc03a 	cmpne	r6,r6,zero
1000f850:	0005883a 	mov	r2,zero
1000f854:	003f6406 	br	1000f5e8 <__alt_data_end+0xf800f5e8>
1000f858:	10009a1e 	bne	r2,zero,1000fac4 <__subdf3+0x640>
1000f85c:	82400044 	addi	r9,r16,1
1000f860:	4881ffcc 	andi	r2,r9,2047
1000f864:	02800044 	movi	r10,1
1000f868:	5080670e 	bge	r10,r2,1000fa08 <__subdf3+0x584>
1000f86c:	0081ffc4 	movi	r2,2047
1000f870:	4880af26 	beq	r9,r2,1000fb30 <__subdf3+0x6ac>
1000f874:	898d883a 	add	r6,r17,r6
1000f878:	1945883a 	add	r2,r3,r5
1000f87c:	3447803a 	cmpltu	r3,r6,r17
1000f880:	1887883a 	add	r3,r3,r2
1000f884:	182297fa 	slli	r17,r3,31
1000f888:	300cd07a 	srli	r6,r6,1
1000f88c:	1806d07a 	srli	r3,r3,1
1000f890:	4821883a 	mov	r16,r9
1000f894:	89a2b03a 	or	r17,r17,r6
1000f898:	003f1b06 	br	1000f508 <__alt_data_end+0xf800f508>
1000f89c:	0101ffc4 	movi	r4,2047
1000f8a0:	813f441e 	bne	r16,r4,1000f5b4 <__alt_data_end+0xf800f5b4>
1000f8a4:	003f1806 	br	1000f508 <__alt_data_end+0xf800f508>
1000f8a8:	843ff844 	addi	r16,r16,-31
1000f8ac:	01400804 	movi	r5,32
1000f8b0:	1408d83a 	srl	r4,r2,r16
1000f8b4:	19405026 	beq	r3,r5,1000f9f8 <__subdf3+0x574>
1000f8b8:	01401004 	movi	r5,64
1000f8bc:	28c7c83a 	sub	r3,r5,r3
1000f8c0:	10c4983a 	sll	r2,r2,r3
1000f8c4:	88a2b03a 	or	r17,r17,r2
1000f8c8:	8822c03a 	cmpne	r17,r17,zero
1000f8cc:	2462b03a 	or	r17,r4,r17
1000f8d0:	0007883a 	mov	r3,zero
1000f8d4:	0021883a 	mov	r16,zero
1000f8d8:	003f6d06 	br	1000f690 <__alt_data_end+0xf800f690>
1000f8dc:	11fff804 	addi	r7,r2,-32
1000f8e0:	01000804 	movi	r4,32
1000f8e4:	29ced83a 	srl	r7,r5,r7
1000f8e8:	11004526 	beq	r2,r4,1000fa00 <__subdf3+0x57c>
1000f8ec:	01001004 	movi	r4,64
1000f8f0:	2089c83a 	sub	r4,r4,r2
1000f8f4:	2904983a 	sll	r2,r5,r4
1000f8f8:	118cb03a 	or	r6,r2,r6
1000f8fc:	300cc03a 	cmpne	r6,r6,zero
1000f900:	398cb03a 	or	r6,r7,r6
1000f904:	0005883a 	mov	r2,zero
1000f908:	003f3706 	br	1000f5e8 <__alt_data_end+0xf800f5e8>
1000f90c:	80002a26 	beq	r16,zero,1000f9b8 <__subdf3+0x534>
1000f910:	0101ffc4 	movi	r4,2047
1000f914:	49006626 	beq	r9,r4,1000fab0 <__subdf3+0x62c>
1000f918:	0085c83a 	sub	r2,zero,r2
1000f91c:	18c02034 	orhi	r3,r3,128
1000f920:	01000e04 	movi	r4,56
1000f924:	20807e16 	blt	r4,r2,1000fb20 <__subdf3+0x69c>
1000f928:	010007c4 	movi	r4,31
1000f92c:	2080e716 	blt	r4,r2,1000fccc <__subdf3+0x848>
1000f930:	01000804 	movi	r4,32
1000f934:	2089c83a 	sub	r4,r4,r2
1000f938:	1914983a 	sll	r10,r3,r4
1000f93c:	8890d83a 	srl	r8,r17,r2
1000f940:	8908983a 	sll	r4,r17,r4
1000f944:	1884d83a 	srl	r2,r3,r2
1000f948:	5222b03a 	or	r17,r10,r8
1000f94c:	2006c03a 	cmpne	r3,r4,zero
1000f950:	88e2b03a 	or	r17,r17,r3
1000f954:	3463c83a 	sub	r17,r6,r17
1000f958:	2885c83a 	sub	r2,r5,r2
1000f95c:	344d803a 	cmpltu	r6,r6,r17
1000f960:	1187c83a 	sub	r3,r2,r6
1000f964:	4821883a 	mov	r16,r9
1000f968:	3825883a 	mov	r18,r7
1000f96c:	003f2306 	br	1000f5fc <__alt_data_end+0xf800f5fc>
1000f970:	24d0b03a 	or	r8,r4,r19
1000f974:	40001b1e 	bne	r8,zero,1000f9e4 <__subdf3+0x560>
1000f978:	0005883a 	mov	r2,zero
1000f97c:	0009883a 	mov	r4,zero
1000f980:	0021883a 	mov	r16,zero
1000f984:	003f4906 	br	1000f6ac <__alt_data_end+0xf800f6ac>
1000f988:	010007c4 	movi	r4,31
1000f98c:	20803a16 	blt	r4,r2,1000fa78 <__subdf3+0x5f4>
1000f990:	01000804 	movi	r4,32
1000f994:	2089c83a 	sub	r4,r4,r2
1000f998:	2912983a 	sll	r9,r5,r4
1000f99c:	3090d83a 	srl	r8,r6,r2
1000f9a0:	3108983a 	sll	r4,r6,r4
1000f9a4:	2884d83a 	srl	r2,r5,r2
1000f9a8:	4a12b03a 	or	r9,r9,r8
1000f9ac:	2008c03a 	cmpne	r4,r4,zero
1000f9b0:	4912b03a 	or	r9,r9,r4
1000f9b4:	003f4e06 	br	1000f6f0 <__alt_data_end+0xf800f6f0>
1000f9b8:	1c48b03a 	or	r4,r3,r17
1000f9bc:	20003c26 	beq	r4,zero,1000fab0 <__subdf3+0x62c>
1000f9c0:	0084303a 	nor	r2,zero,r2
1000f9c4:	1000381e 	bne	r2,zero,1000faa8 <__subdf3+0x624>
1000f9c8:	3463c83a 	sub	r17,r6,r17
1000f9cc:	28c5c83a 	sub	r2,r5,r3
1000f9d0:	344d803a 	cmpltu	r6,r6,r17
1000f9d4:	1187c83a 	sub	r3,r2,r6
1000f9d8:	4821883a 	mov	r16,r9
1000f9dc:	3825883a 	mov	r18,r7
1000f9e0:	003f0606 	br	1000f5fc <__alt_data_end+0xf800f5fc>
1000f9e4:	2023883a 	mov	r17,r4
1000f9e8:	003f0906 	br	1000f610 <__alt_data_end+0xf800f610>
1000f9ec:	0101ffc4 	movi	r4,2047
1000f9f0:	813f3a1e 	bne	r16,r4,1000f6dc <__alt_data_end+0xf800f6dc>
1000f9f4:	003ec406 	br	1000f508 <__alt_data_end+0xf800f508>
1000f9f8:	0005883a 	mov	r2,zero
1000f9fc:	003fb106 	br	1000f8c4 <__alt_data_end+0xf800f8c4>
1000fa00:	0005883a 	mov	r2,zero
1000fa04:	003fbc06 	br	1000f8f8 <__alt_data_end+0xf800f8f8>
1000fa08:	1c44b03a 	or	r2,r3,r17
1000fa0c:	80008e1e 	bne	r16,zero,1000fc48 <__subdf3+0x7c4>
1000fa10:	1000c826 	beq	r2,zero,1000fd34 <__subdf3+0x8b0>
1000fa14:	2984b03a 	or	r2,r5,r6
1000fa18:	103ebb26 	beq	r2,zero,1000f508 <__alt_data_end+0xf800f508>
1000fa1c:	8989883a 	add	r4,r17,r6
1000fa20:	1945883a 	add	r2,r3,r5
1000fa24:	2447803a 	cmpltu	r3,r4,r17
1000fa28:	1887883a 	add	r3,r3,r2
1000fa2c:	1880202c 	andhi	r2,r3,128
1000fa30:	2023883a 	mov	r17,r4
1000fa34:	103f1626 	beq	r2,zero,1000f690 <__alt_data_end+0xf800f690>
1000fa38:	00bfe034 	movhi	r2,65408
1000fa3c:	10bfffc4 	addi	r2,r2,-1
1000fa40:	5021883a 	mov	r16,r10
1000fa44:	1886703a 	and	r3,r3,r2
1000fa48:	003eaf06 	br	1000f508 <__alt_data_end+0xf800f508>
1000fa4c:	3825883a 	mov	r18,r7
1000fa50:	003f0f06 	br	1000f690 <__alt_data_end+0xf800f690>
1000fa54:	1c44b03a 	or	r2,r3,r17
1000fa58:	8000251e 	bne	r16,zero,1000faf0 <__subdf3+0x66c>
1000fa5c:	1000661e 	bne	r2,zero,1000fbf8 <__subdf3+0x774>
1000fa60:	2990b03a 	or	r8,r5,r6
1000fa64:	40009626 	beq	r8,zero,1000fcc0 <__subdf3+0x83c>
1000fa68:	2807883a 	mov	r3,r5
1000fa6c:	3023883a 	mov	r17,r6
1000fa70:	3825883a 	mov	r18,r7
1000fa74:	003ea406 	br	1000f508 <__alt_data_end+0xf800f508>
1000fa78:	127ff804 	addi	r9,r2,-32
1000fa7c:	01000804 	movi	r4,32
1000fa80:	2a52d83a 	srl	r9,r5,r9
1000fa84:	11008c26 	beq	r2,r4,1000fcb8 <__subdf3+0x834>
1000fa88:	01001004 	movi	r4,64
1000fa8c:	2085c83a 	sub	r2,r4,r2
1000fa90:	2884983a 	sll	r2,r5,r2
1000fa94:	118cb03a 	or	r6,r2,r6
1000fa98:	300cc03a 	cmpne	r6,r6,zero
1000fa9c:	4992b03a 	or	r9,r9,r6
1000faa0:	0005883a 	mov	r2,zero
1000faa4:	003f1206 	br	1000f6f0 <__alt_data_end+0xf800f6f0>
1000faa8:	0101ffc4 	movi	r4,2047
1000faac:	493f9c1e 	bne	r9,r4,1000f920 <__alt_data_end+0xf800f920>
1000fab0:	2807883a 	mov	r3,r5
1000fab4:	3023883a 	mov	r17,r6
1000fab8:	4821883a 	mov	r16,r9
1000fabc:	3825883a 	mov	r18,r7
1000fac0:	003e9106 	br	1000f508 <__alt_data_end+0xf800f508>
1000fac4:	80001f1e 	bne	r16,zero,1000fb44 <__subdf3+0x6c0>
1000fac8:	1c48b03a 	or	r4,r3,r17
1000facc:	20005a26 	beq	r4,zero,1000fc38 <__subdf3+0x7b4>
1000fad0:	0084303a 	nor	r2,zero,r2
1000fad4:	1000561e 	bne	r2,zero,1000fc30 <__subdf3+0x7ac>
1000fad8:	89a3883a 	add	r17,r17,r6
1000fadc:	1945883a 	add	r2,r3,r5
1000fae0:	898d803a 	cmpltu	r6,r17,r6
1000fae4:	3087883a 	add	r3,r6,r2
1000fae8:	4821883a 	mov	r16,r9
1000faec:	003f0506 	br	1000f704 <__alt_data_end+0xf800f704>
1000faf0:	10002b1e 	bne	r2,zero,1000fba0 <__subdf3+0x71c>
1000faf4:	2984b03a 	or	r2,r5,r6
1000faf8:	10008026 	beq	r2,zero,1000fcfc <__subdf3+0x878>
1000fafc:	2807883a 	mov	r3,r5
1000fb00:	3023883a 	mov	r17,r6
1000fb04:	3825883a 	mov	r18,r7
1000fb08:	0401ffc4 	movi	r16,2047
1000fb0c:	003e7e06 	br	1000f508 <__alt_data_end+0xf800f508>
1000fb10:	3809883a 	mov	r4,r7
1000fb14:	0011883a 	mov	r8,zero
1000fb18:	0005883a 	mov	r2,zero
1000fb1c:	003ee306 	br	1000f6ac <__alt_data_end+0xf800f6ac>
1000fb20:	1c62b03a 	or	r17,r3,r17
1000fb24:	8822c03a 	cmpne	r17,r17,zero
1000fb28:	0005883a 	mov	r2,zero
1000fb2c:	003f8906 	br	1000f954 <__alt_data_end+0xf800f954>
1000fb30:	3809883a 	mov	r4,r7
1000fb34:	4821883a 	mov	r16,r9
1000fb38:	0011883a 	mov	r8,zero
1000fb3c:	0005883a 	mov	r2,zero
1000fb40:	003eda06 	br	1000f6ac <__alt_data_end+0xf800f6ac>
1000fb44:	0101ffc4 	movi	r4,2047
1000fb48:	49003b26 	beq	r9,r4,1000fc38 <__subdf3+0x7b4>
1000fb4c:	0085c83a 	sub	r2,zero,r2
1000fb50:	18c02034 	orhi	r3,r3,128
1000fb54:	01000e04 	movi	r4,56
1000fb58:	20806e16 	blt	r4,r2,1000fd14 <__subdf3+0x890>
1000fb5c:	010007c4 	movi	r4,31
1000fb60:	20807716 	blt	r4,r2,1000fd40 <__subdf3+0x8bc>
1000fb64:	01000804 	movi	r4,32
1000fb68:	2089c83a 	sub	r4,r4,r2
1000fb6c:	1914983a 	sll	r10,r3,r4
1000fb70:	8890d83a 	srl	r8,r17,r2
1000fb74:	8908983a 	sll	r4,r17,r4
1000fb78:	1884d83a 	srl	r2,r3,r2
1000fb7c:	5222b03a 	or	r17,r10,r8
1000fb80:	2006c03a 	cmpne	r3,r4,zero
1000fb84:	88e2b03a 	or	r17,r17,r3
1000fb88:	89a3883a 	add	r17,r17,r6
1000fb8c:	1145883a 	add	r2,r2,r5
1000fb90:	898d803a 	cmpltu	r6,r17,r6
1000fb94:	3087883a 	add	r3,r6,r2
1000fb98:	4821883a 	mov	r16,r9
1000fb9c:	003ed906 	br	1000f704 <__alt_data_end+0xf800f704>
1000fba0:	2984b03a 	or	r2,r5,r6
1000fba4:	10004226 	beq	r2,zero,1000fcb0 <__subdf3+0x82c>
1000fba8:	1808d0fa 	srli	r4,r3,3
1000fbac:	8822d0fa 	srli	r17,r17,3
1000fbb0:	1806977a 	slli	r3,r3,29
1000fbb4:	2080022c 	andhi	r2,r4,8
1000fbb8:	1c62b03a 	or	r17,r3,r17
1000fbbc:	10000826 	beq	r2,zero,1000fbe0 <__subdf3+0x75c>
1000fbc0:	2812d0fa 	srli	r9,r5,3
1000fbc4:	4880022c 	andhi	r2,r9,8
1000fbc8:	1000051e 	bne	r2,zero,1000fbe0 <__subdf3+0x75c>
1000fbcc:	300cd0fa 	srli	r6,r6,3
1000fbd0:	2804977a 	slli	r2,r5,29
1000fbd4:	4809883a 	mov	r4,r9
1000fbd8:	3825883a 	mov	r18,r7
1000fbdc:	11a2b03a 	or	r17,r2,r6
1000fbe0:	8806d77a 	srli	r3,r17,29
1000fbe4:	200890fa 	slli	r4,r4,3
1000fbe8:	882290fa 	slli	r17,r17,3
1000fbec:	0401ffc4 	movi	r16,2047
1000fbf0:	1906b03a 	or	r3,r3,r4
1000fbf4:	003e4406 	br	1000f508 <__alt_data_end+0xf800f508>
1000fbf8:	2984b03a 	or	r2,r5,r6
1000fbfc:	103e4226 	beq	r2,zero,1000f508 <__alt_data_end+0xf800f508>
1000fc00:	8989c83a 	sub	r4,r17,r6
1000fc04:	8911803a 	cmpltu	r8,r17,r4
1000fc08:	1945c83a 	sub	r2,r3,r5
1000fc0c:	1205c83a 	sub	r2,r2,r8
1000fc10:	1200202c 	andhi	r8,r2,128
1000fc14:	403e9a26 	beq	r8,zero,1000f680 <__alt_data_end+0xf800f680>
1000fc18:	3463c83a 	sub	r17,r6,r17
1000fc1c:	28c5c83a 	sub	r2,r5,r3
1000fc20:	344d803a 	cmpltu	r6,r6,r17
1000fc24:	1187c83a 	sub	r3,r2,r6
1000fc28:	3825883a 	mov	r18,r7
1000fc2c:	003e3606 	br	1000f508 <__alt_data_end+0xf800f508>
1000fc30:	0101ffc4 	movi	r4,2047
1000fc34:	493fc71e 	bne	r9,r4,1000fb54 <__alt_data_end+0xf800fb54>
1000fc38:	2807883a 	mov	r3,r5
1000fc3c:	3023883a 	mov	r17,r6
1000fc40:	4821883a 	mov	r16,r9
1000fc44:	003e3006 	br	1000f508 <__alt_data_end+0xf800f508>
1000fc48:	10003626 	beq	r2,zero,1000fd24 <__subdf3+0x8a0>
1000fc4c:	2984b03a 	or	r2,r5,r6
1000fc50:	10001726 	beq	r2,zero,1000fcb0 <__subdf3+0x82c>
1000fc54:	1808d0fa 	srli	r4,r3,3
1000fc58:	8822d0fa 	srli	r17,r17,3
1000fc5c:	1806977a 	slli	r3,r3,29
1000fc60:	2080022c 	andhi	r2,r4,8
1000fc64:	1c62b03a 	or	r17,r3,r17
1000fc68:	10000726 	beq	r2,zero,1000fc88 <__subdf3+0x804>
1000fc6c:	2812d0fa 	srli	r9,r5,3
1000fc70:	4880022c 	andhi	r2,r9,8
1000fc74:	1000041e 	bne	r2,zero,1000fc88 <__subdf3+0x804>
1000fc78:	300cd0fa 	srli	r6,r6,3
1000fc7c:	2804977a 	slli	r2,r5,29
1000fc80:	4809883a 	mov	r4,r9
1000fc84:	11a2b03a 	or	r17,r2,r6
1000fc88:	8806d77a 	srli	r3,r17,29
1000fc8c:	200890fa 	slli	r4,r4,3
1000fc90:	882290fa 	slli	r17,r17,3
1000fc94:	3825883a 	mov	r18,r7
1000fc98:	1906b03a 	or	r3,r3,r4
1000fc9c:	0401ffc4 	movi	r16,2047
1000fca0:	003e1906 	br	1000f508 <__alt_data_end+0xf800f508>
1000fca4:	000b883a 	mov	r5,zero
1000fca8:	0005883a 	mov	r2,zero
1000fcac:	003e2e06 	br	1000f568 <__alt_data_end+0xf800f568>
1000fcb0:	0401ffc4 	movi	r16,2047
1000fcb4:	003e1406 	br	1000f508 <__alt_data_end+0xf800f508>
1000fcb8:	0005883a 	mov	r2,zero
1000fcbc:	003f7506 	br	1000fa94 <__alt_data_end+0xf800fa94>
1000fcc0:	0005883a 	mov	r2,zero
1000fcc4:	0009883a 	mov	r4,zero
1000fcc8:	003e7806 	br	1000f6ac <__alt_data_end+0xf800f6ac>
1000fccc:	123ff804 	addi	r8,r2,-32
1000fcd0:	01000804 	movi	r4,32
1000fcd4:	1a10d83a 	srl	r8,r3,r8
1000fcd8:	11002526 	beq	r2,r4,1000fd70 <__subdf3+0x8ec>
1000fcdc:	01001004 	movi	r4,64
1000fce0:	2085c83a 	sub	r2,r4,r2
1000fce4:	1884983a 	sll	r2,r3,r2
1000fce8:	1444b03a 	or	r2,r2,r17
1000fcec:	1004c03a 	cmpne	r2,r2,zero
1000fcf0:	40a2b03a 	or	r17,r8,r2
1000fcf4:	0005883a 	mov	r2,zero
1000fcf8:	003f1606 	br	1000f954 <__alt_data_end+0xf800f954>
1000fcfc:	02000434 	movhi	r8,16
1000fd00:	0009883a 	mov	r4,zero
1000fd04:	423fffc4 	addi	r8,r8,-1
1000fd08:	00bfffc4 	movi	r2,-1
1000fd0c:	0401ffc4 	movi	r16,2047
1000fd10:	003e6606 	br	1000f6ac <__alt_data_end+0xf800f6ac>
1000fd14:	1c62b03a 	or	r17,r3,r17
1000fd18:	8822c03a 	cmpne	r17,r17,zero
1000fd1c:	0005883a 	mov	r2,zero
1000fd20:	003f9906 	br	1000fb88 <__alt_data_end+0xf800fb88>
1000fd24:	2807883a 	mov	r3,r5
1000fd28:	3023883a 	mov	r17,r6
1000fd2c:	0401ffc4 	movi	r16,2047
1000fd30:	003df506 	br	1000f508 <__alt_data_end+0xf800f508>
1000fd34:	2807883a 	mov	r3,r5
1000fd38:	3023883a 	mov	r17,r6
1000fd3c:	003df206 	br	1000f508 <__alt_data_end+0xf800f508>
1000fd40:	123ff804 	addi	r8,r2,-32
1000fd44:	01000804 	movi	r4,32
1000fd48:	1a10d83a 	srl	r8,r3,r8
1000fd4c:	11000a26 	beq	r2,r4,1000fd78 <__subdf3+0x8f4>
1000fd50:	01001004 	movi	r4,64
1000fd54:	2085c83a 	sub	r2,r4,r2
1000fd58:	1884983a 	sll	r2,r3,r2
1000fd5c:	1444b03a 	or	r2,r2,r17
1000fd60:	1004c03a 	cmpne	r2,r2,zero
1000fd64:	40a2b03a 	or	r17,r8,r2
1000fd68:	0005883a 	mov	r2,zero
1000fd6c:	003f8606 	br	1000fb88 <__alt_data_end+0xf800fb88>
1000fd70:	0005883a 	mov	r2,zero
1000fd74:	003fdc06 	br	1000fce8 <__alt_data_end+0xf800fce8>
1000fd78:	0005883a 	mov	r2,zero
1000fd7c:	003ff706 	br	1000fd5c <__alt_data_end+0xf800fd5c>

1000fd80 <__fixdfsi>:
1000fd80:	280cd53a 	srli	r6,r5,20
1000fd84:	00c00434 	movhi	r3,16
1000fd88:	18ffffc4 	addi	r3,r3,-1
1000fd8c:	3181ffcc 	andi	r6,r6,2047
1000fd90:	01c0ff84 	movi	r7,1022
1000fd94:	28c6703a 	and	r3,r5,r3
1000fd98:	280ad7fa 	srli	r5,r5,31
1000fd9c:	3980120e 	bge	r7,r6,1000fde8 <__fixdfsi+0x68>
1000fda0:	00810744 	movi	r2,1053
1000fda4:	11800c16 	blt	r2,r6,1000fdd8 <__fixdfsi+0x58>
1000fda8:	00810cc4 	movi	r2,1075
1000fdac:	1185c83a 	sub	r2,r2,r6
1000fdb0:	01c007c4 	movi	r7,31
1000fdb4:	18c00434 	orhi	r3,r3,16
1000fdb8:	38800d16 	blt	r7,r2,1000fdf0 <__fixdfsi+0x70>
1000fdbc:	31befb44 	addi	r6,r6,-1043
1000fdc0:	2084d83a 	srl	r2,r4,r2
1000fdc4:	1986983a 	sll	r3,r3,r6
1000fdc8:	1884b03a 	or	r2,r3,r2
1000fdcc:	28000726 	beq	r5,zero,1000fdec <__fixdfsi+0x6c>
1000fdd0:	0085c83a 	sub	r2,zero,r2
1000fdd4:	f800283a 	ret
1000fdd8:	00a00034 	movhi	r2,32768
1000fddc:	10bfffc4 	addi	r2,r2,-1
1000fde0:	2885883a 	add	r2,r5,r2
1000fde4:	f800283a 	ret
1000fde8:	0005883a 	mov	r2,zero
1000fdec:	f800283a 	ret
1000fdf0:	008104c4 	movi	r2,1043
1000fdf4:	1185c83a 	sub	r2,r2,r6
1000fdf8:	1884d83a 	srl	r2,r3,r2
1000fdfc:	003ff306 	br	1000fdcc <__alt_data_end+0xf800fdcc>

1000fe00 <__floatsidf>:
1000fe00:	defffd04 	addi	sp,sp,-12
1000fe04:	dfc00215 	stw	ra,8(sp)
1000fe08:	dc400115 	stw	r17,4(sp)
1000fe0c:	dc000015 	stw	r16,0(sp)
1000fe10:	20002b26 	beq	r4,zero,1000fec0 <__floatsidf+0xc0>
1000fe14:	2023883a 	mov	r17,r4
1000fe18:	2020d7fa 	srli	r16,r4,31
1000fe1c:	20002d16 	blt	r4,zero,1000fed4 <__floatsidf+0xd4>
1000fe20:	8809883a 	mov	r4,r17
1000fe24:	000ff840 	call	1000ff84 <__clzsi2>
1000fe28:	01410784 	movi	r5,1054
1000fe2c:	288bc83a 	sub	r5,r5,r2
1000fe30:	01010cc4 	movi	r4,1075
1000fe34:	2149c83a 	sub	r4,r4,r5
1000fe38:	00c007c4 	movi	r3,31
1000fe3c:	1900160e 	bge	r3,r4,1000fe98 <__floatsidf+0x98>
1000fe40:	00c104c4 	movi	r3,1043
1000fe44:	1947c83a 	sub	r3,r3,r5
1000fe48:	88c6983a 	sll	r3,r17,r3
1000fe4c:	00800434 	movhi	r2,16
1000fe50:	10bfffc4 	addi	r2,r2,-1
1000fe54:	1886703a 	and	r3,r3,r2
1000fe58:	2941ffcc 	andi	r5,r5,2047
1000fe5c:	800d883a 	mov	r6,r16
1000fe60:	0005883a 	mov	r2,zero
1000fe64:	280a953a 	slli	r5,r5,20
1000fe68:	31803fcc 	andi	r6,r6,255
1000fe6c:	01000434 	movhi	r4,16
1000fe70:	300c97fa 	slli	r6,r6,31
1000fe74:	213fffc4 	addi	r4,r4,-1
1000fe78:	1906703a 	and	r3,r3,r4
1000fe7c:	1946b03a 	or	r3,r3,r5
1000fe80:	1986b03a 	or	r3,r3,r6
1000fe84:	dfc00217 	ldw	ra,8(sp)
1000fe88:	dc400117 	ldw	r17,4(sp)
1000fe8c:	dc000017 	ldw	r16,0(sp)
1000fe90:	dec00304 	addi	sp,sp,12
1000fe94:	f800283a 	ret
1000fe98:	00c002c4 	movi	r3,11
1000fe9c:	1887c83a 	sub	r3,r3,r2
1000fea0:	88c6d83a 	srl	r3,r17,r3
1000fea4:	8904983a 	sll	r2,r17,r4
1000fea8:	01000434 	movhi	r4,16
1000feac:	213fffc4 	addi	r4,r4,-1
1000feb0:	2941ffcc 	andi	r5,r5,2047
1000feb4:	1906703a 	and	r3,r3,r4
1000feb8:	800d883a 	mov	r6,r16
1000febc:	003fe906 	br	1000fe64 <__alt_data_end+0xf800fe64>
1000fec0:	000d883a 	mov	r6,zero
1000fec4:	000b883a 	mov	r5,zero
1000fec8:	0007883a 	mov	r3,zero
1000fecc:	0005883a 	mov	r2,zero
1000fed0:	003fe406 	br	1000fe64 <__alt_data_end+0xf800fe64>
1000fed4:	0123c83a 	sub	r17,zero,r4
1000fed8:	003fd106 	br	1000fe20 <__alt_data_end+0xf800fe20>

1000fedc <__floatunsidf>:
1000fedc:	defffe04 	addi	sp,sp,-8
1000fee0:	dc000015 	stw	r16,0(sp)
1000fee4:	dfc00115 	stw	ra,4(sp)
1000fee8:	2021883a 	mov	r16,r4
1000feec:	20002226 	beq	r4,zero,1000ff78 <__floatunsidf+0x9c>
1000fef0:	000ff840 	call	1000ff84 <__clzsi2>
1000fef4:	01010784 	movi	r4,1054
1000fef8:	2089c83a 	sub	r4,r4,r2
1000fefc:	01810cc4 	movi	r6,1075
1000ff00:	310dc83a 	sub	r6,r6,r4
1000ff04:	00c007c4 	movi	r3,31
1000ff08:	1980120e 	bge	r3,r6,1000ff54 <__floatunsidf+0x78>
1000ff0c:	00c104c4 	movi	r3,1043
1000ff10:	1907c83a 	sub	r3,r3,r4
1000ff14:	80ca983a 	sll	r5,r16,r3
1000ff18:	00800434 	movhi	r2,16
1000ff1c:	10bfffc4 	addi	r2,r2,-1
1000ff20:	2101ffcc 	andi	r4,r4,2047
1000ff24:	0021883a 	mov	r16,zero
1000ff28:	288a703a 	and	r5,r5,r2
1000ff2c:	2008953a 	slli	r4,r4,20
1000ff30:	00c00434 	movhi	r3,16
1000ff34:	18ffffc4 	addi	r3,r3,-1
1000ff38:	28c6703a 	and	r3,r5,r3
1000ff3c:	8005883a 	mov	r2,r16
1000ff40:	1906b03a 	or	r3,r3,r4
1000ff44:	dfc00117 	ldw	ra,4(sp)
1000ff48:	dc000017 	ldw	r16,0(sp)
1000ff4c:	dec00204 	addi	sp,sp,8
1000ff50:	f800283a 	ret
1000ff54:	00c002c4 	movi	r3,11
1000ff58:	188bc83a 	sub	r5,r3,r2
1000ff5c:	814ad83a 	srl	r5,r16,r5
1000ff60:	00c00434 	movhi	r3,16
1000ff64:	18ffffc4 	addi	r3,r3,-1
1000ff68:	81a0983a 	sll	r16,r16,r6
1000ff6c:	2101ffcc 	andi	r4,r4,2047
1000ff70:	28ca703a 	and	r5,r5,r3
1000ff74:	003fed06 	br	1000ff2c <__alt_data_end+0xf800ff2c>
1000ff78:	0009883a 	mov	r4,zero
1000ff7c:	000b883a 	mov	r5,zero
1000ff80:	003fea06 	br	1000ff2c <__alt_data_end+0xf800ff2c>

1000ff84 <__clzsi2>:
1000ff84:	00bfffd4 	movui	r2,65535
1000ff88:	11000536 	bltu	r2,r4,1000ffa0 <__clzsi2+0x1c>
1000ff8c:	00803fc4 	movi	r2,255
1000ff90:	11000f36 	bltu	r2,r4,1000ffd0 <__clzsi2+0x4c>
1000ff94:	00800804 	movi	r2,32
1000ff98:	0007883a 	mov	r3,zero
1000ff9c:	00000506 	br	1000ffb4 <__clzsi2+0x30>
1000ffa0:	00804034 	movhi	r2,256
1000ffa4:	10bfffc4 	addi	r2,r2,-1
1000ffa8:	11000c2e 	bgeu	r2,r4,1000ffdc <__clzsi2+0x58>
1000ffac:	00800204 	movi	r2,8
1000ffb0:	00c00604 	movi	r3,24
1000ffb4:	20c8d83a 	srl	r4,r4,r3
1000ffb8:	00c40074 	movhi	r3,4097
1000ffbc:	18cc4a04 	addi	r3,r3,12584
1000ffc0:	1909883a 	add	r4,r3,r4
1000ffc4:	20c00003 	ldbu	r3,0(r4)
1000ffc8:	10c5c83a 	sub	r2,r2,r3
1000ffcc:	f800283a 	ret
1000ffd0:	00800604 	movi	r2,24
1000ffd4:	00c00204 	movi	r3,8
1000ffd8:	003ff606 	br	1000ffb4 <__alt_data_end+0xf800ffb4>
1000ffdc:	00800404 	movi	r2,16
1000ffe0:	1007883a 	mov	r3,r2
1000ffe4:	003ff306 	br	1000ffb4 <__alt_data_end+0xf800ffb4>

1000ffe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ffe8:	defffe04 	addi	sp,sp,-8
1000ffec:	dfc00115 	stw	ra,4(sp)
1000fff0:	df000015 	stw	fp,0(sp)
1000fff4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fff8:	d0a01417 	ldw	r2,-32688(gp)
1000fffc:	10000326 	beq	r2,zero,1001000c <alt_get_errno+0x24>
10010000:	d0a01417 	ldw	r2,-32688(gp)
10010004:	103ee83a 	callr	r2
10010008:	00000106 	br	10010010 <alt_get_errno+0x28>
1001000c:	d0a6ee04 	addi	r2,gp,-25672
}
10010010:	e037883a 	mov	sp,fp
10010014:	dfc00117 	ldw	ra,4(sp)
10010018:	df000017 	ldw	fp,0(sp)
1001001c:	dec00204 	addi	sp,sp,8
10010020:	f800283a 	ret

10010024 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10010024:	defffb04 	addi	sp,sp,-20
10010028:	dfc00415 	stw	ra,16(sp)
1001002c:	df000315 	stw	fp,12(sp)
10010030:	df000304 	addi	fp,sp,12
10010034:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10010038:	e0bfff17 	ldw	r2,-4(fp)
1001003c:	10000816 	blt	r2,zero,10010060 <close+0x3c>
10010040:	01400304 	movi	r5,12
10010044:	e13fff17 	ldw	r4,-4(fp)
10010048:	000d71c0 	call	1000d71c <__mulsi3>
1001004c:	1007883a 	mov	r3,r2
10010050:	00840074 	movhi	r2,4097
10010054:	108eca04 	addi	r2,r2,15144
10010058:	1885883a 	add	r2,r3,r2
1001005c:	00000106 	br	10010064 <close+0x40>
10010060:	0005883a 	mov	r2,zero
10010064:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10010068:	e0bffd17 	ldw	r2,-12(fp)
1001006c:	10001926 	beq	r2,zero,100100d4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10010070:	e0bffd17 	ldw	r2,-12(fp)
10010074:	10800017 	ldw	r2,0(r2)
10010078:	10800417 	ldw	r2,16(r2)
1001007c:	10000626 	beq	r2,zero,10010098 <close+0x74>
10010080:	e0bffd17 	ldw	r2,-12(fp)
10010084:	10800017 	ldw	r2,0(r2)
10010088:	10800417 	ldw	r2,16(r2)
1001008c:	e13ffd17 	ldw	r4,-12(fp)
10010090:	103ee83a 	callr	r2
10010094:	00000106 	br	1001009c <close+0x78>
10010098:	0005883a 	mov	r2,zero
1001009c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100100a0:	e13fff17 	ldw	r4,-4(fp)
100100a4:	001070c0 	call	1001070c <alt_release_fd>
    if (rval < 0)
100100a8:	e0bffe17 	ldw	r2,-8(fp)
100100ac:	1000070e 	bge	r2,zero,100100cc <close+0xa8>
    {
      ALT_ERRNO = -rval;
100100b0:	000ffe80 	call	1000ffe8 <alt_get_errno>
100100b4:	1007883a 	mov	r3,r2
100100b8:	e0bffe17 	ldw	r2,-8(fp)
100100bc:	0085c83a 	sub	r2,zero,r2
100100c0:	18800015 	stw	r2,0(r3)
      return -1;
100100c4:	00bfffc4 	movi	r2,-1
100100c8:	00000706 	br	100100e8 <close+0xc4>
    }
    return 0;
100100cc:	0005883a 	mov	r2,zero
100100d0:	00000506 	br	100100e8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100100d4:	000ffe80 	call	1000ffe8 <alt_get_errno>
100100d8:	1007883a 	mov	r3,r2
100100dc:	00801444 	movi	r2,81
100100e0:	18800015 	stw	r2,0(r3)
    return -1;
100100e4:	00bfffc4 	movi	r2,-1
  }
}
100100e8:	e037883a 	mov	sp,fp
100100ec:	dfc00117 	ldw	ra,4(sp)
100100f0:	df000017 	ldw	fp,0(sp)
100100f4:	dec00204 	addi	sp,sp,8
100100f8:	f800283a 	ret

100100fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100100fc:	defffc04 	addi	sp,sp,-16
10010100:	df000315 	stw	fp,12(sp)
10010104:	df000304 	addi	fp,sp,12
10010108:	e13ffd15 	stw	r4,-12(fp)
1001010c:	e17ffe15 	stw	r5,-8(fp)
10010110:	e1bfff15 	stw	r6,-4(fp)
  return len;
10010114:	e0bfff17 	ldw	r2,-4(fp)
}
10010118:	e037883a 	mov	sp,fp
1001011c:	df000017 	ldw	fp,0(sp)
10010120:	dec00104 	addi	sp,sp,4
10010124:	f800283a 	ret

10010128 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010128:	defffe04 	addi	sp,sp,-8
1001012c:	dfc00115 	stw	ra,4(sp)
10010130:	df000015 	stw	fp,0(sp)
10010134:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010138:	d0a01417 	ldw	r2,-32688(gp)
1001013c:	10000326 	beq	r2,zero,1001014c <alt_get_errno+0x24>
10010140:	d0a01417 	ldw	r2,-32688(gp)
10010144:	103ee83a 	callr	r2
10010148:	00000106 	br	10010150 <alt_get_errno+0x28>
1001014c:	d0a6ee04 	addi	r2,gp,-25672
}
10010150:	e037883a 	mov	sp,fp
10010154:	dfc00117 	ldw	ra,4(sp)
10010158:	df000017 	ldw	fp,0(sp)
1001015c:	dec00204 	addi	sp,sp,8
10010160:	f800283a 	ret

10010164 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10010164:	defffb04 	addi	sp,sp,-20
10010168:	dfc00415 	stw	ra,16(sp)
1001016c:	df000315 	stw	fp,12(sp)
10010170:	df000304 	addi	fp,sp,12
10010174:	e13ffe15 	stw	r4,-8(fp)
10010178:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001017c:	e0bffe17 	ldw	r2,-8(fp)
10010180:	10000816 	blt	r2,zero,100101a4 <fstat+0x40>
10010184:	01400304 	movi	r5,12
10010188:	e13ffe17 	ldw	r4,-8(fp)
1001018c:	000d71c0 	call	1000d71c <__mulsi3>
10010190:	1007883a 	mov	r3,r2
10010194:	00840074 	movhi	r2,4097
10010198:	108eca04 	addi	r2,r2,15144
1001019c:	1885883a 	add	r2,r3,r2
100101a0:	00000106 	br	100101a8 <fstat+0x44>
100101a4:	0005883a 	mov	r2,zero
100101a8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
100101ac:	e0bffd17 	ldw	r2,-12(fp)
100101b0:	10001026 	beq	r2,zero,100101f4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
100101b4:	e0bffd17 	ldw	r2,-12(fp)
100101b8:	10800017 	ldw	r2,0(r2)
100101bc:	10800817 	ldw	r2,32(r2)
100101c0:	10000726 	beq	r2,zero,100101e0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
100101c4:	e0bffd17 	ldw	r2,-12(fp)
100101c8:	10800017 	ldw	r2,0(r2)
100101cc:	10800817 	ldw	r2,32(r2)
100101d0:	e17fff17 	ldw	r5,-4(fp)
100101d4:	e13ffd17 	ldw	r4,-12(fp)
100101d8:	103ee83a 	callr	r2
100101dc:	00000a06 	br	10010208 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
100101e0:	e0bfff17 	ldw	r2,-4(fp)
100101e4:	00c80004 	movi	r3,8192
100101e8:	10c00115 	stw	r3,4(r2)
      return 0;
100101ec:	0005883a 	mov	r2,zero
100101f0:	00000506 	br	10010208 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100101f4:	00101280 	call	10010128 <alt_get_errno>
100101f8:	1007883a 	mov	r3,r2
100101fc:	00801444 	movi	r2,81
10010200:	18800015 	stw	r2,0(r3)
    return -1;
10010204:	00bfffc4 	movi	r2,-1
  }
}
10010208:	e037883a 	mov	sp,fp
1001020c:	dfc00117 	ldw	ra,4(sp)
10010210:	df000017 	ldw	fp,0(sp)
10010214:	dec00204 	addi	sp,sp,8
10010218:	f800283a 	ret

1001021c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001021c:	defffe04 	addi	sp,sp,-8
10010220:	dfc00115 	stw	ra,4(sp)
10010224:	df000015 	stw	fp,0(sp)
10010228:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001022c:	d0a01417 	ldw	r2,-32688(gp)
10010230:	10000326 	beq	r2,zero,10010240 <alt_get_errno+0x24>
10010234:	d0a01417 	ldw	r2,-32688(gp)
10010238:	103ee83a 	callr	r2
1001023c:	00000106 	br	10010244 <alt_get_errno+0x28>
10010240:	d0a6ee04 	addi	r2,gp,-25672
}
10010244:	e037883a 	mov	sp,fp
10010248:	dfc00117 	ldw	ra,4(sp)
1001024c:	df000017 	ldw	fp,0(sp)
10010250:	dec00204 	addi	sp,sp,8
10010254:	f800283a 	ret

10010258 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10010258:	deffed04 	addi	sp,sp,-76
1001025c:	dfc01215 	stw	ra,72(sp)
10010260:	df001115 	stw	fp,68(sp)
10010264:	df001104 	addi	fp,sp,68
10010268:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001026c:	e0bfff17 	ldw	r2,-4(fp)
10010270:	10000816 	blt	r2,zero,10010294 <isatty+0x3c>
10010274:	01400304 	movi	r5,12
10010278:	e13fff17 	ldw	r4,-4(fp)
1001027c:	000d71c0 	call	1000d71c <__mulsi3>
10010280:	1007883a 	mov	r3,r2
10010284:	00840074 	movhi	r2,4097
10010288:	108eca04 	addi	r2,r2,15144
1001028c:	1885883a 	add	r2,r3,r2
10010290:	00000106 	br	10010298 <isatty+0x40>
10010294:	0005883a 	mov	r2,zero
10010298:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1001029c:	e0bfef17 	ldw	r2,-68(fp)
100102a0:	10000e26 	beq	r2,zero,100102dc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100102a4:	e0bfef17 	ldw	r2,-68(fp)
100102a8:	10800017 	ldw	r2,0(r2)
100102ac:	10800817 	ldw	r2,32(r2)
100102b0:	1000021e 	bne	r2,zero,100102bc <isatty+0x64>
    {
      return 1;
100102b4:	00800044 	movi	r2,1
100102b8:	00000d06 	br	100102f0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100102bc:	e0bff004 	addi	r2,fp,-64
100102c0:	100b883a 	mov	r5,r2
100102c4:	e13fff17 	ldw	r4,-4(fp)
100102c8:	00101640 	call	10010164 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100102cc:	e0bff117 	ldw	r2,-60(fp)
100102d0:	10880020 	cmpeqi	r2,r2,8192
100102d4:	10803fcc 	andi	r2,r2,255
100102d8:	00000506 	br	100102f0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100102dc:	001021c0 	call	1001021c <alt_get_errno>
100102e0:	1007883a 	mov	r3,r2
100102e4:	00801444 	movi	r2,81
100102e8:	18800015 	stw	r2,0(r3)
    return 0;
100102ec:	0005883a 	mov	r2,zero
  }
}
100102f0:	e037883a 	mov	sp,fp
100102f4:	dfc00117 	ldw	ra,4(sp)
100102f8:	df000017 	ldw	fp,0(sp)
100102fc:	dec00204 	addi	sp,sp,8
10010300:	f800283a 	ret

10010304 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10010304:	defffc04 	addi	sp,sp,-16
10010308:	df000315 	stw	fp,12(sp)
1001030c:	df000304 	addi	fp,sp,12
10010310:	e13ffd15 	stw	r4,-12(fp)
10010314:	e17ffe15 	stw	r5,-8(fp)
10010318:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1001031c:	e0fffe17 	ldw	r3,-8(fp)
10010320:	e0bffd17 	ldw	r2,-12(fp)
10010324:	18800c26 	beq	r3,r2,10010358 <alt_load_section+0x54>
  {
    while( to != end )
10010328:	00000806 	br	1001034c <alt_load_section+0x48>
    {
      *to++ = *from++;
1001032c:	e0bffe17 	ldw	r2,-8(fp)
10010330:	10c00104 	addi	r3,r2,4
10010334:	e0fffe15 	stw	r3,-8(fp)
10010338:	e0fffd17 	ldw	r3,-12(fp)
1001033c:	19000104 	addi	r4,r3,4
10010340:	e13ffd15 	stw	r4,-12(fp)
10010344:	18c00017 	ldw	r3,0(r3)
10010348:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1001034c:	e0fffe17 	ldw	r3,-8(fp)
10010350:	e0bfff17 	ldw	r2,-4(fp)
10010354:	18bff51e 	bne	r3,r2,1001032c <__alt_data_end+0xf801032c>
    {
      *to++ = *from++;
    }
  }
}
10010358:	0001883a 	nop
1001035c:	e037883a 	mov	sp,fp
10010360:	df000017 	ldw	fp,0(sp)
10010364:	dec00104 	addi	sp,sp,4
10010368:	f800283a 	ret

1001036c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1001036c:	defffe04 	addi	sp,sp,-8
10010370:	dfc00115 	stw	ra,4(sp)
10010374:	df000015 	stw	fp,0(sp)
10010378:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1001037c:	01840074 	movhi	r6,4097
10010380:	31935b04 	addi	r6,r6,19820
10010384:	01440074 	movhi	r5,4097
10010388:	294c9704 	addi	r5,r5,12892
1001038c:	01040074 	movhi	r4,4097
10010390:	21135b04 	addi	r4,r4,19820
10010394:	00103040 	call	10010304 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10010398:	01840034 	movhi	r6,4096
1001039c:	31808c04 	addi	r6,r6,560
100103a0:	01440034 	movhi	r5,4096
100103a4:	29400804 	addi	r5,r5,32
100103a8:	01040034 	movhi	r4,4096
100103ac:	21000804 	addi	r4,r4,32
100103b0:	00103040 	call	10010304 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100103b4:	01840074 	movhi	r6,4097
100103b8:	318c9704 	addi	r6,r6,12892
100103bc:	01440074 	movhi	r5,4097
100103c0:	294a0204 	addi	r5,r5,10248
100103c4:	01040074 	movhi	r4,4097
100103c8:	210a0204 	addi	r4,r4,10248
100103cc:	00103040 	call	10010304 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100103d0:	00117500 	call	10011750 <alt_dcache_flush_all>
  alt_icache_flush_all();
100103d4:	00119100 	call	10011910 <alt_icache_flush_all>
}
100103d8:	0001883a 	nop
100103dc:	e037883a 	mov	sp,fp
100103e0:	dfc00117 	ldw	ra,4(sp)
100103e4:	df000017 	ldw	fp,0(sp)
100103e8:	dec00204 	addi	sp,sp,8
100103ec:	f800283a 	ret

100103f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100103f0:	defffe04 	addi	sp,sp,-8
100103f4:	dfc00115 	stw	ra,4(sp)
100103f8:	df000015 	stw	fp,0(sp)
100103fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010400:	d0a01417 	ldw	r2,-32688(gp)
10010404:	10000326 	beq	r2,zero,10010414 <alt_get_errno+0x24>
10010408:	d0a01417 	ldw	r2,-32688(gp)
1001040c:	103ee83a 	callr	r2
10010410:	00000106 	br	10010418 <alt_get_errno+0x28>
10010414:	d0a6ee04 	addi	r2,gp,-25672
}
10010418:	e037883a 	mov	sp,fp
1001041c:	dfc00117 	ldw	ra,4(sp)
10010420:	df000017 	ldw	fp,0(sp)
10010424:	dec00204 	addi	sp,sp,8
10010428:	f800283a 	ret

1001042c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1001042c:	defff904 	addi	sp,sp,-28
10010430:	dfc00615 	stw	ra,24(sp)
10010434:	df000515 	stw	fp,20(sp)
10010438:	df000504 	addi	fp,sp,20
1001043c:	e13ffd15 	stw	r4,-12(fp)
10010440:	e17ffe15 	stw	r5,-8(fp)
10010444:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10010448:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001044c:	e0bffd17 	ldw	r2,-12(fp)
10010450:	10000816 	blt	r2,zero,10010474 <lseek+0x48>
10010454:	01400304 	movi	r5,12
10010458:	e13ffd17 	ldw	r4,-12(fp)
1001045c:	000d71c0 	call	1000d71c <__mulsi3>
10010460:	1007883a 	mov	r3,r2
10010464:	00840074 	movhi	r2,4097
10010468:	108eca04 	addi	r2,r2,15144
1001046c:	1885883a 	add	r2,r3,r2
10010470:	00000106 	br	10010478 <lseek+0x4c>
10010474:	0005883a 	mov	r2,zero
10010478:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1001047c:	e0bffc17 	ldw	r2,-16(fp)
10010480:	10001026 	beq	r2,zero,100104c4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10010484:	e0bffc17 	ldw	r2,-16(fp)
10010488:	10800017 	ldw	r2,0(r2)
1001048c:	10800717 	ldw	r2,28(r2)
10010490:	10000926 	beq	r2,zero,100104b8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10010494:	e0bffc17 	ldw	r2,-16(fp)
10010498:	10800017 	ldw	r2,0(r2)
1001049c:	10800717 	ldw	r2,28(r2)
100104a0:	e1bfff17 	ldw	r6,-4(fp)
100104a4:	e17ffe17 	ldw	r5,-8(fp)
100104a8:	e13ffc17 	ldw	r4,-16(fp)
100104ac:	103ee83a 	callr	r2
100104b0:	e0bffb15 	stw	r2,-20(fp)
100104b4:	00000506 	br	100104cc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100104b8:	00bfde84 	movi	r2,-134
100104bc:	e0bffb15 	stw	r2,-20(fp)
100104c0:	00000206 	br	100104cc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100104c4:	00bfebc4 	movi	r2,-81
100104c8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100104cc:	e0bffb17 	ldw	r2,-20(fp)
100104d0:	1000070e 	bge	r2,zero,100104f0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
100104d4:	00103f00 	call	100103f0 <alt_get_errno>
100104d8:	1007883a 	mov	r3,r2
100104dc:	e0bffb17 	ldw	r2,-20(fp)
100104e0:	0085c83a 	sub	r2,zero,r2
100104e4:	18800015 	stw	r2,0(r3)
    rc = -1;
100104e8:	00bfffc4 	movi	r2,-1
100104ec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100104f0:	e0bffb17 	ldw	r2,-20(fp)
}
100104f4:	e037883a 	mov	sp,fp
100104f8:	dfc00117 	ldw	ra,4(sp)
100104fc:	df000017 	ldw	fp,0(sp)
10010500:	dec00204 	addi	sp,sp,8
10010504:	f800283a 	ret

10010508 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10010508:	defffd04 	addi	sp,sp,-12
1001050c:	dfc00215 	stw	ra,8(sp)
10010510:	df000115 	stw	fp,4(sp)
10010514:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10010518:	0009883a 	mov	r4,zero
1001051c:	00109e00 	call	100109e0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10010520:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10010524:	0010a180 	call	10010a18 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10010528:	01840074 	movhi	r6,4097
1001052c:	318c8d04 	addi	r6,r6,12852
10010530:	01440074 	movhi	r5,4097
10010534:	294c8d04 	addi	r5,r5,12852
10010538:	01040074 	movhi	r4,4097
1001053c:	210c8d04 	addi	r4,r4,12852
10010540:	0011cb40 	call	10011cb4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10010544:	00118500 	call	10011850 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10010548:	01040074 	movhi	r4,4097
1001054c:	21062c04 	addi	r4,r4,6320
10010550:	00124740 	call	10012474 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10010554:	d0a6ef17 	ldw	r2,-25668(gp)
10010558:	d0e6f017 	ldw	r3,-25664(gp)
1001055c:	d126f117 	ldw	r4,-25660(gp)
10010560:	200d883a 	mov	r6,r4
10010564:	180b883a 	mov	r5,r3
10010568:	1009883a 	mov	r4,r2
1001056c:	000045c0 	call	1000045c <main>
10010570:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10010574:	01000044 	movi	r4,1
10010578:	00100240 	call	10010024 <close>
  exit (result);
1001057c:	e13fff17 	ldw	r4,-4(fp)
10010580:	00124880 	call	10012488 <exit>

10010584 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10010584:	defffe04 	addi	sp,sp,-8
10010588:	df000115 	stw	fp,4(sp)
1001058c:	df000104 	addi	fp,sp,4
10010590:	e13fff15 	stw	r4,-4(fp)
}
10010594:	0001883a 	nop
10010598:	e037883a 	mov	sp,fp
1001059c:	df000017 	ldw	fp,0(sp)
100105a0:	dec00104 	addi	sp,sp,4
100105a4:	f800283a 	ret

100105a8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100105a8:	defffe04 	addi	sp,sp,-8
100105ac:	df000115 	stw	fp,4(sp)
100105b0:	df000104 	addi	fp,sp,4
100105b4:	e13fff15 	stw	r4,-4(fp)
}
100105b8:	0001883a 	nop
100105bc:	e037883a 	mov	sp,fp
100105c0:	df000017 	ldw	fp,0(sp)
100105c4:	dec00104 	addi	sp,sp,4
100105c8:	f800283a 	ret

100105cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100105cc:	defffe04 	addi	sp,sp,-8
100105d0:	dfc00115 	stw	ra,4(sp)
100105d4:	df000015 	stw	fp,0(sp)
100105d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100105dc:	d0a01417 	ldw	r2,-32688(gp)
100105e0:	10000326 	beq	r2,zero,100105f0 <alt_get_errno+0x24>
100105e4:	d0a01417 	ldw	r2,-32688(gp)
100105e8:	103ee83a 	callr	r2
100105ec:	00000106 	br	100105f4 <alt_get_errno+0x28>
100105f0:	d0a6ee04 	addi	r2,gp,-25672
}
100105f4:	e037883a 	mov	sp,fp
100105f8:	dfc00117 	ldw	ra,4(sp)
100105fc:	df000017 	ldw	fp,0(sp)
10010600:	dec00204 	addi	sp,sp,8
10010604:	f800283a 	ret

10010608 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10010608:	defff904 	addi	sp,sp,-28
1001060c:	dfc00615 	stw	ra,24(sp)
10010610:	df000515 	stw	fp,20(sp)
10010614:	df000504 	addi	fp,sp,20
10010618:	e13ffd15 	stw	r4,-12(fp)
1001061c:	e17ffe15 	stw	r5,-8(fp)
10010620:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010624:	e0bffd17 	ldw	r2,-12(fp)
10010628:	10000816 	blt	r2,zero,1001064c <read+0x44>
1001062c:	01400304 	movi	r5,12
10010630:	e13ffd17 	ldw	r4,-12(fp)
10010634:	000d71c0 	call	1000d71c <__mulsi3>
10010638:	1007883a 	mov	r3,r2
1001063c:	00840074 	movhi	r2,4097
10010640:	108eca04 	addi	r2,r2,15144
10010644:	1885883a 	add	r2,r3,r2
10010648:	00000106 	br	10010650 <read+0x48>
1001064c:	0005883a 	mov	r2,zero
10010650:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010654:	e0bffb17 	ldw	r2,-20(fp)
10010658:	10002226 	beq	r2,zero,100106e4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001065c:	e0bffb17 	ldw	r2,-20(fp)
10010660:	10800217 	ldw	r2,8(r2)
10010664:	108000cc 	andi	r2,r2,3
10010668:	10800060 	cmpeqi	r2,r2,1
1001066c:	1000181e 	bne	r2,zero,100106d0 <read+0xc8>
        (fd->dev->read))
10010670:	e0bffb17 	ldw	r2,-20(fp)
10010674:	10800017 	ldw	r2,0(r2)
10010678:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001067c:	10001426 	beq	r2,zero,100106d0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10010680:	e0bffb17 	ldw	r2,-20(fp)
10010684:	10800017 	ldw	r2,0(r2)
10010688:	10800517 	ldw	r2,20(r2)
1001068c:	e0ffff17 	ldw	r3,-4(fp)
10010690:	180d883a 	mov	r6,r3
10010694:	e17ffe17 	ldw	r5,-8(fp)
10010698:	e13ffb17 	ldw	r4,-20(fp)
1001069c:	103ee83a 	callr	r2
100106a0:	e0bffc15 	stw	r2,-16(fp)
100106a4:	e0bffc17 	ldw	r2,-16(fp)
100106a8:	1000070e 	bge	r2,zero,100106c8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100106ac:	00105cc0 	call	100105cc <alt_get_errno>
100106b0:	1007883a 	mov	r3,r2
100106b4:	e0bffc17 	ldw	r2,-16(fp)
100106b8:	0085c83a 	sub	r2,zero,r2
100106bc:	18800015 	stw	r2,0(r3)
          return -1;
100106c0:	00bfffc4 	movi	r2,-1
100106c4:	00000c06 	br	100106f8 <read+0xf0>
        }
        return rval;
100106c8:	e0bffc17 	ldw	r2,-16(fp)
100106cc:	00000a06 	br	100106f8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
100106d0:	00105cc0 	call	100105cc <alt_get_errno>
100106d4:	1007883a 	mov	r3,r2
100106d8:	00800344 	movi	r2,13
100106dc:	18800015 	stw	r2,0(r3)
100106e0:	00000406 	br	100106f4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
100106e4:	00105cc0 	call	100105cc <alt_get_errno>
100106e8:	1007883a 	mov	r3,r2
100106ec:	00801444 	movi	r2,81
100106f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
100106f4:	00bfffc4 	movi	r2,-1
}
100106f8:	e037883a 	mov	sp,fp
100106fc:	dfc00117 	ldw	ra,4(sp)
10010700:	df000017 	ldw	fp,0(sp)
10010704:	dec00204 	addi	sp,sp,8
10010708:	f800283a 	ret

1001070c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1001070c:	defffc04 	addi	sp,sp,-16
10010710:	dfc00315 	stw	ra,12(sp)
10010714:	df000215 	stw	fp,8(sp)
10010718:	dc000115 	stw	r16,4(sp)
1001071c:	df000204 	addi	fp,sp,8
10010720:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10010724:	e0bffe17 	ldw	r2,-8(fp)
10010728:	108000d0 	cmplti	r2,r2,3
1001072c:	1000111e 	bne	r2,zero,10010774 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10010730:	04040074 	movhi	r16,4097
10010734:	840eca04 	addi	r16,r16,15144
10010738:	e0bffe17 	ldw	r2,-8(fp)
1001073c:	01400304 	movi	r5,12
10010740:	1009883a 	mov	r4,r2
10010744:	000d71c0 	call	1000d71c <__mulsi3>
10010748:	8085883a 	add	r2,r16,r2
1001074c:	10800204 	addi	r2,r2,8
10010750:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10010754:	04040074 	movhi	r16,4097
10010758:	840eca04 	addi	r16,r16,15144
1001075c:	e0bffe17 	ldw	r2,-8(fp)
10010760:	01400304 	movi	r5,12
10010764:	1009883a 	mov	r4,r2
10010768:	000d71c0 	call	1000d71c <__mulsi3>
1001076c:	8085883a 	add	r2,r16,r2
10010770:	10000015 	stw	zero,0(r2)
  }
}
10010774:	0001883a 	nop
10010778:	e6ffff04 	addi	sp,fp,-4
1001077c:	dfc00217 	ldw	ra,8(sp)
10010780:	df000117 	ldw	fp,4(sp)
10010784:	dc000017 	ldw	r16,0(sp)
10010788:	dec00304 	addi	sp,sp,12
1001078c:	f800283a 	ret

10010790 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10010790:	defff904 	addi	sp,sp,-28
10010794:	df000615 	stw	fp,24(sp)
10010798:	df000604 	addi	fp,sp,24
1001079c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100107a0:	0005303a 	rdctl	r2,status
100107a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100107a8:	e0fffe17 	ldw	r3,-8(fp)
100107ac:	00bfff84 	movi	r2,-2
100107b0:	1884703a 	and	r2,r3,r2
100107b4:	1001703a 	wrctl	status,r2
  
  return context;
100107b8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100107bc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100107c0:	d0a01517 	ldw	r2,-32684(gp)
100107c4:	10c000c4 	addi	r3,r2,3
100107c8:	00bfff04 	movi	r2,-4
100107cc:	1884703a 	and	r2,r3,r2
100107d0:	d0a01515 	stw	r2,-32684(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100107d4:	d0e01517 	ldw	r3,-32684(gp)
100107d8:	e0bfff17 	ldw	r2,-4(fp)
100107dc:	1887883a 	add	r3,r3,r2
100107e0:	00860034 	movhi	r2,6144
100107e4:	10800004 	addi	r2,r2,0
100107e8:	10c0062e 	bgeu	r2,r3,10010804 <sbrk+0x74>
100107ec:	e0bffb17 	ldw	r2,-20(fp)
100107f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100107f4:	e0bffa17 	ldw	r2,-24(fp)
100107f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
100107fc:	00bfffc4 	movi	r2,-1
10010800:	00000b06 	br	10010830 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010804:	d0a01517 	ldw	r2,-32684(gp)
10010808:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1001080c:	d0e01517 	ldw	r3,-32684(gp)
10010810:	e0bfff17 	ldw	r2,-4(fp)
10010814:	1885883a 	add	r2,r3,r2
10010818:	d0a01515 	stw	r2,-32684(gp)
1001081c:	e0bffb17 	ldw	r2,-20(fp)
10010820:	e0bffc15 	stw	r2,-16(fp)
10010824:	e0bffc17 	ldw	r2,-16(fp)
10010828:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1001082c:	e0bffd17 	ldw	r2,-12(fp)
} 
10010830:	e037883a 	mov	sp,fp
10010834:	df000017 	ldw	fp,0(sp)
10010838:	dec00104 	addi	sp,sp,4
1001083c:	f800283a 	ret

10010840 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10010840:	defffd04 	addi	sp,sp,-12
10010844:	dfc00215 	stw	ra,8(sp)
10010848:	df000115 	stw	fp,4(sp)
1001084c:	df000104 	addi	fp,sp,4
10010850:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10010854:	e13fff17 	ldw	r4,-4(fp)
10010858:	00115f80 	call	100115f8 <alt_busy_sleep>
}
1001085c:	e037883a 	mov	sp,fp
10010860:	dfc00117 	ldw	ra,4(sp)
10010864:	df000017 	ldw	fp,0(sp)
10010868:	dec00204 	addi	sp,sp,8
1001086c:	f800283a 	ret

10010870 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010870:	defffe04 	addi	sp,sp,-8
10010874:	dfc00115 	stw	ra,4(sp)
10010878:	df000015 	stw	fp,0(sp)
1001087c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010880:	d0a01417 	ldw	r2,-32688(gp)
10010884:	10000326 	beq	r2,zero,10010894 <alt_get_errno+0x24>
10010888:	d0a01417 	ldw	r2,-32688(gp)
1001088c:	103ee83a 	callr	r2
10010890:	00000106 	br	10010898 <alt_get_errno+0x28>
10010894:	d0a6ee04 	addi	r2,gp,-25672
}
10010898:	e037883a 	mov	sp,fp
1001089c:	dfc00117 	ldw	ra,4(sp)
100108a0:	df000017 	ldw	fp,0(sp)
100108a4:	dec00204 	addi	sp,sp,8
100108a8:	f800283a 	ret

100108ac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100108ac:	defff904 	addi	sp,sp,-28
100108b0:	dfc00615 	stw	ra,24(sp)
100108b4:	df000515 	stw	fp,20(sp)
100108b8:	df000504 	addi	fp,sp,20
100108bc:	e13ffd15 	stw	r4,-12(fp)
100108c0:	e17ffe15 	stw	r5,-8(fp)
100108c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100108c8:	e0bffd17 	ldw	r2,-12(fp)
100108cc:	10000816 	blt	r2,zero,100108f0 <write+0x44>
100108d0:	01400304 	movi	r5,12
100108d4:	e13ffd17 	ldw	r4,-12(fp)
100108d8:	000d71c0 	call	1000d71c <__mulsi3>
100108dc:	1007883a 	mov	r3,r2
100108e0:	00840074 	movhi	r2,4097
100108e4:	108eca04 	addi	r2,r2,15144
100108e8:	1885883a 	add	r2,r3,r2
100108ec:	00000106 	br	100108f4 <write+0x48>
100108f0:	0005883a 	mov	r2,zero
100108f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100108f8:	e0bffb17 	ldw	r2,-20(fp)
100108fc:	10002126 	beq	r2,zero,10010984 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010900:	e0bffb17 	ldw	r2,-20(fp)
10010904:	10800217 	ldw	r2,8(r2)
10010908:	108000cc 	andi	r2,r2,3
1001090c:	10001826 	beq	r2,zero,10010970 <write+0xc4>
10010910:	e0bffb17 	ldw	r2,-20(fp)
10010914:	10800017 	ldw	r2,0(r2)
10010918:	10800617 	ldw	r2,24(r2)
1001091c:	10001426 	beq	r2,zero,10010970 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010920:	e0bffb17 	ldw	r2,-20(fp)
10010924:	10800017 	ldw	r2,0(r2)
10010928:	10800617 	ldw	r2,24(r2)
1001092c:	e0ffff17 	ldw	r3,-4(fp)
10010930:	180d883a 	mov	r6,r3
10010934:	e17ffe17 	ldw	r5,-8(fp)
10010938:	e13ffb17 	ldw	r4,-20(fp)
1001093c:	103ee83a 	callr	r2
10010940:	e0bffc15 	stw	r2,-16(fp)
10010944:	e0bffc17 	ldw	r2,-16(fp)
10010948:	1000070e 	bge	r2,zero,10010968 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1001094c:	00108700 	call	10010870 <alt_get_errno>
10010950:	1007883a 	mov	r3,r2
10010954:	e0bffc17 	ldw	r2,-16(fp)
10010958:	0085c83a 	sub	r2,zero,r2
1001095c:	18800015 	stw	r2,0(r3)
        return -1;
10010960:	00bfffc4 	movi	r2,-1
10010964:	00000c06 	br	10010998 <write+0xec>
      }
      return rval;
10010968:	e0bffc17 	ldw	r2,-16(fp)
1001096c:	00000a06 	br	10010998 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10010970:	00108700 	call	10010870 <alt_get_errno>
10010974:	1007883a 	mov	r3,r2
10010978:	00800344 	movi	r2,13
1001097c:	18800015 	stw	r2,0(r3)
10010980:	00000406 	br	10010994 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10010984:	00108700 	call	10010870 <alt_get_errno>
10010988:	1007883a 	mov	r3,r2
1001098c:	00801444 	movi	r2,81
10010990:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010994:	00bfffc4 	movi	r2,-1
}
10010998:	e037883a 	mov	sp,fp
1001099c:	dfc00117 	ldw	ra,4(sp)
100109a0:	df000017 	ldw	fp,0(sp)
100109a4:	dec00204 	addi	sp,sp,8
100109a8:	f800283a 	ret

100109ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
100109ac:	defffd04 	addi	sp,sp,-12
100109b0:	dfc00215 	stw	ra,8(sp)
100109b4:	df000115 	stw	fp,4(sp)
100109b8:	df000104 	addi	fp,sp,4
100109bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100109c0:	d1601104 	addi	r5,gp,-32700
100109c4:	e13fff17 	ldw	r4,-4(fp)
100109c8:	00117ac0 	call	100117ac <alt_dev_llist_insert>
}
100109cc:	e037883a 	mov	sp,fp
100109d0:	dfc00117 	ldw	ra,4(sp)
100109d4:	df000017 	ldw	fp,0(sp)
100109d8:	dec00204 	addi	sp,sp,8
100109dc:	f800283a 	ret

100109e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100109e0:	defffd04 	addi	sp,sp,-12
100109e4:	dfc00215 	stw	ra,8(sp)
100109e8:	df000115 	stw	fp,4(sp)
100109ec:	df000104 	addi	fp,sp,4
100109f0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
100109f4:	00121580 	call	10012158 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100109f8:	00800044 	movi	r2,1
100109fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010a00:	0001883a 	nop
10010a04:	e037883a 	mov	sp,fp
10010a08:	dfc00117 	ldw	ra,4(sp)
10010a0c:	df000017 	ldw	fp,0(sp)
10010a10:	dec00204 	addi	sp,sp,8
10010a14:	f800283a 	ret

10010a18 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010a18:	defffe04 	addi	sp,sp,-8
10010a1c:	dfc00115 	stw	ra,4(sp)
10010a20:	df000015 	stw	fp,0(sp)
10010a24:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010a28:	01800144 	movi	r6,5
10010a2c:	000b883a 	mov	r5,zero
10010a30:	01040074 	movhi	r4,4097
10010a34:	210f3404 	addi	r4,r4,15568
10010a38:	0010bc80 	call	10010bc8 <altera_avalon_jtag_uart_init>
10010a3c:	01040074 	movhi	r4,4097
10010a40:	210f2a04 	addi	r4,r4,15528
10010a44:	00109ac0 	call	100109ac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010a48:	0001883a 	nop
}
10010a4c:	0001883a 	nop
10010a50:	e037883a 	mov	sp,fp
10010a54:	dfc00117 	ldw	ra,4(sp)
10010a58:	df000017 	ldw	fp,0(sp)
10010a5c:	dec00204 	addi	sp,sp,8
10010a60:	f800283a 	ret

10010a64 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10010a64:	defffa04 	addi	sp,sp,-24
10010a68:	dfc00515 	stw	ra,20(sp)
10010a6c:	df000415 	stw	fp,16(sp)
10010a70:	df000404 	addi	fp,sp,16
10010a74:	e13ffd15 	stw	r4,-12(fp)
10010a78:	e17ffe15 	stw	r5,-8(fp)
10010a7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010a80:	e0bffd17 	ldw	r2,-12(fp)
10010a84:	10800017 	ldw	r2,0(r2)
10010a88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010a8c:	e0bffc17 	ldw	r2,-16(fp)
10010a90:	10c00a04 	addi	r3,r2,40
10010a94:	e0bffd17 	ldw	r2,-12(fp)
10010a98:	10800217 	ldw	r2,8(r2)
10010a9c:	100f883a 	mov	r7,r2
10010aa0:	e1bfff17 	ldw	r6,-4(fp)
10010aa4:	e17ffe17 	ldw	r5,-8(fp)
10010aa8:	1809883a 	mov	r4,r3
10010aac:	001108c0 	call	1001108c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010ab0:	e037883a 	mov	sp,fp
10010ab4:	dfc00117 	ldw	ra,4(sp)
10010ab8:	df000017 	ldw	fp,0(sp)
10010abc:	dec00204 	addi	sp,sp,8
10010ac0:	f800283a 	ret

10010ac4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10010ac4:	defffa04 	addi	sp,sp,-24
10010ac8:	dfc00515 	stw	ra,20(sp)
10010acc:	df000415 	stw	fp,16(sp)
10010ad0:	df000404 	addi	fp,sp,16
10010ad4:	e13ffd15 	stw	r4,-12(fp)
10010ad8:	e17ffe15 	stw	r5,-8(fp)
10010adc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010ae0:	e0bffd17 	ldw	r2,-12(fp)
10010ae4:	10800017 	ldw	r2,0(r2)
10010ae8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010aec:	e0bffc17 	ldw	r2,-16(fp)
10010af0:	10c00a04 	addi	r3,r2,40
10010af4:	e0bffd17 	ldw	r2,-12(fp)
10010af8:	10800217 	ldw	r2,8(r2)
10010afc:	100f883a 	mov	r7,r2
10010b00:	e1bfff17 	ldw	r6,-4(fp)
10010b04:	e17ffe17 	ldw	r5,-8(fp)
10010b08:	1809883a 	mov	r4,r3
10010b0c:	00112a80 	call	100112a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010b10:	e037883a 	mov	sp,fp
10010b14:	dfc00117 	ldw	ra,4(sp)
10010b18:	df000017 	ldw	fp,0(sp)
10010b1c:	dec00204 	addi	sp,sp,8
10010b20:	f800283a 	ret

10010b24 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010b24:	defffc04 	addi	sp,sp,-16
10010b28:	dfc00315 	stw	ra,12(sp)
10010b2c:	df000215 	stw	fp,8(sp)
10010b30:	df000204 	addi	fp,sp,8
10010b34:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010b38:	e0bfff17 	ldw	r2,-4(fp)
10010b3c:	10800017 	ldw	r2,0(r2)
10010b40:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10010b44:	e0bffe17 	ldw	r2,-8(fp)
10010b48:	10c00a04 	addi	r3,r2,40
10010b4c:	e0bfff17 	ldw	r2,-4(fp)
10010b50:	10800217 	ldw	r2,8(r2)
10010b54:	100b883a 	mov	r5,r2
10010b58:	1809883a 	mov	r4,r3
10010b5c:	0010f340 	call	10010f34 <altera_avalon_jtag_uart_close>
}
10010b60:	e037883a 	mov	sp,fp
10010b64:	dfc00117 	ldw	ra,4(sp)
10010b68:	df000017 	ldw	fp,0(sp)
10010b6c:	dec00204 	addi	sp,sp,8
10010b70:	f800283a 	ret

10010b74 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10010b74:	defffa04 	addi	sp,sp,-24
10010b78:	dfc00515 	stw	ra,20(sp)
10010b7c:	df000415 	stw	fp,16(sp)
10010b80:	df000404 	addi	fp,sp,16
10010b84:	e13ffd15 	stw	r4,-12(fp)
10010b88:	e17ffe15 	stw	r5,-8(fp)
10010b8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10010b90:	e0bffd17 	ldw	r2,-12(fp)
10010b94:	10800017 	ldw	r2,0(r2)
10010b98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10010b9c:	e0bffc17 	ldw	r2,-16(fp)
10010ba0:	10800a04 	addi	r2,r2,40
10010ba4:	e1bfff17 	ldw	r6,-4(fp)
10010ba8:	e17ffe17 	ldw	r5,-8(fp)
10010bac:	1009883a 	mov	r4,r2
10010bb0:	0010f9c0 	call	10010f9c <altera_avalon_jtag_uart_ioctl>
}
10010bb4:	e037883a 	mov	sp,fp
10010bb8:	dfc00117 	ldw	ra,4(sp)
10010bbc:	df000017 	ldw	fp,0(sp)
10010bc0:	dec00204 	addi	sp,sp,8
10010bc4:	f800283a 	ret

10010bc8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010bc8:	defffa04 	addi	sp,sp,-24
10010bcc:	dfc00515 	stw	ra,20(sp)
10010bd0:	df000415 	stw	fp,16(sp)
10010bd4:	df000404 	addi	fp,sp,16
10010bd8:	e13ffd15 	stw	r4,-12(fp)
10010bdc:	e17ffe15 	stw	r5,-8(fp)
10010be0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010be4:	e0bffd17 	ldw	r2,-12(fp)
10010be8:	00c00044 	movi	r3,1
10010bec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010bf0:	e0bffd17 	ldw	r2,-12(fp)
10010bf4:	10800017 	ldw	r2,0(r2)
10010bf8:	10800104 	addi	r2,r2,4
10010bfc:	1007883a 	mov	r3,r2
10010c00:	e0bffd17 	ldw	r2,-12(fp)
10010c04:	10800817 	ldw	r2,32(r2)
10010c08:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010c0c:	e0bffe17 	ldw	r2,-8(fp)
10010c10:	e0ffff17 	ldw	r3,-4(fp)
10010c14:	d8000015 	stw	zero,0(sp)
10010c18:	e1fffd17 	ldw	r7,-12(fp)
10010c1c:	01840074 	movhi	r6,4097
10010c20:	31832204 	addi	r6,r6,3208
10010c24:	180b883a 	mov	r5,r3
10010c28:	1009883a 	mov	r4,r2
10010c2c:	00119300 	call	10011930 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010c30:	e0bffd17 	ldw	r2,-12(fp)
10010c34:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010c38:	e0bffd17 	ldw	r2,-12(fp)
10010c3c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010c40:	d0e6f317 	ldw	r3,-25652(gp)
10010c44:	e1fffd17 	ldw	r7,-12(fp)
10010c48:	01840074 	movhi	r6,4097
10010c4c:	3183a504 	addi	r6,r6,3732
10010c50:	180b883a 	mov	r5,r3
10010c54:	1009883a 	mov	r4,r2
10010c58:	00114cc0 	call	100114cc <alt_alarm_start>
10010c5c:	1000040e 	bge	r2,zero,10010c70 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010c60:	e0fffd17 	ldw	r3,-12(fp)
10010c64:	00a00034 	movhi	r2,32768
10010c68:	10bfffc4 	addi	r2,r2,-1
10010c6c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010c70:	0001883a 	nop
10010c74:	e037883a 	mov	sp,fp
10010c78:	dfc00117 	ldw	ra,4(sp)
10010c7c:	df000017 	ldw	fp,0(sp)
10010c80:	dec00204 	addi	sp,sp,8
10010c84:	f800283a 	ret

10010c88 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010c88:	defff804 	addi	sp,sp,-32
10010c8c:	df000715 	stw	fp,28(sp)
10010c90:	df000704 	addi	fp,sp,28
10010c94:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010c98:	e0bfff17 	ldw	r2,-4(fp)
10010c9c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10010ca0:	e0bffb17 	ldw	r2,-20(fp)
10010ca4:	10800017 	ldw	r2,0(r2)
10010ca8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010cac:	e0bffc17 	ldw	r2,-16(fp)
10010cb0:	10800104 	addi	r2,r2,4
10010cb4:	10800037 	ldwio	r2,0(r2)
10010cb8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010cbc:	e0bffd17 	ldw	r2,-12(fp)
10010cc0:	1080c00c 	andi	r2,r2,768
10010cc4:	10006d26 	beq	r2,zero,10010e7c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010cc8:	e0bffd17 	ldw	r2,-12(fp)
10010ccc:	1080400c 	andi	r2,r2,256
10010cd0:	10003526 	beq	r2,zero,10010da8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10010cd4:	00800074 	movhi	r2,1
10010cd8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010cdc:	e0bffb17 	ldw	r2,-20(fp)
10010ce0:	10800a17 	ldw	r2,40(r2)
10010ce4:	10800044 	addi	r2,r2,1
10010ce8:	1081ffcc 	andi	r2,r2,2047
10010cec:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10010cf0:	e0bffb17 	ldw	r2,-20(fp)
10010cf4:	10c00b17 	ldw	r3,44(r2)
10010cf8:	e0bffe17 	ldw	r2,-8(fp)
10010cfc:	18801526 	beq	r3,r2,10010d54 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010d00:	e0bffc17 	ldw	r2,-16(fp)
10010d04:	10800037 	ldwio	r2,0(r2)
10010d08:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010d0c:	e0bff917 	ldw	r2,-28(fp)
10010d10:	10a0000c 	andi	r2,r2,32768
10010d14:	10001126 	beq	r2,zero,10010d5c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010d18:	e0bffb17 	ldw	r2,-20(fp)
10010d1c:	10800a17 	ldw	r2,40(r2)
10010d20:	e0fff917 	ldw	r3,-28(fp)
10010d24:	1809883a 	mov	r4,r3
10010d28:	e0fffb17 	ldw	r3,-20(fp)
10010d2c:	1885883a 	add	r2,r3,r2
10010d30:	10800e04 	addi	r2,r2,56
10010d34:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010d38:	e0bffb17 	ldw	r2,-20(fp)
10010d3c:	10800a17 	ldw	r2,40(r2)
10010d40:	10800044 	addi	r2,r2,1
10010d44:	10c1ffcc 	andi	r3,r2,2047
10010d48:	e0bffb17 	ldw	r2,-20(fp)
10010d4c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010d50:	003fe206 	br	10010cdc <__alt_data_end+0xf8010cdc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10010d54:	0001883a 	nop
10010d58:	00000106 	br	10010d60 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10010d5c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010d60:	e0bff917 	ldw	r2,-28(fp)
10010d64:	10bfffec 	andhi	r2,r2,65535
10010d68:	10000f26 	beq	r2,zero,10010da8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010d6c:	e0bffb17 	ldw	r2,-20(fp)
10010d70:	10c00817 	ldw	r3,32(r2)
10010d74:	00bfff84 	movi	r2,-2
10010d78:	1886703a 	and	r3,r3,r2
10010d7c:	e0bffb17 	ldw	r2,-20(fp)
10010d80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10010d84:	e0bffc17 	ldw	r2,-16(fp)
10010d88:	10800104 	addi	r2,r2,4
10010d8c:	1007883a 	mov	r3,r2
10010d90:	e0bffb17 	ldw	r2,-20(fp)
10010d94:	10800817 	ldw	r2,32(r2)
10010d98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010d9c:	e0bffc17 	ldw	r2,-16(fp)
10010da0:	10800104 	addi	r2,r2,4
10010da4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10010da8:	e0bffd17 	ldw	r2,-12(fp)
10010dac:	1080800c 	andi	r2,r2,512
10010db0:	103fbe26 	beq	r2,zero,10010cac <__alt_data_end+0xf8010cac>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10010db4:	e0bffd17 	ldw	r2,-12(fp)
10010db8:	1004d43a 	srli	r2,r2,16
10010dbc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010dc0:	00001406 	br	10010e14 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10010dc4:	e0bffc17 	ldw	r2,-16(fp)
10010dc8:	e0fffb17 	ldw	r3,-20(fp)
10010dcc:	18c00d17 	ldw	r3,52(r3)
10010dd0:	e13ffb17 	ldw	r4,-20(fp)
10010dd4:	20c7883a 	add	r3,r4,r3
10010dd8:	18c20e04 	addi	r3,r3,2104
10010ddc:	18c00003 	ldbu	r3,0(r3)
10010de0:	18c03fcc 	andi	r3,r3,255
10010de4:	18c0201c 	xori	r3,r3,128
10010de8:	18ffe004 	addi	r3,r3,-128
10010dec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010df0:	e0bffb17 	ldw	r2,-20(fp)
10010df4:	10800d17 	ldw	r2,52(r2)
10010df8:	10800044 	addi	r2,r2,1
10010dfc:	10c1ffcc 	andi	r3,r2,2047
10010e00:	e0bffb17 	ldw	r2,-20(fp)
10010e04:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010e08:	e0bffa17 	ldw	r2,-24(fp)
10010e0c:	10bfffc4 	addi	r2,r2,-1
10010e10:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010e14:	e0bffa17 	ldw	r2,-24(fp)
10010e18:	10000526 	beq	r2,zero,10010e30 <altera_avalon_jtag_uart_irq+0x1a8>
10010e1c:	e0bffb17 	ldw	r2,-20(fp)
10010e20:	10c00d17 	ldw	r3,52(r2)
10010e24:	e0bffb17 	ldw	r2,-20(fp)
10010e28:	10800c17 	ldw	r2,48(r2)
10010e2c:	18bfe51e 	bne	r3,r2,10010dc4 <__alt_data_end+0xf8010dc4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010e30:	e0bffa17 	ldw	r2,-24(fp)
10010e34:	103f9d26 	beq	r2,zero,10010cac <__alt_data_end+0xf8010cac>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010e38:	e0bffb17 	ldw	r2,-20(fp)
10010e3c:	10c00817 	ldw	r3,32(r2)
10010e40:	00bfff44 	movi	r2,-3
10010e44:	1886703a 	and	r3,r3,r2
10010e48:	e0bffb17 	ldw	r2,-20(fp)
10010e4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010e50:	e0bffb17 	ldw	r2,-20(fp)
10010e54:	10800017 	ldw	r2,0(r2)
10010e58:	10800104 	addi	r2,r2,4
10010e5c:	1007883a 	mov	r3,r2
10010e60:	e0bffb17 	ldw	r2,-20(fp)
10010e64:	10800817 	ldw	r2,32(r2)
10010e68:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010e6c:	e0bffc17 	ldw	r2,-16(fp)
10010e70:	10800104 	addi	r2,r2,4
10010e74:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010e78:	003f8c06 	br	10010cac <__alt_data_end+0xf8010cac>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10010e7c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10010e80:	0001883a 	nop
10010e84:	e037883a 	mov	sp,fp
10010e88:	df000017 	ldw	fp,0(sp)
10010e8c:	dec00104 	addi	sp,sp,4
10010e90:	f800283a 	ret

10010e94 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010e94:	defff804 	addi	sp,sp,-32
10010e98:	df000715 	stw	fp,28(sp)
10010e9c:	df000704 	addi	fp,sp,28
10010ea0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10010ea4:	e0bffb17 	ldw	r2,-20(fp)
10010ea8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010eac:	e0bff917 	ldw	r2,-28(fp)
10010eb0:	10800017 	ldw	r2,0(r2)
10010eb4:	10800104 	addi	r2,r2,4
10010eb8:	10800037 	ldwio	r2,0(r2)
10010ebc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10010ec0:	e0bffa17 	ldw	r2,-24(fp)
10010ec4:	1081000c 	andi	r2,r2,1024
10010ec8:	10000b26 	beq	r2,zero,10010ef8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010ecc:	e0bff917 	ldw	r2,-28(fp)
10010ed0:	10800017 	ldw	r2,0(r2)
10010ed4:	10800104 	addi	r2,r2,4
10010ed8:	1007883a 	mov	r3,r2
10010edc:	e0bff917 	ldw	r2,-28(fp)
10010ee0:	10800817 	ldw	r2,32(r2)
10010ee4:	10810014 	ori	r2,r2,1024
10010ee8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10010eec:	e0bff917 	ldw	r2,-28(fp)
10010ef0:	10000915 	stw	zero,36(r2)
10010ef4:	00000a06 	br	10010f20 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10010ef8:	e0bff917 	ldw	r2,-28(fp)
10010efc:	10c00917 	ldw	r3,36(r2)
10010f00:	00a00034 	movhi	r2,32768
10010f04:	10bfff04 	addi	r2,r2,-4
10010f08:	10c00536 	bltu	r2,r3,10010f20 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10010f0c:	e0bff917 	ldw	r2,-28(fp)
10010f10:	10800917 	ldw	r2,36(r2)
10010f14:	10c00044 	addi	r3,r2,1
10010f18:	e0bff917 	ldw	r2,-28(fp)
10010f1c:	10c00915 	stw	r3,36(r2)
10010f20:	d0a6f317 	ldw	r2,-25652(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10010f24:	e037883a 	mov	sp,fp
10010f28:	df000017 	ldw	fp,0(sp)
10010f2c:	dec00104 	addi	sp,sp,4
10010f30:	f800283a 	ret

10010f34 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010f34:	defffd04 	addi	sp,sp,-12
10010f38:	df000215 	stw	fp,8(sp)
10010f3c:	df000204 	addi	fp,sp,8
10010f40:	e13ffe15 	stw	r4,-8(fp)
10010f44:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010f48:	00000506 	br	10010f60 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010f4c:	e0bfff17 	ldw	r2,-4(fp)
10010f50:	1090000c 	andi	r2,r2,16384
10010f54:	10000226 	beq	r2,zero,10010f60 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10010f58:	00bffd44 	movi	r2,-11
10010f5c:	00000b06 	br	10010f8c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010f60:	e0bffe17 	ldw	r2,-8(fp)
10010f64:	10c00d17 	ldw	r3,52(r2)
10010f68:	e0bffe17 	ldw	r2,-8(fp)
10010f6c:	10800c17 	ldw	r2,48(r2)
10010f70:	18800526 	beq	r3,r2,10010f88 <altera_avalon_jtag_uart_close+0x54>
10010f74:	e0bffe17 	ldw	r2,-8(fp)
10010f78:	10c00917 	ldw	r3,36(r2)
10010f7c:	e0bffe17 	ldw	r2,-8(fp)
10010f80:	10800117 	ldw	r2,4(r2)
10010f84:	18bff136 	bltu	r3,r2,10010f4c <__alt_data_end+0xf8010f4c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10010f88:	0005883a 	mov	r2,zero
}
10010f8c:	e037883a 	mov	sp,fp
10010f90:	df000017 	ldw	fp,0(sp)
10010f94:	dec00104 	addi	sp,sp,4
10010f98:	f800283a 	ret

10010f9c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010f9c:	defffa04 	addi	sp,sp,-24
10010fa0:	df000515 	stw	fp,20(sp)
10010fa4:	df000504 	addi	fp,sp,20
10010fa8:	e13ffd15 	stw	r4,-12(fp)
10010fac:	e17ffe15 	stw	r5,-8(fp)
10010fb0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10010fb4:	00bff9c4 	movi	r2,-25
10010fb8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10010fbc:	e0bffe17 	ldw	r2,-8(fp)
10010fc0:	10da8060 	cmpeqi	r3,r2,27137
10010fc4:	1800031e 	bne	r3,zero,10010fd4 <altera_avalon_jtag_uart_ioctl+0x38>
10010fc8:	109a80a0 	cmpeqi	r2,r2,27138
10010fcc:	1000181e 	bne	r2,zero,10011030 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10010fd0:	00002906 	br	10011078 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10010fd4:	e0bffd17 	ldw	r2,-12(fp)
10010fd8:	10c00117 	ldw	r3,4(r2)
10010fdc:	00a00034 	movhi	r2,32768
10010fe0:	10bfffc4 	addi	r2,r2,-1
10010fe4:	18802126 	beq	r3,r2,1001106c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10010fe8:	e0bfff17 	ldw	r2,-4(fp)
10010fec:	10800017 	ldw	r2,0(r2)
10010ff0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10010ff4:	e0bffc17 	ldw	r2,-16(fp)
10010ff8:	10800090 	cmplti	r2,r2,2
10010ffc:	1000061e 	bne	r2,zero,10011018 <altera_avalon_jtag_uart_ioctl+0x7c>
10011000:	e0fffc17 	ldw	r3,-16(fp)
10011004:	00a00034 	movhi	r2,32768
10011008:	10bfffc4 	addi	r2,r2,-1
1001100c:	18800226 	beq	r3,r2,10011018 <altera_avalon_jtag_uart_ioctl+0x7c>
10011010:	e0bffc17 	ldw	r2,-16(fp)
10011014:	00000206 	br	10011020 <altera_avalon_jtag_uart_ioctl+0x84>
10011018:	00a00034 	movhi	r2,32768
1001101c:	10bfff84 	addi	r2,r2,-2
10011020:	e0fffd17 	ldw	r3,-12(fp)
10011024:	18800115 	stw	r2,4(r3)
      rc = 0;
10011028:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1001102c:	00000f06 	br	1001106c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10011030:	e0bffd17 	ldw	r2,-12(fp)
10011034:	10c00117 	ldw	r3,4(r2)
10011038:	00a00034 	movhi	r2,32768
1001103c:	10bfffc4 	addi	r2,r2,-1
10011040:	18800c26 	beq	r3,r2,10011074 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10011044:	e0bffd17 	ldw	r2,-12(fp)
10011048:	10c00917 	ldw	r3,36(r2)
1001104c:	e0bffd17 	ldw	r2,-12(fp)
10011050:	10800117 	ldw	r2,4(r2)
10011054:	1885803a 	cmpltu	r2,r3,r2
10011058:	10c03fcc 	andi	r3,r2,255
1001105c:	e0bfff17 	ldw	r2,-4(fp)
10011060:	10c00015 	stw	r3,0(r2)
      rc = 0;
10011064:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10011068:	00000206 	br	10011074 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1001106c:	0001883a 	nop
10011070:	00000106 	br	10011078 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10011074:	0001883a 	nop

  default:
    break;
  }

  return rc;
10011078:	e0bffb17 	ldw	r2,-20(fp)
}
1001107c:	e037883a 	mov	sp,fp
10011080:	df000017 	ldw	fp,0(sp)
10011084:	dec00104 	addi	sp,sp,4
10011088:	f800283a 	ret

1001108c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1001108c:	defff304 	addi	sp,sp,-52
10011090:	dfc00c15 	stw	ra,48(sp)
10011094:	df000b15 	stw	fp,44(sp)
10011098:	df000b04 	addi	fp,sp,44
1001109c:	e13ffc15 	stw	r4,-16(fp)
100110a0:	e17ffd15 	stw	r5,-12(fp)
100110a4:	e1bffe15 	stw	r6,-8(fp)
100110a8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100110ac:	e0bffd17 	ldw	r2,-12(fp)
100110b0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100110b4:	00004706 	br	100111d4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100110b8:	e0bffc17 	ldw	r2,-16(fp)
100110bc:	10800a17 	ldw	r2,40(r2)
100110c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100110c4:	e0bffc17 	ldw	r2,-16(fp)
100110c8:	10800b17 	ldw	r2,44(r2)
100110cc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100110d0:	e0fff717 	ldw	r3,-36(fp)
100110d4:	e0bff817 	ldw	r2,-32(fp)
100110d8:	18800536 	bltu	r3,r2,100110f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100110dc:	e0fff717 	ldw	r3,-36(fp)
100110e0:	e0bff817 	ldw	r2,-32(fp)
100110e4:	1885c83a 	sub	r2,r3,r2
100110e8:	e0bff615 	stw	r2,-40(fp)
100110ec:	00000406 	br	10011100 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100110f0:	00c20004 	movi	r3,2048
100110f4:	e0bff817 	ldw	r2,-32(fp)
100110f8:	1885c83a 	sub	r2,r3,r2
100110fc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10011100:	e0bff617 	ldw	r2,-40(fp)
10011104:	10001e26 	beq	r2,zero,10011180 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10011108:	e0fffe17 	ldw	r3,-8(fp)
1001110c:	e0bff617 	ldw	r2,-40(fp)
10011110:	1880022e 	bgeu	r3,r2,1001111c <altera_avalon_jtag_uart_read+0x90>
        n = space;
10011114:	e0bffe17 	ldw	r2,-8(fp)
10011118:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1001111c:	e0bffc17 	ldw	r2,-16(fp)
10011120:	10c00e04 	addi	r3,r2,56
10011124:	e0bff817 	ldw	r2,-32(fp)
10011128:	1885883a 	add	r2,r3,r2
1001112c:	e1bff617 	ldw	r6,-40(fp)
10011130:	100b883a 	mov	r5,r2
10011134:	e13ff517 	ldw	r4,-44(fp)
10011138:	0008e500 	call	10008e50 <memcpy>
      ptr   += n;
1001113c:	e0fff517 	ldw	r3,-44(fp)
10011140:	e0bff617 	ldw	r2,-40(fp)
10011144:	1885883a 	add	r2,r3,r2
10011148:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1001114c:	e0fffe17 	ldw	r3,-8(fp)
10011150:	e0bff617 	ldw	r2,-40(fp)
10011154:	1885c83a 	sub	r2,r3,r2
10011158:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001115c:	e0fff817 	ldw	r3,-32(fp)
10011160:	e0bff617 	ldw	r2,-40(fp)
10011164:	1885883a 	add	r2,r3,r2
10011168:	10c1ffcc 	andi	r3,r2,2047
1001116c:	e0bffc17 	ldw	r2,-16(fp)
10011170:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10011174:	e0bffe17 	ldw	r2,-8(fp)
10011178:	00bfcf16 	blt	zero,r2,100110b8 <__alt_data_end+0xf80110b8>
1001117c:	00000106 	br	10011184 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10011180:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10011184:	e0fff517 	ldw	r3,-44(fp)
10011188:	e0bffd17 	ldw	r2,-12(fp)
1001118c:	1880141e 	bne	r3,r2,100111e0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10011190:	e0bfff17 	ldw	r2,-4(fp)
10011194:	1090000c 	andi	r2,r2,16384
10011198:	1000131e 	bne	r2,zero,100111e8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1001119c:	0001883a 	nop
100111a0:	e0bffc17 	ldw	r2,-16(fp)
100111a4:	10c00a17 	ldw	r3,40(r2)
100111a8:	e0bff717 	ldw	r2,-36(fp)
100111ac:	1880051e 	bne	r3,r2,100111c4 <altera_avalon_jtag_uart_read+0x138>
100111b0:	e0bffc17 	ldw	r2,-16(fp)
100111b4:	10c00917 	ldw	r3,36(r2)
100111b8:	e0bffc17 	ldw	r2,-16(fp)
100111bc:	10800117 	ldw	r2,4(r2)
100111c0:	18bff736 	bltu	r3,r2,100111a0 <__alt_data_end+0xf80111a0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100111c4:	e0bffc17 	ldw	r2,-16(fp)
100111c8:	10c00a17 	ldw	r3,40(r2)
100111cc:	e0bff717 	ldw	r2,-36(fp)
100111d0:	18800726 	beq	r3,r2,100111f0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100111d4:	e0bffe17 	ldw	r2,-8(fp)
100111d8:	00bfb716 	blt	zero,r2,100110b8 <__alt_data_end+0xf80110b8>
100111dc:	00000506 	br	100111f4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
100111e0:	0001883a 	nop
100111e4:	00000306 	br	100111f4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
100111e8:	0001883a 	nop
100111ec:	00000106 	br	100111f4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
100111f0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100111f4:	e0fff517 	ldw	r3,-44(fp)
100111f8:	e0bffd17 	ldw	r2,-12(fp)
100111fc:	18801826 	beq	r3,r2,10011260 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011200:	0005303a 	rdctl	r2,status
10011204:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011208:	e0fffb17 	ldw	r3,-20(fp)
1001120c:	00bfff84 	movi	r2,-2
10011210:	1884703a 	and	r2,r3,r2
10011214:	1001703a 	wrctl	status,r2
  
  return context;
10011218:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1001121c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011220:	e0bffc17 	ldw	r2,-16(fp)
10011224:	10800817 	ldw	r2,32(r2)
10011228:	10c00054 	ori	r3,r2,1
1001122c:	e0bffc17 	ldw	r2,-16(fp)
10011230:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011234:	e0bffc17 	ldw	r2,-16(fp)
10011238:	10800017 	ldw	r2,0(r2)
1001123c:	10800104 	addi	r2,r2,4
10011240:	1007883a 	mov	r3,r2
10011244:	e0bffc17 	ldw	r2,-16(fp)
10011248:	10800817 	ldw	r2,32(r2)
1001124c:	18800035 	stwio	r2,0(r3)
10011250:	e0bffa17 	ldw	r2,-24(fp)
10011254:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011258:	e0bff917 	ldw	r2,-28(fp)
1001125c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10011260:	e0fff517 	ldw	r3,-44(fp)
10011264:	e0bffd17 	ldw	r2,-12(fp)
10011268:	18800426 	beq	r3,r2,1001127c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1001126c:	e0fff517 	ldw	r3,-44(fp)
10011270:	e0bffd17 	ldw	r2,-12(fp)
10011274:	1885c83a 	sub	r2,r3,r2
10011278:	00000606 	br	10011294 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1001127c:	e0bfff17 	ldw	r2,-4(fp)
10011280:	1090000c 	andi	r2,r2,16384
10011284:	10000226 	beq	r2,zero,10011290 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10011288:	00bffd44 	movi	r2,-11
1001128c:	00000106 	br	10011294 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10011290:	00bffec4 	movi	r2,-5
}
10011294:	e037883a 	mov	sp,fp
10011298:	dfc00117 	ldw	ra,4(sp)
1001129c:	df000017 	ldw	fp,0(sp)
100112a0:	dec00204 	addi	sp,sp,8
100112a4:	f800283a 	ret

100112a8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100112a8:	defff304 	addi	sp,sp,-52
100112ac:	dfc00c15 	stw	ra,48(sp)
100112b0:	df000b15 	stw	fp,44(sp)
100112b4:	df000b04 	addi	fp,sp,44
100112b8:	e13ffc15 	stw	r4,-16(fp)
100112bc:	e17ffd15 	stw	r5,-12(fp)
100112c0:	e1bffe15 	stw	r6,-8(fp)
100112c4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100112c8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100112cc:	e0bffd17 	ldw	r2,-12(fp)
100112d0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100112d4:	00003706 	br	100113b4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100112d8:	e0bffc17 	ldw	r2,-16(fp)
100112dc:	10800c17 	ldw	r2,48(r2)
100112e0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
100112e4:	e0bffc17 	ldw	r2,-16(fp)
100112e8:	10800d17 	ldw	r2,52(r2)
100112ec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100112f0:	e0fff917 	ldw	r3,-28(fp)
100112f4:	e0bff517 	ldw	r2,-44(fp)
100112f8:	1880062e 	bgeu	r3,r2,10011314 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100112fc:	e0fff517 	ldw	r3,-44(fp)
10011300:	e0bff917 	ldw	r2,-28(fp)
10011304:	1885c83a 	sub	r2,r3,r2
10011308:	10bfffc4 	addi	r2,r2,-1
1001130c:	e0bff615 	stw	r2,-40(fp)
10011310:	00000b06 	br	10011340 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10011314:	e0bff517 	ldw	r2,-44(fp)
10011318:	10000526 	beq	r2,zero,10011330 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1001131c:	00c20004 	movi	r3,2048
10011320:	e0bff917 	ldw	r2,-28(fp)
10011324:	1885c83a 	sub	r2,r3,r2
10011328:	e0bff615 	stw	r2,-40(fp)
1001132c:	00000406 	br	10011340 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10011330:	00c1ffc4 	movi	r3,2047
10011334:	e0bff917 	ldw	r2,-28(fp)
10011338:	1885c83a 	sub	r2,r3,r2
1001133c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10011340:	e0bff617 	ldw	r2,-40(fp)
10011344:	10001e26 	beq	r2,zero,100113c0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10011348:	e0fffe17 	ldw	r3,-8(fp)
1001134c:	e0bff617 	ldw	r2,-40(fp)
10011350:	1880022e 	bgeu	r3,r2,1001135c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10011354:	e0bffe17 	ldw	r2,-8(fp)
10011358:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1001135c:	e0bffc17 	ldw	r2,-16(fp)
10011360:	10c20e04 	addi	r3,r2,2104
10011364:	e0bff917 	ldw	r2,-28(fp)
10011368:	1885883a 	add	r2,r3,r2
1001136c:	e1bff617 	ldw	r6,-40(fp)
10011370:	e17ffd17 	ldw	r5,-12(fp)
10011374:	1009883a 	mov	r4,r2
10011378:	0008e500 	call	10008e50 <memcpy>
      ptr   += n;
1001137c:	e0fffd17 	ldw	r3,-12(fp)
10011380:	e0bff617 	ldw	r2,-40(fp)
10011384:	1885883a 	add	r2,r3,r2
10011388:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1001138c:	e0fffe17 	ldw	r3,-8(fp)
10011390:	e0bff617 	ldw	r2,-40(fp)
10011394:	1885c83a 	sub	r2,r3,r2
10011398:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001139c:	e0fff917 	ldw	r3,-28(fp)
100113a0:	e0bff617 	ldw	r2,-40(fp)
100113a4:	1885883a 	add	r2,r3,r2
100113a8:	10c1ffcc 	andi	r3,r2,2047
100113ac:	e0bffc17 	ldw	r2,-16(fp)
100113b0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100113b4:	e0bffe17 	ldw	r2,-8(fp)
100113b8:	00bfc716 	blt	zero,r2,100112d8 <__alt_data_end+0xf80112d8>
100113bc:	00000106 	br	100113c4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
100113c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100113c4:	0005303a 	rdctl	r2,status
100113c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100113cc:	e0fffb17 	ldw	r3,-20(fp)
100113d0:	00bfff84 	movi	r2,-2
100113d4:	1884703a 	and	r2,r3,r2
100113d8:	1001703a 	wrctl	status,r2
  
  return context;
100113dc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100113e0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100113e4:	e0bffc17 	ldw	r2,-16(fp)
100113e8:	10800817 	ldw	r2,32(r2)
100113ec:	10c00094 	ori	r3,r2,2
100113f0:	e0bffc17 	ldw	r2,-16(fp)
100113f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100113f8:	e0bffc17 	ldw	r2,-16(fp)
100113fc:	10800017 	ldw	r2,0(r2)
10011400:	10800104 	addi	r2,r2,4
10011404:	1007883a 	mov	r3,r2
10011408:	e0bffc17 	ldw	r2,-16(fp)
1001140c:	10800817 	ldw	r2,32(r2)
10011410:	18800035 	stwio	r2,0(r3)
10011414:	e0bffa17 	ldw	r2,-24(fp)
10011418:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001141c:	e0bff817 	ldw	r2,-32(fp)
10011420:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10011424:	e0bffe17 	ldw	r2,-8(fp)
10011428:	0080100e 	bge	zero,r2,1001146c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1001142c:	e0bfff17 	ldw	r2,-4(fp)
10011430:	1090000c 	andi	r2,r2,16384
10011434:	1000101e 	bne	r2,zero,10011478 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10011438:	0001883a 	nop
1001143c:	e0bffc17 	ldw	r2,-16(fp)
10011440:	10c00d17 	ldw	r3,52(r2)
10011444:	e0bff517 	ldw	r2,-44(fp)
10011448:	1880051e 	bne	r3,r2,10011460 <altera_avalon_jtag_uart_write+0x1b8>
1001144c:	e0bffc17 	ldw	r2,-16(fp)
10011450:	10c00917 	ldw	r3,36(r2)
10011454:	e0bffc17 	ldw	r2,-16(fp)
10011458:	10800117 	ldw	r2,4(r2)
1001145c:	18bff736 	bltu	r3,r2,1001143c <__alt_data_end+0xf801143c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10011460:	e0bffc17 	ldw	r2,-16(fp)
10011464:	10800917 	ldw	r2,36(r2)
10011468:	1000051e 	bne	r2,zero,10011480 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1001146c:	e0bffe17 	ldw	r2,-8(fp)
10011470:	00bfd016 	blt	zero,r2,100113b4 <__alt_data_end+0xf80113b4>
10011474:	00000306 	br	10011484 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10011478:	0001883a 	nop
1001147c:	00000106 	br	10011484 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10011480:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10011484:	e0fffd17 	ldw	r3,-12(fp)
10011488:	e0bff717 	ldw	r2,-36(fp)
1001148c:	18800426 	beq	r3,r2,100114a0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10011490:	e0fffd17 	ldw	r3,-12(fp)
10011494:	e0bff717 	ldw	r2,-36(fp)
10011498:	1885c83a 	sub	r2,r3,r2
1001149c:	00000606 	br	100114b8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
100114a0:	e0bfff17 	ldw	r2,-4(fp)
100114a4:	1090000c 	andi	r2,r2,16384
100114a8:	10000226 	beq	r2,zero,100114b4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
100114ac:	00bffd44 	movi	r2,-11
100114b0:	00000106 	br	100114b8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100114b4:	00bffec4 	movi	r2,-5
}
100114b8:	e037883a 	mov	sp,fp
100114bc:	dfc00117 	ldw	ra,4(sp)
100114c0:	df000017 	ldw	fp,0(sp)
100114c4:	dec00204 	addi	sp,sp,8
100114c8:	f800283a 	ret

100114cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100114cc:	defff504 	addi	sp,sp,-44
100114d0:	df000a15 	stw	fp,40(sp)
100114d4:	df000a04 	addi	fp,sp,40
100114d8:	e13ffc15 	stw	r4,-16(fp)
100114dc:	e17ffd15 	stw	r5,-12(fp)
100114e0:	e1bffe15 	stw	r6,-8(fp)
100114e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100114e8:	e03ff615 	stw	zero,-40(fp)
100114ec:	d0a6f317 	ldw	r2,-25652(gp)
  
  if (alt_ticks_per_second ())
100114f0:	10003c26 	beq	r2,zero,100115e4 <alt_alarm_start+0x118>
  {
    if (alarm)
100114f4:	e0bffc17 	ldw	r2,-16(fp)
100114f8:	10003826 	beq	r2,zero,100115dc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
100114fc:	e0bffc17 	ldw	r2,-16(fp)
10011500:	e0fffe17 	ldw	r3,-8(fp)
10011504:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10011508:	e0bffc17 	ldw	r2,-16(fp)
1001150c:	e0ffff17 	ldw	r3,-4(fp)
10011510:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011514:	0005303a 	rdctl	r2,status
10011518:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001151c:	e0fff917 	ldw	r3,-28(fp)
10011520:	00bfff84 	movi	r2,-2
10011524:	1884703a 	and	r2,r3,r2
10011528:	1001703a 	wrctl	status,r2
  
  return context;
1001152c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10011530:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10011534:	d0a6f417 	ldw	r2,-25648(gp)
      
      current_nticks = alt_nticks();
10011538:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1001153c:	e0fffd17 	ldw	r3,-12(fp)
10011540:	e0bff617 	ldw	r2,-40(fp)
10011544:	1885883a 	add	r2,r3,r2
10011548:	10c00044 	addi	r3,r2,1
1001154c:	e0bffc17 	ldw	r2,-16(fp)
10011550:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10011554:	e0bffc17 	ldw	r2,-16(fp)
10011558:	10c00217 	ldw	r3,8(r2)
1001155c:	e0bff617 	ldw	r2,-40(fp)
10011560:	1880042e 	bgeu	r3,r2,10011574 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10011564:	e0bffc17 	ldw	r2,-16(fp)
10011568:	00c00044 	movi	r3,1
1001156c:	10c00405 	stb	r3,16(r2)
10011570:	00000206 	br	1001157c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10011574:	e0bffc17 	ldw	r2,-16(fp)
10011578:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1001157c:	e0bffc17 	ldw	r2,-16(fp)
10011580:	d0e01704 	addi	r3,gp,-32676
10011584:	e0fffa15 	stw	r3,-24(fp)
10011588:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001158c:	e0bffb17 	ldw	r2,-20(fp)
10011590:	e0fffa17 	ldw	r3,-24(fp)
10011594:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011598:	e0bffa17 	ldw	r2,-24(fp)
1001159c:	10c00017 	ldw	r3,0(r2)
100115a0:	e0bffb17 	ldw	r2,-20(fp)
100115a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100115a8:	e0bffa17 	ldw	r2,-24(fp)
100115ac:	10800017 	ldw	r2,0(r2)
100115b0:	e0fffb17 	ldw	r3,-20(fp)
100115b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100115b8:	e0bffa17 	ldw	r2,-24(fp)
100115bc:	e0fffb17 	ldw	r3,-20(fp)
100115c0:	10c00015 	stw	r3,0(r2)
100115c4:	e0bff817 	ldw	r2,-32(fp)
100115c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100115cc:	e0bff717 	ldw	r2,-36(fp)
100115d0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100115d4:	0005883a 	mov	r2,zero
100115d8:	00000306 	br	100115e8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
100115dc:	00bffa84 	movi	r2,-22
100115e0:	00000106 	br	100115e8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
100115e4:	00bfde84 	movi	r2,-134
  }
}
100115e8:	e037883a 	mov	sp,fp
100115ec:	df000017 	ldw	fp,0(sp)
100115f0:	dec00104 	addi	sp,sp,4
100115f4:	f800283a 	ret

100115f8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
100115f8:	defffa04 	addi	sp,sp,-24
100115fc:	dfc00515 	stw	ra,20(sp)
10011600:	df000415 	stw	fp,16(sp)
10011604:	df000404 	addi	fp,sp,16
10011608:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1001160c:	00800244 	movi	r2,9
10011610:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10011614:	014003f4 	movhi	r5,15
10011618:	29509004 	addi	r5,r5,16960
1001161c:	e13ffd17 	ldw	r4,-12(fp)
10011620:	000d71c0 	call	1000d71c <__mulsi3>
10011624:	100b883a 	mov	r5,r2
10011628:	0100bef4 	movhi	r4,763
1001162c:	213c2004 	addi	r4,r4,-3968
10011630:	00031a00 	call	100031a0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10011634:	100b883a 	mov	r5,r2
10011638:	01200034 	movhi	r4,32768
1001163c:	213fffc4 	addi	r4,r4,-1
10011640:	00031a00 	call	100031a0 <__udivsi3>
10011644:	100b883a 	mov	r5,r2
10011648:	e13fff17 	ldw	r4,-4(fp)
1001164c:	00031a00 	call	100031a0 <__udivsi3>
10011650:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10011654:	e0bffe17 	ldw	r2,-8(fp)
10011658:	10002a26 	beq	r2,zero,10011704 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1001165c:	e03ffc15 	stw	zero,-16(fp)
10011660:	00001706 	br	100116c0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10011664:	00a00034 	movhi	r2,32768
10011668:	10bfffc4 	addi	r2,r2,-1
1001166c:	10bfffc4 	addi	r2,r2,-1
10011670:	103ffe1e 	bne	r2,zero,1001166c <__alt_data_end+0xf801166c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10011674:	014003f4 	movhi	r5,15
10011678:	29509004 	addi	r5,r5,16960
1001167c:	e13ffd17 	ldw	r4,-12(fp)
10011680:	000d71c0 	call	1000d71c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10011684:	100b883a 	mov	r5,r2
10011688:	0100bef4 	movhi	r4,763
1001168c:	213c2004 	addi	r4,r4,-3968
10011690:	00031a00 	call	100031a0 <__udivsi3>
10011694:	100b883a 	mov	r5,r2
10011698:	01200034 	movhi	r4,32768
1001169c:	213fffc4 	addi	r4,r4,-1
100116a0:	00031a00 	call	100031a0 <__udivsi3>
100116a4:	1007883a 	mov	r3,r2
100116a8:	e0bfff17 	ldw	r2,-4(fp)
100116ac:	10c5c83a 	sub	r2,r2,r3
100116b0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
100116b4:	e0bffc17 	ldw	r2,-16(fp)
100116b8:	10800044 	addi	r2,r2,1
100116bc:	e0bffc15 	stw	r2,-16(fp)
100116c0:	e0fffc17 	ldw	r3,-16(fp)
100116c4:	e0bffe17 	ldw	r2,-8(fp)
100116c8:	18bfe616 	blt	r3,r2,10011664 <__alt_data_end+0xf8011664>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100116cc:	014003f4 	movhi	r5,15
100116d0:	29509004 	addi	r5,r5,16960
100116d4:	e13ffd17 	ldw	r4,-12(fp)
100116d8:	000d71c0 	call	1000d71c <__mulsi3>
100116dc:	100b883a 	mov	r5,r2
100116e0:	0100bef4 	movhi	r4,763
100116e4:	213c2004 	addi	r4,r4,-3968
100116e8:	00031a00 	call	100031a0 <__udivsi3>
100116ec:	e17fff17 	ldw	r5,-4(fp)
100116f0:	1009883a 	mov	r4,r2
100116f4:	000d71c0 	call	1000d71c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100116f8:	10bfffc4 	addi	r2,r2,-1
100116fc:	103ffe1e 	bne	r2,zero,100116f8 <__alt_data_end+0xf80116f8>
10011700:	00000d06 	br	10011738 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10011704:	014003f4 	movhi	r5,15
10011708:	29509004 	addi	r5,r5,16960
1001170c:	e13ffd17 	ldw	r4,-12(fp)
10011710:	000d71c0 	call	1000d71c <__mulsi3>
10011714:	100b883a 	mov	r5,r2
10011718:	0100bef4 	movhi	r4,763
1001171c:	213c2004 	addi	r4,r4,-3968
10011720:	00031a00 	call	100031a0 <__udivsi3>
10011724:	e17fff17 	ldw	r5,-4(fp)
10011728:	1009883a 	mov	r4,r2
1001172c:	000d71c0 	call	1000d71c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10011730:	10bfffc4 	addi	r2,r2,-1
10011734:	00bffe16 	blt	zero,r2,10011730 <__alt_data_end+0xf8011730>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10011738:	0005883a 	mov	r2,zero
}
1001173c:	e037883a 	mov	sp,fp
10011740:	dfc00117 	ldw	ra,4(sp)
10011744:	df000017 	ldw	fp,0(sp)
10011748:	dec00204 	addi	sp,sp,8
1001174c:	f800283a 	ret

10011750 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10011750:	deffff04 	addi	sp,sp,-4
10011754:	df000015 	stw	fp,0(sp)
10011758:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1001175c:	0001883a 	nop
10011760:	e037883a 	mov	sp,fp
10011764:	df000017 	ldw	fp,0(sp)
10011768:	dec00104 	addi	sp,sp,4
1001176c:	f800283a 	ret

10011770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011770:	defffe04 	addi	sp,sp,-8
10011774:	dfc00115 	stw	ra,4(sp)
10011778:	df000015 	stw	fp,0(sp)
1001177c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011780:	d0a01417 	ldw	r2,-32688(gp)
10011784:	10000326 	beq	r2,zero,10011794 <alt_get_errno+0x24>
10011788:	d0a01417 	ldw	r2,-32688(gp)
1001178c:	103ee83a 	callr	r2
10011790:	00000106 	br	10011798 <alt_get_errno+0x28>
10011794:	d0a6ee04 	addi	r2,gp,-25672
}
10011798:	e037883a 	mov	sp,fp
1001179c:	dfc00117 	ldw	ra,4(sp)
100117a0:	df000017 	ldw	fp,0(sp)
100117a4:	dec00204 	addi	sp,sp,8
100117a8:	f800283a 	ret

100117ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100117ac:	defffa04 	addi	sp,sp,-24
100117b0:	dfc00515 	stw	ra,20(sp)
100117b4:	df000415 	stw	fp,16(sp)
100117b8:	df000404 	addi	fp,sp,16
100117bc:	e13ffe15 	stw	r4,-8(fp)
100117c0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100117c4:	e0bffe17 	ldw	r2,-8(fp)
100117c8:	10000326 	beq	r2,zero,100117d8 <alt_dev_llist_insert+0x2c>
100117cc:	e0bffe17 	ldw	r2,-8(fp)
100117d0:	10800217 	ldw	r2,8(r2)
100117d4:	1000061e 	bne	r2,zero,100117f0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100117d8:	00117700 	call	10011770 <alt_get_errno>
100117dc:	1007883a 	mov	r3,r2
100117e0:	00800584 	movi	r2,22
100117e4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100117e8:	00bffa84 	movi	r2,-22
100117ec:	00001306 	br	1001183c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100117f0:	e0bffe17 	ldw	r2,-8(fp)
100117f4:	e0ffff17 	ldw	r3,-4(fp)
100117f8:	e0fffc15 	stw	r3,-16(fp)
100117fc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011800:	e0bffd17 	ldw	r2,-12(fp)
10011804:	e0fffc17 	ldw	r3,-16(fp)
10011808:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001180c:	e0bffc17 	ldw	r2,-16(fp)
10011810:	10c00017 	ldw	r3,0(r2)
10011814:	e0bffd17 	ldw	r2,-12(fp)
10011818:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001181c:	e0bffc17 	ldw	r2,-16(fp)
10011820:	10800017 	ldw	r2,0(r2)
10011824:	e0fffd17 	ldw	r3,-12(fp)
10011828:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001182c:	e0bffc17 	ldw	r2,-16(fp)
10011830:	e0fffd17 	ldw	r3,-12(fp)
10011834:	10c00015 	stw	r3,0(r2)

  return 0;  
10011838:	0005883a 	mov	r2,zero
}
1001183c:	e037883a 	mov	sp,fp
10011840:	dfc00117 	ldw	ra,4(sp)
10011844:	df000017 	ldw	fp,0(sp)
10011848:	dec00204 	addi	sp,sp,8
1001184c:	f800283a 	ret

10011850 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10011850:	defffd04 	addi	sp,sp,-12
10011854:	dfc00215 	stw	ra,8(sp)
10011858:	df000115 	stw	fp,4(sp)
1001185c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011860:	00840074 	movhi	r2,4097
10011864:	108a0104 	addi	r2,r2,10244
10011868:	e0bfff15 	stw	r2,-4(fp)
1001186c:	00000606 	br	10011888 <_do_ctors+0x38>
        (*ctor) (); 
10011870:	e0bfff17 	ldw	r2,-4(fp)
10011874:	10800017 	ldw	r2,0(r2)
10011878:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1001187c:	e0bfff17 	ldw	r2,-4(fp)
10011880:	10bfff04 	addi	r2,r2,-4
10011884:	e0bfff15 	stw	r2,-4(fp)
10011888:	e0ffff17 	ldw	r3,-4(fp)
1001188c:	00840074 	movhi	r2,4097
10011890:	108a0204 	addi	r2,r2,10248
10011894:	18bff62e 	bgeu	r3,r2,10011870 <__alt_data_end+0xf8011870>
        (*ctor) (); 
}
10011898:	0001883a 	nop
1001189c:	e037883a 	mov	sp,fp
100118a0:	dfc00117 	ldw	ra,4(sp)
100118a4:	df000017 	ldw	fp,0(sp)
100118a8:	dec00204 	addi	sp,sp,8
100118ac:	f800283a 	ret

100118b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100118b0:	defffd04 	addi	sp,sp,-12
100118b4:	dfc00215 	stw	ra,8(sp)
100118b8:	df000115 	stw	fp,4(sp)
100118bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100118c0:	00840074 	movhi	r2,4097
100118c4:	108a0104 	addi	r2,r2,10244
100118c8:	e0bfff15 	stw	r2,-4(fp)
100118cc:	00000606 	br	100118e8 <_do_dtors+0x38>
        (*dtor) (); 
100118d0:	e0bfff17 	ldw	r2,-4(fp)
100118d4:	10800017 	ldw	r2,0(r2)
100118d8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100118dc:	e0bfff17 	ldw	r2,-4(fp)
100118e0:	10bfff04 	addi	r2,r2,-4
100118e4:	e0bfff15 	stw	r2,-4(fp)
100118e8:	e0ffff17 	ldw	r3,-4(fp)
100118ec:	00840074 	movhi	r2,4097
100118f0:	108a0204 	addi	r2,r2,10248
100118f4:	18bff62e 	bgeu	r3,r2,100118d0 <__alt_data_end+0xf80118d0>
        (*dtor) (); 
}
100118f8:	0001883a 	nop
100118fc:	e037883a 	mov	sp,fp
10011900:	dfc00117 	ldw	ra,4(sp)
10011904:	df000017 	ldw	fp,0(sp)
10011908:	dec00204 	addi	sp,sp,8
1001190c:	f800283a 	ret

10011910 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011910:	deffff04 	addi	sp,sp,-4
10011914:	df000015 	stw	fp,0(sp)
10011918:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1001191c:	0001883a 	nop
10011920:	e037883a 	mov	sp,fp
10011924:	df000017 	ldw	fp,0(sp)
10011928:	dec00104 	addi	sp,sp,4
1001192c:	f800283a 	ret

10011930 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011930:	defff904 	addi	sp,sp,-28
10011934:	dfc00615 	stw	ra,24(sp)
10011938:	df000515 	stw	fp,20(sp)
1001193c:	df000504 	addi	fp,sp,20
10011940:	e13ffc15 	stw	r4,-16(fp)
10011944:	e17ffd15 	stw	r5,-12(fp)
10011948:	e1bffe15 	stw	r6,-8(fp)
1001194c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011950:	e0800217 	ldw	r2,8(fp)
10011954:	d8800015 	stw	r2,0(sp)
10011958:	e1ffff17 	ldw	r7,-4(fp)
1001195c:	e1bffe17 	ldw	r6,-8(fp)
10011960:	e17ffd17 	ldw	r5,-12(fp)
10011964:	e13ffc17 	ldw	r4,-16(fp)
10011968:	0011ae00 	call	10011ae0 <alt_iic_isr_register>
}  
1001196c:	e037883a 	mov	sp,fp
10011970:	dfc00117 	ldw	ra,4(sp)
10011974:	df000017 	ldw	fp,0(sp)
10011978:	dec00204 	addi	sp,sp,8
1001197c:	f800283a 	ret

10011980 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011980:	defff904 	addi	sp,sp,-28
10011984:	df000615 	stw	fp,24(sp)
10011988:	df000604 	addi	fp,sp,24
1001198c:	e13ffe15 	stw	r4,-8(fp)
10011990:	e17fff15 	stw	r5,-4(fp)
10011994:	e0bfff17 	ldw	r2,-4(fp)
10011998:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001199c:	0005303a 	rdctl	r2,status
100119a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100119a4:	e0fffb17 	ldw	r3,-20(fp)
100119a8:	00bfff84 	movi	r2,-2
100119ac:	1884703a 	and	r2,r3,r2
100119b0:	1001703a 	wrctl	status,r2
  
  return context;
100119b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100119b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100119bc:	00c00044 	movi	r3,1
100119c0:	e0bffa17 	ldw	r2,-24(fp)
100119c4:	1884983a 	sll	r2,r3,r2
100119c8:	1007883a 	mov	r3,r2
100119cc:	d0a6f217 	ldw	r2,-25656(gp)
100119d0:	1884b03a 	or	r2,r3,r2
100119d4:	d0a6f215 	stw	r2,-25656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100119d8:	d0a6f217 	ldw	r2,-25656(gp)
100119dc:	100170fa 	wrctl	ienable,r2
100119e0:	e0bffc17 	ldw	r2,-16(fp)
100119e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100119e8:	e0bffd17 	ldw	r2,-12(fp)
100119ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100119f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100119f4:	0001883a 	nop
}
100119f8:	e037883a 	mov	sp,fp
100119fc:	df000017 	ldw	fp,0(sp)
10011a00:	dec00104 	addi	sp,sp,4
10011a04:	f800283a 	ret

10011a08 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011a08:	defff904 	addi	sp,sp,-28
10011a0c:	df000615 	stw	fp,24(sp)
10011a10:	df000604 	addi	fp,sp,24
10011a14:	e13ffe15 	stw	r4,-8(fp)
10011a18:	e17fff15 	stw	r5,-4(fp)
10011a1c:	e0bfff17 	ldw	r2,-4(fp)
10011a20:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011a24:	0005303a 	rdctl	r2,status
10011a28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011a2c:	e0fffb17 	ldw	r3,-20(fp)
10011a30:	00bfff84 	movi	r2,-2
10011a34:	1884703a 	and	r2,r3,r2
10011a38:	1001703a 	wrctl	status,r2
  
  return context;
10011a3c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011a40:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10011a44:	00c00044 	movi	r3,1
10011a48:	e0bffa17 	ldw	r2,-24(fp)
10011a4c:	1884983a 	sll	r2,r3,r2
10011a50:	0084303a 	nor	r2,zero,r2
10011a54:	1007883a 	mov	r3,r2
10011a58:	d0a6f217 	ldw	r2,-25656(gp)
10011a5c:	1884703a 	and	r2,r3,r2
10011a60:	d0a6f215 	stw	r2,-25656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011a64:	d0a6f217 	ldw	r2,-25656(gp)
10011a68:	100170fa 	wrctl	ienable,r2
10011a6c:	e0bffc17 	ldw	r2,-16(fp)
10011a70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011a74:	e0bffd17 	ldw	r2,-12(fp)
10011a78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011a7c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10011a80:	0001883a 	nop
}
10011a84:	e037883a 	mov	sp,fp
10011a88:	df000017 	ldw	fp,0(sp)
10011a8c:	dec00104 	addi	sp,sp,4
10011a90:	f800283a 	ret

10011a94 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011a94:	defffc04 	addi	sp,sp,-16
10011a98:	df000315 	stw	fp,12(sp)
10011a9c:	df000304 	addi	fp,sp,12
10011aa0:	e13ffe15 	stw	r4,-8(fp)
10011aa4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011aa8:	000530fa 	rdctl	r2,ienable
10011aac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10011ab0:	00c00044 	movi	r3,1
10011ab4:	e0bfff17 	ldw	r2,-4(fp)
10011ab8:	1884983a 	sll	r2,r3,r2
10011abc:	1007883a 	mov	r3,r2
10011ac0:	e0bffd17 	ldw	r2,-12(fp)
10011ac4:	1884703a 	and	r2,r3,r2
10011ac8:	1004c03a 	cmpne	r2,r2,zero
10011acc:	10803fcc 	andi	r2,r2,255
}
10011ad0:	e037883a 	mov	sp,fp
10011ad4:	df000017 	ldw	fp,0(sp)
10011ad8:	dec00104 	addi	sp,sp,4
10011adc:	f800283a 	ret

10011ae0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011ae0:	defff504 	addi	sp,sp,-44
10011ae4:	dfc00a15 	stw	ra,40(sp)
10011ae8:	df000915 	stw	fp,36(sp)
10011aec:	df000904 	addi	fp,sp,36
10011af0:	e13ffc15 	stw	r4,-16(fp)
10011af4:	e17ffd15 	stw	r5,-12(fp)
10011af8:	e1bffe15 	stw	r6,-8(fp)
10011afc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10011b00:	00bffa84 	movi	r2,-22
10011b04:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011b08:	e0bffd17 	ldw	r2,-12(fp)
10011b0c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011b10:	e0bff817 	ldw	r2,-32(fp)
10011b14:	10800808 	cmpgei	r2,r2,32
10011b18:	1000271e 	bne	r2,zero,10011bb8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011b1c:	0005303a 	rdctl	r2,status
10011b20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011b24:	e0fffb17 	ldw	r3,-20(fp)
10011b28:	00bfff84 	movi	r2,-2
10011b2c:	1884703a 	and	r2,r3,r2
10011b30:	1001703a 	wrctl	status,r2
  
  return context;
10011b34:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011b38:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10011b3c:	00840074 	movhi	r2,4097
10011b40:	109a4204 	addi	r2,r2,26888
10011b44:	e0fff817 	ldw	r3,-32(fp)
10011b48:	180690fa 	slli	r3,r3,3
10011b4c:	10c5883a 	add	r2,r2,r3
10011b50:	e0fffe17 	ldw	r3,-8(fp)
10011b54:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011b58:	00840074 	movhi	r2,4097
10011b5c:	109a4204 	addi	r2,r2,26888
10011b60:	e0fff817 	ldw	r3,-32(fp)
10011b64:	180690fa 	slli	r3,r3,3
10011b68:	10c5883a 	add	r2,r2,r3
10011b6c:	10800104 	addi	r2,r2,4
10011b70:	e0ffff17 	ldw	r3,-4(fp)
10011b74:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10011b78:	e0bffe17 	ldw	r2,-8(fp)
10011b7c:	10000526 	beq	r2,zero,10011b94 <alt_iic_isr_register+0xb4>
10011b80:	e0bff817 	ldw	r2,-32(fp)
10011b84:	100b883a 	mov	r5,r2
10011b88:	e13ffc17 	ldw	r4,-16(fp)
10011b8c:	00119800 	call	10011980 <alt_ic_irq_enable>
10011b90:	00000406 	br	10011ba4 <alt_iic_isr_register+0xc4>
10011b94:	e0bff817 	ldw	r2,-32(fp)
10011b98:	100b883a 	mov	r5,r2
10011b9c:	e13ffc17 	ldw	r4,-16(fp)
10011ba0:	0011a080 	call	10011a08 <alt_ic_irq_disable>
10011ba4:	e0bff715 	stw	r2,-36(fp)
10011ba8:	e0bffa17 	ldw	r2,-24(fp)
10011bac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011bb0:	e0bff917 	ldw	r2,-28(fp)
10011bb4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10011bb8:	e0bff717 	ldw	r2,-36(fp)
}
10011bbc:	e037883a 	mov	sp,fp
10011bc0:	dfc00117 	ldw	ra,4(sp)
10011bc4:	df000017 	ldw	fp,0(sp)
10011bc8:	dec00204 	addi	sp,sp,8
10011bcc:	f800283a 	ret

10011bd0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011bd0:	defff804 	addi	sp,sp,-32
10011bd4:	dfc00715 	stw	ra,28(sp)
10011bd8:	df000615 	stw	fp,24(sp)
10011bdc:	dc000515 	stw	r16,20(sp)
10011be0:	df000604 	addi	fp,sp,24
10011be4:	e13ffb15 	stw	r4,-20(fp)
10011be8:	e17ffc15 	stw	r5,-16(fp)
10011bec:	e1bffd15 	stw	r6,-12(fp)
10011bf0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10011bf4:	e1bffe17 	ldw	r6,-8(fp)
10011bf8:	e17ffd17 	ldw	r5,-12(fp)
10011bfc:	e13ffc17 	ldw	r4,-16(fp)
10011c00:	0011e580 	call	10011e58 <open>
10011c04:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10011c08:	e0bffa17 	ldw	r2,-24(fp)
10011c0c:	10002216 	blt	r2,zero,10011c98 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011c10:	04040074 	movhi	r16,4097
10011c14:	840eca04 	addi	r16,r16,15144
10011c18:	e0bffa17 	ldw	r2,-24(fp)
10011c1c:	01400304 	movi	r5,12
10011c20:	1009883a 	mov	r4,r2
10011c24:	000d71c0 	call	1000d71c <__mulsi3>
10011c28:	8085883a 	add	r2,r16,r2
10011c2c:	10c00017 	ldw	r3,0(r2)
10011c30:	e0bffb17 	ldw	r2,-20(fp)
10011c34:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011c38:	04040074 	movhi	r16,4097
10011c3c:	840eca04 	addi	r16,r16,15144
10011c40:	e0bffa17 	ldw	r2,-24(fp)
10011c44:	01400304 	movi	r5,12
10011c48:	1009883a 	mov	r4,r2
10011c4c:	000d71c0 	call	1000d71c <__mulsi3>
10011c50:	8085883a 	add	r2,r16,r2
10011c54:	10800104 	addi	r2,r2,4
10011c58:	10c00017 	ldw	r3,0(r2)
10011c5c:	e0bffb17 	ldw	r2,-20(fp)
10011c60:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011c64:	04040074 	movhi	r16,4097
10011c68:	840eca04 	addi	r16,r16,15144
10011c6c:	e0bffa17 	ldw	r2,-24(fp)
10011c70:	01400304 	movi	r5,12
10011c74:	1009883a 	mov	r4,r2
10011c78:	000d71c0 	call	1000d71c <__mulsi3>
10011c7c:	8085883a 	add	r2,r16,r2
10011c80:	10800204 	addi	r2,r2,8
10011c84:	10c00017 	ldw	r3,0(r2)
10011c88:	e0bffb17 	ldw	r2,-20(fp)
10011c8c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011c90:	e13ffa17 	ldw	r4,-24(fp)
10011c94:	001070c0 	call	1001070c <alt_release_fd>
  }
} 
10011c98:	0001883a 	nop
10011c9c:	e6ffff04 	addi	sp,fp,-4
10011ca0:	dfc00217 	ldw	ra,8(sp)
10011ca4:	df000117 	ldw	fp,4(sp)
10011ca8:	dc000017 	ldw	r16,0(sp)
10011cac:	dec00304 	addi	sp,sp,12
10011cb0:	f800283a 	ret

10011cb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10011cb4:	defffb04 	addi	sp,sp,-20
10011cb8:	dfc00415 	stw	ra,16(sp)
10011cbc:	df000315 	stw	fp,12(sp)
10011cc0:	df000304 	addi	fp,sp,12
10011cc4:	e13ffd15 	stw	r4,-12(fp)
10011cc8:	e17ffe15 	stw	r5,-8(fp)
10011ccc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10011cd0:	01c07fc4 	movi	r7,511
10011cd4:	01800044 	movi	r6,1
10011cd8:	e17ffd17 	ldw	r5,-12(fp)
10011cdc:	01040074 	movhi	r4,4097
10011ce0:	210ecd04 	addi	r4,r4,15156
10011ce4:	0011bd00 	call	10011bd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10011ce8:	01c07fc4 	movi	r7,511
10011cec:	000d883a 	mov	r6,zero
10011cf0:	e17ffe17 	ldw	r5,-8(fp)
10011cf4:	01040074 	movhi	r4,4097
10011cf8:	210eca04 	addi	r4,r4,15144
10011cfc:	0011bd00 	call	10011bd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011d00:	01c07fc4 	movi	r7,511
10011d04:	01800044 	movi	r6,1
10011d08:	e17fff17 	ldw	r5,-4(fp)
10011d0c:	01040074 	movhi	r4,4097
10011d10:	210ed004 	addi	r4,r4,15168
10011d14:	0011bd00 	call	10011bd0 <alt_open_fd>
}  
10011d18:	0001883a 	nop
10011d1c:	e037883a 	mov	sp,fp
10011d20:	dfc00117 	ldw	ra,4(sp)
10011d24:	df000017 	ldw	fp,0(sp)
10011d28:	dec00204 	addi	sp,sp,8
10011d2c:	f800283a 	ret

10011d30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011d30:	defffe04 	addi	sp,sp,-8
10011d34:	dfc00115 	stw	ra,4(sp)
10011d38:	df000015 	stw	fp,0(sp)
10011d3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011d40:	d0a01417 	ldw	r2,-32688(gp)
10011d44:	10000326 	beq	r2,zero,10011d54 <alt_get_errno+0x24>
10011d48:	d0a01417 	ldw	r2,-32688(gp)
10011d4c:	103ee83a 	callr	r2
10011d50:	00000106 	br	10011d58 <alt_get_errno+0x28>
10011d54:	d0a6ee04 	addi	r2,gp,-25672
}
10011d58:	e037883a 	mov	sp,fp
10011d5c:	dfc00117 	ldw	ra,4(sp)
10011d60:	df000017 	ldw	fp,0(sp)
10011d64:	dec00204 	addi	sp,sp,8
10011d68:	f800283a 	ret

10011d6c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10011d6c:	defffb04 	addi	sp,sp,-20
10011d70:	dfc00415 	stw	ra,16(sp)
10011d74:	df000315 	stw	fp,12(sp)
10011d78:	dc000215 	stw	r16,8(sp)
10011d7c:	df000304 	addi	fp,sp,12
10011d80:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10011d84:	e0bffe17 	ldw	r2,-8(fp)
10011d88:	10800217 	ldw	r2,8(r2)
10011d8c:	10d00034 	orhi	r3,r2,16384
10011d90:	e0bffe17 	ldw	r2,-8(fp)
10011d94:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011d98:	e03ffd15 	stw	zero,-12(fp)
10011d9c:	00002306 	br	10011e2c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011da0:	04040074 	movhi	r16,4097
10011da4:	840eca04 	addi	r16,r16,15144
10011da8:	e0bffd17 	ldw	r2,-12(fp)
10011dac:	01400304 	movi	r5,12
10011db0:	1009883a 	mov	r4,r2
10011db4:	000d71c0 	call	1000d71c <__mulsi3>
10011db8:	8085883a 	add	r2,r16,r2
10011dbc:	10c00017 	ldw	r3,0(r2)
10011dc0:	e0bffe17 	ldw	r2,-8(fp)
10011dc4:	10800017 	ldw	r2,0(r2)
10011dc8:	1880151e 	bne	r3,r2,10011e20 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011dcc:	04040074 	movhi	r16,4097
10011dd0:	840eca04 	addi	r16,r16,15144
10011dd4:	e0bffd17 	ldw	r2,-12(fp)
10011dd8:	01400304 	movi	r5,12
10011ddc:	1009883a 	mov	r4,r2
10011de0:	000d71c0 	call	1000d71c <__mulsi3>
10011de4:	8085883a 	add	r2,r16,r2
10011de8:	10800204 	addi	r2,r2,8
10011dec:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011df0:	10000b0e 	bge	r2,zero,10011e20 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10011df4:	01400304 	movi	r5,12
10011df8:	e13ffd17 	ldw	r4,-12(fp)
10011dfc:	000d71c0 	call	1000d71c <__mulsi3>
10011e00:	1007883a 	mov	r3,r2
10011e04:	00840074 	movhi	r2,4097
10011e08:	108eca04 	addi	r2,r2,15144
10011e0c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011e10:	e0bffe17 	ldw	r2,-8(fp)
10011e14:	18800226 	beq	r3,r2,10011e20 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10011e18:	00bffcc4 	movi	r2,-13
10011e1c:	00000806 	br	10011e40 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011e20:	e0bffd17 	ldw	r2,-12(fp)
10011e24:	10800044 	addi	r2,r2,1
10011e28:	e0bffd15 	stw	r2,-12(fp)
10011e2c:	d0a01317 	ldw	r2,-32692(gp)
10011e30:	1007883a 	mov	r3,r2
10011e34:	e0bffd17 	ldw	r2,-12(fp)
10011e38:	18bfd92e 	bgeu	r3,r2,10011da0 <__alt_data_end+0xf8011da0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10011e3c:	0005883a 	mov	r2,zero
}
10011e40:	e6ffff04 	addi	sp,fp,-4
10011e44:	dfc00217 	ldw	ra,8(sp)
10011e48:	df000117 	ldw	fp,4(sp)
10011e4c:	dc000017 	ldw	r16,0(sp)
10011e50:	dec00304 	addi	sp,sp,12
10011e54:	f800283a 	ret

10011e58 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10011e58:	defff604 	addi	sp,sp,-40
10011e5c:	dfc00915 	stw	ra,36(sp)
10011e60:	df000815 	stw	fp,32(sp)
10011e64:	df000804 	addi	fp,sp,32
10011e68:	e13ffd15 	stw	r4,-12(fp)
10011e6c:	e17ffe15 	stw	r5,-8(fp)
10011e70:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10011e74:	00bfffc4 	movi	r2,-1
10011e78:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10011e7c:	00bffb44 	movi	r2,-19
10011e80:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10011e84:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10011e88:	d1601104 	addi	r5,gp,-32700
10011e8c:	e13ffd17 	ldw	r4,-12(fp)
10011e90:	001217c0 	call	1001217c <alt_find_dev>
10011e94:	e0bff815 	stw	r2,-32(fp)
10011e98:	e0bff817 	ldw	r2,-32(fp)
10011e9c:	1000051e 	bne	r2,zero,10011eb4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10011ea0:	e13ffd17 	ldw	r4,-12(fp)
10011ea4:	001220c0 	call	1001220c <alt_find_file>
10011ea8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10011eac:	00800044 	movi	r2,1
10011eb0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10011eb4:	e0bff817 	ldw	r2,-32(fp)
10011eb8:	10002b26 	beq	r2,zero,10011f68 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10011ebc:	e13ff817 	ldw	r4,-32(fp)
10011ec0:	00123140 	call	10012314 <alt_get_fd>
10011ec4:	e0bff915 	stw	r2,-28(fp)
10011ec8:	e0bff917 	ldw	r2,-28(fp)
10011ecc:	1000030e 	bge	r2,zero,10011edc <open+0x84>
    {
      status = index;
10011ed0:	e0bff917 	ldw	r2,-28(fp)
10011ed4:	e0bffa15 	stw	r2,-24(fp)
10011ed8:	00002506 	br	10011f70 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10011edc:	01400304 	movi	r5,12
10011ee0:	e13ff917 	ldw	r4,-28(fp)
10011ee4:	000d71c0 	call	1000d71c <__mulsi3>
10011ee8:	1007883a 	mov	r3,r2
10011eec:	00840074 	movhi	r2,4097
10011ef0:	108eca04 	addi	r2,r2,15144
10011ef4:	1885883a 	add	r2,r3,r2
10011ef8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011efc:	e0fffe17 	ldw	r3,-8(fp)
10011f00:	00900034 	movhi	r2,16384
10011f04:	10bfffc4 	addi	r2,r2,-1
10011f08:	1886703a 	and	r3,r3,r2
10011f0c:	e0bffc17 	ldw	r2,-16(fp)
10011f10:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011f14:	e0bffb17 	ldw	r2,-20(fp)
10011f18:	1000051e 	bne	r2,zero,10011f30 <open+0xd8>
10011f1c:	e13ffc17 	ldw	r4,-16(fp)
10011f20:	0011d6c0 	call	10011d6c <alt_file_locked>
10011f24:	e0bffa15 	stw	r2,-24(fp)
10011f28:	e0bffa17 	ldw	r2,-24(fp)
10011f2c:	10001016 	blt	r2,zero,10011f70 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10011f30:	e0bff817 	ldw	r2,-32(fp)
10011f34:	10800317 	ldw	r2,12(r2)
10011f38:	10000826 	beq	r2,zero,10011f5c <open+0x104>
10011f3c:	e0bff817 	ldw	r2,-32(fp)
10011f40:	10800317 	ldw	r2,12(r2)
10011f44:	e1ffff17 	ldw	r7,-4(fp)
10011f48:	e1bffe17 	ldw	r6,-8(fp)
10011f4c:	e17ffd17 	ldw	r5,-12(fp)
10011f50:	e13ffc17 	ldw	r4,-16(fp)
10011f54:	103ee83a 	callr	r2
10011f58:	00000106 	br	10011f60 <open+0x108>
10011f5c:	0005883a 	mov	r2,zero
10011f60:	e0bffa15 	stw	r2,-24(fp)
10011f64:	00000206 	br	10011f70 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011f68:	00bffb44 	movi	r2,-19
10011f6c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10011f70:	e0bffa17 	ldw	r2,-24(fp)
10011f74:	1000090e 	bge	r2,zero,10011f9c <open+0x144>
  {
    alt_release_fd (index);  
10011f78:	e13ff917 	ldw	r4,-28(fp)
10011f7c:	001070c0 	call	1001070c <alt_release_fd>
    ALT_ERRNO = -status;
10011f80:	0011d300 	call	10011d30 <alt_get_errno>
10011f84:	1007883a 	mov	r3,r2
10011f88:	e0bffa17 	ldw	r2,-24(fp)
10011f8c:	0085c83a 	sub	r2,zero,r2
10011f90:	18800015 	stw	r2,0(r3)
    return -1;
10011f94:	00bfffc4 	movi	r2,-1
10011f98:	00000106 	br	10011fa0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10011f9c:	e0bff917 	ldw	r2,-28(fp)
}
10011fa0:	e037883a 	mov	sp,fp
10011fa4:	dfc00117 	ldw	ra,4(sp)
10011fa8:	df000017 	ldw	fp,0(sp)
10011fac:	dec00204 	addi	sp,sp,8
10011fb0:	f800283a 	ret

10011fb4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10011fb4:	defffa04 	addi	sp,sp,-24
10011fb8:	df000515 	stw	fp,20(sp)
10011fbc:	df000504 	addi	fp,sp,20
10011fc0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011fc4:	0005303a 	rdctl	r2,status
10011fc8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011fcc:	e0fffc17 	ldw	r3,-16(fp)
10011fd0:	00bfff84 	movi	r2,-2
10011fd4:	1884703a 	and	r2,r3,r2
10011fd8:	1001703a 	wrctl	status,r2
  
  return context;
10011fdc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10011fe0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10011fe4:	e0bfff17 	ldw	r2,-4(fp)
10011fe8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10011fec:	e0bffd17 	ldw	r2,-12(fp)
10011ff0:	10800017 	ldw	r2,0(r2)
10011ff4:	e0fffd17 	ldw	r3,-12(fp)
10011ff8:	18c00117 	ldw	r3,4(r3)
10011ffc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10012000:	e0bffd17 	ldw	r2,-12(fp)
10012004:	10800117 	ldw	r2,4(r2)
10012008:	e0fffd17 	ldw	r3,-12(fp)
1001200c:	18c00017 	ldw	r3,0(r3)
10012010:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10012014:	e0bffd17 	ldw	r2,-12(fp)
10012018:	e0fffd17 	ldw	r3,-12(fp)
1001201c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10012020:	e0bffd17 	ldw	r2,-12(fp)
10012024:	e0fffd17 	ldw	r3,-12(fp)
10012028:	10c00015 	stw	r3,0(r2)
1001202c:	e0bffb17 	ldw	r2,-20(fp)
10012030:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012034:	e0bffe17 	ldw	r2,-8(fp)
10012038:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1001203c:	0001883a 	nop
10012040:	e037883a 	mov	sp,fp
10012044:	df000017 	ldw	fp,0(sp)
10012048:	dec00104 	addi	sp,sp,4
1001204c:	f800283a 	ret

10012050 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10012050:	defffb04 	addi	sp,sp,-20
10012054:	dfc00415 	stw	ra,16(sp)
10012058:	df000315 	stw	fp,12(sp)
1001205c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10012060:	d0a01717 	ldw	r2,-32676(gp)
10012064:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10012068:	d0a6f417 	ldw	r2,-25648(gp)
1001206c:	10800044 	addi	r2,r2,1
10012070:	d0a6f415 	stw	r2,-25648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10012074:	00002e06 	br	10012130 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10012078:	e0bffd17 	ldw	r2,-12(fp)
1001207c:	10800017 	ldw	r2,0(r2)
10012080:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10012084:	e0bffd17 	ldw	r2,-12(fp)
10012088:	10800403 	ldbu	r2,16(r2)
1001208c:	10803fcc 	andi	r2,r2,255
10012090:	10000426 	beq	r2,zero,100120a4 <alt_tick+0x54>
10012094:	d0a6f417 	ldw	r2,-25648(gp)
10012098:	1000021e 	bne	r2,zero,100120a4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1001209c:	e0bffd17 	ldw	r2,-12(fp)
100120a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100120a4:	e0bffd17 	ldw	r2,-12(fp)
100120a8:	10800217 	ldw	r2,8(r2)
100120ac:	d0e6f417 	ldw	r3,-25648(gp)
100120b0:	18801d36 	bltu	r3,r2,10012128 <alt_tick+0xd8>
100120b4:	e0bffd17 	ldw	r2,-12(fp)
100120b8:	10800403 	ldbu	r2,16(r2)
100120bc:	10803fcc 	andi	r2,r2,255
100120c0:	1000191e 	bne	r2,zero,10012128 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100120c4:	e0bffd17 	ldw	r2,-12(fp)
100120c8:	10800317 	ldw	r2,12(r2)
100120cc:	e0fffd17 	ldw	r3,-12(fp)
100120d0:	18c00517 	ldw	r3,20(r3)
100120d4:	1809883a 	mov	r4,r3
100120d8:	103ee83a 	callr	r2
100120dc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100120e0:	e0bfff17 	ldw	r2,-4(fp)
100120e4:	1000031e 	bne	r2,zero,100120f4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100120e8:	e13ffd17 	ldw	r4,-12(fp)
100120ec:	0011fb40 	call	10011fb4 <alt_alarm_stop>
100120f0:	00000d06 	br	10012128 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100120f4:	e0bffd17 	ldw	r2,-12(fp)
100120f8:	10c00217 	ldw	r3,8(r2)
100120fc:	e0bfff17 	ldw	r2,-4(fp)
10012100:	1887883a 	add	r3,r3,r2
10012104:	e0bffd17 	ldw	r2,-12(fp)
10012108:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1001210c:	e0bffd17 	ldw	r2,-12(fp)
10012110:	10c00217 	ldw	r3,8(r2)
10012114:	d0a6f417 	ldw	r2,-25648(gp)
10012118:	1880032e 	bgeu	r3,r2,10012128 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1001211c:	e0bffd17 	ldw	r2,-12(fp)
10012120:	00c00044 	movi	r3,1
10012124:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10012128:	e0bffe17 	ldw	r2,-8(fp)
1001212c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10012130:	e0fffd17 	ldw	r3,-12(fp)
10012134:	d0a01704 	addi	r2,gp,-32676
10012138:	18bfcf1e 	bne	r3,r2,10012078 <__alt_data_end+0xf8012078>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1001213c:	0001883a 	nop
}
10012140:	0001883a 	nop
10012144:	e037883a 	mov	sp,fp
10012148:	dfc00117 	ldw	ra,4(sp)
1001214c:	df000017 	ldw	fp,0(sp)
10012150:	dec00204 	addi	sp,sp,8
10012154:	f800283a 	ret

10012158 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10012158:	deffff04 	addi	sp,sp,-4
1001215c:	df000015 	stw	fp,0(sp)
10012160:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10012164:	000170fa 	wrctl	ienable,zero
}
10012168:	0001883a 	nop
1001216c:	e037883a 	mov	sp,fp
10012170:	df000017 	ldw	fp,0(sp)
10012174:	dec00104 	addi	sp,sp,4
10012178:	f800283a 	ret

1001217c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1001217c:	defffa04 	addi	sp,sp,-24
10012180:	dfc00515 	stw	ra,20(sp)
10012184:	df000415 	stw	fp,16(sp)
10012188:	df000404 	addi	fp,sp,16
1001218c:	e13ffe15 	stw	r4,-8(fp)
10012190:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10012194:	e0bfff17 	ldw	r2,-4(fp)
10012198:	10800017 	ldw	r2,0(r2)
1001219c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100121a0:	e13ffe17 	ldw	r4,-8(fp)
100121a4:	000339c0 	call	1000339c <strlen>
100121a8:	10800044 	addi	r2,r2,1
100121ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100121b0:	00000d06 	br	100121e8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100121b4:	e0bffc17 	ldw	r2,-16(fp)
100121b8:	10800217 	ldw	r2,8(r2)
100121bc:	e0fffd17 	ldw	r3,-12(fp)
100121c0:	180d883a 	mov	r6,r3
100121c4:	e17ffe17 	ldw	r5,-8(fp)
100121c8:	1009883a 	mov	r4,r2
100121cc:	00124c00 	call	100124c0 <memcmp>
100121d0:	1000021e 	bne	r2,zero,100121dc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100121d4:	e0bffc17 	ldw	r2,-16(fp)
100121d8:	00000706 	br	100121f8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100121dc:	e0bffc17 	ldw	r2,-16(fp)
100121e0:	10800017 	ldw	r2,0(r2)
100121e4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100121e8:	e0fffc17 	ldw	r3,-16(fp)
100121ec:	e0bfff17 	ldw	r2,-4(fp)
100121f0:	18bff01e 	bne	r3,r2,100121b4 <__alt_data_end+0xf80121b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100121f4:	0005883a 	mov	r2,zero
}
100121f8:	e037883a 	mov	sp,fp
100121fc:	dfc00117 	ldw	ra,4(sp)
10012200:	df000017 	ldw	fp,0(sp)
10012204:	dec00204 	addi	sp,sp,8
10012208:	f800283a 	ret

1001220c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1001220c:	defffb04 	addi	sp,sp,-20
10012210:	dfc00415 	stw	ra,16(sp)
10012214:	df000315 	stw	fp,12(sp)
10012218:	df000304 	addi	fp,sp,12
1001221c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10012220:	d0a00f17 	ldw	r2,-32708(gp)
10012224:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10012228:	00003106 	br	100122f0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1001222c:	e0bffd17 	ldw	r2,-12(fp)
10012230:	10800217 	ldw	r2,8(r2)
10012234:	1009883a 	mov	r4,r2
10012238:	000339c0 	call	1000339c <strlen>
1001223c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10012240:	e0bffd17 	ldw	r2,-12(fp)
10012244:	10c00217 	ldw	r3,8(r2)
10012248:	e0bffe17 	ldw	r2,-8(fp)
1001224c:	10bfffc4 	addi	r2,r2,-1
10012250:	1885883a 	add	r2,r3,r2
10012254:	10800003 	ldbu	r2,0(r2)
10012258:	10803fcc 	andi	r2,r2,255
1001225c:	1080201c 	xori	r2,r2,128
10012260:	10bfe004 	addi	r2,r2,-128
10012264:	10800bd8 	cmpnei	r2,r2,47
10012268:	1000031e 	bne	r2,zero,10012278 <alt_find_file+0x6c>
    {
      len -= 1;
1001226c:	e0bffe17 	ldw	r2,-8(fp)
10012270:	10bfffc4 	addi	r2,r2,-1
10012274:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10012278:	e0bffe17 	ldw	r2,-8(fp)
1001227c:	e0ffff17 	ldw	r3,-4(fp)
10012280:	1885883a 	add	r2,r3,r2
10012284:	10800003 	ldbu	r2,0(r2)
10012288:	10803fcc 	andi	r2,r2,255
1001228c:	1080201c 	xori	r2,r2,128
10012290:	10bfe004 	addi	r2,r2,-128
10012294:	10800be0 	cmpeqi	r2,r2,47
10012298:	1000081e 	bne	r2,zero,100122bc <alt_find_file+0xb0>
1001229c:	e0bffe17 	ldw	r2,-8(fp)
100122a0:	e0ffff17 	ldw	r3,-4(fp)
100122a4:	1885883a 	add	r2,r3,r2
100122a8:	10800003 	ldbu	r2,0(r2)
100122ac:	10803fcc 	andi	r2,r2,255
100122b0:	1080201c 	xori	r2,r2,128
100122b4:	10bfe004 	addi	r2,r2,-128
100122b8:	10000a1e 	bne	r2,zero,100122e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
100122bc:	e0bffd17 	ldw	r2,-12(fp)
100122c0:	10800217 	ldw	r2,8(r2)
100122c4:	e0fffe17 	ldw	r3,-8(fp)
100122c8:	180d883a 	mov	r6,r3
100122cc:	e17fff17 	ldw	r5,-4(fp)
100122d0:	1009883a 	mov	r4,r2
100122d4:	00124c00 	call	100124c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100122d8:	1000021e 	bne	r2,zero,100122e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100122dc:	e0bffd17 	ldw	r2,-12(fp)
100122e0:	00000706 	br	10012300 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
100122e4:	e0bffd17 	ldw	r2,-12(fp)
100122e8:	10800017 	ldw	r2,0(r2)
100122ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100122f0:	e0fffd17 	ldw	r3,-12(fp)
100122f4:	d0a00f04 	addi	r2,gp,-32708
100122f8:	18bfcc1e 	bne	r3,r2,1001222c <__alt_data_end+0xf801222c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100122fc:	0005883a 	mov	r2,zero
}
10012300:	e037883a 	mov	sp,fp
10012304:	dfc00117 	ldw	ra,4(sp)
10012308:	df000017 	ldw	fp,0(sp)
1001230c:	dec00204 	addi	sp,sp,8
10012310:	f800283a 	ret

10012314 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10012314:	defffa04 	addi	sp,sp,-24
10012318:	dfc00515 	stw	ra,20(sp)
1001231c:	df000415 	stw	fp,16(sp)
10012320:	dc000315 	stw	r16,12(sp)
10012324:	df000404 	addi	fp,sp,16
10012328:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1001232c:	00bffa04 	movi	r2,-24
10012330:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10012334:	e03ffc15 	stw	zero,-16(fp)
10012338:	00001d06 	br	100123b0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
1001233c:	04040074 	movhi	r16,4097
10012340:	840eca04 	addi	r16,r16,15144
10012344:	e0bffc17 	ldw	r2,-16(fp)
10012348:	01400304 	movi	r5,12
1001234c:	1009883a 	mov	r4,r2
10012350:	000d71c0 	call	1000d71c <__mulsi3>
10012354:	8085883a 	add	r2,r16,r2
10012358:	10800017 	ldw	r2,0(r2)
1001235c:	1000111e 	bne	r2,zero,100123a4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10012360:	04040074 	movhi	r16,4097
10012364:	840eca04 	addi	r16,r16,15144
10012368:	e0bffc17 	ldw	r2,-16(fp)
1001236c:	01400304 	movi	r5,12
10012370:	1009883a 	mov	r4,r2
10012374:	000d71c0 	call	1000d71c <__mulsi3>
10012378:	8085883a 	add	r2,r16,r2
1001237c:	e0fffe17 	ldw	r3,-8(fp)
10012380:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10012384:	d0e01317 	ldw	r3,-32692(gp)
10012388:	e0bffc17 	ldw	r2,-16(fp)
1001238c:	1880020e 	bge	r3,r2,10012398 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10012390:	e0bffc17 	ldw	r2,-16(fp)
10012394:	d0a01315 	stw	r2,-32692(gp)
      }
      rc = i;
10012398:	e0bffc17 	ldw	r2,-16(fp)
1001239c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100123a0:	00000606 	br	100123bc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100123a4:	e0bffc17 	ldw	r2,-16(fp)
100123a8:	10800044 	addi	r2,r2,1
100123ac:	e0bffc15 	stw	r2,-16(fp)
100123b0:	e0bffc17 	ldw	r2,-16(fp)
100123b4:	10800810 	cmplti	r2,r2,32
100123b8:	103fe01e 	bne	r2,zero,1001233c <__alt_data_end+0xf801233c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100123bc:	e0bffd17 	ldw	r2,-12(fp)
}
100123c0:	e6ffff04 	addi	sp,fp,-4
100123c4:	dfc00217 	ldw	ra,8(sp)
100123c8:	df000117 	ldw	fp,4(sp)
100123cc:	dc000017 	ldw	r16,0(sp)
100123d0:	dec00304 	addi	sp,sp,12
100123d4:	f800283a 	ret

100123d8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100123d8:	defffe04 	addi	sp,sp,-8
100123dc:	df000115 	stw	fp,4(sp)
100123e0:	df000104 	addi	fp,sp,4
100123e4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100123e8:	e0bfff17 	ldw	r2,-4(fp)
100123ec:	10bffe84 	addi	r2,r2,-6
100123f0:	10c00428 	cmpgeui	r3,r2,16
100123f4:	18001a1e 	bne	r3,zero,10012460 <alt_exception_cause_generated_bad_addr+0x88>
100123f8:	100690ba 	slli	r3,r2,2
100123fc:	00840074 	movhi	r2,4097
10012400:	10890404 	addi	r2,r2,9232
10012404:	1885883a 	add	r2,r3,r2
10012408:	10800017 	ldw	r2,0(r2)
1001240c:	1000683a 	jmp	r2
10012410:	10012450 	cmplti	zero,r2,1169
10012414:	10012450 	cmplti	zero,r2,1169
10012418:	10012460 	cmpeqi	zero,r2,1169
1001241c:	10012460 	cmpeqi	zero,r2,1169
10012420:	10012460 	cmpeqi	zero,r2,1169
10012424:	10012450 	cmplti	zero,r2,1169
10012428:	10012458 	cmpnei	zero,r2,1169
1001242c:	10012460 	cmpeqi	zero,r2,1169
10012430:	10012450 	cmplti	zero,r2,1169
10012434:	10012450 	cmplti	zero,r2,1169
10012438:	10012460 	cmpeqi	zero,r2,1169
1001243c:	10012450 	cmplti	zero,r2,1169
10012440:	10012458 	cmpnei	zero,r2,1169
10012444:	10012460 	cmpeqi	zero,r2,1169
10012448:	10012460 	cmpeqi	zero,r2,1169
1001244c:	10012450 	cmplti	zero,r2,1169
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10012450:	00800044 	movi	r2,1
10012454:	00000306 	br	10012464 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10012458:	0005883a 	mov	r2,zero
1001245c:	00000106 	br	10012464 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10012460:	0005883a 	mov	r2,zero
  }
}
10012464:	e037883a 	mov	sp,fp
10012468:	df000017 	ldw	fp,0(sp)
1001246c:	dec00104 	addi	sp,sp,4
10012470:	f800283a 	ret

10012474 <atexit>:
10012474:	200b883a 	mov	r5,r4
10012478:	000f883a 	mov	r7,zero
1001247c:	000d883a 	mov	r6,zero
10012480:	0009883a 	mov	r4,zero
10012484:	001253c1 	jmpi	1001253c <__register_exitproc>

10012488 <exit>:
10012488:	defffe04 	addi	sp,sp,-8
1001248c:	000b883a 	mov	r5,zero
10012490:	dc000015 	stw	r16,0(sp)
10012494:	dfc00115 	stw	ra,4(sp)
10012498:	2021883a 	mov	r16,r4
1001249c:	00126540 	call	10012654 <__call_exitprocs>
100124a0:	00840074 	movhi	r2,4097
100124a4:	10934b04 	addi	r2,r2,19756
100124a8:	11000017 	ldw	r4,0(r2)
100124ac:	20800f17 	ldw	r2,60(r4)
100124b0:	10000126 	beq	r2,zero,100124b8 <exit+0x30>
100124b4:	103ee83a 	callr	r2
100124b8:	8009883a 	mov	r4,r16
100124bc:	00127d40 	call	100127d4 <_exit>

100124c0 <memcmp>:
100124c0:	01c000c4 	movi	r7,3
100124c4:	3980192e 	bgeu	r7,r6,1001252c <memcmp+0x6c>
100124c8:	2144b03a 	or	r2,r4,r5
100124cc:	11c4703a 	and	r2,r2,r7
100124d0:	10000f26 	beq	r2,zero,10012510 <memcmp+0x50>
100124d4:	20800003 	ldbu	r2,0(r4)
100124d8:	28c00003 	ldbu	r3,0(r5)
100124dc:	10c0151e 	bne	r2,r3,10012534 <memcmp+0x74>
100124e0:	31bfff84 	addi	r6,r6,-2
100124e4:	01ffffc4 	movi	r7,-1
100124e8:	00000406 	br	100124fc <memcmp+0x3c>
100124ec:	20800003 	ldbu	r2,0(r4)
100124f0:	28c00003 	ldbu	r3,0(r5)
100124f4:	31bfffc4 	addi	r6,r6,-1
100124f8:	10c00e1e 	bne	r2,r3,10012534 <memcmp+0x74>
100124fc:	21000044 	addi	r4,r4,1
10012500:	29400044 	addi	r5,r5,1
10012504:	31fff91e 	bne	r6,r7,100124ec <__alt_data_end+0xf80124ec>
10012508:	0005883a 	mov	r2,zero
1001250c:	f800283a 	ret
10012510:	20c00017 	ldw	r3,0(r4)
10012514:	28800017 	ldw	r2,0(r5)
10012518:	18bfee1e 	bne	r3,r2,100124d4 <__alt_data_end+0xf80124d4>
1001251c:	31bfff04 	addi	r6,r6,-4
10012520:	21000104 	addi	r4,r4,4
10012524:	29400104 	addi	r5,r5,4
10012528:	39bff936 	bltu	r7,r6,10012510 <__alt_data_end+0xf8012510>
1001252c:	303fe91e 	bne	r6,zero,100124d4 <__alt_data_end+0xf80124d4>
10012530:	003ff506 	br	10012508 <__alt_data_end+0xf8012508>
10012534:	10c5c83a 	sub	r2,r2,r3
10012538:	f800283a 	ret

1001253c <__register_exitproc>:
1001253c:	defffa04 	addi	sp,sp,-24
10012540:	dc000315 	stw	r16,12(sp)
10012544:	04040074 	movhi	r16,4097
10012548:	84134b04 	addi	r16,r16,19756
1001254c:	80c00017 	ldw	r3,0(r16)
10012550:	dc400415 	stw	r17,16(sp)
10012554:	dfc00515 	stw	ra,20(sp)
10012558:	18805217 	ldw	r2,328(r3)
1001255c:	2023883a 	mov	r17,r4
10012560:	10003726 	beq	r2,zero,10012640 <__register_exitproc+0x104>
10012564:	10c00117 	ldw	r3,4(r2)
10012568:	010007c4 	movi	r4,31
1001256c:	20c00e16 	blt	r4,r3,100125a8 <__register_exitproc+0x6c>
10012570:	1a000044 	addi	r8,r3,1
10012574:	8800221e 	bne	r17,zero,10012600 <__register_exitproc+0xc4>
10012578:	18c00084 	addi	r3,r3,2
1001257c:	18c7883a 	add	r3,r3,r3
10012580:	18c7883a 	add	r3,r3,r3
10012584:	12000115 	stw	r8,4(r2)
10012588:	10c7883a 	add	r3,r2,r3
1001258c:	19400015 	stw	r5,0(r3)
10012590:	0005883a 	mov	r2,zero
10012594:	dfc00517 	ldw	ra,20(sp)
10012598:	dc400417 	ldw	r17,16(sp)
1001259c:	dc000317 	ldw	r16,12(sp)
100125a0:	dec00604 	addi	sp,sp,24
100125a4:	f800283a 	ret
100125a8:	00800034 	movhi	r2,0
100125ac:	10800004 	addi	r2,r2,0
100125b0:	10002626 	beq	r2,zero,1001264c <__register_exitproc+0x110>
100125b4:	01006404 	movi	r4,400
100125b8:	d9400015 	stw	r5,0(sp)
100125bc:	d9800115 	stw	r6,4(sp)
100125c0:	d9c00215 	stw	r7,8(sp)
100125c4:	00000000 	call	10000000 <__alt_mem_sdram>
100125c8:	d9400017 	ldw	r5,0(sp)
100125cc:	d9800117 	ldw	r6,4(sp)
100125d0:	d9c00217 	ldw	r7,8(sp)
100125d4:	10001d26 	beq	r2,zero,1001264c <__register_exitproc+0x110>
100125d8:	81000017 	ldw	r4,0(r16)
100125dc:	10000115 	stw	zero,4(r2)
100125e0:	02000044 	movi	r8,1
100125e4:	22405217 	ldw	r9,328(r4)
100125e8:	0007883a 	mov	r3,zero
100125ec:	12400015 	stw	r9,0(r2)
100125f0:	20805215 	stw	r2,328(r4)
100125f4:	10006215 	stw	zero,392(r2)
100125f8:	10006315 	stw	zero,396(r2)
100125fc:	883fde26 	beq	r17,zero,10012578 <__alt_data_end+0xf8012578>
10012600:	18c9883a 	add	r4,r3,r3
10012604:	2109883a 	add	r4,r4,r4
10012608:	1109883a 	add	r4,r2,r4
1001260c:	21802215 	stw	r6,136(r4)
10012610:	01800044 	movi	r6,1
10012614:	12406217 	ldw	r9,392(r2)
10012618:	30cc983a 	sll	r6,r6,r3
1001261c:	4992b03a 	or	r9,r9,r6
10012620:	12406215 	stw	r9,392(r2)
10012624:	21c04215 	stw	r7,264(r4)
10012628:	01000084 	movi	r4,2
1001262c:	893fd21e 	bne	r17,r4,10012578 <__alt_data_end+0xf8012578>
10012630:	11006317 	ldw	r4,396(r2)
10012634:	218cb03a 	or	r6,r4,r6
10012638:	11806315 	stw	r6,396(r2)
1001263c:	003fce06 	br	10012578 <__alt_data_end+0xf8012578>
10012640:	18805304 	addi	r2,r3,332
10012644:	18805215 	stw	r2,328(r3)
10012648:	003fc606 	br	10012564 <__alt_data_end+0xf8012564>
1001264c:	00bfffc4 	movi	r2,-1
10012650:	003fd006 	br	10012594 <__alt_data_end+0xf8012594>

10012654 <__call_exitprocs>:
10012654:	defff504 	addi	sp,sp,-44
10012658:	df000915 	stw	fp,36(sp)
1001265c:	dd400615 	stw	r21,24(sp)
10012660:	dc800315 	stw	r18,12(sp)
10012664:	dfc00a15 	stw	ra,40(sp)
10012668:	ddc00815 	stw	r23,32(sp)
1001266c:	dd800715 	stw	r22,28(sp)
10012670:	dd000515 	stw	r20,20(sp)
10012674:	dcc00415 	stw	r19,16(sp)
10012678:	dc400215 	stw	r17,8(sp)
1001267c:	dc000115 	stw	r16,4(sp)
10012680:	d9000015 	stw	r4,0(sp)
10012684:	2839883a 	mov	fp,r5
10012688:	04800044 	movi	r18,1
1001268c:	057fffc4 	movi	r21,-1
10012690:	00840074 	movhi	r2,4097
10012694:	10934b04 	addi	r2,r2,19756
10012698:	12000017 	ldw	r8,0(r2)
1001269c:	45005217 	ldw	r20,328(r8)
100126a0:	44c05204 	addi	r19,r8,328
100126a4:	a0001c26 	beq	r20,zero,10012718 <__call_exitprocs+0xc4>
100126a8:	a0800117 	ldw	r2,4(r20)
100126ac:	15ffffc4 	addi	r23,r2,-1
100126b0:	b8000d16 	blt	r23,zero,100126e8 <__call_exitprocs+0x94>
100126b4:	14000044 	addi	r16,r2,1
100126b8:	8421883a 	add	r16,r16,r16
100126bc:	8421883a 	add	r16,r16,r16
100126c0:	84402004 	addi	r17,r16,128
100126c4:	a463883a 	add	r17,r20,r17
100126c8:	a421883a 	add	r16,r20,r16
100126cc:	e0001e26 	beq	fp,zero,10012748 <__call_exitprocs+0xf4>
100126d0:	80804017 	ldw	r2,256(r16)
100126d4:	e0801c26 	beq	fp,r2,10012748 <__call_exitprocs+0xf4>
100126d8:	bdffffc4 	addi	r23,r23,-1
100126dc:	843fff04 	addi	r16,r16,-4
100126e0:	8c7fff04 	addi	r17,r17,-4
100126e4:	bd7ff91e 	bne	r23,r21,100126cc <__alt_data_end+0xf80126cc>
100126e8:	00800034 	movhi	r2,0
100126ec:	10800004 	addi	r2,r2,0
100126f0:	10000926 	beq	r2,zero,10012718 <__call_exitprocs+0xc4>
100126f4:	a0800117 	ldw	r2,4(r20)
100126f8:	1000301e 	bne	r2,zero,100127bc <__call_exitprocs+0x168>
100126fc:	a0800017 	ldw	r2,0(r20)
10012700:	10003226 	beq	r2,zero,100127cc <__call_exitprocs+0x178>
10012704:	a009883a 	mov	r4,r20
10012708:	98800015 	stw	r2,0(r19)
1001270c:	00000000 	call	10000000 <__alt_mem_sdram>
10012710:	9d000017 	ldw	r20,0(r19)
10012714:	a03fe41e 	bne	r20,zero,100126a8 <__alt_data_end+0xf80126a8>
10012718:	dfc00a17 	ldw	ra,40(sp)
1001271c:	df000917 	ldw	fp,36(sp)
10012720:	ddc00817 	ldw	r23,32(sp)
10012724:	dd800717 	ldw	r22,28(sp)
10012728:	dd400617 	ldw	r21,24(sp)
1001272c:	dd000517 	ldw	r20,20(sp)
10012730:	dcc00417 	ldw	r19,16(sp)
10012734:	dc800317 	ldw	r18,12(sp)
10012738:	dc400217 	ldw	r17,8(sp)
1001273c:	dc000117 	ldw	r16,4(sp)
10012740:	dec00b04 	addi	sp,sp,44
10012744:	f800283a 	ret
10012748:	a0800117 	ldw	r2,4(r20)
1001274c:	80c00017 	ldw	r3,0(r16)
10012750:	10bfffc4 	addi	r2,r2,-1
10012754:	15c01426 	beq	r2,r23,100127a8 <__call_exitprocs+0x154>
10012758:	80000015 	stw	zero,0(r16)
1001275c:	183fde26 	beq	r3,zero,100126d8 <__alt_data_end+0xf80126d8>
10012760:	95c8983a 	sll	r4,r18,r23
10012764:	a0806217 	ldw	r2,392(r20)
10012768:	a5800117 	ldw	r22,4(r20)
1001276c:	2084703a 	and	r2,r4,r2
10012770:	10000b26 	beq	r2,zero,100127a0 <__call_exitprocs+0x14c>
10012774:	a0806317 	ldw	r2,396(r20)
10012778:	2088703a 	and	r4,r4,r2
1001277c:	20000c1e 	bne	r4,zero,100127b0 <__call_exitprocs+0x15c>
10012780:	89400017 	ldw	r5,0(r17)
10012784:	d9000017 	ldw	r4,0(sp)
10012788:	183ee83a 	callr	r3
1001278c:	a0800117 	ldw	r2,4(r20)
10012790:	15bfbf1e 	bne	r2,r22,10012690 <__alt_data_end+0xf8012690>
10012794:	98800017 	ldw	r2,0(r19)
10012798:	153fcf26 	beq	r2,r20,100126d8 <__alt_data_end+0xf80126d8>
1001279c:	003fbc06 	br	10012690 <__alt_data_end+0xf8012690>
100127a0:	183ee83a 	callr	r3
100127a4:	003ff906 	br	1001278c <__alt_data_end+0xf801278c>
100127a8:	a5c00115 	stw	r23,4(r20)
100127ac:	003feb06 	br	1001275c <__alt_data_end+0xf801275c>
100127b0:	89000017 	ldw	r4,0(r17)
100127b4:	183ee83a 	callr	r3
100127b8:	003ff406 	br	1001278c <__alt_data_end+0xf801278c>
100127bc:	a0800017 	ldw	r2,0(r20)
100127c0:	a027883a 	mov	r19,r20
100127c4:	1029883a 	mov	r20,r2
100127c8:	003fb606 	br	100126a4 <__alt_data_end+0xf80126a4>
100127cc:	0005883a 	mov	r2,zero
100127d0:	003ffb06 	br	100127c0 <__alt_data_end+0xf80127c0>

100127d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100127d4:	defffd04 	addi	sp,sp,-12
100127d8:	df000215 	stw	fp,8(sp)
100127dc:	df000204 	addi	fp,sp,8
100127e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100127e4:	0001883a 	nop
100127e8:	e0bfff17 	ldw	r2,-4(fp)
100127ec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100127f0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100127f4:	10000226 	beq	r2,zero,10012800 <_exit+0x2c>
    ALT_SIM_FAIL();
100127f8:	002af070 	cmpltui	zero,zero,43969
100127fc:	00000106 	br	10012804 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10012800:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10012804:	003fff06 	br	10012804 <__alt_data_end+0xf8012804>
